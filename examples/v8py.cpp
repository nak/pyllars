
#include <functional>
#include <Python.h>
#include <structmember.h>

#include </usr/include/stdint.h>

#include </usr/include/bits/types.h>

#include </usr/include/libio.h>

#include </usr/include/stdio.h>

#include </usr/include/wchar.h>

#include </usr/include/_G_config.h>

#include </usr/include/bits/sys_errlist.h>

#include <v8.h>


#define PyFloatObject PyObject

static bool
checkType( PyTypeObject* const  type, PyObject * const obj){
    return PyObject_IsInstance( obj, (PyObject*)type );
}
    





class v8___AccessorGetterCallback_CL{
public:

    v8___AccessorGetterCallback_CL( PyObject* pycb);
    
    v8::AccessorGetterCallback get_C_callback();
    
private:
    void callback();

    std::function<void(v8::Local<v8::String>, v8::PropertyCallbackInfo<v8::Value> const&)> _C_callback;
    PyObject* _pycb;
};

class v8___AccessorNameGetterCallback_CL{
public:

    v8___AccessorNameGetterCallback_CL( PyObject* pycb);
    
    v8::AccessorNameGetterCallback get_C_callback();
    
private:
    void callback();

    std::function<void(v8::Local<v8::Name>, v8::PropertyCallbackInfo<v8::Value> const&)> _C_callback;
    PyObject* _pycb;
};

class v8___AccessorSetterCallback_CL{
public:

    v8___AccessorSetterCallback_CL( PyObject* pycb);
    
    v8::AccessorSetterCallback get_C_callback();
    
private:
    void callback();

    std::function<void(v8::Local<v8::String>, v8::Local<v8::Value>, v8::PropertyCallbackInfo<void> const&)> _C_callback;
    PyObject* _pycb;
};

class v8___AccessorNameSetterCallback_CL{
public:

    v8___AccessorNameSetterCallback_CL( PyObject* pycb);
    
    v8::AccessorNameSetterCallback get_C_callback();
    
private:
    void callback();

    std::function<void(v8::Local<v8::Name>, v8::Local<v8::Value>, v8::PropertyCallbackInfo<void> const&)> _C_callback;
    PyObject* _pycb;
};

class v8___FunctionCallback_CL{
public:

    v8___FunctionCallback_CL( PyObject* pycb);
    
    v8::FunctionCallback get_C_callback();
    
private:
    void callback();

    std::function<void(v8::FunctionCallbackInfo<v8::Value> const&)> _C_callback;
    PyObject* _pycb;
};

class v8___NamedPropertyGetterCallback_CL{
public:

    v8___NamedPropertyGetterCallback_CL( PyObject* pycb);
    
    v8::NamedPropertyGetterCallback get_C_callback();
    
private:
    void callback();

    std::function<void(v8::Local<v8::String>, v8::PropertyCallbackInfo<v8::Value> const&)> _C_callback;
    PyObject* _pycb;
};

class v8___NamedPropertySetterCallback_CL{
public:

    v8___NamedPropertySetterCallback_CL( PyObject* pycb);
    
    v8::NamedPropertySetterCallback get_C_callback();
    
private:
    void callback();

    std::function<void(v8::Local<v8::String>, v8::Local<v8::Value>, v8::PropertyCallbackInfo<v8::Value> const&)> _C_callback;
    PyObject* _pycb;
};

class v8___NamedPropertyQueryCallback_CL{
public:

    v8___NamedPropertyQueryCallback_CL( PyObject* pycb);
    
    v8::NamedPropertyQueryCallback get_C_callback();
    
private:
    void callback();

    std::function<void(v8::Local<v8::String>, v8::PropertyCallbackInfo<v8::Integer> const&)> _C_callback;
    PyObject* _pycb;
};

class v8___NamedPropertyDeleterCallback_CL{
public:

    v8___NamedPropertyDeleterCallback_CL( PyObject* pycb);
    
    v8::NamedPropertyDeleterCallback get_C_callback();
    
private:
    void callback();

    std::function<void(v8::Local<v8::String>, v8::PropertyCallbackInfo<v8::Boolean> const&)> _C_callback;
    PyObject* _pycb;
};

class v8___NamedPropertyEnumeratorCallback_CL{
public:

    v8___NamedPropertyEnumeratorCallback_CL( PyObject* pycb);
    
    v8::NamedPropertyEnumeratorCallback get_C_callback();
    
private:
    void callback();

    std::function<void(v8::PropertyCallbackInfo<v8::Array> const&)> _C_callback;
    PyObject* _pycb;
};

class v8___GenericNamedPropertyGetterCallback_CL{
public:

    v8___GenericNamedPropertyGetterCallback_CL( PyObject* pycb);
    
    v8::GenericNamedPropertyGetterCallback get_C_callback();
    
private:
    void callback();

    std::function<void(v8::Local<v8::Name>, v8::PropertyCallbackInfo<v8::Value> const&)> _C_callback;
    PyObject* _pycb;
};

class v8___GenericNamedPropertySetterCallback_CL{
public:

    v8___GenericNamedPropertySetterCallback_CL( PyObject* pycb);
    
    v8::GenericNamedPropertySetterCallback get_C_callback();
    
private:
    void callback();

    std::function<void(v8::Local<v8::Name>, v8::Local<v8::Value>, v8::PropertyCallbackInfo<v8::Value> const&)> _C_callback;
    PyObject* _pycb;
};

class v8___GenericNamedPropertyQueryCallback_CL{
public:

    v8___GenericNamedPropertyQueryCallback_CL( PyObject* pycb);
    
    v8::GenericNamedPropertyQueryCallback get_C_callback();
    
private:
    void callback();

    std::function<void(v8::Local<v8::Name>, v8::PropertyCallbackInfo<v8::Integer> const&)> _C_callback;
    PyObject* _pycb;
};

class v8___GenericNamedPropertyDeleterCallback_CL{
public:

    v8___GenericNamedPropertyDeleterCallback_CL( PyObject* pycb);
    
    v8::GenericNamedPropertyDeleterCallback get_C_callback();
    
private:
    void callback();

    std::function<void(v8::Local<v8::Name>, v8::PropertyCallbackInfo<v8::Boolean> const&)> _C_callback;
    PyObject* _pycb;
};

class v8___GenericNamedPropertyEnumeratorCallback_CL{
public:

    v8___GenericNamedPropertyEnumeratorCallback_CL( PyObject* pycb);
    
    v8::GenericNamedPropertyEnumeratorCallback get_C_callback();
    
private:
    void callback();

    std::function<void(v8::PropertyCallbackInfo<v8::Array> const&)> _C_callback;
    PyObject* _pycb;
};

class v8___IndexedPropertyGetterCallback_CL{
public:

    v8___IndexedPropertyGetterCallback_CL( PyObject* pycb);
    
    v8::IndexedPropertyGetterCallback get_C_callback();
    
private:
    void callback();

    std::function<void(unsigned int, v8::PropertyCallbackInfo<v8::Value> const&)> _C_callback;
    PyObject* _pycb;
};

class v8___IndexedPropertySetterCallback_CL{
public:

    v8___IndexedPropertySetterCallback_CL( PyObject* pycb);
    
    v8::IndexedPropertySetterCallback get_C_callback();
    
private:
    void callback();

    std::function<void(unsigned int, v8::Local<v8::Value>, v8::PropertyCallbackInfo<v8::Value> const&)> _C_callback;
    PyObject* _pycb;
};

class v8___IndexedPropertyQueryCallback_CL{
public:

    v8___IndexedPropertyQueryCallback_CL( PyObject* pycb);
    
    v8::IndexedPropertyQueryCallback get_C_callback();
    
private:
    void callback();

    std::function<void(unsigned int, v8::PropertyCallbackInfo<v8::Integer> const&)> _C_callback;
    PyObject* _pycb;
};

class v8___IndexedPropertyDeleterCallback_CL{
public:

    v8___IndexedPropertyDeleterCallback_CL( PyObject* pycb);
    
    v8::IndexedPropertyDeleterCallback get_C_callback();
    
private:
    void callback();

    std::function<void(unsigned int, v8::PropertyCallbackInfo<v8::Boolean> const&)> _C_callback;
    PyObject* _pycb;
};

class v8___IndexedPropertyEnumeratorCallback_CL{
public:

    v8___IndexedPropertyEnumeratorCallback_CL( PyObject* pycb);
    
    v8::IndexedPropertyEnumeratorCallback get_C_callback();
    
private:
    void callback();

    std::function<void(v8::PropertyCallbackInfo<v8::Array> const&)> _C_callback;
    PyObject* _pycb;
};

class v8___NamedSecurityCallback_CL{
public:

    v8___NamedSecurityCallback_CL( PyObject* pycb);
    
    v8::NamedSecurityCallback get_C_callback();
    
private:
    bool callback();

    std::function<bool(v8::Local<v8::Object>, v8::Local<v8::Value>, v8::AccessType, v8::Local<v8::Value>)> _C_callback;
    PyObject* _pycb;
};

class v8___IndexedSecurityCallback_CL{
public:

    v8___IndexedSecurityCallback_CL( PyObject* pycb);
    
    v8::IndexedSecurityCallback get_C_callback();
    
private:
    bool callback();

    std::function<bool(v8::Local<v8::Object>, unsigned int, v8::AccessType, v8::Local<v8::Value>)> _C_callback;
    PyObject* _pycb;
};

class v8___FatalErrorCallback_CL{
public:

    v8___FatalErrorCallback_CL( PyObject* pycb);
    
    v8::FatalErrorCallback get_C_callback();
    
private:
    void callback();

    std::function<void(char const *, char const *)> _C_callback;
    PyObject* _pycb;
};

class v8___MessageCallback_CL{
public:

    v8___MessageCallback_CL( PyObject* pycb);
    
    v8::MessageCallback get_C_callback();
    
private:
    void callback();

    std::function<void(v8::Local<v8::Message>, v8::Local<v8::Value>)> _C_callback;
    PyObject* _pycb;
};

class v8___LogEventCallback_CL{
public:

    v8___LogEventCallback_CL( PyObject* pycb);
    
    v8::LogEventCallback get_C_callback();
    
private:
    void callback();

    std::function<void(char const *, int)> _C_callback;
    PyObject* _pycb;
};

class v8___CounterLookupCallback_CL{
public:

    v8___CounterLookupCallback_CL( PyObject* pycb);
    
    v8::CounterLookupCallback get_C_callback();
    
private:
    int * callback();

    std::function<int *(char const *)> _C_callback;
    PyObject* _pycb;
};

class v8___CreateHistogramCallback_CL{
public:

    v8___CreateHistogramCallback_CL( PyObject* pycb);
    
    v8::CreateHistogramCallback get_C_callback();
    
private:
    void * callback();

    std::function<void *(char const *, int, int, long unsigned int)> _C_callback;
    PyObject* _pycb;
};

class v8___AddHistogramSampleCallback_CL{
public:

    v8___AddHistogramSampleCallback_CL( PyObject* pycb);
    
    v8::AddHistogramSampleCallback get_C_callback();
    
private:
    void callback();

    std::function<void(void *, int)> _C_callback;
    PyObject* _pycb;
};

class v8___MemoryAllocationCallback_CL{
public:

    v8___MemoryAllocationCallback_CL( PyObject* pycb);
    
    v8::MemoryAllocationCallback get_C_callback();
    
private:
    void callback();

    std::function<void(v8::ObjectSpace, v8::AllocationAction, int)> _C_callback;
    PyObject* _pycb;
};

class v8___CallCompletedCallback_CL{
public:

    v8___CallCompletedCallback_CL( PyObject* pycb);
    
    v8::CallCompletedCallback get_C_callback();
    
private:
    void callback();

    std::function<void()> _C_callback;
    PyObject* _pycb;
};

class v8___PromiseRejectCallback_CL{
public:

    v8___PromiseRejectCallback_CL( PyObject* pycb);
    
    v8::PromiseRejectCallback get_C_callback();
    
private:
    void callback();

    std::function<void(v8::PromiseRejectMessage)> _C_callback;
    PyObject* _pycb;
};

class v8___MicrotaskCallback_CL{
public:

    v8___MicrotaskCallback_CL( PyObject* pycb);
    
    v8::MicrotaskCallback get_C_callback();
    
private:
    void callback();

    std::function<void(void *)> _C_callback;
    PyObject* _pycb;
};

class v8___FailedAccessCheckCallback_CL{
public:

    v8___FailedAccessCheckCallback_CL( PyObject* pycb);
    
    v8::FailedAccessCheckCallback get_C_callback();
    
private:
    void callback();

    std::function<void(v8::Local<v8::Object>, v8::AccessType, v8::Local<v8::Value>)> _C_callback;
    PyObject* _pycb;
};

class v8___AllowCodeGenerationFromStringsCallback_CL{
public:

    v8___AllowCodeGenerationFromStringsCallback_CL( PyObject* pycb);
    
    v8::AllowCodeGenerationFromStringsCallback get_C_callback();
    
private:
    bool callback();

    std::function<bool(v8::Local<v8::Context>)> _C_callback;
    PyObject* _pycb;
};

class v8___GCPrologueCallback_CL{
public:

    v8___GCPrologueCallback_CL( PyObject* pycb);
    
    v8::GCPrologueCallback get_C_callback();
    
private:
    void callback();

    std::function<void(v8::GCType, v8::GCCallbackFlags)> _C_callback;
    PyObject* _pycb;
};

class v8___InterruptCallback_CL{
public:

    v8___InterruptCallback_CL( PyObject* pycb);
    
    v8::InterruptCallback get_C_callback();
    
private:
    void callback();

    std::function<void(v8::Isolate *, void *)> _C_callback;
    PyObject* _pycb;
};

class v8___FunctionEntryHook_CL{
public:

    v8___FunctionEntryHook_CL( PyObject* pycb);
    
    v8::FunctionEntryHook get_C_callback();
    
private:
    void callback();

    std::function<void(long unsigned int, long unsigned int)> _C_callback;
    PyObject* _pycb;
};

class v8___JitCodeEventHandler_CL{
public:

    v8___JitCodeEventHandler_CL( PyObject* pycb);
    
    v8::JitCodeEventHandler get_C_callback();
    
private:
    void callback();

    std::function<void(v8::JitCodeEvent const *)> _C_callback;
    PyObject* _pycb;
};

class v8___EntropySource_CL{
public:

    v8___EntropySource_CL( PyObject* pycb);
    
    v8::EntropySource get_C_callback();
    
private:
    bool callback();

    std::function<bool(unsigned char *, long unsigned int)> _C_callback;
    PyObject* _pycb;
};

class v8___ReturnAddressLocationResolver_CL{
public:

    v8___ReturnAddressLocationResolver_CL( PyObject* pycb);
    
    v8::ReturnAddressLocationResolver get_C_callback();
    
private:
    long unsigned int callback();

    std::function<long unsigned int(long unsigned int)> _C_callback;
    PyObject* _pycb;
};

class v8___Isolate___UseCounterCallback_CL{
public:

    v8___Isolate___UseCounterCallback_CL( PyObject* pycb);
    
    v8::Isolate::UseCounterCallback get_C_callback();
    
private:
    void callback();

    std::function<void(v8::Isolate *, v8::Isolate::UseCounterFeature)> _C_callback;
    PyObject* _pycb;
};

class v8___Isolate___GCPrologueCallback_CL{
public:

    v8___Isolate___GCPrologueCallback_CL( PyObject* pycb);
    
    v8::Isolate::GCPrologueCallback get_C_callback();
    
private:
    void callback();

    std::function<void(v8::Isolate *, v8::GCType, v8::GCCallbackFlags)> _C_callback;
    PyObject* _pycb;
};

class v8___WeakCallbackInfo_void____Callback_CL{
public:

    v8___WeakCallbackInfo_void____Callback_CL( PyObject* pycb);
    
    v8::WeakCallbackInfo<void>::Callback get_C_callback();
    
private:
    void callback();

    std::function<void(v8::WeakCallbackInfo<void> const&)> _C_callback;
    PyObject* _pycb;
};

class v8___WeakCallbackData_v8__Value__void____Callback_CL{
public:

    v8___WeakCallbackData_v8__Value__void____Callback_CL( PyObject* pycb);
    
    v8::WeakCallbackData<v8::Value, void>::Callback get_C_callback();
    
private:
    void callback();

    std::function<void(v8::WeakCallbackData<v8::Value, void> const&)> _C_callback;
    PyObject* _pycb;
};

struct v8___AccessorSignature{
    PyObject_HEAD
    v8::AccessorSignature* _Cobject;
    PyObject* _owner;
    bool _is_c_reference;
    
    v8::AccessorSignature*
    get_Cobject(struct AccessorSignature* newowner);
    
};


struct v8___Array{
    PyObject_HEAD
    v8::Array* _Cobject;
    PyObject* _owner;
    bool _is_c_reference;
    
    v8::Array*
    get_Cobject(struct Array* newowner);
    
};


struct v8___Boolean{
    PyObject_HEAD
    v8::Boolean* _Cobject;
    PyObject* _owner;
    bool _is_c_reference;
    
    v8::Boolean*
    get_Cobject(struct Boolean* newowner);
    
};


struct v8___BooleanObject{
    PyObject_HEAD
    v8::BooleanObject* _Cobject;
    PyObject* _owner;
    bool _is_c_reference;
    
    v8::BooleanObject*
    get_Cobject(struct BooleanObject* newowner);
    
};


struct v8___Context{
    PyObject_HEAD
    v8::Context* _Cobject;
    PyObject* _owner;
    bool _is_c_reference;
    
    v8::Context*
    get_Cobject(struct Context* newowner);
    
};


struct v8___CpuProfiler{
    PyObject_HEAD
    v8::CpuProfiler* _Cobject;
    PyObject* _owner;
    bool _is_c_reference;
    
    v8::CpuProfiler*
    get_Cobject(struct CpuProfiler* newowner);
    
};


struct v8___Data{
    PyObject_HEAD
    v8::Data* _Cobject;
    PyObject* _owner;
    bool _is_c_reference;
    
    v8::Data*
    get_Cobject(struct Data* newowner);
    
};


struct v8___Date{
    PyObject_HEAD
    v8::Date* _Cobject;
    PyObject* _owner;
    bool _is_c_reference;
    
    v8::Date*
    get_Cobject(struct Date* newowner);
    
};


struct v8___External{
    PyObject_HEAD
    v8::External* _Cobject;
    PyObject* _owner;
    bool _is_c_reference;
    
    v8::External*
    get_Cobject(struct External* newowner);
    
};


struct v8___Function{
    PyObject_HEAD
    v8::Function* _Cobject;
    PyObject* _owner;
    bool _is_c_reference;
    
    v8::Function*
    get_Cobject(struct Function* newowner);
    
};


struct v8___FunctionTemplate{
    PyObject_HEAD
    v8::FunctionTemplate* _Cobject;
    PyObject* _owner;
    bool _is_c_reference;
    
    v8::FunctionTemplate*
    get_Cobject(struct FunctionTemplate* newowner);
    
};


struct v8___HeapProfiler{
    PyObject_HEAD
    v8::HeapProfiler* _Cobject;
    PyObject* _owner;
    bool _is_c_reference;
    
    v8::HeapProfiler*
    get_Cobject(struct HeapProfiler* newowner);
    
};


struct v8___ImplementationUtilities{
    PyObject_HEAD
    v8::ImplementationUtilities* _Cobject;
    PyObject* _owner;
    bool _is_c_reference;
    
    v8::ImplementationUtilities*
    get_Cobject(struct ImplementationUtilities* newowner);
    
};


struct v8___Int32{
    PyObject_HEAD
    v8::Int32* _Cobject;
    PyObject* _owner;
    bool _is_c_reference;
    
    v8::Int32*
    get_Cobject(struct Int32* newowner);
    
};


struct v8___Integer{
    PyObject_HEAD
    v8::Integer* _Cobject;
    PyObject* _owner;
    bool _is_c_reference;
    
    v8::Integer*
    get_Cobject(struct Integer* newowner);
    
};


struct v8___Isolate{
    PyObject_HEAD
    v8::Isolate* _Cobject;
    PyObject* _owner;
    bool _is_c_reference;
    
    v8::Isolate*
    get_Cobject(struct Isolate* newowner);
    
};


struct v8___Maybe_int_{
    PyObject_HEAD
    v8::Maybe<int>* _Cobject;
    PyObject* _owner;
    bool _is_c_reference;
    
    v8::Maybe<int>*
    get_Cobject(struct Maybe_int_* newowner);
    
};


struct v8___Maybe_bool_{
    PyObject_HEAD
    v8::Maybe<bool>* _Cobject;
    PyObject* _owner;
    bool _is_c_reference;
    
    v8::Maybe<bool>*
    get_Cobject(struct Maybe_bool_* newowner);
    
};


struct v8___Maybe_double_{
    PyObject_HEAD
    v8::Maybe<double>* _Cobject;
    PyObject* _owner;
    bool _is_c_reference;
    
    v8::Maybe<double>*
    get_Cobject(struct Maybe_double_* newowner);
    
};


struct v8___Maybe_long_{
    PyObject_HEAD
    v8::Maybe<long>* _Cobject;
    PyObject* _owner;
    bool _is_c_reference;
    
    v8::Maybe<long>*
    get_Cobject(struct Maybe_long_* newowner);
    
};


struct v8___Maybe_unsigned_int_{
    PyObject_HEAD
    v8::Maybe<unsigned int>* _Cobject;
    PyObject* _owner;
    bool _is_c_reference;
    
    v8::Maybe<unsigned int>*
    get_Cobject(struct Maybe_unsigned_int_* newowner);
    
};


struct v8___Maybe_v8__PropertyAttribute_{
    PyObject_HEAD
    v8::Maybe<v8::PropertyAttribute>* _Cobject;
    PyObject* _owner;
    bool _is_c_reference;
    
    v8::Maybe<v8::PropertyAttribute>*
    get_Cobject(struct Maybe_v8__PropertyAttribute_* newowner);
    
};


struct v8___Name{
    PyObject_HEAD
    v8::Name* _Cobject;
    PyObject* _owner;
    bool _is_c_reference;
    
    v8::Name*
    get_Cobject(struct Name* newowner);
    
};


struct v8___Number{
    PyObject_HEAD
    v8::Number* _Cobject;
    PyObject* _owner;
    bool _is_c_reference;
    
    v8::Number*
    get_Cobject(struct Number* newowner);
    
};


struct v8___NumberObject{
    PyObject_HEAD
    v8::NumberObject* _Cobject;
    PyObject* _owner;
    bool _is_c_reference;
    
    v8::NumberObject*
    get_Cobject(struct NumberObject* newowner);
    
};


struct v8___Object{
    PyObject_HEAD
    v8::Object* _Cobject;
    PyObject* _owner;
    bool _is_c_reference;
    
    v8::Object*
    get_Cobject(struct Object* newowner);
    
};


struct v8___ObjectOperationDescriptor{
    PyObject_HEAD
    v8::ObjectOperationDescriptor* _Cobject;
    PyObject* _owner;
    bool _is_c_reference;
    
    v8::ObjectOperationDescriptor*
    get_Cobject(struct ObjectOperationDescriptor* newowner);
    
};


struct v8___ObjectTemplate{
    PyObject_HEAD
    v8::ObjectTemplate* _Cobject;
    PyObject* _owner;
    bool _is_c_reference;
    
    v8::ObjectTemplate*
    get_Cobject(struct ObjectTemplate* newowner);
    
};


struct v8___Platform{
    PyObject_HEAD
    v8::Platform* _Cobject;
    PyObject* _owner;
    bool _is_c_reference;
    
    v8::Platform*
    get_Cobject(struct Platform* newowner);
    
};


struct v8___Primitive{
    PyObject_HEAD
    v8::Primitive* _Cobject;
    PyObject* _owner;
    bool _is_c_reference;
    
    v8::Primitive*
    get_Cobject(struct Primitive* newowner);
    
};


struct v8___Promise{
    PyObject_HEAD
    v8::Promise* _Cobject;
    PyObject* _owner;
    bool _is_c_reference;
    
    v8::Promise*
    get_Cobject(struct Promise* newowner);
    
};


struct v8___RawOperationDescriptor{
    PyObject_HEAD
    v8::RawOperationDescriptor* _Cobject;
    PyObject* _owner;
    bool _is_c_reference;
    
    v8::RawOperationDescriptor*
    get_Cobject(struct RawOperationDescriptor* newowner);
    
};


struct v8___Script{
    PyObject_HEAD
    v8::Script* _Cobject;
    PyObject* _owner;
    bool _is_c_reference;
    
    v8::Script*
    get_Cobject(struct Script* newowner);
    
};


struct v8___SharedArrayBuffer{
    PyObject_HEAD
    v8::SharedArrayBuffer* _Cobject;
    PyObject* _owner;
    bool _is_c_reference;
    
    v8::SharedArrayBuffer*
    get_Cobject(struct SharedArrayBuffer* newowner);
    
};


struct v8___Signature{
    PyObject_HEAD
    v8::Signature* _Cobject;
    PyObject* _owner;
    bool _is_c_reference;
    
    v8::Signature*
    get_Cobject(struct Signature* newowner);
    
};


struct v8___StartupData{
    PyObject_HEAD
    v8::StartupData* _Cobject;
    PyObject* _owner;
    bool _is_c_reference;
    
    v8::StartupData*
    get_Cobject(struct StartupData* newowner);
    
};


struct v8___StackFrame{
    PyObject_HEAD
    v8::StackFrame* _Cobject;
    PyObject* _owner;
    bool _is_c_reference;
    
    v8::StackFrame*
    get_Cobject(struct StackFrame* newowner);
    
};


struct v8___StackTrace{
    PyObject_HEAD
    v8::StackTrace* _Cobject;
    PyObject* _owner;
    bool _is_c_reference;
    
    v8::StackTrace*
    get_Cobject(struct StackTrace* newowner);
    
};


struct v8___String{
    PyObject_HEAD
    v8::String* _Cobject;
    PyObject* _owner;
    bool _is_c_reference;
    
    v8::String*
    get_Cobject(struct String* newowner);
    
};


struct v8___StringObject{
    PyObject_HEAD
    v8::StringObject* _Cobject;
    PyObject* _owner;
    bool _is_c_reference;
    
    v8::StringObject*
    get_Cobject(struct StringObject* newowner);
    
};


struct v8___Symbol{
    PyObject_HEAD
    v8::Symbol* _Cobject;
    PyObject* _owner;
    bool _is_c_reference;
    
    v8::Symbol*
    get_Cobject(struct Symbol* newowner);
    
};


struct v8___SymbolObject{
    PyObject_HEAD
    v8::SymbolObject* _Cobject;
    PyObject* _owner;
    bool _is_c_reference;
    
    v8::SymbolObject*
    get_Cobject(struct SymbolObject* newowner);
    
};


struct v8___Uint32{
    PyObject_HEAD
    v8::Uint32* _Cobject;
    PyObject* _owner;
    bool _is_c_reference;
    
    v8::Uint32*
    get_Cobject(struct Uint32* newowner);
    
};


struct v8___Utils{
    PyObject_HEAD
    v8::Utils* _Cobject;
    PyObject* _owner;
    bool _is_c_reference;
    
    v8::Utils*
    get_Cobject(struct Utils* newowner);
    
};


struct v8___Value{
    PyObject_HEAD
    v8::Value* _Cobject;
    PyObject* _owner;
    bool _is_c_reference;
    
    v8::Value*
    get_Cobject(struct Value* newowner);
    
};


struct v8___Local_v8__Primitive_{
    PyObject_HEAD
    v8::Local<v8::Primitive>* _Cobject;
    PyObject* _owner;
    bool _is_c_reference;
    
    v8::Local<v8::Primitive>*
    get_Cobject(struct Local_v8__Primitive_* newowner);
    
};


struct v8___Local_v8__Boolean_{
    PyObject_HEAD
    v8::Local<v8::Boolean>* _Cobject;
    PyObject* _owner;
    bool _is_c_reference;
    
    v8::Local<v8::Boolean>*
    get_Cobject(struct Local_v8__Boolean_* newowner);
    
};


struct v8___Local_v8__Value_{
    PyObject_HEAD
    v8::Local<v8::Value>* _Cobject;
    PyObject* _owner;
    bool _is_c_reference;
    
    v8::Local<v8::Value>*
    get_Cobject(struct Local_v8__Value_* newowner);
    
};


struct v8___Local_v8__Integer_{
    PyObject_HEAD
    v8::Local<v8::Integer>* _Cobject;
    PyObject* _owner;
    bool _is_c_reference;
    
    v8::Local<v8::Integer>*
    get_Cobject(struct Local_v8__Integer_* newowner);
    
};


struct v8___Local_v8__Script_{
    PyObject_HEAD
    v8::Local<v8::Script>* _Cobject;
    PyObject* _owner;
    bool _is_c_reference;
    
    v8::Local<v8::Script>*
    get_Cobject(struct Local_v8__Script_* newowner);
    
};


struct v8___Local_v8__String_{
    PyObject_HEAD
    v8::Local<v8::String>* _Cobject;
    PyObject* _owner;
    bool _is_c_reference;
    
    v8::Local<v8::String>*
    get_Cobject(struct Local_v8__String_* newowner);
    
};


struct v8___Local_v8__Context_{
    PyObject_HEAD
    v8::Local<v8::Context>* _Cobject;
    PyObject* _owner;
    bool _is_c_reference;
    
    v8::Local<v8::Context>*
    get_Cobject(struct Local_v8__Context_* newowner);
    
};


struct v8___Local_v8__UnboundScript_{
    PyObject_HEAD
    v8::Local<v8::UnboundScript>* _Cobject;
    PyObject* _owner;
    bool _is_c_reference;
    
    v8::Local<v8::UnboundScript>*
    get_Cobject(struct Local_v8__UnboundScript_* newowner);
    
};


struct v8___Local_v8__Function_{
    PyObject_HEAD
    v8::Local<v8::Function>* _Cobject;
    PyObject* _owner;
    bool _is_c_reference;
    
    v8::Local<v8::Function>*
    get_Cobject(struct Local_v8__Function_* newowner);
    
};


struct v8___Local_v8__Object_{
    PyObject_HEAD
    v8::Local<v8::Object>* _Cobject;
    PyObject* _owner;
    bool _is_c_reference;
    
    v8::Local<v8::Object>*
    get_Cobject(struct Local_v8__Object_* newowner);
    
};


struct v8___Local_v8__StackTrace_{
    PyObject_HEAD
    v8::Local<v8::StackTrace>* _Cobject;
    PyObject* _owner;
    bool _is_c_reference;
    
    v8::Local<v8::StackTrace>*
    get_Cobject(struct Local_v8__StackTrace_* newowner);
    
};


struct v8___Local_v8__StackFrame_{
    PyObject_HEAD
    v8::Local<v8::StackFrame>* _Cobject;
    PyObject* _owner;
    bool _is_c_reference;
    
    v8::Local<v8::StackFrame>*
    get_Cobject(struct Local_v8__StackFrame_* newowner);
    
};


struct v8___Local_v8__Array_{
    PyObject_HEAD
    v8::Local<v8::Array>* _Cobject;
    PyObject* _owner;
    bool _is_c_reference;
    
    v8::Local<v8::Array>*
    get_Cobject(struct Local_v8__Array_* newowner);
    
};


struct v8___Local_v8__NativeWeakMap_{
    PyObject_HEAD
    v8::Local<v8::NativeWeakMap>* _Cobject;
    PyObject* _owner;
    bool _is_c_reference;
    
    v8::Local<v8::NativeWeakMap>*
    get_Cobject(struct Local_v8__NativeWeakMap_* newowner);
    
};


struct v8___Local_v8__Number_{
    PyObject_HEAD
    v8::Local<v8::Number>* _Cobject;
    PyObject* _owner;
    bool _is_c_reference;
    
    v8::Local<v8::Number>*
    get_Cobject(struct Local_v8__Number_* newowner);
    
};


struct v8___Local_v8__Uint32_{
    PyObject_HEAD
    v8::Local<v8::Uint32>* _Cobject;
    PyObject* _owner;
    bool _is_c_reference;
    
    v8::Local<v8::Uint32>*
    get_Cobject(struct Local_v8__Uint32_* newowner);
    
};


struct v8___Local_v8__Int32_{
    PyObject_HEAD
    v8::Local<v8::Int32>* _Cobject;
    PyObject* _owner;
    bool _is_c_reference;
    
    v8::Local<v8::Int32>*
    get_Cobject(struct Local_v8__Int32_* newowner);
    
};


struct v8___Local_v8__Symbol_{
    PyObject_HEAD
    v8::Local<v8::Symbol>* _Cobject;
    PyObject* _owner;
    bool _is_c_reference;
    
    v8::Local<v8::Symbol>*
    get_Cobject(struct Local_v8__Symbol_* newowner);
    
};


struct v8___Local_v8__Name_{
    PyObject_HEAD
    v8::Local<v8::Name>* _Cobject;
    PyObject* _owner;
    bool _is_c_reference;
    
    v8::Local<v8::Name>*
    get_Cobject(struct Local_v8__Name_* newowner);
    
};


struct v8___Local_v8__FunctionTemplate_{
    PyObject_HEAD
    v8::Local<v8::FunctionTemplate>* _Cobject;
    PyObject* _owner;
    bool _is_c_reference;
    
    v8::Local<v8::FunctionTemplate>*
    get_Cobject(struct Local_v8__FunctionTemplate_* newowner);
    
};


struct v8___Local_v8__Map_{
    PyObject_HEAD
    v8::Local<v8::Map>* _Cobject;
    PyObject* _owner;
    bool _is_c_reference;
    
    v8::Local<v8::Map>*
    get_Cobject(struct Local_v8__Map_* newowner);
    
};


struct v8___Local_v8__Set_{
    PyObject_HEAD
    v8::Local<v8::Set>* _Cobject;
    PyObject* _owner;
    bool _is_c_reference;
    
    v8::Local<v8::Set>*
    get_Cobject(struct Local_v8__Set_* newowner);
    
};


struct v8___Local_v8__Promise__Resolver_{
    PyObject_HEAD
    v8::Local<v8::Promise::Resolver>* _Cobject;
    PyObject* _owner;
    bool _is_c_reference;
    
    v8::Local<v8::Promise::Resolver>*
    get_Cobject(struct Local_v8__Promise__Resolver_* newowner);
    
};


struct v8___Local_v8__Promise_{
    PyObject_HEAD
    v8::Local<v8::Promise>* _Cobject;
    PyObject* _owner;
    bool _is_c_reference;
    
    v8::Local<v8::Promise>*
    get_Cobject(struct Local_v8__Promise_* newowner);
    
};


struct v8___Local_v8__ArrayBuffer_{
    PyObject_HEAD
    v8::Local<v8::ArrayBuffer>* _Cobject;
    PyObject* _owner;
    bool _is_c_reference;
    
    v8::Local<v8::ArrayBuffer>*
    get_Cobject(struct Local_v8__ArrayBuffer_* newowner);
    
};


struct v8___Local_v8__Uint8Array_{
    PyObject_HEAD
    v8::Local<v8::Uint8Array>* _Cobject;
    PyObject* _owner;
    bool _is_c_reference;
    
    v8::Local<v8::Uint8Array>*
    get_Cobject(struct Local_v8__Uint8Array_* newowner);
    
};


struct v8___Local_v8__SharedArrayBuffer_{
    PyObject_HEAD
    v8::Local<v8::SharedArrayBuffer>* _Cobject;
    PyObject* _owner;
    bool _is_c_reference;
    
    v8::Local<v8::SharedArrayBuffer>*
    get_Cobject(struct Local_v8__SharedArrayBuffer_* newowner);
    
};


struct v8___Local_v8__Uint8ClampedArray_{
    PyObject_HEAD
    v8::Local<v8::Uint8ClampedArray>* _Cobject;
    PyObject* _owner;
    bool _is_c_reference;
    
    v8::Local<v8::Uint8ClampedArray>*
    get_Cobject(struct Local_v8__Uint8ClampedArray_* newowner);
    
};


struct v8___Local_v8__Int8Array_{
    PyObject_HEAD
    v8::Local<v8::Int8Array>* _Cobject;
    PyObject* _owner;
    bool _is_c_reference;
    
    v8::Local<v8::Int8Array>*
    get_Cobject(struct Local_v8__Int8Array_* newowner);
    
};


struct v8___Local_v8__Uint16Array_{
    PyObject_HEAD
    v8::Local<v8::Uint16Array>* _Cobject;
    PyObject* _owner;
    bool _is_c_reference;
    
    v8::Local<v8::Uint16Array>*
    get_Cobject(struct Local_v8__Uint16Array_* newowner);
    
};


struct v8___Local_v8__Int16Array_{
    PyObject_HEAD
    v8::Local<v8::Int16Array>* _Cobject;
    PyObject* _owner;
    bool _is_c_reference;
    
    v8::Local<v8::Int16Array>*
    get_Cobject(struct Local_v8__Int16Array_* newowner);
    
};


struct v8___Local_v8__Uint32Array_{
    PyObject_HEAD
    v8::Local<v8::Uint32Array>* _Cobject;
    PyObject* _owner;
    bool _is_c_reference;
    
    v8::Local<v8::Uint32Array>*
    get_Cobject(struct Local_v8__Uint32Array_* newowner);
    
};


struct v8___Local_v8__Int32Array_{
    PyObject_HEAD
    v8::Local<v8::Int32Array>* _Cobject;
    PyObject* _owner;
    bool _is_c_reference;
    
    v8::Local<v8::Int32Array>*
    get_Cobject(struct Local_v8__Int32Array_* newowner);
    
};


struct v8___Local_v8__Float32Array_{
    PyObject_HEAD
    v8::Local<v8::Float32Array>* _Cobject;
    PyObject* _owner;
    bool _is_c_reference;
    
    v8::Local<v8::Float32Array>*
    get_Cobject(struct Local_v8__Float32Array_* newowner);
    
};


struct v8___Local_v8__Float64Array_{
    PyObject_HEAD
    v8::Local<v8::Float64Array>* _Cobject;
    PyObject* _owner;
    bool _is_c_reference;
    
    v8::Local<v8::Float64Array>*
    get_Cobject(struct Local_v8__Float64Array_* newowner);
    
};


struct v8___Local_v8__DataView_{
    PyObject_HEAD
    v8::Local<v8::DataView>* _Cobject;
    PyObject* _owner;
    bool _is_c_reference;
    
    v8::Local<v8::DataView>*
    get_Cobject(struct Local_v8__DataView_* newowner);
    
};


struct v8___Local_v8__RegExp_{
    PyObject_HEAD
    v8::Local<v8::RegExp>* _Cobject;
    PyObject* _owner;
    bool _is_c_reference;
    
    v8::Local<v8::RegExp>*
    get_Cobject(struct Local_v8__RegExp_* newowner);
    
};


struct v8___Local_v8__External_{
    PyObject_HEAD
    v8::Local<v8::External>* _Cobject;
    PyObject* _owner;
    bool _is_c_reference;
    
    v8::Local<v8::External>*
    get_Cobject(struct Local_v8__External_* newowner);
    
};


struct v8___Local_v8__Data_{
    PyObject_HEAD
    v8::Local<v8::Data>* _Cobject;
    PyObject* _owner;
    bool _is_c_reference;
    
    v8::Local<v8::Data>*
    get_Cobject(struct Local_v8__Data_* newowner);
    
};


struct v8___Local_v8__AccessorSignature_{
    PyObject_HEAD
    v8::Local<v8::AccessorSignature>* _Cobject;
    PyObject* _owner;
    bool _is_c_reference;
    
    v8::Local<v8::AccessorSignature>*
    get_Cobject(struct Local_v8__AccessorSignature_* newowner);
    
};


struct v8___Local_v8__Signature_{
    PyObject_HEAD
    v8::Local<v8::Signature>* _Cobject;
    PyObject* _owner;
    bool _is_c_reference;
    
    v8::Local<v8::Signature>*
    get_Cobject(struct Local_v8__Signature_* newowner);
    
};


struct v8___Local_v8__ObjectTemplate_{
    PyObject_HEAD
    v8::Local<v8::ObjectTemplate>* _Cobject;
    PyObject* _owner;
    bool _is_c_reference;
    
    v8::Local<v8::ObjectTemplate>*
    get_Cobject(struct Local_v8__ObjectTemplate_* newowner);
    
};


struct v8___Local_v8__TypeSwitch_{
    PyObject_HEAD
    v8::Local<v8::TypeSwitch>* _Cobject;
    PyObject* _owner;
    bool _is_c_reference;
    
    v8::Local<v8::TypeSwitch>*
    get_Cobject(struct Local_v8__TypeSwitch_* newowner);
    
};


struct v8___Local_v8__Message_{
    PyObject_HEAD
    v8::Local<v8::Message>* _Cobject;
    PyObject* _owner;
    bool _is_c_reference;
    
    v8::Local<v8::Message>*
    get_Cobject(struct Local_v8__Message_* newowner);
    
};


struct v8___MaybeLocal_v8__Script_{
    PyObject_HEAD
    v8::MaybeLocal<v8::Script>* _Cobject;
    PyObject* _owner;
    bool _is_c_reference;
    
    v8::MaybeLocal<v8::Script>*
    get_Cobject(struct MaybeLocal_v8__Script_* newowner);
    
};


struct v8___MaybeLocal_v8__Value_{
    PyObject_HEAD
    v8::MaybeLocal<v8::Value>* _Cobject;
    PyObject* _owner;
    bool _is_c_reference;
    
    v8::MaybeLocal<v8::Value>*
    get_Cobject(struct MaybeLocal_v8__Value_* newowner);
    
};


struct v8___MaybeLocal_v8__UnboundScript_{
    PyObject_HEAD
    v8::MaybeLocal<v8::UnboundScript>* _Cobject;
    PyObject* _owner;
    bool _is_c_reference;
    
    v8::MaybeLocal<v8::UnboundScript>*
    get_Cobject(struct MaybeLocal_v8__UnboundScript_* newowner);
    
};


struct v8___MaybeLocal_v8__Function_{
    PyObject_HEAD
    v8::MaybeLocal<v8::Function>* _Cobject;
    PyObject* _owner;
    bool _is_c_reference;
    
    v8::MaybeLocal<v8::Function>*
    get_Cobject(struct MaybeLocal_v8__Function_* newowner);
    
};


struct v8___MaybeLocal_v8__String_{
    PyObject_HEAD
    v8::MaybeLocal<v8::String>* _Cobject;
    PyObject* _owner;
    bool _is_c_reference;
    
    v8::MaybeLocal<v8::String>*
    get_Cobject(struct MaybeLocal_v8__String_* newowner);
    
};


struct v8___MaybeLocal_v8__Boolean_{
    PyObject_HEAD
    v8::MaybeLocal<v8::Boolean>* _Cobject;
    PyObject* _owner;
    bool _is_c_reference;
    
    v8::MaybeLocal<v8::Boolean>*
    get_Cobject(struct MaybeLocal_v8__Boolean_* newowner);
    
};


struct v8___MaybeLocal_v8__Number_{
    PyObject_HEAD
    v8::MaybeLocal<v8::Number>* _Cobject;
    PyObject* _owner;
    bool _is_c_reference;
    
    v8::MaybeLocal<v8::Number>*
    get_Cobject(struct MaybeLocal_v8__Number_* newowner);
    
};


struct v8___MaybeLocal_v8__Object_{
    PyObject_HEAD
    v8::MaybeLocal<v8::Object>* _Cobject;
    PyObject* _owner;
    bool _is_c_reference;
    
    v8::MaybeLocal<v8::Object>*
    get_Cobject(struct MaybeLocal_v8__Object_* newowner);
    
};


struct v8___MaybeLocal_v8__Integer_{
    PyObject_HEAD
    v8::MaybeLocal<v8::Integer>* _Cobject;
    PyObject* _owner;
    bool _is_c_reference;
    
    v8::MaybeLocal<v8::Integer>*
    get_Cobject(struct MaybeLocal_v8__Integer_* newowner);
    
};


struct v8___MaybeLocal_v8__Uint32_{
    PyObject_HEAD
    v8::MaybeLocal<v8::Uint32>* _Cobject;
    PyObject* _owner;
    bool _is_c_reference;
    
    v8::MaybeLocal<v8::Uint32>*
    get_Cobject(struct MaybeLocal_v8__Uint32_* newowner);
    
};


struct v8___MaybeLocal_v8__Int32_{
    PyObject_HEAD
    v8::MaybeLocal<v8::Int32>* _Cobject;
    PyObject* _owner;
    bool _is_c_reference;
    
    v8::MaybeLocal<v8::Int32>*
    get_Cobject(struct MaybeLocal_v8__Int32_* newowner);
    
};


struct v8___MaybeLocal_v8__Array_{
    PyObject_HEAD
    v8::MaybeLocal<v8::Array>* _Cobject;
    PyObject* _owner;
    bool _is_c_reference;
    
    v8::MaybeLocal<v8::Array>*
    get_Cobject(struct MaybeLocal_v8__Array_* newowner);
    
};


struct v8___MaybeLocal_v8__Map_{
    PyObject_HEAD
    v8::MaybeLocal<v8::Map>* _Cobject;
    PyObject* _owner;
    bool _is_c_reference;
    
    v8::MaybeLocal<v8::Map>*
    get_Cobject(struct MaybeLocal_v8__Map_* newowner);
    
};


struct v8___MaybeLocal_v8__Set_{
    PyObject_HEAD
    v8::MaybeLocal<v8::Set>* _Cobject;
    PyObject* _owner;
    bool _is_c_reference;
    
    v8::MaybeLocal<v8::Set>*
    get_Cobject(struct MaybeLocal_v8__Set_* newowner);
    
};


struct v8___MaybeLocal_v8__Promise__Resolver_{
    PyObject_HEAD
    v8::MaybeLocal<v8::Promise::Resolver>* _Cobject;
    PyObject* _owner;
    bool _is_c_reference;
    
    v8::MaybeLocal<v8::Promise::Resolver>*
    get_Cobject(struct MaybeLocal_v8__Promise__Resolver_* newowner);
    
};


struct v8___MaybeLocal_v8__Promise_{
    PyObject_HEAD
    v8::MaybeLocal<v8::Promise>* _Cobject;
    PyObject* _owner;
    bool _is_c_reference;
    
    v8::MaybeLocal<v8::Promise>*
    get_Cobject(struct MaybeLocal_v8__Promise_* newowner);
    
};


struct v8___MaybeLocal_v8__RegExp_{
    PyObject_HEAD
    v8::MaybeLocal<v8::RegExp>* _Cobject;
    PyObject* _owner;
    bool _is_c_reference;
    
    v8::MaybeLocal<v8::RegExp>*
    get_Cobject(struct MaybeLocal_v8__RegExp_* newowner);
    
};


struct v8___NonCopyablePersistentTraits_v8__Value_{
    PyObject_HEAD
    v8::NonCopyablePersistentTraits<v8::Value>* _Cobject;
    PyObject* _owner;
    bool _is_c_reference;
    
    v8::NonCopyablePersistentTraits<v8::Value>*
    get_Cobject(struct NonCopyablePersistentTraits_v8__Value_* newowner);
    
};


struct v8___PersistentBase_v8__Value_{
    PyObject_HEAD
    v8::PersistentBase<v8::Value>* _Cobject;
    PyObject* _owner;
    bool _is_c_reference;
    
    v8::PersistentBase<v8::Value>*
    get_Cobject(struct PersistentBase_v8__Value_* newowner);
    
};


struct v8___PersistentBase_v8__Integer_{
    PyObject_HEAD
    v8::PersistentBase<v8::Integer>* _Cobject;
    PyObject* _owner;
    bool _is_c_reference;
    
    v8::PersistentBase<v8::Integer>*
    get_Cobject(struct PersistentBase_v8__Integer_* newowner);
    
};


struct v8___PersistentBase_v8__Boolean_{
    PyObject_HEAD
    v8::PersistentBase<v8::Boolean>* _Cobject;
    PyObject* _owner;
    bool _is_c_reference;
    
    v8::PersistentBase<v8::Boolean>*
    get_Cobject(struct PersistentBase_v8__Boolean_* newowner);
    
};


struct v8___PersistentBase_v8__UnboundScript_{
    PyObject_HEAD
    v8::PersistentBase<v8::UnboundScript>* _Cobject;
    PyObject* _owner;
    bool _is_c_reference;
    
    v8::PersistentBase<v8::UnboundScript>*
    get_Cobject(struct PersistentBase_v8__UnboundScript_* newowner);
    
};


struct v8___PersistentBase_v8__String_{
    PyObject_HEAD
    v8::PersistentBase<v8::String>* _Cobject;
    PyObject* _owner;
    bool _is_c_reference;
    
    v8::PersistentBase<v8::String>*
    get_Cobject(struct PersistentBase_v8__String_* newowner);
    
};


struct v8___PersistentBase_v8__Object_{
    PyObject_HEAD
    v8::PersistentBase<v8::Object>* _Cobject;
    PyObject* _owner;
    bool _is_c_reference;
    
    v8::PersistentBase<v8::Object>*
    get_Cobject(struct PersistentBase_v8__Object_* newowner);
    
};


struct v8___PersistentBase_v8__Function_{
    PyObject_HEAD
    v8::PersistentBase<v8::Function>* _Cobject;
    PyObject* _owner;
    bool _is_c_reference;
    
    v8::PersistentBase<v8::Function>*
    get_Cobject(struct PersistentBase_v8__Function_* newowner);
    
};


struct v8___PersistentBase_v8__Context_{
    PyObject_HEAD
    v8::PersistentBase<v8::Context>* _Cobject;
    PyObject* _owner;
    bool _is_c_reference;
    
    v8::PersistentBase<v8::Context>*
    get_Cobject(struct PersistentBase_v8__Context_* newowner);
    
};


struct v8___PersistentBase_v8__FunctionTemplate_{
    PyObject_HEAD
    v8::PersistentBase<v8::FunctionTemplate>* _Cobject;
    PyObject* _owner;
    bool _is_c_reference;
    
    v8::PersistentBase<v8::FunctionTemplate>*
    get_Cobject(struct PersistentBase_v8__FunctionTemplate_* newowner);
    
};


struct v8___PersistentBase_v8__AccessorSignature_{
    PyObject_HEAD
    v8::PersistentBase<v8::AccessorSignature>* _Cobject;
    PyObject* _owner;
    bool _is_c_reference;
    
    v8::PersistentBase<v8::AccessorSignature>*
    get_Cobject(struct PersistentBase_v8__AccessorSignature_* newowner);
    
};


struct v8___PersistentBase_v8__Signature_{
    PyObject_HEAD
    v8::PersistentBase<v8::Signature>* _Cobject;
    PyObject* _owner;
    bool _is_c_reference;
    
    v8::PersistentBase<v8::Signature>*
    get_Cobject(struct PersistentBase_v8__Signature_* newowner);
    
};


struct v8___PersistentBase_v8__Promise_{
    PyObject_HEAD
    v8::PersistentBase<v8::Promise>* _Cobject;
    PyObject* _owner;
    bool _is_c_reference;
    
    v8::PersistentBase<v8::Promise>*
    get_Cobject(struct PersistentBase_v8__Promise_* newowner);
    
};


struct v8___PersistentBase_v8__StackTrace_{
    PyObject_HEAD
    v8::PersistentBase<v8::StackTrace>* _Cobject;
    PyObject* _owner;
    bool _is_c_reference;
    
    v8::PersistentBase<v8::StackTrace>*
    get_Cobject(struct PersistentBase_v8__StackTrace_* newowner);
    
};


struct v8___PersistentBase_v8__ObjectTemplate_{
    PyObject_HEAD
    v8::PersistentBase<v8::ObjectTemplate>* _Cobject;
    PyObject* _owner;
    bool _is_c_reference;
    
    v8::PersistentBase<v8::ObjectTemplate>*
    get_Cobject(struct PersistentBase_v8__ObjectTemplate_* newowner);
    
};


struct v8___PersistentBase_v8__Data_{
    PyObject_HEAD
    v8::PersistentBase<v8::Data>* _Cobject;
    PyObject* _owner;
    bool _is_c_reference;
    
    v8::PersistentBase<v8::Data>*
    get_Cobject(struct PersistentBase_v8__Data_* newowner);
    
};


struct v8___PersistentBase_v8__Name_{
    PyObject_HEAD
    v8::PersistentBase<v8::Name>* _Cobject;
    PyObject* _owner;
    bool _is_c_reference;
    
    v8::PersistentBase<v8::Name>*
    get_Cobject(struct PersistentBase_v8__Name_* newowner);
    
};


struct v8___PersistentBase_v8__Number_{
    PyObject_HEAD
    v8::PersistentBase<v8::Number>* _Cobject;
    PyObject* _owner;
    bool _is_c_reference;
    
    v8::PersistentBase<v8::Number>*
    get_Cobject(struct PersistentBase_v8__Number_* newowner);
    
};


struct v8___PersistentBase_v8__Uint32_{
    PyObject_HEAD
    v8::PersistentBase<v8::Uint32>* _Cobject;
    PyObject* _owner;
    bool _is_c_reference;
    
    v8::PersistentBase<v8::Uint32>*
    get_Cobject(struct PersistentBase_v8__Uint32_* newowner);
    
};


struct v8___PersistentBase_v8__Int32_{
    PyObject_HEAD
    v8::PersistentBase<v8::Int32>* _Cobject;
    PyObject* _owner;
    bool _is_c_reference;
    
    v8::PersistentBase<v8::Int32>*
    get_Cobject(struct PersistentBase_v8__Int32_* newowner);
    
};


struct v8___PersistentBase_v8__Primitive_{
    PyObject_HEAD
    v8::PersistentBase<v8::Primitive>* _Cobject;
    PyObject* _owner;
    bool _is_c_reference;
    
    v8::PersistentBase<v8::Primitive>*
    get_Cobject(struct PersistentBase_v8__Primitive_* newowner);
    
};


struct v8___Persistent_v8__Value__v8__NonCopyablePersistentTraits_v8__Value___{
    PyObject_HEAD
    v8::Persistent<v8::Value, v8::NonCopyablePersistentTraits<v8::Value> >* _Cobject;
    PyObject* _owner;
    bool _is_c_reference;
    
    v8::Persistent<v8::Value, v8::NonCopyablePersistentTraits<v8::Value> >*
    get_Cobject(struct Persistent_v8__Value__v8__NonCopyablePersistentTraits_v8__Value___* newowner);
    
};


struct v8___FunctionCallbackInfo_v8__Value_{
    PyObject_HEAD
    v8::FunctionCallbackInfo<v8::Value>* _Cobject;
    PyObject* _owner;
    bool _is_c_reference;
    
    v8::FunctionCallbackInfo<v8::Value>*
    get_Cobject(struct FunctionCallbackInfo_v8__Value_* newowner);
    
};


struct v8___PropertyCallbackInfo_v8__Value_{
    PyObject_HEAD
    v8::PropertyCallbackInfo<v8::Value>* _Cobject;
    PyObject* _owner;
    bool _is_c_reference;
    
    v8::PropertyCallbackInfo<v8::Value>*
    get_Cobject(struct PropertyCallbackInfo_v8__Value_* newowner);
    
};


struct v8___PropertyCallbackInfo_void_{
    PyObject_HEAD
    v8::PropertyCallbackInfo<void>* _Cobject;
    PyObject* _owner;
    bool _is_c_reference;
    
    v8::PropertyCallbackInfo<void>*
    get_Cobject(struct PropertyCallbackInfo_void_* newowner);
    
};


struct v8___PropertyCallbackInfo_v8__Integer_{
    PyObject_HEAD
    v8::PropertyCallbackInfo<v8::Integer>* _Cobject;
    PyObject* _owner;
    bool _is_c_reference;
    
    v8::PropertyCallbackInfo<v8::Integer>*
    get_Cobject(struct PropertyCallbackInfo_v8__Integer_* newowner);
    
};


struct v8___PropertyCallbackInfo_v8__Boolean_{
    PyObject_HEAD
    v8::PropertyCallbackInfo<v8::Boolean>* _Cobject;
    PyObject* _owner;
    bool _is_c_reference;
    
    v8::PropertyCallbackInfo<v8::Boolean>*
    get_Cobject(struct PropertyCallbackInfo_v8__Boolean_* newowner);
    
};


struct v8___PropertyCallbackInfo_v8__Array_{
    PyObject_HEAD
    v8::PropertyCallbackInfo<v8::Array>* _Cobject;
    PyObject* _owner;
    bool _is_c_reference;
    
    v8::PropertyCallbackInfo<v8::Array>*
    get_Cobject(struct PropertyCallbackInfo_v8__Array_* newowner);
    
};


struct v8___CallHandlerHelper{
    PyObject_HEAD
    v8::CallHandlerHelper* _Cobject;
    PyObject* _owner;
    bool _is_c_reference;
    
    v8::CallHandlerHelper*
    get_Cobject(struct CallHandlerHelper* newowner);
    
};


struct v8___EscapableHandleScope{
    PyObject_HEAD
    v8::EscapableHandleScope* _Cobject;
    PyObject* _owner;
    bool _is_c_reference;
    
    v8::EscapableHandleScope*
    get_Cobject(struct EscapableHandleScope* newowner);
    
};


struct v8___UniqueId{
    PyObject_HEAD
    v8::UniqueId* _Cobject;
    PyObject* _owner;
    bool _is_c_reference;
    
    v8::UniqueId*
    get_Cobject(struct UniqueId* newowner);
    
};


struct v8___WeakCallbackInfo_void_{
    PyObject_HEAD
    v8::WeakCallbackInfo<void>* _Cobject;
    PyObject* _owner;
    bool _is_c_reference;
    
    v8::WeakCallbackInfo<void>*
    get_Cobject(struct WeakCallbackInfo_void_* newowner);
    
};


struct v8___WeakCallbackData_v8__Value__void_{
    PyObject_HEAD
    v8::WeakCallbackData<v8::Value, void>* _Cobject;
    PyObject* _owner;
    bool _is_c_reference;
    
    v8::WeakCallbackData<v8::Value, void>*
    get_Cobject(struct WeakCallbackData_v8__Value__void_* newowner);
    
};


struct v8___HandleScope{
    PyObject_HEAD
    v8::HandleScope* _Cobject;
    PyObject* _owner;
    bool _is_c_reference;
    
    v8::HandleScope*
    get_Cobject(struct HandleScope* newowner);
    
};


struct v8___SealHandleScope{
    PyObject_HEAD
    v8::SealHandleScope* _Cobject;
    PyObject* _owner;
    bool _is_c_reference;
    
    v8::SealHandleScope*
    get_Cobject(struct SealHandleScope* newowner);
    
};


struct v8___ScriptOriginOptions{
    PyObject_HEAD
    v8::ScriptOriginOptions* _Cobject;
    PyObject* _owner;
    bool _is_c_reference;
    
    v8::ScriptOriginOptions*
    get_Cobject(struct ScriptOriginOptions* newowner);
    
};


struct v8___ScriptOrigin{
    PyObject_HEAD
    v8::ScriptOrigin* _Cobject;
    PyObject* _owner;
    bool _is_c_reference;
    
    v8::ScriptOrigin*
    get_Cobject(struct ScriptOrigin* newowner);
    
};


struct v8___UnboundScript{
    PyObject_HEAD
    v8::UnboundScript* _Cobject;
    PyObject* _owner;
    bool _is_c_reference;
    
    v8::UnboundScript*
    get_Cobject(struct UnboundScript* newowner);
    
};


struct v8___ScriptCompiler{
    PyObject_HEAD
    v8::ScriptCompiler* _Cobject;
    PyObject* _owner;
    bool _is_c_reference;
    
    v8::ScriptCompiler*
    get_Cobject(struct ScriptCompiler* newowner);
    
};


struct v8___Message{
    PyObject_HEAD
    v8::Message* _Cobject;
    PyObject* _owner;
    bool _is_c_reference;
    
    v8::Message*
    get_Cobject(struct Message* newowner);
    
};


struct v8___RegisterState{
    PyObject_HEAD
    v8::RegisterState* _Cobject;
    PyObject* _owner;
    bool _is_c_reference;
    
    v8::RegisterState*
    get_Cobject(struct RegisterState* newowner);
    
};


struct v8___SampleInfo{
    PyObject_HEAD
    v8::SampleInfo* _Cobject;
    PyObject* _owner;
    bool _is_c_reference;
    
    v8::SampleInfo*
    get_Cobject(struct SampleInfo* newowner);
    
};


struct v8___JSON{
    PyObject_HEAD
    v8::JSON* _Cobject;
    PyObject* _owner;
    bool _is_c_reference;
    
    v8::JSON*
    get_Cobject(struct JSON* newowner);
    
};


struct v8___NativeWeakMap{
    PyObject_HEAD
    v8::NativeWeakMap* _Cobject;
    PyObject* _owner;
    bool _is_c_reference;
    
    v8::NativeWeakMap*
    get_Cobject(struct NativeWeakMap* newowner);
    
};


struct v8___Map{
    PyObject_HEAD
    v8::Map* _Cobject;
    PyObject* _owner;
    bool _is_c_reference;
    
    v8::Map*
    get_Cobject(struct Map* newowner);
    
};


struct v8___Set{
    PyObject_HEAD
    v8::Set* _Cobject;
    PyObject* _owner;
    bool _is_c_reference;
    
    v8::Set*
    get_Cobject(struct Set* newowner);
    
};


struct v8___ArrayBuffer{
    PyObject_HEAD
    v8::ArrayBuffer* _Cobject;
    PyObject* _owner;
    bool _is_c_reference;
    
    v8::ArrayBuffer*
    get_Cobject(struct ArrayBuffer* newowner);
    
};


struct v8___ArrayBufferView{
    PyObject_HEAD
    v8::ArrayBufferView* _Cobject;
    PyObject* _owner;
    bool _is_c_reference;
    
    v8::ArrayBufferView*
    get_Cobject(struct ArrayBufferView* newowner);
    
};


struct v8___TypedArray{
    PyObject_HEAD
    v8::TypedArray* _Cobject;
    PyObject* _owner;
    bool _is_c_reference;
    
    v8::TypedArray*
    get_Cobject(struct TypedArray* newowner);
    
};


struct v8___Uint8Array{
    PyObject_HEAD
    v8::Uint8Array* _Cobject;
    PyObject* _owner;
    bool _is_c_reference;
    
    v8::Uint8Array*
    get_Cobject(struct Uint8Array* newowner);
    
};


struct v8___Uint8ClampedArray{
    PyObject_HEAD
    v8::Uint8ClampedArray* _Cobject;
    PyObject* _owner;
    bool _is_c_reference;
    
    v8::Uint8ClampedArray*
    get_Cobject(struct Uint8ClampedArray* newowner);
    
};


struct v8___Int8Array{
    PyObject_HEAD
    v8::Int8Array* _Cobject;
    PyObject* _owner;
    bool _is_c_reference;
    
    v8::Int8Array*
    get_Cobject(struct Int8Array* newowner);
    
};


struct v8___Uint16Array{
    PyObject_HEAD
    v8::Uint16Array* _Cobject;
    PyObject* _owner;
    bool _is_c_reference;
    
    v8::Uint16Array*
    get_Cobject(struct Uint16Array* newowner);
    
};


struct v8___Int16Array{
    PyObject_HEAD
    v8::Int16Array* _Cobject;
    PyObject* _owner;
    bool _is_c_reference;
    
    v8::Int16Array*
    get_Cobject(struct Int16Array* newowner);
    
};


struct v8___Uint32Array{
    PyObject_HEAD
    v8::Uint32Array* _Cobject;
    PyObject* _owner;
    bool _is_c_reference;
    
    v8::Uint32Array*
    get_Cobject(struct Uint32Array* newowner);
    
};


struct v8___Int32Array{
    PyObject_HEAD
    v8::Int32Array* _Cobject;
    PyObject* _owner;
    bool _is_c_reference;
    
    v8::Int32Array*
    get_Cobject(struct Int32Array* newowner);
    
};


struct v8___Float32Array{
    PyObject_HEAD
    v8::Float32Array* _Cobject;
    PyObject* _owner;
    bool _is_c_reference;
    
    v8::Float32Array*
    get_Cobject(struct Float32Array* newowner);
    
};


struct v8___Float64Array{
    PyObject_HEAD
    v8::Float64Array* _Cobject;
    PyObject* _owner;
    bool _is_c_reference;
    
    v8::Float64Array*
    get_Cobject(struct Float64Array* newowner);
    
};


struct v8___DataView{
    PyObject_HEAD
    v8::DataView* _Cobject;
    PyObject* _owner;
    bool _is_c_reference;
    
    v8::DataView*
    get_Cobject(struct DataView* newowner);
    
};


struct v8___RegExp{
    PyObject_HEAD
    v8::RegExp* _Cobject;
    PyObject* _owner;
    bool _is_c_reference;
    
    v8::RegExp*
    get_Cobject(struct RegExp* newowner);
    
};


struct v8___Template{
    PyObject_HEAD
    v8::Template* _Cobject;
    PyObject* _owner;
    bool _is_c_reference;
    
    v8::Template*
    get_Cobject(struct Template* newowner);
    
};


struct v8___NamedPropertyHandlerConfiguration{
    PyObject_HEAD
    v8::NamedPropertyHandlerConfiguration* _Cobject;
    PyObject* _owner;
    bool _is_c_reference;
    
    v8::NamedPropertyHandlerConfiguration*
    get_Cobject(struct NamedPropertyHandlerConfiguration* newowner);
    
};


struct v8___IndexedPropertyHandlerConfiguration{
    PyObject_HEAD
    v8::IndexedPropertyHandlerConfiguration* _Cobject;
    PyObject* _owner;
    bool _is_c_reference;
    
    v8::IndexedPropertyHandlerConfiguration*
    get_Cobject(struct IndexedPropertyHandlerConfiguration* newowner);
    
};


struct v8___TypeSwitch{
    PyObject_HEAD
    v8::TypeSwitch* _Cobject;
    PyObject* _owner;
    bool _is_c_reference;
    
    v8::TypeSwitch*
    get_Cobject(struct TypeSwitch* newowner);
    
};


struct v8___ExternalOneByteStringResourceImpl{
    PyObject_HEAD
    v8::ExternalOneByteStringResourceImpl* _Cobject;
    PyObject* _owner;
    bool _is_c_reference;
    
    v8::ExternalOneByteStringResourceImpl*
    get_Cobject(struct ExternalOneByteStringResourceImpl* newowner);
    
};


struct v8___Extension{
    PyObject_HEAD
    v8::Extension* _Cobject;
    PyObject* _owner;
    bool _is_c_reference;
    
    v8::Extension*
    get_Cobject(struct Extension* newowner);
    
};


struct v8___ResourceConstraints{
    PyObject_HEAD
    v8::ResourceConstraints* _Cobject;
    PyObject* _owner;
    bool _is_c_reference;
    
    v8::ResourceConstraints*
    get_Cobject(struct ResourceConstraints* newowner);
    
};


struct v8___Exception{
    PyObject_HEAD
    v8::Exception* _Cobject;
    PyObject* _owner;
    bool _is_c_reference;
    
    v8::Exception*
    get_Cobject(struct Exception* newowner);
    
};


struct v8___PromiseRejectMessage{
    PyObject_HEAD
    v8::PromiseRejectMessage* _Cobject;
    PyObject* _owner;
    bool _is_c_reference;
    
    v8::PromiseRejectMessage*
    get_Cobject(struct PromiseRejectMessage* newowner);
    
};


struct v8___HeapStatistics{
    PyObject_HEAD
    v8::HeapStatistics* _Cobject;
    PyObject* _owner;
    bool _is_c_reference;
    
    v8::HeapStatistics*
    get_Cobject(struct HeapStatistics* newowner);
    
};


struct v8___HeapSpaceStatistics{
    PyObject_HEAD
    v8::HeapSpaceStatistics* _Cobject;
    PyObject* _owner;
    bool _is_c_reference;
    
    v8::HeapSpaceStatistics*
    get_Cobject(struct HeapSpaceStatistics* newowner);
    
};


struct v8___HeapObjectStatistics{
    PyObject_HEAD
    v8::HeapObjectStatistics* _Cobject;
    PyObject* _owner;
    bool _is_c_reference;
    
    v8::HeapObjectStatistics*
    get_Cobject(struct HeapObjectStatistics* newowner);
    
};


struct v8___RetainedObjectInfo{
    PyObject_HEAD
    v8::RetainedObjectInfo* _Cobject;
    PyObject* _owner;
    bool _is_c_reference;
    
    v8::RetainedObjectInfo*
    get_Cobject(struct RetainedObjectInfo* newowner);
    
};


struct v8___JitCodeEvent{
    PyObject_HEAD
    v8::JitCodeEvent* _Cobject;
    PyObject* _owner;
    bool _is_c_reference;
    
    v8::JitCodeEvent*
    get_Cobject(struct JitCodeEvent* newowner);
    
};


struct v8___ExternalResourceVisitor{
    PyObject_HEAD
    v8::ExternalResourceVisitor* _Cobject;
    PyObject* _owner;
    bool _is_c_reference;
    
    v8::ExternalResourceVisitor*
    get_Cobject(struct ExternalResourceVisitor* newowner);
    
};


struct v8___PersistentHandleVisitor{
    PyObject_HEAD
    v8::PersistentHandleVisitor* _Cobject;
    PyObject* _owner;
    bool _is_c_reference;
    
    v8::PersistentHandleVisitor*
    get_Cobject(struct PersistentHandleVisitor* newowner);
    
};


struct v8___V8{
    PyObject_HEAD
    v8::V8* _Cobject;
    PyObject* _owner;
    bool _is_c_reference;
    
    v8::V8*
    get_Cobject(struct V8* newowner);
    
};


struct v8___TryCatch{
    PyObject_HEAD
    v8::TryCatch* _Cobject;
    PyObject* _owner;
    bool _is_c_reference;
    
    v8::TryCatch*
    get_Cobject(struct TryCatch* newowner);
    
};


struct v8___ExtensionConfiguration{
    PyObject_HEAD
    v8::ExtensionConfiguration* _Cobject;
    PyObject* _owner;
    bool _is_c_reference;
    
    v8::ExtensionConfiguration*
    get_Cobject(struct ExtensionConfiguration* newowner);
    
};


struct v8___Unlocker{
    PyObject_HEAD
    v8::Unlocker* _Cobject;
    PyObject* _owner;
    bool _is_c_reference;
    
    v8::Unlocker*
    get_Cobject(struct Unlocker* newowner);
    
};


struct v8___Locker{
    PyObject_HEAD
    v8::Locker* _Cobject;
    PyObject* _owner;
    bool _is_c_reference;
    
    v8::Locker*
    get_Cobject(struct Locker* newowner);
    
};


struct v8internal___Arguments{
    PyObject_HEAD
    v8::internal::Arguments* _Cobject;
    PyObject* _owner;
    bool _is_c_reference;
    
    v8::internal::Arguments*
    get_Cobject(struct Arguments* newowner);
    
};


struct v8internal___Heap{
    PyObject_HEAD
    v8::internal::Heap* _Cobject;
    PyObject* _owner;
    bool _is_c_reference;
    
    v8::internal::Heap*
    get_Cobject(struct Heap* newowner);
    
};


struct v8internal___HeapObject{
    PyObject_HEAD
    v8::internal::HeapObject* _Cobject;
    PyObject* _owner;
    bool _is_c_reference;
    
    v8::internal::HeapObject*
    get_Cobject(struct HeapObject* newowner);
    
};


struct v8internal___Isolate{
    PyObject_HEAD
    v8::internal::Isolate* _Cobject;
    PyObject* _owner;
    bool _is_c_reference;
    
    v8::internal::Isolate*
    get_Cobject(struct Isolate* newowner);
    
};


struct v8internal___Object{
    PyObject_HEAD
    v8::internal::Object* _Cobject;
    PyObject* _owner;
    bool _is_c_reference;
    
    v8::internal::Object*
    get_Cobject(struct Object* newowner);
    
};


struct v8internal___StreamedSource{
    PyObject_HEAD
    v8::internal::StreamedSource* _Cobject;
    PyObject* _owner;
    bool _is_c_reference;
    
    v8::internal::StreamedSource*
    get_Cobject(struct StreamedSource* newowner);
    
};


struct v8internal___PropertyCallbackArguments{
    PyObject_HEAD
    v8::internal::PropertyCallbackArguments* _Cobject;
    PyObject* _owner;
    bool _is_c_reference;
    
    v8::internal::PropertyCallbackArguments*
    get_Cobject(struct PropertyCallbackArguments* newowner);
    
};


struct v8internal___FunctionCallbackArguments{
    PyObject_HEAD
    v8::internal::FunctionCallbackArguments* _Cobject;
    PyObject* _owner;
    bool _is_c_reference;
    
    v8::internal::FunctionCallbackArguments*
    get_Cobject(struct FunctionCallbackArguments* newowner);
    
};


struct v8internal___GlobalHandles{
    PyObject_HEAD
    v8::internal::GlobalHandles* _Cobject;
    PyObject* _owner;
    bool _is_c_reference;
    
    v8::internal::GlobalHandles*
    get_Cobject(struct GlobalHandles* newowner);
    
};


struct v8internal___SmiTagging_4_{
    PyObject_HEAD
    v8::internal::SmiTagging<4>* _Cobject;
    PyObject* _owner;
    bool _is_c_reference;
    
    v8::internal::SmiTagging<4>*
    get_Cobject(struct SmiTagging_4_* newowner);
    
};


struct v8internal___SmiTagging_8_{
    PyObject_HEAD
    v8::internal::SmiTagging<8>* _Cobject;
    PyObject* _owner;
    bool _is_c_reference;
    
    v8::internal::SmiTagging<8>*
    get_Cobject(struct SmiTagging_8_* newowner);
    
};


struct v8internal___Internals{
    PyObject_HEAD
    v8::internal::Internals* _Cobject;
    PyObject* _owner;
    bool _is_c_reference;
    
    v8::internal::Internals*
    get_Cobject(struct Internals* newowner);
    
};


static PyObject*
v8___RegisterExtension(PyObject *args, PyObject *kwds);
        
    
static PyObject*
v8___Undefined(PyObject *args, PyObject *kwds);
        
    
static PyObject*
v8___Null(PyObject *args, PyObject *kwds);
        
    
static PyObject*
v8___True(PyObject *args, PyObject *kwds);
        
    
static PyObject*
v8___False(PyObject *args, PyObject *kwds);
        
    
static void
v8___AccessorSignature_dealloc(v8___AccessorSignature* self);

static PyObject *
v8___AccessorSignature_new(PyTypeObject *type, PyObject *args, PyObject *kwds);
static int
v8___AccessorSignature_init(v8___AccessorSignature *self, PyObject *args, PyObject *kwds);
           

static PyObject*
v8___AccessorSignature__New(PyObject *args, PyObject *kwds);
    
static PyMethodDef v8___AccessorSignature_methods[] = {
             
            {"New",  (PyCFunction)v8___AccessorSignature__New,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},{NULL}  /* Sentinel */
};

static PyMemberDef v8___AccessorSignature_members[] =   {
        {NULL}
};
    

static PyTypeObject v8___AccessorSignatureType = {
             PyObject_HEAD_INIT(NULL)
             0,                         /*ob_size*/
             "v8.AccessorSignature",             /*tp_name*/
             sizeof(v8___AccessorSignature), /*tp_basicsize*/
             0,                         /*tp_itemsize*/
             (destructor)v8___AccessorSignature_dealloc,                         /*tp_dealloc*/
             0,                         /*tp_print*/
             0,                         /*tp_getattr*/
             0,                         /*tp_setattr*/
             0,                         /*tp_compare*/
             0,                         /*tp_repr*/
             0,                         /*tp_as_number*/
             0,                         /*tp_as_sequence*/
             0,                         /*tp_as_mapping*/
             0,                         /*tp_hash */
             0,                         /*tp_call*/
             0,                         /*tp_str*/
             0,                         /*tp_getattro*/
             0,                         /*tp_setattro*/
             0,                         /*tp_as_buffer*/
             Py_TPFLAGS_DEFAULT| Py_TPFLAGS_BASETYPE,        /*tp_flags*/
             "v8___AccessorSignature objects",           /* tp_doc */
             0,		               /* tp_traverse */
             0,		               /* tp_clear */
             0,		               /* tp_richcompare */
             0,		               /* tp_weaklistoffset */
             0,		               /* tp_iter */
             0,		               /* tp_iternext */
             v8___AccessorSignature_methods,             /* tp_methods */
             v8___AccessorSignature_members,             /* tp_members */
             0,                         /* tp_getset */
             0,                         /* tp_base */
             0,                         /* tp_dict */
             0,                         /* tp_descr_get */
             0,                         /* tp_descr_set */
             0,                         /* tp_dictoffset */
             (initproc)v8___AccessorSignature_init,      /* tp_init */
             0,                         /* tp_alloc */
             v8___AccessorSignature_new,                 /* tp_new */
         };

static void
v8___Array_dealloc(v8___Array* self);

static PyObject *
v8___Array_new(PyTypeObject *type, PyObject *args, PyObject *kwds);
static int
v8___Array_init(v8___Array *self, PyObject *args, PyObject *kwds);
           

static PyObject*
v8___Array__Length(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Array__CloneElementAt(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Array__New(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Array__Cast(PyObject *args, PyObject *kwds);
    
static PyMethodDef v8___Array_methods[] = {
             
            {"Length",  (PyCFunction)v8___Array__Length, METH_VARARGS| METH_KEYWORDS, ""},
            {"CloneElementAt",  (PyCFunction)v8___Array__CloneElementAt, METH_VARARGS| METH_KEYWORDS, ""},
            {"CloneElementAt",  (PyCFunction)v8___Array__CloneElementAt, METH_VARARGS| METH_KEYWORDS, ""},
            {"New",  (PyCFunction)v8___Array__New,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},
            {"Cast",  (PyCFunction)v8___Array__Cast,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},{NULL}  /* Sentinel */
};

static PyMemberDef v8___Array_members[] =   {
        {NULL}
};
    

static PyTypeObject v8___ArrayType = {
             PyObject_HEAD_INIT(NULL)
             0,                         /*ob_size*/
             "v8.Array",             /*tp_name*/
             sizeof(v8___Array), /*tp_basicsize*/
             0,                         /*tp_itemsize*/
             (destructor)v8___Array_dealloc,                         /*tp_dealloc*/
             0,                         /*tp_print*/
             0,                         /*tp_getattr*/
             0,                         /*tp_setattr*/
             0,                         /*tp_compare*/
             0,                         /*tp_repr*/
             0,                         /*tp_as_number*/
             0,                         /*tp_as_sequence*/
             0,                         /*tp_as_mapping*/
             0,                         /*tp_hash */
             0,                         /*tp_call*/
             0,                         /*tp_str*/
             0,                         /*tp_getattro*/
             0,                         /*tp_setattro*/
             0,                         /*tp_as_buffer*/
             Py_TPFLAGS_DEFAULT| Py_TPFLAGS_BASETYPE,        /*tp_flags*/
             "v8___Array objects",           /* tp_doc */
             0,		               /* tp_traverse */
             0,		               /* tp_clear */
             0,		               /* tp_richcompare */
             0,		               /* tp_weaklistoffset */
             0,		               /* tp_iter */
             0,		               /* tp_iternext */
             v8___Array_methods,             /* tp_methods */
             v8___Array_members,             /* tp_members */
             0,                         /* tp_getset */
             0,                         /* tp_base */
             0,                         /* tp_dict */
             0,                         /* tp_descr_get */
             0,                         /* tp_descr_set */
             0,                         /* tp_dictoffset */
             (initproc)v8___Array_init,      /* tp_init */
             0,                         /* tp_alloc */
             v8___Array_new,                 /* tp_new */
         };

static void
v8___Boolean_dealloc(v8___Boolean* self);

static PyObject *
v8___Boolean_new(PyTypeObject *type, PyObject *args, PyObject *kwds);
static int
v8___Boolean_init(v8___Boolean *self, PyObject *args, PyObject *kwds);
           

static PyObject*
v8___Boolean__Value(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Boolean__Cast(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Boolean__New(PyObject *args, PyObject *kwds);
    
static PyMethodDef v8___Boolean_methods[] = {
             
            {"Value",  (PyCFunction)v8___Boolean__Value, METH_VARARGS| METH_KEYWORDS, ""},
            {"Cast",  (PyCFunction)v8___Boolean__Cast,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},
            {"New",  (PyCFunction)v8___Boolean__New,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},{NULL}  /* Sentinel */
};

static PyMemberDef v8___Boolean_members[] =   {
        {NULL}
};
    

static PyTypeObject v8___BooleanType = {
             PyObject_HEAD_INIT(NULL)
             0,                         /*ob_size*/
             "v8.Boolean",             /*tp_name*/
             sizeof(v8___Boolean), /*tp_basicsize*/
             0,                         /*tp_itemsize*/
             (destructor)v8___Boolean_dealloc,                         /*tp_dealloc*/
             0,                         /*tp_print*/
             0,                         /*tp_getattr*/
             0,                         /*tp_setattr*/
             0,                         /*tp_compare*/
             0,                         /*tp_repr*/
             0,                         /*tp_as_number*/
             0,                         /*tp_as_sequence*/
             0,                         /*tp_as_mapping*/
             0,                         /*tp_hash */
             0,                         /*tp_call*/
             0,                         /*tp_str*/
             0,                         /*tp_getattro*/
             0,                         /*tp_setattro*/
             0,                         /*tp_as_buffer*/
             Py_TPFLAGS_DEFAULT| Py_TPFLAGS_BASETYPE,        /*tp_flags*/
             "v8___Boolean objects",           /* tp_doc */
             0,		               /* tp_traverse */
             0,		               /* tp_clear */
             0,		               /* tp_richcompare */
             0,		               /* tp_weaklistoffset */
             0,		               /* tp_iter */
             0,		               /* tp_iternext */
             v8___Boolean_methods,             /* tp_methods */
             v8___Boolean_members,             /* tp_members */
             0,                         /* tp_getset */
             0,                         /* tp_base */
             0,                         /* tp_dict */
             0,                         /* tp_descr_get */
             0,                         /* tp_descr_set */
             0,                         /* tp_dictoffset */
             (initproc)v8___Boolean_init,      /* tp_init */
             0,                         /* tp_alloc */
             v8___Boolean_new,                 /* tp_new */
         };

static void
v8___BooleanObject_dealloc(v8___BooleanObject* self);

static PyObject *
v8___BooleanObject_new(PyTypeObject *type, PyObject *args, PyObject *kwds);
static int
v8___BooleanObject_init(v8___BooleanObject *self, PyObject *args, PyObject *kwds);
           

static PyObject*
v8___BooleanObject__New(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___BooleanObject__ValueOf(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___BooleanObject__Cast(PyObject *args, PyObject *kwds);
    
static PyMethodDef v8___BooleanObject_methods[] = {
             
            {"New",  (PyCFunction)v8___BooleanObject__New,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},
            {"ValueOf",  (PyCFunction)v8___BooleanObject__ValueOf, METH_VARARGS| METH_KEYWORDS, ""},
            {"Cast",  (PyCFunction)v8___BooleanObject__Cast,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},{NULL}  /* Sentinel */
};

static PyMemberDef v8___BooleanObject_members[] =   {
        {NULL}
};
    

static PyTypeObject v8___BooleanObjectType = {
             PyObject_HEAD_INIT(NULL)
             0,                         /*ob_size*/
             "v8.BooleanObject",             /*tp_name*/
             sizeof(v8___BooleanObject), /*tp_basicsize*/
             0,                         /*tp_itemsize*/
             (destructor)v8___BooleanObject_dealloc,                         /*tp_dealloc*/
             0,                         /*tp_print*/
             0,                         /*tp_getattr*/
             0,                         /*tp_setattr*/
             0,                         /*tp_compare*/
             0,                         /*tp_repr*/
             0,                         /*tp_as_number*/
             0,                         /*tp_as_sequence*/
             0,                         /*tp_as_mapping*/
             0,                         /*tp_hash */
             0,                         /*tp_call*/
             0,                         /*tp_str*/
             0,                         /*tp_getattro*/
             0,                         /*tp_setattro*/
             0,                         /*tp_as_buffer*/
             Py_TPFLAGS_DEFAULT| Py_TPFLAGS_BASETYPE,        /*tp_flags*/
             "v8___BooleanObject objects",           /* tp_doc */
             0,		               /* tp_traverse */
             0,		               /* tp_clear */
             0,		               /* tp_richcompare */
             0,		               /* tp_weaklistoffset */
             0,		               /* tp_iter */
             0,		               /* tp_iternext */
             v8___BooleanObject_methods,             /* tp_methods */
             v8___BooleanObject_members,             /* tp_members */
             0,                         /* tp_getset */
             0,                         /* tp_base */
             0,                         /* tp_dict */
             0,                         /* tp_descr_get */
             0,                         /* tp_descr_set */
             0,                         /* tp_dictoffset */
             (initproc)v8___BooleanObject_init,      /* tp_init */
             0,                         /* tp_alloc */
             v8___BooleanObject_new,                 /* tp_new */
         };

static void
v8___Context_dealloc(v8___Context* self);

static PyObject *
v8___Context_new(PyTypeObject *type, PyObject *args, PyObject *kwds);
static int
v8___Context_init(v8___Context *self, PyObject *args, PyObject *kwds);
           

static PyObject*
v8___Context__Global(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Context__DetachGlobal(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Context__New(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Context__SetSecurityToken(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Context__UseDefaultSecurityToken(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Context__GetSecurityToken(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Context__Enter(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Context__Exit(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Context__GetIsolate(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Context__GetEmbedderData(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Context__GetExtrasExportsObject(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Context__SetEmbedderData(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Context__GetAlignedPointerFromEmbedderData(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Context__SetAlignedPointerInEmbedderData(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Context__AllowCodeGenerationFromStrings(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Context__IsCodeGenerationFromStringsAllowed(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Context__SetErrorMessageForCodeGenerationFromStrings(PyObject *args, PyObject *kwds);
    
static PyMethodDef v8___Context_methods[] = {
             
            {"Global",  (PyCFunction)v8___Context__Global, METH_VARARGS| METH_KEYWORDS, ""},
            {"DetachGlobal",  (PyCFunction)v8___Context__DetachGlobal, METH_VARARGS| METH_KEYWORDS, ""},
            {"New",  (PyCFunction)v8___Context__New,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},
            {"SetSecurityToken",  (PyCFunction)v8___Context__SetSecurityToken, METH_VARARGS| METH_KEYWORDS, ""},
            {"UseDefaultSecurityToken",  (PyCFunction)v8___Context__UseDefaultSecurityToken, METH_VARARGS| METH_KEYWORDS, ""},
            {"GetSecurityToken",  (PyCFunction)v8___Context__GetSecurityToken, METH_VARARGS| METH_KEYWORDS, ""},
            {"Enter",  (PyCFunction)v8___Context__Enter, METH_VARARGS| METH_KEYWORDS, ""},
            {"Exit",  (PyCFunction)v8___Context__Exit, METH_VARARGS| METH_KEYWORDS, ""},
            {"GetIsolate",  (PyCFunction)v8___Context__GetIsolate, METH_VARARGS| METH_KEYWORDS, ""},
            {"GetEmbedderData",  (PyCFunction)v8___Context__GetEmbedderData, METH_VARARGS| METH_KEYWORDS, ""},
            {"GetExtrasExportsObject",  (PyCFunction)v8___Context__GetExtrasExportsObject, METH_VARARGS| METH_KEYWORDS, ""},
            {"SetEmbedderData",  (PyCFunction)v8___Context__SetEmbedderData, METH_VARARGS| METH_KEYWORDS, ""},
            {"GetAlignedPointerFromEmbedderData",  (PyCFunction)v8___Context__GetAlignedPointerFromEmbedderData, METH_VARARGS| METH_KEYWORDS, ""},
            {"SetAlignedPointerInEmbedderData",  (PyCFunction)v8___Context__SetAlignedPointerInEmbedderData, METH_VARARGS| METH_KEYWORDS, ""},
            {"AllowCodeGenerationFromStrings",  (PyCFunction)v8___Context__AllowCodeGenerationFromStrings, METH_VARARGS| METH_KEYWORDS, ""},
            {"IsCodeGenerationFromStringsAllowed",  (PyCFunction)v8___Context__IsCodeGenerationFromStringsAllowed, METH_VARARGS| METH_KEYWORDS, ""},
            {"SetErrorMessageForCodeGenerationFromStrings",  (PyCFunction)v8___Context__SetErrorMessageForCodeGenerationFromStrings, METH_VARARGS| METH_KEYWORDS, ""},{NULL}  /* Sentinel */
};

static PyMemberDef v8___Context_members[] =   {
        {NULL}
};
    

static PyTypeObject v8___ContextType = {
             PyObject_HEAD_INIT(NULL)
             0,                         /*ob_size*/
             "v8.Context",             /*tp_name*/
             sizeof(v8___Context), /*tp_basicsize*/
             0,                         /*tp_itemsize*/
             (destructor)v8___Context_dealloc,                         /*tp_dealloc*/
             0,                         /*tp_print*/
             0,                         /*tp_getattr*/
             0,                         /*tp_setattr*/
             0,                         /*tp_compare*/
             0,                         /*tp_repr*/
             0,                         /*tp_as_number*/
             0,                         /*tp_as_sequence*/
             0,                         /*tp_as_mapping*/
             0,                         /*tp_hash */
             0,                         /*tp_call*/
             0,                         /*tp_str*/
             0,                         /*tp_getattro*/
             0,                         /*tp_setattro*/
             0,                         /*tp_as_buffer*/
             Py_TPFLAGS_DEFAULT| Py_TPFLAGS_BASETYPE,        /*tp_flags*/
             "v8___Context objects",           /* tp_doc */
             0,		               /* tp_traverse */
             0,		               /* tp_clear */
             0,		               /* tp_richcompare */
             0,		               /* tp_weaklistoffset */
             0,		               /* tp_iter */
             0,		               /* tp_iternext */
             v8___Context_methods,             /* tp_methods */
             v8___Context_members,             /* tp_members */
             0,                         /* tp_getset */
             0,                         /* tp_base */
             0,                         /* tp_dict */
             0,                         /* tp_descr_get */
             0,                         /* tp_descr_set */
             0,                         /* tp_dictoffset */
             (initproc)v8___Context_init,      /* tp_init */
             0,                         /* tp_alloc */
             v8___Context_new,                 /* tp_new */
         };

static void
v8___CpuProfiler_dealloc(v8___CpuProfiler* self);

static PyObject *
v8___CpuProfiler_new(PyTypeObject *type, PyObject *args, PyObject *kwds);
static int
v8___CpuProfiler_init(v8___CpuProfiler *self, PyObject *args, PyObject *kwds);
           

static PyMethodDef v8___CpuProfiler_methods[] = {
             {NULL}  /* Sentinel */
};

static PyMemberDef v8___CpuProfiler_members[] =   {
        {NULL}
};
    

static PyTypeObject v8___CpuProfilerType = {
             PyObject_HEAD_INIT(NULL)
             0,                         /*ob_size*/
             "v8.CpuProfiler",             /*tp_name*/
             sizeof(v8___CpuProfiler), /*tp_basicsize*/
             0,                         /*tp_itemsize*/
             (destructor)v8___CpuProfiler_dealloc,                         /*tp_dealloc*/
             0,                         /*tp_print*/
             0,                         /*tp_getattr*/
             0,                         /*tp_setattr*/
             0,                         /*tp_compare*/
             0,                         /*tp_repr*/
             0,                         /*tp_as_number*/
             0,                         /*tp_as_sequence*/
             0,                         /*tp_as_mapping*/
             0,                         /*tp_hash */
             0,                         /*tp_call*/
             0,                         /*tp_str*/
             0,                         /*tp_getattro*/
             0,                         /*tp_setattro*/
             0,                         /*tp_as_buffer*/
             Py_TPFLAGS_DEFAULT| Py_TPFLAGS_BASETYPE,        /*tp_flags*/
             "v8___CpuProfiler objects",           /* tp_doc */
             0,		               /* tp_traverse */
             0,		               /* tp_clear */
             0,		               /* tp_richcompare */
             0,		               /* tp_weaklistoffset */
             0,		               /* tp_iter */
             0,		               /* tp_iternext */
             v8___CpuProfiler_methods,             /* tp_methods */
             v8___CpuProfiler_members,             /* tp_members */
             0,                         /* tp_getset */
             0,                         /* tp_base */
             0,                         /* tp_dict */
             0,                         /* tp_descr_get */
             0,                         /* tp_descr_set */
             0,                         /* tp_dictoffset */
             (initproc)v8___CpuProfiler_init,      /* tp_init */
             0,                         /* tp_alloc */
             v8___CpuProfiler_new,                 /* tp_new */
         };

static void
v8___Data_dealloc(v8___Data* self);

static PyObject *
v8___Data_new(PyTypeObject *type, PyObject *args, PyObject *kwds);
static int
v8___Data_init(v8___Data *self, PyObject *args, PyObject *kwds);
           

static PyMethodDef v8___Data_methods[] = {
             {NULL}  /* Sentinel */
};

static PyMemberDef v8___Data_members[] =   {
        {NULL}
};
    

static PyTypeObject v8___DataType = {
             PyObject_HEAD_INIT(NULL)
             0,                         /*ob_size*/
             "v8.Data",             /*tp_name*/
             sizeof(v8___Data), /*tp_basicsize*/
             0,                         /*tp_itemsize*/
             (destructor)v8___Data_dealloc,                         /*tp_dealloc*/
             0,                         /*tp_print*/
             0,                         /*tp_getattr*/
             0,                         /*tp_setattr*/
             0,                         /*tp_compare*/
             0,                         /*tp_repr*/
             0,                         /*tp_as_number*/
             0,                         /*tp_as_sequence*/
             0,                         /*tp_as_mapping*/
             0,                         /*tp_hash */
             0,                         /*tp_call*/
             0,                         /*tp_str*/
             0,                         /*tp_getattro*/
             0,                         /*tp_setattro*/
             0,                         /*tp_as_buffer*/
             Py_TPFLAGS_DEFAULT| Py_TPFLAGS_BASETYPE,        /*tp_flags*/
             "v8___Data objects",           /* tp_doc */
             0,		               /* tp_traverse */
             0,		               /* tp_clear */
             0,		               /* tp_richcompare */
             0,		               /* tp_weaklistoffset */
             0,		               /* tp_iter */
             0,		               /* tp_iternext */
             v8___Data_methods,             /* tp_methods */
             v8___Data_members,             /* tp_members */
             0,                         /* tp_getset */
             0,                         /* tp_base */
             0,                         /* tp_dict */
             0,                         /* tp_descr_get */
             0,                         /* tp_descr_set */
             0,                         /* tp_dictoffset */
             (initproc)v8___Data_init,      /* tp_init */
             0,                         /* tp_alloc */
             v8___Data_new,                 /* tp_new */
         };

static void
v8___Date_dealloc(v8___Date* self);

static PyObject *
v8___Date_new(PyTypeObject *type, PyObject *args, PyObject *kwds);
static int
v8___Date_init(v8___Date *self, PyObject *args, PyObject *kwds);
           

static PyObject*
v8___Date__New(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Date__ValueOf(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Date__Cast(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Date__DateTimeConfigurationChangeNotification(PyObject *args, PyObject *kwds);
    
static PyMethodDef v8___Date_methods[] = {
             
            {"New",  (PyCFunction)v8___Date__New,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},
            {"New",  (PyCFunction)v8___Date__New,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},
            {"ValueOf",  (PyCFunction)v8___Date__ValueOf, METH_VARARGS| METH_KEYWORDS, ""},
            {"Cast",  (PyCFunction)v8___Date__Cast,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},
            {"DateTimeConfigurationChangeNotification",  (PyCFunction)v8___Date__DateTimeConfigurationChangeNotification,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},{NULL}  /* Sentinel */
};

static PyMemberDef v8___Date_members[] =   {
        {NULL}
};
    

static PyTypeObject v8___DateType = {
             PyObject_HEAD_INIT(NULL)
             0,                         /*ob_size*/
             "v8.Date",             /*tp_name*/
             sizeof(v8___Date), /*tp_basicsize*/
             0,                         /*tp_itemsize*/
             (destructor)v8___Date_dealloc,                         /*tp_dealloc*/
             0,                         /*tp_print*/
             0,                         /*tp_getattr*/
             0,                         /*tp_setattr*/
             0,                         /*tp_compare*/
             0,                         /*tp_repr*/
             0,                         /*tp_as_number*/
             0,                         /*tp_as_sequence*/
             0,                         /*tp_as_mapping*/
             0,                         /*tp_hash */
             0,                         /*tp_call*/
             0,                         /*tp_str*/
             0,                         /*tp_getattro*/
             0,                         /*tp_setattro*/
             0,                         /*tp_as_buffer*/
             Py_TPFLAGS_DEFAULT| Py_TPFLAGS_BASETYPE,        /*tp_flags*/
             "v8___Date objects",           /* tp_doc */
             0,		               /* tp_traverse */
             0,		               /* tp_clear */
             0,		               /* tp_richcompare */
             0,		               /* tp_weaklistoffset */
             0,		               /* tp_iter */
             0,		               /* tp_iternext */
             v8___Date_methods,             /* tp_methods */
             v8___Date_members,             /* tp_members */
             0,                         /* tp_getset */
             0,                         /* tp_base */
             0,                         /* tp_dict */
             0,                         /* tp_descr_get */
             0,                         /* tp_descr_set */
             0,                         /* tp_dictoffset */
             (initproc)v8___Date_init,      /* tp_init */
             0,                         /* tp_alloc */
             v8___Date_new,                 /* tp_new */
         };

static void
v8___External_dealloc(v8___External* self);

static PyObject *
v8___External_new(PyTypeObject *type, PyObject *args, PyObject *kwds);
static int
v8___External_init(v8___External *self, PyObject *args, PyObject *kwds);
           

static PyObject*
v8___External__New(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___External__Cast(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___External__Value(PyObject *args, PyObject *kwds);
    
static PyMethodDef v8___External_methods[] = {
             
            {"New",  (PyCFunction)v8___External__New,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},
            {"Cast",  (PyCFunction)v8___External__Cast,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},
            {"Value",  (PyCFunction)v8___External__Value, METH_VARARGS| METH_KEYWORDS, ""},{NULL}  /* Sentinel */
};

static PyMemberDef v8___External_members[] =   {
        {NULL}
};
    

static PyTypeObject v8___ExternalType = {
             PyObject_HEAD_INIT(NULL)
             0,                         /*ob_size*/
             "v8.External",             /*tp_name*/
             sizeof(v8___External), /*tp_basicsize*/
             0,                         /*tp_itemsize*/
             (destructor)v8___External_dealloc,                         /*tp_dealloc*/
             0,                         /*tp_print*/
             0,                         /*tp_getattr*/
             0,                         /*tp_setattr*/
             0,                         /*tp_compare*/
             0,                         /*tp_repr*/
             0,                         /*tp_as_number*/
             0,                         /*tp_as_sequence*/
             0,                         /*tp_as_mapping*/
             0,                         /*tp_hash */
             0,                         /*tp_call*/
             0,                         /*tp_str*/
             0,                         /*tp_getattro*/
             0,                         /*tp_setattro*/
             0,                         /*tp_as_buffer*/
             Py_TPFLAGS_DEFAULT| Py_TPFLAGS_BASETYPE,        /*tp_flags*/
             "v8___External objects",           /* tp_doc */
             0,		               /* tp_traverse */
             0,		               /* tp_clear */
             0,		               /* tp_richcompare */
             0,		               /* tp_weaklistoffset */
             0,		               /* tp_iter */
             0,		               /* tp_iternext */
             v8___External_methods,             /* tp_methods */
             v8___External_members,             /* tp_members */
             0,                         /* tp_getset */
             0,                         /* tp_base */
             0,                         /* tp_dict */
             0,                         /* tp_descr_get */
             0,                         /* tp_descr_set */
             0,                         /* tp_dictoffset */
             (initproc)v8___External_init,      /* tp_init */
             0,                         /* tp_alloc */
             v8___External_new,                 /* tp_new */
         };

static void
v8___Function_dealloc(v8___Function* self);

static PyObject *
v8___Function_new(PyTypeObject *type, PyObject *args, PyObject *kwds);
static int
v8___Function_init(v8___Function *self, PyObject *args, PyObject *kwds);
           

static PyObject*
v8___Function__New(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Function__NewInstance(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Function__Call(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Function__SetName(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Function__GetName(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Function__GetInferredName(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Function__GetDisplayName(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Function__GetScriptLineNumber(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Function__GetScriptColumnNumber(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Function__IsBuiltin(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Function__ScriptId(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Function__GetBoundFunction(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Function__GetScriptOrigin(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Function__Cast(PyObject *args, PyObject *kwds);
    
static PyMethodDef v8___Function_methods[] = {
             
            {"New",  (PyCFunction)v8___Function__New,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},
            {"New",  (PyCFunction)v8___Function__New,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},
            {"NewInstance",  (PyCFunction)v8___Function__NewInstance, METH_VARARGS| METH_KEYWORDS, ""},
            {"NewInstance",  (PyCFunction)v8___Function__NewInstance, METH_VARARGS| METH_KEYWORDS, ""},
            {"NewInstance",  (PyCFunction)v8___Function__NewInstance, METH_VARARGS| METH_KEYWORDS, ""},
            {"NewInstance",  (PyCFunction)v8___Function__NewInstance, METH_VARARGS| METH_KEYWORDS, ""},
            {"Call",  (PyCFunction)v8___Function__Call, METH_VARARGS| METH_KEYWORDS, ""},
            {"Call",  (PyCFunction)v8___Function__Call, METH_VARARGS| METH_KEYWORDS, ""},
            {"SetName",  (PyCFunction)v8___Function__SetName, METH_VARARGS| METH_KEYWORDS, ""},
            {"GetName",  (PyCFunction)v8___Function__GetName, METH_VARARGS| METH_KEYWORDS, ""},
            {"GetInferredName",  (PyCFunction)v8___Function__GetInferredName, METH_VARARGS| METH_KEYWORDS, ""},
            {"GetDisplayName",  (PyCFunction)v8___Function__GetDisplayName, METH_VARARGS| METH_KEYWORDS, ""},
            {"GetScriptLineNumber",  (PyCFunction)v8___Function__GetScriptLineNumber, METH_VARARGS| METH_KEYWORDS, ""},
            {"GetScriptColumnNumber",  (PyCFunction)v8___Function__GetScriptColumnNumber, METH_VARARGS| METH_KEYWORDS, ""},
            {"IsBuiltin",  (PyCFunction)v8___Function__IsBuiltin, METH_VARARGS| METH_KEYWORDS, ""},
            {"ScriptId",  (PyCFunction)v8___Function__ScriptId, METH_VARARGS| METH_KEYWORDS, ""},
            {"GetBoundFunction",  (PyCFunction)v8___Function__GetBoundFunction, METH_VARARGS| METH_KEYWORDS, ""},
            {"GetScriptOrigin",  (PyCFunction)v8___Function__GetScriptOrigin, METH_VARARGS| METH_KEYWORDS, ""},
            {"Cast",  (PyCFunction)v8___Function__Cast,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},{NULL}  /* Sentinel */
};

static PyMemberDef v8___Function_members[] =   {
        {NULL}
};
    

static PyTypeObject v8___FunctionType = {
             PyObject_HEAD_INIT(NULL)
             0,                         /*ob_size*/
             "v8.Function",             /*tp_name*/
             sizeof(v8___Function), /*tp_basicsize*/
             0,                         /*tp_itemsize*/
             (destructor)v8___Function_dealloc,                         /*tp_dealloc*/
             0,                         /*tp_print*/
             0,                         /*tp_getattr*/
             0,                         /*tp_setattr*/
             0,                         /*tp_compare*/
             0,                         /*tp_repr*/
             0,                         /*tp_as_number*/
             0,                         /*tp_as_sequence*/
             0,                         /*tp_as_mapping*/
             0,                         /*tp_hash */
             0,                         /*tp_call*/
             0,                         /*tp_str*/
             0,                         /*tp_getattro*/
             0,                         /*tp_setattro*/
             0,                         /*tp_as_buffer*/
             Py_TPFLAGS_DEFAULT| Py_TPFLAGS_BASETYPE,        /*tp_flags*/
             "v8___Function objects",           /* tp_doc */
             0,		               /* tp_traverse */
             0,		               /* tp_clear */
             0,		               /* tp_richcompare */
             0,		               /* tp_weaklistoffset */
             0,		               /* tp_iter */
             0,		               /* tp_iternext */
             v8___Function_methods,             /* tp_methods */
             v8___Function_members,             /* tp_members */
             0,                         /* tp_getset */
             0,                         /* tp_base */
             0,                         /* tp_dict */
             0,                         /* tp_descr_get */
             0,                         /* tp_descr_set */
             0,                         /* tp_dictoffset */
             (initproc)v8___Function_init,      /* tp_init */
             0,                         /* tp_alloc */
             v8___Function_new,                 /* tp_new */
         };

static void
v8___FunctionTemplate_dealloc(v8___FunctionTemplate* self);

static PyObject *
v8___FunctionTemplate_new(PyTypeObject *type, PyObject *args, PyObject *kwds);
static int
v8___FunctionTemplate_init(v8___FunctionTemplate *self, PyObject *args, PyObject *kwds);
           

static PyObject*
v8___FunctionTemplate__New(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___FunctionTemplate__GetFunction(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___FunctionTemplate__SetCallHandler(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___FunctionTemplate__SetLength(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___FunctionTemplate__InstanceTemplate(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___FunctionTemplate__Inherit(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___FunctionTemplate__PrototypeTemplate(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___FunctionTemplate__SetClassName(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___FunctionTemplate__SetAcceptAnyReceiver(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___FunctionTemplate__SetHiddenPrototype(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___FunctionTemplate__ReadOnlyPrototype(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___FunctionTemplate__RemovePrototype(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___FunctionTemplate__HasInstance(PyObject *args, PyObject *kwds);
    
static PyMethodDef v8___FunctionTemplate_methods[] = {
             
            {"New",  (PyCFunction)v8___FunctionTemplate__New,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},
            {"GetFunction",  (PyCFunction)v8___FunctionTemplate__GetFunction, METH_VARARGS| METH_KEYWORDS, ""},
            {"GetFunction",  (PyCFunction)v8___FunctionTemplate__GetFunction, METH_VARARGS| METH_KEYWORDS, ""},
            {"SetCallHandler",  (PyCFunction)v8___FunctionTemplate__SetCallHandler, METH_VARARGS| METH_KEYWORDS, ""},
            {"SetLength",  (PyCFunction)v8___FunctionTemplate__SetLength, METH_VARARGS| METH_KEYWORDS, ""},
            {"InstanceTemplate",  (PyCFunction)v8___FunctionTemplate__InstanceTemplate, METH_VARARGS| METH_KEYWORDS, ""},
            {"Inherit",  (PyCFunction)v8___FunctionTemplate__Inherit, METH_VARARGS| METH_KEYWORDS, ""},
            {"PrototypeTemplate",  (PyCFunction)v8___FunctionTemplate__PrototypeTemplate, METH_VARARGS| METH_KEYWORDS, ""},
            {"SetClassName",  (PyCFunction)v8___FunctionTemplate__SetClassName, METH_VARARGS| METH_KEYWORDS, ""},
            {"SetAcceptAnyReceiver",  (PyCFunction)v8___FunctionTemplate__SetAcceptAnyReceiver, METH_VARARGS| METH_KEYWORDS, ""},
            {"SetHiddenPrototype",  (PyCFunction)v8___FunctionTemplate__SetHiddenPrototype, METH_VARARGS| METH_KEYWORDS, ""},
            {"ReadOnlyPrototype",  (PyCFunction)v8___FunctionTemplate__ReadOnlyPrototype, METH_VARARGS| METH_KEYWORDS, ""},
            {"RemovePrototype",  (PyCFunction)v8___FunctionTemplate__RemovePrototype, METH_VARARGS| METH_KEYWORDS, ""},
            {"HasInstance",  (PyCFunction)v8___FunctionTemplate__HasInstance, METH_VARARGS| METH_KEYWORDS, ""},{NULL}  /* Sentinel */
};

static PyMemberDef v8___FunctionTemplate_members[] =   {
        {NULL}
};
    

static PyTypeObject v8___FunctionTemplateType = {
             PyObject_HEAD_INIT(NULL)
             0,                         /*ob_size*/
             "v8.FunctionTemplate",             /*tp_name*/
             sizeof(v8___FunctionTemplate), /*tp_basicsize*/
             0,                         /*tp_itemsize*/
             (destructor)v8___FunctionTemplate_dealloc,                         /*tp_dealloc*/
             0,                         /*tp_print*/
             0,                         /*tp_getattr*/
             0,                         /*tp_setattr*/
             0,                         /*tp_compare*/
             0,                         /*tp_repr*/
             0,                         /*tp_as_number*/
             0,                         /*tp_as_sequence*/
             0,                         /*tp_as_mapping*/
             0,                         /*tp_hash */
             0,                         /*tp_call*/
             0,                         /*tp_str*/
             0,                         /*tp_getattro*/
             0,                         /*tp_setattro*/
             0,                         /*tp_as_buffer*/
             Py_TPFLAGS_DEFAULT| Py_TPFLAGS_BASETYPE,        /*tp_flags*/
             "v8___FunctionTemplate objects",           /* tp_doc */
             0,		               /* tp_traverse */
             0,		               /* tp_clear */
             0,		               /* tp_richcompare */
             0,		               /* tp_weaklistoffset */
             0,		               /* tp_iter */
             0,		               /* tp_iternext */
             v8___FunctionTemplate_methods,             /* tp_methods */
             v8___FunctionTemplate_members,             /* tp_members */
             0,                         /* tp_getset */
             0,                         /* tp_base */
             0,                         /* tp_dict */
             0,                         /* tp_descr_get */
             0,                         /* tp_descr_set */
             0,                         /* tp_dictoffset */
             (initproc)v8___FunctionTemplate_init,      /* tp_init */
             0,                         /* tp_alloc */
             v8___FunctionTemplate_new,                 /* tp_new */
         };

static void
v8___HeapProfiler_dealloc(v8___HeapProfiler* self);

static PyObject *
v8___HeapProfiler_new(PyTypeObject *type, PyObject *args, PyObject *kwds);
static int
v8___HeapProfiler_init(v8___HeapProfiler *self, PyObject *args, PyObject *kwds);
           

static PyMethodDef v8___HeapProfiler_methods[] = {
             {NULL}  /* Sentinel */
};

static PyMemberDef v8___HeapProfiler_members[] =   {
        {NULL}
};
    

static PyTypeObject v8___HeapProfilerType = {
             PyObject_HEAD_INIT(NULL)
             0,                         /*ob_size*/
             "v8.HeapProfiler",             /*tp_name*/
             sizeof(v8___HeapProfiler), /*tp_basicsize*/
             0,                         /*tp_itemsize*/
             (destructor)v8___HeapProfiler_dealloc,                         /*tp_dealloc*/
             0,                         /*tp_print*/
             0,                         /*tp_getattr*/
             0,                         /*tp_setattr*/
             0,                         /*tp_compare*/
             0,                         /*tp_repr*/
             0,                         /*tp_as_number*/
             0,                         /*tp_as_sequence*/
             0,                         /*tp_as_mapping*/
             0,                         /*tp_hash */
             0,                         /*tp_call*/
             0,                         /*tp_str*/
             0,                         /*tp_getattro*/
             0,                         /*tp_setattro*/
             0,                         /*tp_as_buffer*/
             Py_TPFLAGS_DEFAULT| Py_TPFLAGS_BASETYPE,        /*tp_flags*/
             "v8___HeapProfiler objects",           /* tp_doc */
             0,		               /* tp_traverse */
             0,		               /* tp_clear */
             0,		               /* tp_richcompare */
             0,		               /* tp_weaklistoffset */
             0,		               /* tp_iter */
             0,		               /* tp_iternext */
             v8___HeapProfiler_methods,             /* tp_methods */
             v8___HeapProfiler_members,             /* tp_members */
             0,                         /* tp_getset */
             0,                         /* tp_base */
             0,                         /* tp_dict */
             0,                         /* tp_descr_get */
             0,                         /* tp_descr_set */
             0,                         /* tp_dictoffset */
             (initproc)v8___HeapProfiler_init,      /* tp_init */
             0,                         /* tp_alloc */
             v8___HeapProfiler_new,                 /* tp_new */
         };

static void
v8___ImplementationUtilities_dealloc(v8___ImplementationUtilities* self);

static PyObject *
v8___ImplementationUtilities_new(PyTypeObject *type, PyObject *args, PyObject *kwds);
static int
v8___ImplementationUtilities_init(v8___ImplementationUtilities *self, PyObject *args, PyObject *kwds);
           

static PyMethodDef v8___ImplementationUtilities_methods[] = {
             {NULL}  /* Sentinel */
};

static PyMemberDef v8___ImplementationUtilities_members[] =   {
        {NULL}
};
    

static PyTypeObject v8___ImplementationUtilitiesType = {
             PyObject_HEAD_INIT(NULL)
             0,                         /*ob_size*/
             "v8.ImplementationUtilities",             /*tp_name*/
             sizeof(v8___ImplementationUtilities), /*tp_basicsize*/
             0,                         /*tp_itemsize*/
             (destructor)v8___ImplementationUtilities_dealloc,                         /*tp_dealloc*/
             0,                         /*tp_print*/
             0,                         /*tp_getattr*/
             0,                         /*tp_setattr*/
             0,                         /*tp_compare*/
             0,                         /*tp_repr*/
             0,                         /*tp_as_number*/
             0,                         /*tp_as_sequence*/
             0,                         /*tp_as_mapping*/
             0,                         /*tp_hash */
             0,                         /*tp_call*/
             0,                         /*tp_str*/
             0,                         /*tp_getattro*/
             0,                         /*tp_setattro*/
             0,                         /*tp_as_buffer*/
             Py_TPFLAGS_DEFAULT| Py_TPFLAGS_BASETYPE,        /*tp_flags*/
             "v8___ImplementationUtilities objects",           /* tp_doc */
             0,		               /* tp_traverse */
             0,		               /* tp_clear */
             0,		               /* tp_richcompare */
             0,		               /* tp_weaklistoffset */
             0,		               /* tp_iter */
             0,		               /* tp_iternext */
             v8___ImplementationUtilities_methods,             /* tp_methods */
             v8___ImplementationUtilities_members,             /* tp_members */
             0,                         /* tp_getset */
             0,                         /* tp_base */
             0,                         /* tp_dict */
             0,                         /* tp_descr_get */
             0,                         /* tp_descr_set */
             0,                         /* tp_dictoffset */
             (initproc)v8___ImplementationUtilities_init,      /* tp_init */
             0,                         /* tp_alloc */
             v8___ImplementationUtilities_new,                 /* tp_new */
         };

static void
v8___Int32_dealloc(v8___Int32* self);

static PyObject *
v8___Int32_new(PyTypeObject *type, PyObject *args, PyObject *kwds);
static int
v8___Int32_init(v8___Int32 *self, PyObject *args, PyObject *kwds);
           

static PyObject*
v8___Int32__Value(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Int32__Cast(PyObject *args, PyObject *kwds);
    
static PyMethodDef v8___Int32_methods[] = {
             
            {"Value",  (PyCFunction)v8___Int32__Value, METH_VARARGS| METH_KEYWORDS, ""},
            {"Cast",  (PyCFunction)v8___Int32__Cast,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},{NULL}  /* Sentinel */
};

static PyMemberDef v8___Int32_members[] =   {
        {NULL}
};
    

static PyTypeObject v8___Int32Type = {
             PyObject_HEAD_INIT(NULL)
             0,                         /*ob_size*/
             "v8.Int32",             /*tp_name*/
             sizeof(v8___Int32), /*tp_basicsize*/
             0,                         /*tp_itemsize*/
             (destructor)v8___Int32_dealloc,                         /*tp_dealloc*/
             0,                         /*tp_print*/
             0,                         /*tp_getattr*/
             0,                         /*tp_setattr*/
             0,                         /*tp_compare*/
             0,                         /*tp_repr*/
             0,                         /*tp_as_number*/
             0,                         /*tp_as_sequence*/
             0,                         /*tp_as_mapping*/
             0,                         /*tp_hash */
             0,                         /*tp_call*/
             0,                         /*tp_str*/
             0,                         /*tp_getattro*/
             0,                         /*tp_setattro*/
             0,                         /*tp_as_buffer*/
             Py_TPFLAGS_DEFAULT| Py_TPFLAGS_BASETYPE,        /*tp_flags*/
             "v8___Int32 objects",           /* tp_doc */
             0,		               /* tp_traverse */
             0,		               /* tp_clear */
             0,		               /* tp_richcompare */
             0,		               /* tp_weaklistoffset */
             0,		               /* tp_iter */
             0,		               /* tp_iternext */
             v8___Int32_methods,             /* tp_methods */
             v8___Int32_members,             /* tp_members */
             0,                         /* tp_getset */
             0,                         /* tp_base */
             0,                         /* tp_dict */
             0,                         /* tp_descr_get */
             0,                         /* tp_descr_set */
             0,                         /* tp_dictoffset */
             (initproc)v8___Int32_init,      /* tp_init */
             0,                         /* tp_alloc */
             v8___Int32_new,                 /* tp_new */
         };

static void
v8___Integer_dealloc(v8___Integer* self);

static PyObject *
v8___Integer_new(PyTypeObject *type, PyObject *args, PyObject *kwds);
static int
v8___Integer_init(v8___Integer *self, PyObject *args, PyObject *kwds);
           

static PyObject*
v8___Integer__New(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Integer__NewFromUnsigned(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Integer__Value(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Integer__Cast(PyObject *args, PyObject *kwds);
    
static PyMethodDef v8___Integer_methods[] = {
             
            {"New",  (PyCFunction)v8___Integer__New,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},
            {"NewFromUnsigned",  (PyCFunction)v8___Integer__NewFromUnsigned,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},
            {"Value",  (PyCFunction)v8___Integer__Value, METH_VARARGS| METH_KEYWORDS, ""},
            {"Cast",  (PyCFunction)v8___Integer__Cast,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},{NULL}  /* Sentinel */
};

static PyMemberDef v8___Integer_members[] =   {
        {NULL}
};
    

static PyTypeObject v8___IntegerType = {
             PyObject_HEAD_INIT(NULL)
             0,                         /*ob_size*/
             "v8.Integer",             /*tp_name*/
             sizeof(v8___Integer), /*tp_basicsize*/
             0,                         /*tp_itemsize*/
             (destructor)v8___Integer_dealloc,                         /*tp_dealloc*/
             0,                         /*tp_print*/
             0,                         /*tp_getattr*/
             0,                         /*tp_setattr*/
             0,                         /*tp_compare*/
             0,                         /*tp_repr*/
             0,                         /*tp_as_number*/
             0,                         /*tp_as_sequence*/
             0,                         /*tp_as_mapping*/
             0,                         /*tp_hash */
             0,                         /*tp_call*/
             0,                         /*tp_str*/
             0,                         /*tp_getattro*/
             0,                         /*tp_setattro*/
             0,                         /*tp_as_buffer*/
             Py_TPFLAGS_DEFAULT| Py_TPFLAGS_BASETYPE,        /*tp_flags*/
             "v8___Integer objects",           /* tp_doc */
             0,		               /* tp_traverse */
             0,		               /* tp_clear */
             0,		               /* tp_richcompare */
             0,		               /* tp_weaklistoffset */
             0,		               /* tp_iter */
             0,		               /* tp_iternext */
             v8___Integer_methods,             /* tp_methods */
             v8___Integer_members,             /* tp_members */
             0,                         /* tp_getset */
             0,                         /* tp_base */
             0,                         /* tp_dict */
             0,                         /* tp_descr_get */
             0,                         /* tp_descr_set */
             0,                         /* tp_dictoffset */
             (initproc)v8___Integer_init,      /* tp_init */
             0,                         /* tp_alloc */
             v8___Integer_new,                 /* tp_new */
         };

static void
v8___Isolate_dealloc(v8___Isolate* self);

static PyObject *
v8___Isolate_new(PyTypeObject *type, PyObject *args, PyObject *kwds);
static int
v8___Isolate_init(v8___Isolate *self, PyObject *args, PyObject *kwds);
           

static PyObject*
v8___Isolate__New(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Isolate__GetCurrent(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Isolate__Enter(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Isolate__Exit(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Isolate__Dispose(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Isolate__SetData(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Isolate__GetData(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Isolate__GetNumberOfDataSlots(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Isolate__GetHeapStatistics(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Isolate__NumberOfHeapSpaces(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Isolate__GetHeapSpaceStatistics(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Isolate__NumberOfTrackedHeapObjectTypes(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Isolate__GetHeapObjectStatisticsAtLastGC(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Isolate__GetStackSample(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Isolate__AdjustAmountOfExternalAllocatedMemory(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Isolate__GetHeapProfiler(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Isolate__GetCpuProfiler(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Isolate__InContext(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Isolate__GetCurrentContext(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Isolate__GetCallingContext(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Isolate__GetEnteredContext(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Isolate__ThrowException(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Isolate__AddGCPrologueCallback(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Isolate__RemoveGCPrologueCallback(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Isolate__AddGCEpilogueCallback(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Isolate__RemoveGCEpilogueCallback(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Isolate__TerminateExecution(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Isolate__IsExecutionTerminating(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Isolate__CancelTerminateExecution(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Isolate__RequestInterrupt(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Isolate__RequestGarbageCollectionForTesting(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Isolate__SetEventLogger(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Isolate__AddCallCompletedCallback(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Isolate__RemoveCallCompletedCallback(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Isolate__SetPromiseRejectCallback(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Isolate__RunMicrotasks(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Isolate__EnqueueMicrotask(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Isolate__SetAutorunMicrotasks(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Isolate__WillAutorunMicrotasks(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Isolate__SetUseCounterCallback(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Isolate__SetCounterFunction(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Isolate__SetCreateHistogramFunction(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Isolate__SetAddHistogramSampleFunction(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Isolate__IdleNotificationDeadline(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Isolate__IdleNotification(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Isolate__LowMemoryNotification(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Isolate__ContextDisposedNotification(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Isolate__SetJitCodeEventHandler(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Isolate__SetStackLimit(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Isolate__GetCodeRange(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Isolate__SetFatalErrorHandler(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Isolate__SetAllowCodeGenerationFromStringsCallback(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Isolate__IsDead(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Isolate__AddMessageListener(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Isolate__RemoveMessageListeners(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Isolate__SetFailedAccessCheckCallbackFunction(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Isolate__SetCaptureStackTraceForUncaughtExceptions(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Isolate__AddMemoryAllocationCallback(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Isolate__RemoveMemoryAllocationCallback(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Isolate__VisitExternalResources(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Isolate__VisitHandlesWithClassIds(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Isolate__VisitHandlesForPartialDependence(PyObject *args, PyObject *kwds);
    
static PyMethodDef v8___Isolate_methods[] = {
             
            {"New",  (PyCFunction)v8___Isolate__New,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},
            {"New",  (PyCFunction)v8___Isolate__New,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},
            {"GetCurrent",  (PyCFunction)v8___Isolate__GetCurrent,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},
            {"Enter",  (PyCFunction)v8___Isolate__Enter, METH_VARARGS| METH_KEYWORDS, ""},
            {"Exit",  (PyCFunction)v8___Isolate__Exit, METH_VARARGS| METH_KEYWORDS, ""},
            {"Dispose",  (PyCFunction)v8___Isolate__Dispose, METH_VARARGS| METH_KEYWORDS, ""},
            {"SetData",  (PyCFunction)v8___Isolate__SetData, METH_VARARGS| METH_KEYWORDS, ""},
            {"GetData",  (PyCFunction)v8___Isolate__GetData, METH_VARARGS| METH_KEYWORDS, ""},
            {"GetNumberOfDataSlots",  (PyCFunction)v8___Isolate__GetNumberOfDataSlots,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},
            {"GetHeapStatistics",  (PyCFunction)v8___Isolate__GetHeapStatistics, METH_VARARGS| METH_KEYWORDS, ""},
            {"NumberOfHeapSpaces",  (PyCFunction)v8___Isolate__NumberOfHeapSpaces, METH_VARARGS| METH_KEYWORDS, ""},
            {"GetHeapSpaceStatistics",  (PyCFunction)v8___Isolate__GetHeapSpaceStatistics, METH_VARARGS| METH_KEYWORDS, ""},
            {"NumberOfTrackedHeapObjectTypes",  (PyCFunction)v8___Isolate__NumberOfTrackedHeapObjectTypes, METH_VARARGS| METH_KEYWORDS, ""},
            {"GetHeapObjectStatisticsAtLastGC",  (PyCFunction)v8___Isolate__GetHeapObjectStatisticsAtLastGC, METH_VARARGS| METH_KEYWORDS, ""},
            {"GetStackSample",  (PyCFunction)v8___Isolate__GetStackSample, METH_VARARGS| METH_KEYWORDS, ""},
            {"AdjustAmountOfExternalAllocatedMemory",  (PyCFunction)v8___Isolate__AdjustAmountOfExternalAllocatedMemory, METH_VARARGS| METH_KEYWORDS, ""},
            {"GetHeapProfiler",  (PyCFunction)v8___Isolate__GetHeapProfiler, METH_VARARGS| METH_KEYWORDS, ""},
            {"GetCpuProfiler",  (PyCFunction)v8___Isolate__GetCpuProfiler, METH_VARARGS| METH_KEYWORDS, ""},
            {"InContext",  (PyCFunction)v8___Isolate__InContext, METH_VARARGS| METH_KEYWORDS, ""},
            {"GetCurrentContext",  (PyCFunction)v8___Isolate__GetCurrentContext, METH_VARARGS| METH_KEYWORDS, ""},
            {"GetCallingContext",  (PyCFunction)v8___Isolate__GetCallingContext, METH_VARARGS| METH_KEYWORDS, ""},
            {"GetEnteredContext",  (PyCFunction)v8___Isolate__GetEnteredContext, METH_VARARGS| METH_KEYWORDS, ""},
            {"ThrowException",  (PyCFunction)v8___Isolate__ThrowException, METH_VARARGS| METH_KEYWORDS, ""},
            {"AddGCPrologueCallback",  (PyCFunction)v8___Isolate__AddGCPrologueCallback, METH_VARARGS| METH_KEYWORDS, ""},
            {"RemoveGCPrologueCallback",  (PyCFunction)v8___Isolate__RemoveGCPrologueCallback, METH_VARARGS| METH_KEYWORDS, ""},
            {"AddGCEpilogueCallback",  (PyCFunction)v8___Isolate__AddGCEpilogueCallback, METH_VARARGS| METH_KEYWORDS, ""},
            {"RemoveGCEpilogueCallback",  (PyCFunction)v8___Isolate__RemoveGCEpilogueCallback, METH_VARARGS| METH_KEYWORDS, ""},
            {"TerminateExecution",  (PyCFunction)v8___Isolate__TerminateExecution, METH_VARARGS| METH_KEYWORDS, ""},
            {"IsExecutionTerminating",  (PyCFunction)v8___Isolate__IsExecutionTerminating, METH_VARARGS| METH_KEYWORDS, ""},
            {"CancelTerminateExecution",  (PyCFunction)v8___Isolate__CancelTerminateExecution, METH_VARARGS| METH_KEYWORDS, ""},
            {"RequestInterrupt",  (PyCFunction)v8___Isolate__RequestInterrupt, METH_VARARGS| METH_KEYWORDS, ""},
            {"RequestGarbageCollectionForTesting",  (PyCFunction)v8___Isolate__RequestGarbageCollectionForTesting, METH_VARARGS| METH_KEYWORDS, ""},
            {"SetEventLogger",  (PyCFunction)v8___Isolate__SetEventLogger, METH_VARARGS| METH_KEYWORDS, ""},
            {"AddCallCompletedCallback",  (PyCFunction)v8___Isolate__AddCallCompletedCallback, METH_VARARGS| METH_KEYWORDS, ""},
            {"RemoveCallCompletedCallback",  (PyCFunction)v8___Isolate__RemoveCallCompletedCallback, METH_VARARGS| METH_KEYWORDS, ""},
            {"SetPromiseRejectCallback",  (PyCFunction)v8___Isolate__SetPromiseRejectCallback, METH_VARARGS| METH_KEYWORDS, ""},
            {"RunMicrotasks",  (PyCFunction)v8___Isolate__RunMicrotasks, METH_VARARGS| METH_KEYWORDS, ""},
            {"EnqueueMicrotask",  (PyCFunction)v8___Isolate__EnqueueMicrotask, METH_VARARGS| METH_KEYWORDS, ""},
            {"EnqueueMicrotask",  (PyCFunction)v8___Isolate__EnqueueMicrotask, METH_VARARGS| METH_KEYWORDS, ""},
            {"SetAutorunMicrotasks",  (PyCFunction)v8___Isolate__SetAutorunMicrotasks, METH_VARARGS| METH_KEYWORDS, ""},
            {"WillAutorunMicrotasks",  (PyCFunction)v8___Isolate__WillAutorunMicrotasks, METH_VARARGS| METH_KEYWORDS, ""},
            {"SetUseCounterCallback",  (PyCFunction)v8___Isolate__SetUseCounterCallback, METH_VARARGS| METH_KEYWORDS, ""},
            {"SetCounterFunction",  (PyCFunction)v8___Isolate__SetCounterFunction, METH_VARARGS| METH_KEYWORDS, ""},
            {"SetCreateHistogramFunction",  (PyCFunction)v8___Isolate__SetCreateHistogramFunction, METH_VARARGS| METH_KEYWORDS, ""},
            {"SetAddHistogramSampleFunction",  (PyCFunction)v8___Isolate__SetAddHistogramSampleFunction, METH_VARARGS| METH_KEYWORDS, ""},
            {"IdleNotificationDeadline",  (PyCFunction)v8___Isolate__IdleNotificationDeadline, METH_VARARGS| METH_KEYWORDS, ""},
            {"IdleNotification",  (PyCFunction)v8___Isolate__IdleNotification, METH_VARARGS| METH_KEYWORDS, ""},
            {"LowMemoryNotification",  (PyCFunction)v8___Isolate__LowMemoryNotification, METH_VARARGS| METH_KEYWORDS, ""},
            {"ContextDisposedNotification",  (PyCFunction)v8___Isolate__ContextDisposedNotification, METH_VARARGS| METH_KEYWORDS, ""},
            {"SetJitCodeEventHandler",  (PyCFunction)v8___Isolate__SetJitCodeEventHandler, METH_VARARGS| METH_KEYWORDS, ""},
            {"SetStackLimit",  (PyCFunction)v8___Isolate__SetStackLimit, METH_VARARGS| METH_KEYWORDS, ""},
            {"GetCodeRange",  (PyCFunction)v8___Isolate__GetCodeRange, METH_VARARGS| METH_KEYWORDS, ""},
            {"SetFatalErrorHandler",  (PyCFunction)v8___Isolate__SetFatalErrorHandler, METH_VARARGS| METH_KEYWORDS, ""},
            {"SetAllowCodeGenerationFromStringsCallback",  (PyCFunction)v8___Isolate__SetAllowCodeGenerationFromStringsCallback, METH_VARARGS| METH_KEYWORDS, ""},
            {"IsDead",  (PyCFunction)v8___Isolate__IsDead, METH_VARARGS| METH_KEYWORDS, ""},
            {"AddMessageListener",  (PyCFunction)v8___Isolate__AddMessageListener, METH_VARARGS| METH_KEYWORDS, ""},
            {"RemoveMessageListeners",  (PyCFunction)v8___Isolate__RemoveMessageListeners, METH_VARARGS| METH_KEYWORDS, ""},
            {"SetFailedAccessCheckCallbackFunction",  (PyCFunction)v8___Isolate__SetFailedAccessCheckCallbackFunction, METH_VARARGS| METH_KEYWORDS, ""},
            {"SetCaptureStackTraceForUncaughtExceptions",  (PyCFunction)v8___Isolate__SetCaptureStackTraceForUncaughtExceptions, METH_VARARGS| METH_KEYWORDS, ""},
            {"AddMemoryAllocationCallback",  (PyCFunction)v8___Isolate__AddMemoryAllocationCallback, METH_VARARGS| METH_KEYWORDS, ""},
            {"RemoveMemoryAllocationCallback",  (PyCFunction)v8___Isolate__RemoveMemoryAllocationCallback, METH_VARARGS| METH_KEYWORDS, ""},
            {"VisitExternalResources",  (PyCFunction)v8___Isolate__VisitExternalResources, METH_VARARGS| METH_KEYWORDS, ""},
            {"VisitHandlesWithClassIds",  (PyCFunction)v8___Isolate__VisitHandlesWithClassIds, METH_VARARGS| METH_KEYWORDS, ""},
            {"VisitHandlesForPartialDependence",  (PyCFunction)v8___Isolate__VisitHandlesForPartialDependence, METH_VARARGS| METH_KEYWORDS, ""},{NULL}  /* Sentinel */
};

static PyMemberDef v8___Isolate_members[] =   {
        {NULL}
};
    

static PyTypeObject v8___IsolateType = {
             PyObject_HEAD_INIT(NULL)
             0,                         /*ob_size*/
             "v8.Isolate",             /*tp_name*/
             sizeof(v8___Isolate), /*tp_basicsize*/
             0,                         /*tp_itemsize*/
             (destructor)v8___Isolate_dealloc,                         /*tp_dealloc*/
             0,                         /*tp_print*/
             0,                         /*tp_getattr*/
             0,                         /*tp_setattr*/
             0,                         /*tp_compare*/
             0,                         /*tp_repr*/
             0,                         /*tp_as_number*/
             0,                         /*tp_as_sequence*/
             0,                         /*tp_as_mapping*/
             0,                         /*tp_hash */
             0,                         /*tp_call*/
             0,                         /*tp_str*/
             0,                         /*tp_getattro*/
             0,                         /*tp_setattro*/
             0,                         /*tp_as_buffer*/
             Py_TPFLAGS_DEFAULT| Py_TPFLAGS_BASETYPE,        /*tp_flags*/
             "v8___Isolate objects",           /* tp_doc */
             0,		               /* tp_traverse */
             0,		               /* tp_clear */
             0,		               /* tp_richcompare */
             0,		               /* tp_weaklistoffset */
             0,		               /* tp_iter */
             0,		               /* tp_iternext */
             v8___Isolate_methods,             /* tp_methods */
             v8___Isolate_members,             /* tp_members */
             0,                         /* tp_getset */
             0,                         /* tp_base */
             0,                         /* tp_dict */
             0,                         /* tp_descr_get */
             0,                         /* tp_descr_set */
             0,                         /* tp_dictoffset */
             (initproc)v8___Isolate_init,      /* tp_init */
             0,                         /* tp_alloc */
             v8___Isolate_new,                 /* tp_new */
         };

static void
v8___Maybe_int__dealloc(v8___Maybe_int_* self);

static PyObject *
v8___Maybe_int__new(PyTypeObject *type, PyObject *args, PyObject *kwds);
static int
v8___Maybe_int__init(v8___Maybe_int_ *self, PyObject *args, PyObject *kwds);
           

static PyMethodDef v8___Maybe_int__methods[] = {
             {NULL}  /* Sentinel */
};

static PyMemberDef v8___Maybe_int__members[] =   {
        {NULL}
};
    

static PyTypeObject v8___Maybe_int_Type = {
             PyObject_HEAD_INIT(NULL)
             0,                         /*ob_size*/
             "v8.Maybe<int>",             /*tp_name*/
             sizeof(v8___Maybe_int_), /*tp_basicsize*/
             0,                         /*tp_itemsize*/
             (destructor)v8___Maybe_int__dealloc,                         /*tp_dealloc*/
             0,                         /*tp_print*/
             0,                         /*tp_getattr*/
             0,                         /*tp_setattr*/
             0,                         /*tp_compare*/
             0,                         /*tp_repr*/
             0,                         /*tp_as_number*/
             0,                         /*tp_as_sequence*/
             0,                         /*tp_as_mapping*/
             0,                         /*tp_hash */
             0,                         /*tp_call*/
             0,                         /*tp_str*/
             0,                         /*tp_getattro*/
             0,                         /*tp_setattro*/
             0,                         /*tp_as_buffer*/
             Py_TPFLAGS_DEFAULT| Py_TPFLAGS_BASETYPE,        /*tp_flags*/
             "v8___Maybe_int_ objects",           /* tp_doc */
             0,		               /* tp_traverse */
             0,		               /* tp_clear */
             0,		               /* tp_richcompare */
             0,		               /* tp_weaklistoffset */
             0,		               /* tp_iter */
             0,		               /* tp_iternext */
             v8___Maybe_int__methods,             /* tp_methods */
             v8___Maybe_int__members,             /* tp_members */
             0,                         /* tp_getset */
             0,                         /* tp_base */
             0,                         /* tp_dict */
             0,                         /* tp_descr_get */
             0,                         /* tp_descr_set */
             0,                         /* tp_dictoffset */
             (initproc)v8___Maybe_int__init,      /* tp_init */
             0,                         /* tp_alloc */
             v8___Maybe_int__new,                 /* tp_new */
         };

static void
v8___Maybe_bool__dealloc(v8___Maybe_bool_* self);

static PyObject *
v8___Maybe_bool__new(PyTypeObject *type, PyObject *args, PyObject *kwds);
static int
v8___Maybe_bool__init(v8___Maybe_bool_ *self, PyObject *args, PyObject *kwds);
           

static PyMethodDef v8___Maybe_bool__methods[] = {
             {NULL}  /* Sentinel */
};

static PyMemberDef v8___Maybe_bool__members[] =   {
        {NULL}
};
    

static PyTypeObject v8___Maybe_bool_Type = {
             PyObject_HEAD_INIT(NULL)
             0,                         /*ob_size*/
             "v8.Maybe<bool>",             /*tp_name*/
             sizeof(v8___Maybe_bool_), /*tp_basicsize*/
             0,                         /*tp_itemsize*/
             (destructor)v8___Maybe_bool__dealloc,                         /*tp_dealloc*/
             0,                         /*tp_print*/
             0,                         /*tp_getattr*/
             0,                         /*tp_setattr*/
             0,                         /*tp_compare*/
             0,                         /*tp_repr*/
             0,                         /*tp_as_number*/
             0,                         /*tp_as_sequence*/
             0,                         /*tp_as_mapping*/
             0,                         /*tp_hash */
             0,                         /*tp_call*/
             0,                         /*tp_str*/
             0,                         /*tp_getattro*/
             0,                         /*tp_setattro*/
             0,                         /*tp_as_buffer*/
             Py_TPFLAGS_DEFAULT| Py_TPFLAGS_BASETYPE,        /*tp_flags*/
             "v8___Maybe_bool_ objects",           /* tp_doc */
             0,		               /* tp_traverse */
             0,		               /* tp_clear */
             0,		               /* tp_richcompare */
             0,		               /* tp_weaklistoffset */
             0,		               /* tp_iter */
             0,		               /* tp_iternext */
             v8___Maybe_bool__methods,             /* tp_methods */
             v8___Maybe_bool__members,             /* tp_members */
             0,                         /* tp_getset */
             0,                         /* tp_base */
             0,                         /* tp_dict */
             0,                         /* tp_descr_get */
             0,                         /* tp_descr_set */
             0,                         /* tp_dictoffset */
             (initproc)v8___Maybe_bool__init,      /* tp_init */
             0,                         /* tp_alloc */
             v8___Maybe_bool__new,                 /* tp_new */
         };

static void
v8___Maybe_double__dealloc(v8___Maybe_double_* self);

static PyObject *
v8___Maybe_double__new(PyTypeObject *type, PyObject *args, PyObject *kwds);
static int
v8___Maybe_double__init(v8___Maybe_double_ *self, PyObject *args, PyObject *kwds);
           

static PyMethodDef v8___Maybe_double__methods[] = {
             {NULL}  /* Sentinel */
};

static PyMemberDef v8___Maybe_double__members[] =   {
        {NULL}
};
    

static PyTypeObject v8___Maybe_double_Type = {
             PyObject_HEAD_INIT(NULL)
             0,                         /*ob_size*/
             "v8.Maybe<double>",             /*tp_name*/
             sizeof(v8___Maybe_double_), /*tp_basicsize*/
             0,                         /*tp_itemsize*/
             (destructor)v8___Maybe_double__dealloc,                         /*tp_dealloc*/
             0,                         /*tp_print*/
             0,                         /*tp_getattr*/
             0,                         /*tp_setattr*/
             0,                         /*tp_compare*/
             0,                         /*tp_repr*/
             0,                         /*tp_as_number*/
             0,                         /*tp_as_sequence*/
             0,                         /*tp_as_mapping*/
             0,                         /*tp_hash */
             0,                         /*tp_call*/
             0,                         /*tp_str*/
             0,                         /*tp_getattro*/
             0,                         /*tp_setattro*/
             0,                         /*tp_as_buffer*/
             Py_TPFLAGS_DEFAULT| Py_TPFLAGS_BASETYPE,        /*tp_flags*/
             "v8___Maybe_double_ objects",           /* tp_doc */
             0,		               /* tp_traverse */
             0,		               /* tp_clear */
             0,		               /* tp_richcompare */
             0,		               /* tp_weaklistoffset */
             0,		               /* tp_iter */
             0,		               /* tp_iternext */
             v8___Maybe_double__methods,             /* tp_methods */
             v8___Maybe_double__members,             /* tp_members */
             0,                         /* tp_getset */
             0,                         /* tp_base */
             0,                         /* tp_dict */
             0,                         /* tp_descr_get */
             0,                         /* tp_descr_set */
             0,                         /* tp_dictoffset */
             (initproc)v8___Maybe_double__init,      /* tp_init */
             0,                         /* tp_alloc */
             v8___Maybe_double__new,                 /* tp_new */
         };

static void
v8___Maybe_long__dealloc(v8___Maybe_long_* self);

static PyObject *
v8___Maybe_long__new(PyTypeObject *type, PyObject *args, PyObject *kwds);
static int
v8___Maybe_long__init(v8___Maybe_long_ *self, PyObject *args, PyObject *kwds);
           

static PyMethodDef v8___Maybe_long__methods[] = {
             {NULL}  /* Sentinel */
};

static PyMemberDef v8___Maybe_long__members[] =   {
        {NULL}
};
    

static PyTypeObject v8___Maybe_long_Type = {
             PyObject_HEAD_INIT(NULL)
             0,                         /*ob_size*/
             "v8.Maybe<long>",             /*tp_name*/
             sizeof(v8___Maybe_long_), /*tp_basicsize*/
             0,                         /*tp_itemsize*/
             (destructor)v8___Maybe_long__dealloc,                         /*tp_dealloc*/
             0,                         /*tp_print*/
             0,                         /*tp_getattr*/
             0,                         /*tp_setattr*/
             0,                         /*tp_compare*/
             0,                         /*tp_repr*/
             0,                         /*tp_as_number*/
             0,                         /*tp_as_sequence*/
             0,                         /*tp_as_mapping*/
             0,                         /*tp_hash */
             0,                         /*tp_call*/
             0,                         /*tp_str*/
             0,                         /*tp_getattro*/
             0,                         /*tp_setattro*/
             0,                         /*tp_as_buffer*/
             Py_TPFLAGS_DEFAULT| Py_TPFLAGS_BASETYPE,        /*tp_flags*/
             "v8___Maybe_long_ objects",           /* tp_doc */
             0,		               /* tp_traverse */
             0,		               /* tp_clear */
             0,		               /* tp_richcompare */
             0,		               /* tp_weaklistoffset */
             0,		               /* tp_iter */
             0,		               /* tp_iternext */
             v8___Maybe_long__methods,             /* tp_methods */
             v8___Maybe_long__members,             /* tp_members */
             0,                         /* tp_getset */
             0,                         /* tp_base */
             0,                         /* tp_dict */
             0,                         /* tp_descr_get */
             0,                         /* tp_descr_set */
             0,                         /* tp_dictoffset */
             (initproc)v8___Maybe_long__init,      /* tp_init */
             0,                         /* tp_alloc */
             v8___Maybe_long__new,                 /* tp_new */
         };

static void
v8___Maybe_unsigned_int__dealloc(v8___Maybe_unsigned_int_* self);

static PyObject *
v8___Maybe_unsigned_int__new(PyTypeObject *type, PyObject *args, PyObject *kwds);
static int
v8___Maybe_unsigned_int__init(v8___Maybe_unsigned_int_ *self, PyObject *args, PyObject *kwds);
           

static PyMethodDef v8___Maybe_unsigned_int__methods[] = {
             {NULL}  /* Sentinel */
};

static PyMemberDef v8___Maybe_unsigned_int__members[] =   {
        {NULL}
};
    

static PyTypeObject v8___Maybe_unsigned_int_Type = {
             PyObject_HEAD_INIT(NULL)
             0,                         /*ob_size*/
             "v8.Maybe<unsigned int>",             /*tp_name*/
             sizeof(v8___Maybe_unsigned_int_), /*tp_basicsize*/
             0,                         /*tp_itemsize*/
             (destructor)v8___Maybe_unsigned_int__dealloc,                         /*tp_dealloc*/
             0,                         /*tp_print*/
             0,                         /*tp_getattr*/
             0,                         /*tp_setattr*/
             0,                         /*tp_compare*/
             0,                         /*tp_repr*/
             0,                         /*tp_as_number*/
             0,                         /*tp_as_sequence*/
             0,                         /*tp_as_mapping*/
             0,                         /*tp_hash */
             0,                         /*tp_call*/
             0,                         /*tp_str*/
             0,                         /*tp_getattro*/
             0,                         /*tp_setattro*/
             0,                         /*tp_as_buffer*/
             Py_TPFLAGS_DEFAULT| Py_TPFLAGS_BASETYPE,        /*tp_flags*/
             "v8___Maybe_unsigned_int_ objects",           /* tp_doc */
             0,		               /* tp_traverse */
             0,		               /* tp_clear */
             0,		               /* tp_richcompare */
             0,		               /* tp_weaklistoffset */
             0,		               /* tp_iter */
             0,		               /* tp_iternext */
             v8___Maybe_unsigned_int__methods,             /* tp_methods */
             v8___Maybe_unsigned_int__members,             /* tp_members */
             0,                         /* tp_getset */
             0,                         /* tp_base */
             0,                         /* tp_dict */
             0,                         /* tp_descr_get */
             0,                         /* tp_descr_set */
             0,                         /* tp_dictoffset */
             (initproc)v8___Maybe_unsigned_int__init,      /* tp_init */
             0,                         /* tp_alloc */
             v8___Maybe_unsigned_int__new,                 /* tp_new */
         };

static void
v8___Maybe_v8__PropertyAttribute__dealloc(v8___Maybe_v8__PropertyAttribute_* self);

static PyObject *
v8___Maybe_v8__PropertyAttribute__new(PyTypeObject *type, PyObject *args, PyObject *kwds);
static int
v8___Maybe_v8__PropertyAttribute__init(v8___Maybe_v8__PropertyAttribute_ *self, PyObject *args, PyObject *kwds);
           

static PyMethodDef v8___Maybe_v8__PropertyAttribute__methods[] = {
             {NULL}  /* Sentinel */
};

static PyMemberDef v8___Maybe_v8__PropertyAttribute__members[] =   {
        {NULL}
};
    

static PyTypeObject v8___Maybe_v8__PropertyAttribute_Type = {
             PyObject_HEAD_INIT(NULL)
             0,                         /*ob_size*/
             "v8.Maybe<v8::PropertyAttribute>",             /*tp_name*/
             sizeof(v8___Maybe_v8__PropertyAttribute_), /*tp_basicsize*/
             0,                         /*tp_itemsize*/
             (destructor)v8___Maybe_v8__PropertyAttribute__dealloc,                         /*tp_dealloc*/
             0,                         /*tp_print*/
             0,                         /*tp_getattr*/
             0,                         /*tp_setattr*/
             0,                         /*tp_compare*/
             0,                         /*tp_repr*/
             0,                         /*tp_as_number*/
             0,                         /*tp_as_sequence*/
             0,                         /*tp_as_mapping*/
             0,                         /*tp_hash */
             0,                         /*tp_call*/
             0,                         /*tp_str*/
             0,                         /*tp_getattro*/
             0,                         /*tp_setattro*/
             0,                         /*tp_as_buffer*/
             Py_TPFLAGS_DEFAULT| Py_TPFLAGS_BASETYPE,        /*tp_flags*/
             "v8___Maybe_v8__PropertyAttribute_ objects",           /* tp_doc */
             0,		               /* tp_traverse */
             0,		               /* tp_clear */
             0,		               /* tp_richcompare */
             0,		               /* tp_weaklistoffset */
             0,		               /* tp_iter */
             0,		               /* tp_iternext */
             v8___Maybe_v8__PropertyAttribute__methods,             /* tp_methods */
             v8___Maybe_v8__PropertyAttribute__members,             /* tp_members */
             0,                         /* tp_getset */
             0,                         /* tp_base */
             0,                         /* tp_dict */
             0,                         /* tp_descr_get */
             0,                         /* tp_descr_set */
             0,                         /* tp_dictoffset */
             (initproc)v8___Maybe_v8__PropertyAttribute__init,      /* tp_init */
             0,                         /* tp_alloc */
             v8___Maybe_v8__PropertyAttribute__new,                 /* tp_new */
         };

static void
v8___Name_dealloc(v8___Name* self);

static PyObject *
v8___Name_new(PyTypeObject *type, PyObject *args, PyObject *kwds);
static int
v8___Name_init(v8___Name *self, PyObject *args, PyObject *kwds);
           

static PyObject*
v8___Name__GetIdentityHash(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Name__Cast(PyObject *args, PyObject *kwds);
    
static PyMethodDef v8___Name_methods[] = {
             
            {"GetIdentityHash",  (PyCFunction)v8___Name__GetIdentityHash, METH_VARARGS| METH_KEYWORDS, ""},
            {"Cast",  (PyCFunction)v8___Name__Cast,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},{NULL}  /* Sentinel */
};

static PyMemberDef v8___Name_members[] =   {
        {NULL}
};
    

static PyTypeObject v8___NameType = {
             PyObject_HEAD_INIT(NULL)
             0,                         /*ob_size*/
             "v8.Name",             /*tp_name*/
             sizeof(v8___Name), /*tp_basicsize*/
             0,                         /*tp_itemsize*/
             (destructor)v8___Name_dealloc,                         /*tp_dealloc*/
             0,                         /*tp_print*/
             0,                         /*tp_getattr*/
             0,                         /*tp_setattr*/
             0,                         /*tp_compare*/
             0,                         /*tp_repr*/
             0,                         /*tp_as_number*/
             0,                         /*tp_as_sequence*/
             0,                         /*tp_as_mapping*/
             0,                         /*tp_hash */
             0,                         /*tp_call*/
             0,                         /*tp_str*/
             0,                         /*tp_getattro*/
             0,                         /*tp_setattro*/
             0,                         /*tp_as_buffer*/
             Py_TPFLAGS_DEFAULT| Py_TPFLAGS_BASETYPE,        /*tp_flags*/
             "v8___Name objects",           /* tp_doc */
             0,		               /* tp_traverse */
             0,		               /* tp_clear */
             0,		               /* tp_richcompare */
             0,		               /* tp_weaklistoffset */
             0,		               /* tp_iter */
             0,		               /* tp_iternext */
             v8___Name_methods,             /* tp_methods */
             v8___Name_members,             /* tp_members */
             0,                         /* tp_getset */
             0,                         /* tp_base */
             0,                         /* tp_dict */
             0,                         /* tp_descr_get */
             0,                         /* tp_descr_set */
             0,                         /* tp_dictoffset */
             (initproc)v8___Name_init,      /* tp_init */
             0,                         /* tp_alloc */
             v8___Name_new,                 /* tp_new */
         };

static void
v8___Number_dealloc(v8___Number* self);

static PyObject *
v8___Number_new(PyTypeObject *type, PyObject *args, PyObject *kwds);
static int
v8___Number_init(v8___Number *self, PyObject *args, PyObject *kwds);
           

static PyObject*
v8___Number__Value(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Number__New(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Number__Cast(PyObject *args, PyObject *kwds);
    
static PyMethodDef v8___Number_methods[] = {
             
            {"Value",  (PyCFunction)v8___Number__Value, METH_VARARGS| METH_KEYWORDS, ""},
            {"New",  (PyCFunction)v8___Number__New,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},
            {"Cast",  (PyCFunction)v8___Number__Cast,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},{NULL}  /* Sentinel */
};

static PyMemberDef v8___Number_members[] =   {
        {NULL}
};
    

static PyTypeObject v8___NumberType = {
             PyObject_HEAD_INIT(NULL)
             0,                         /*ob_size*/
             "v8.Number",             /*tp_name*/
             sizeof(v8___Number), /*tp_basicsize*/
             0,                         /*tp_itemsize*/
             (destructor)v8___Number_dealloc,                         /*tp_dealloc*/
             0,                         /*tp_print*/
             0,                         /*tp_getattr*/
             0,                         /*tp_setattr*/
             0,                         /*tp_compare*/
             0,                         /*tp_repr*/
             0,                         /*tp_as_number*/
             0,                         /*tp_as_sequence*/
             0,                         /*tp_as_mapping*/
             0,                         /*tp_hash */
             0,                         /*tp_call*/
             0,                         /*tp_str*/
             0,                         /*tp_getattro*/
             0,                         /*tp_setattro*/
             0,                         /*tp_as_buffer*/
             Py_TPFLAGS_DEFAULT| Py_TPFLAGS_BASETYPE,        /*tp_flags*/
             "v8___Number objects",           /* tp_doc */
             0,		               /* tp_traverse */
             0,		               /* tp_clear */
             0,		               /* tp_richcompare */
             0,		               /* tp_weaklistoffset */
             0,		               /* tp_iter */
             0,		               /* tp_iternext */
             v8___Number_methods,             /* tp_methods */
             v8___Number_members,             /* tp_members */
             0,                         /* tp_getset */
             0,                         /* tp_base */
             0,                         /* tp_dict */
             0,                         /* tp_descr_get */
             0,                         /* tp_descr_set */
             0,                         /* tp_dictoffset */
             (initproc)v8___Number_init,      /* tp_init */
             0,                         /* tp_alloc */
             v8___Number_new,                 /* tp_new */
         };

static void
v8___NumberObject_dealloc(v8___NumberObject* self);

static PyObject *
v8___NumberObject_new(PyTypeObject *type, PyObject *args, PyObject *kwds);
static int
v8___NumberObject_init(v8___NumberObject *self, PyObject *args, PyObject *kwds);
           

static PyObject*
v8___NumberObject__New(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___NumberObject__ValueOf(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___NumberObject__Cast(PyObject *args, PyObject *kwds);
    
static PyMethodDef v8___NumberObject_methods[] = {
             
            {"New",  (PyCFunction)v8___NumberObject__New,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},
            {"ValueOf",  (PyCFunction)v8___NumberObject__ValueOf, METH_VARARGS| METH_KEYWORDS, ""},
            {"Cast",  (PyCFunction)v8___NumberObject__Cast,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},{NULL}  /* Sentinel */
};

static PyMemberDef v8___NumberObject_members[] =   {
        {NULL}
};
    

static PyTypeObject v8___NumberObjectType = {
             PyObject_HEAD_INIT(NULL)
             0,                         /*ob_size*/
             "v8.NumberObject",             /*tp_name*/
             sizeof(v8___NumberObject), /*tp_basicsize*/
             0,                         /*tp_itemsize*/
             (destructor)v8___NumberObject_dealloc,                         /*tp_dealloc*/
             0,                         /*tp_print*/
             0,                         /*tp_getattr*/
             0,                         /*tp_setattr*/
             0,                         /*tp_compare*/
             0,                         /*tp_repr*/
             0,                         /*tp_as_number*/
             0,                         /*tp_as_sequence*/
             0,                         /*tp_as_mapping*/
             0,                         /*tp_hash */
             0,                         /*tp_call*/
             0,                         /*tp_str*/
             0,                         /*tp_getattro*/
             0,                         /*tp_setattro*/
             0,                         /*tp_as_buffer*/
             Py_TPFLAGS_DEFAULT| Py_TPFLAGS_BASETYPE,        /*tp_flags*/
             "v8___NumberObject objects",           /* tp_doc */
             0,		               /* tp_traverse */
             0,		               /* tp_clear */
             0,		               /* tp_richcompare */
             0,		               /* tp_weaklistoffset */
             0,		               /* tp_iter */
             0,		               /* tp_iternext */
             v8___NumberObject_methods,             /* tp_methods */
             v8___NumberObject_members,             /* tp_members */
             0,                         /* tp_getset */
             0,                         /* tp_base */
             0,                         /* tp_dict */
             0,                         /* tp_descr_get */
             0,                         /* tp_descr_set */
             0,                         /* tp_dictoffset */
             (initproc)v8___NumberObject_init,      /* tp_init */
             0,                         /* tp_alloc */
             v8___NumberObject_new,                 /* tp_new */
         };

static void
v8___Object_dealloc(v8___Object* self);

static PyObject *
v8___Object_new(PyTypeObject *type, PyObject *args, PyObject *kwds);
static int
v8___Object_init(v8___Object *self, PyObject *args, PyObject *kwds);
           

static PyObject*
v8___Object__Set(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Object__CreateDataProperty(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Object__DefineOwnProperty(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Object__ForceSet(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Object__Get(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Object__GetPropertyAttributes(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Object__GetOwnPropertyDescriptor(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Object__Has(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Object__Delete(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Object__SetAccessor(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Object__SetAccessorProperty(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Object__GetPropertyNames(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Object__GetOwnPropertyNames(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Object__GetPrototype(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Object__SetPrototype(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Object__FindInstanceInPrototypeChain(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Object__ObjectProtoToString(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Object__GetConstructorName(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Object__InternalFieldCount(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Object__GetInternalField(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Object__SetInternalField(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Object__GetAlignedPointerFromInternalField(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Object__SetAlignedPointerInInternalField(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Object__HasOwnProperty(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Object__HasRealNamedProperty(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Object__HasRealIndexedProperty(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Object__HasRealNamedCallbackProperty(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Object__GetRealNamedPropertyInPrototypeChain(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Object__GetRealNamedPropertyAttributesInPrototypeChain(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Object__GetRealNamedProperty(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Object__GetRealNamedPropertyAttributes(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Object__HasNamedLookupInterceptor(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Object__HasIndexedLookupInterceptor(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Object__TurnOnAccessCheck(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Object__GetIdentityHash(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Object__SetHiddenValue(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Object__GetHiddenValue(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Object__DeleteHiddenValue(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Object__Clone(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Object__CreationContext(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Object__IsCallable(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Object__CallAsFunction(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Object__CallAsConstructor(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Object__GetIsolate(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Object__New(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Object__Cast(PyObject *args, PyObject *kwds);
    
static PyMethodDef v8___Object_methods[] = {
             
            {"Set",  (PyCFunction)v8___Object__Set, METH_VARARGS| METH_KEYWORDS, ""},
            {"Set",  (PyCFunction)v8___Object__Set, METH_VARARGS| METH_KEYWORDS, ""},
            {"Set",  (PyCFunction)v8___Object__Set, METH_VARARGS| METH_KEYWORDS, ""},
            {"Set",  (PyCFunction)v8___Object__Set, METH_VARARGS| METH_KEYWORDS, ""},
            {"CreateDataProperty",  (PyCFunction)v8___Object__CreateDataProperty, METH_VARARGS| METH_KEYWORDS, ""},
            {"CreateDataProperty",  (PyCFunction)v8___Object__CreateDataProperty, METH_VARARGS| METH_KEYWORDS, ""},
            {"DefineOwnProperty",  (PyCFunction)v8___Object__DefineOwnProperty, METH_VARARGS| METH_KEYWORDS, ""},
            {"ForceSet",  (PyCFunction)v8___Object__ForceSet, METH_VARARGS| METH_KEYWORDS, ""},
            {"ForceSet",  (PyCFunction)v8___Object__ForceSet, METH_VARARGS| METH_KEYWORDS, ""},
            {"Get",  (PyCFunction)v8___Object__Get, METH_VARARGS| METH_KEYWORDS, ""},
            {"Get",  (PyCFunction)v8___Object__Get, METH_VARARGS| METH_KEYWORDS, ""},
            {"Get",  (PyCFunction)v8___Object__Get, METH_VARARGS| METH_KEYWORDS, ""},
            {"Get",  (PyCFunction)v8___Object__Get, METH_VARARGS| METH_KEYWORDS, ""},
            {"GetPropertyAttributes",  (PyCFunction)v8___Object__GetPropertyAttributes, METH_VARARGS| METH_KEYWORDS, ""},
            {"GetPropertyAttributes",  (PyCFunction)v8___Object__GetPropertyAttributes, METH_VARARGS| METH_KEYWORDS, ""},
            {"GetOwnPropertyDescriptor",  (PyCFunction)v8___Object__GetOwnPropertyDescriptor, METH_VARARGS| METH_KEYWORDS, ""},
            {"GetOwnPropertyDescriptor",  (PyCFunction)v8___Object__GetOwnPropertyDescriptor, METH_VARARGS| METH_KEYWORDS, ""},
            {"Has",  (PyCFunction)v8___Object__Has, METH_VARARGS| METH_KEYWORDS, ""},
            {"Has",  (PyCFunction)v8___Object__Has, METH_VARARGS| METH_KEYWORDS, ""},
            {"Delete",  (PyCFunction)v8___Object__Delete, METH_VARARGS| METH_KEYWORDS, ""},
            {"Delete",  (PyCFunction)v8___Object__Delete, METH_VARARGS| METH_KEYWORDS, ""},
            {"Has",  (PyCFunction)v8___Object__Has, METH_VARARGS| METH_KEYWORDS, ""},
            {"Has",  (PyCFunction)v8___Object__Has, METH_VARARGS| METH_KEYWORDS, ""},
            {"Delete",  (PyCFunction)v8___Object__Delete, METH_VARARGS| METH_KEYWORDS, ""},
            {"Delete",  (PyCFunction)v8___Object__Delete, METH_VARARGS| METH_KEYWORDS, ""},
            {"SetAccessor",  (PyCFunction)v8___Object__SetAccessor, METH_VARARGS| METH_KEYWORDS, ""},
            {"SetAccessor",  (PyCFunction)v8___Object__SetAccessor, METH_VARARGS| METH_KEYWORDS, ""},
            {"SetAccessor",  (PyCFunction)v8___Object__SetAccessor, METH_VARARGS| METH_KEYWORDS, ""},
            {"SetAccessorProperty",  (PyCFunction)v8___Object__SetAccessorProperty, METH_VARARGS| METH_KEYWORDS, ""},
            {"GetPropertyNames",  (PyCFunction)v8___Object__GetPropertyNames, METH_VARARGS| METH_KEYWORDS, ""},
            {"GetPropertyNames",  (PyCFunction)v8___Object__GetPropertyNames, METH_VARARGS| METH_KEYWORDS, ""},
            {"GetOwnPropertyNames",  (PyCFunction)v8___Object__GetOwnPropertyNames, METH_VARARGS| METH_KEYWORDS, ""},
            {"GetOwnPropertyNames",  (PyCFunction)v8___Object__GetOwnPropertyNames, METH_VARARGS| METH_KEYWORDS, ""},
            {"GetPrototype",  (PyCFunction)v8___Object__GetPrototype, METH_VARARGS| METH_KEYWORDS, ""},
            {"SetPrototype",  (PyCFunction)v8___Object__SetPrototype, METH_VARARGS| METH_KEYWORDS, ""},
            {"SetPrototype",  (PyCFunction)v8___Object__SetPrototype, METH_VARARGS| METH_KEYWORDS, ""},
            {"FindInstanceInPrototypeChain",  (PyCFunction)v8___Object__FindInstanceInPrototypeChain, METH_VARARGS| METH_KEYWORDS, ""},
            {"ObjectProtoToString",  (PyCFunction)v8___Object__ObjectProtoToString, METH_VARARGS| METH_KEYWORDS, ""},
            {"ObjectProtoToString",  (PyCFunction)v8___Object__ObjectProtoToString, METH_VARARGS| METH_KEYWORDS, ""},
            {"GetConstructorName",  (PyCFunction)v8___Object__GetConstructorName, METH_VARARGS| METH_KEYWORDS, ""},
            {"InternalFieldCount",  (PyCFunction)v8___Object__InternalFieldCount, METH_VARARGS| METH_KEYWORDS, ""},
            {"InternalFieldCount",  (PyCFunction)v8___Object__InternalFieldCount,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},
            {"GetInternalField",  (PyCFunction)v8___Object__GetInternalField, METH_VARARGS| METH_KEYWORDS, ""},
            {"SetInternalField",  (PyCFunction)v8___Object__SetInternalField, METH_VARARGS| METH_KEYWORDS, ""},
            {"GetAlignedPointerFromInternalField",  (PyCFunction)v8___Object__GetAlignedPointerFromInternalField, METH_VARARGS| METH_KEYWORDS, ""},
            {"GetAlignedPointerFromInternalField",  (PyCFunction)v8___Object__GetAlignedPointerFromInternalField,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},
            {"SetAlignedPointerInInternalField",  (PyCFunction)v8___Object__SetAlignedPointerInInternalField, METH_VARARGS| METH_KEYWORDS, ""},
            {"HasOwnProperty",  (PyCFunction)v8___Object__HasOwnProperty, METH_VARARGS| METH_KEYWORDS, ""},
            {"HasOwnProperty",  (PyCFunction)v8___Object__HasOwnProperty, METH_VARARGS| METH_KEYWORDS, ""},
            {"HasRealNamedProperty",  (PyCFunction)v8___Object__HasRealNamedProperty, METH_VARARGS| METH_KEYWORDS, ""},
            {"HasRealNamedProperty",  (PyCFunction)v8___Object__HasRealNamedProperty, METH_VARARGS| METH_KEYWORDS, ""},
            {"HasRealIndexedProperty",  (PyCFunction)v8___Object__HasRealIndexedProperty, METH_VARARGS| METH_KEYWORDS, ""},
            {"HasRealIndexedProperty",  (PyCFunction)v8___Object__HasRealIndexedProperty, METH_VARARGS| METH_KEYWORDS, ""},
            {"HasRealNamedCallbackProperty",  (PyCFunction)v8___Object__HasRealNamedCallbackProperty, METH_VARARGS| METH_KEYWORDS, ""},
            {"HasRealNamedCallbackProperty",  (PyCFunction)v8___Object__HasRealNamedCallbackProperty, METH_VARARGS| METH_KEYWORDS, ""},
            {"GetRealNamedPropertyInPrototypeChain",  (PyCFunction)v8___Object__GetRealNamedPropertyInPrototypeChain, METH_VARARGS| METH_KEYWORDS, ""},
            {"GetRealNamedPropertyInPrototypeChain",  (PyCFunction)v8___Object__GetRealNamedPropertyInPrototypeChain, METH_VARARGS| METH_KEYWORDS, ""},
            {"GetRealNamedPropertyAttributesInPrototypeChain",  (PyCFunction)v8___Object__GetRealNamedPropertyAttributesInPrototypeChain, METH_VARARGS| METH_KEYWORDS, ""},
            {"GetRealNamedPropertyAttributesInPrototypeChain",  (PyCFunction)v8___Object__GetRealNamedPropertyAttributesInPrototypeChain, METH_VARARGS| METH_KEYWORDS, ""},
            {"GetRealNamedProperty",  (PyCFunction)v8___Object__GetRealNamedProperty, METH_VARARGS| METH_KEYWORDS, ""},
            {"GetRealNamedProperty",  (PyCFunction)v8___Object__GetRealNamedProperty, METH_VARARGS| METH_KEYWORDS, ""},
            {"GetRealNamedPropertyAttributes",  (PyCFunction)v8___Object__GetRealNamedPropertyAttributes, METH_VARARGS| METH_KEYWORDS, ""},
            {"GetRealNamedPropertyAttributes",  (PyCFunction)v8___Object__GetRealNamedPropertyAttributes, METH_VARARGS| METH_KEYWORDS, ""},
            {"HasNamedLookupInterceptor",  (PyCFunction)v8___Object__HasNamedLookupInterceptor, METH_VARARGS| METH_KEYWORDS, ""},
            {"HasIndexedLookupInterceptor",  (PyCFunction)v8___Object__HasIndexedLookupInterceptor, METH_VARARGS| METH_KEYWORDS, ""},
            {"TurnOnAccessCheck",  (PyCFunction)v8___Object__TurnOnAccessCheck, METH_VARARGS| METH_KEYWORDS, ""},
            {"GetIdentityHash",  (PyCFunction)v8___Object__GetIdentityHash, METH_VARARGS| METH_KEYWORDS, ""},
            {"SetHiddenValue",  (PyCFunction)v8___Object__SetHiddenValue, METH_VARARGS| METH_KEYWORDS, ""},
            {"GetHiddenValue",  (PyCFunction)v8___Object__GetHiddenValue, METH_VARARGS| METH_KEYWORDS, ""},
            {"DeleteHiddenValue",  (PyCFunction)v8___Object__DeleteHiddenValue, METH_VARARGS| METH_KEYWORDS, ""},
            {"Clone",  (PyCFunction)v8___Object__Clone, METH_VARARGS| METH_KEYWORDS, ""},
            {"CreationContext",  (PyCFunction)v8___Object__CreationContext, METH_VARARGS| METH_KEYWORDS, ""},
            {"IsCallable",  (PyCFunction)v8___Object__IsCallable, METH_VARARGS| METH_KEYWORDS, ""},
            {"CallAsFunction",  (PyCFunction)v8___Object__CallAsFunction, METH_VARARGS| METH_KEYWORDS, ""},
            {"CallAsFunction",  (PyCFunction)v8___Object__CallAsFunction, METH_VARARGS| METH_KEYWORDS, ""},
            {"CallAsConstructor",  (PyCFunction)v8___Object__CallAsConstructor, METH_VARARGS| METH_KEYWORDS, ""},
            {"CallAsConstructor",  (PyCFunction)v8___Object__CallAsConstructor, METH_VARARGS| METH_KEYWORDS, ""},
            {"GetIsolate",  (PyCFunction)v8___Object__GetIsolate, METH_VARARGS| METH_KEYWORDS, ""},
            {"New",  (PyCFunction)v8___Object__New,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},
            {"Cast",  (PyCFunction)v8___Object__Cast,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},{NULL}  /* Sentinel */
};

static PyMemberDef v8___Object_members[] =   {
        {NULL}
};
    

static PyTypeObject v8___ObjectType = {
             PyObject_HEAD_INIT(NULL)
             0,                         /*ob_size*/
             "v8.Object",             /*tp_name*/
             sizeof(v8___Object), /*tp_basicsize*/
             0,                         /*tp_itemsize*/
             (destructor)v8___Object_dealloc,                         /*tp_dealloc*/
             0,                         /*tp_print*/
             0,                         /*tp_getattr*/
             0,                         /*tp_setattr*/
             0,                         /*tp_compare*/
             0,                         /*tp_repr*/
             0,                         /*tp_as_number*/
             0,                         /*tp_as_sequence*/
             0,                         /*tp_as_mapping*/
             0,                         /*tp_hash */
             0,                         /*tp_call*/
             0,                         /*tp_str*/
             0,                         /*tp_getattro*/
             0,                         /*tp_setattro*/
             0,                         /*tp_as_buffer*/
             Py_TPFLAGS_DEFAULT| Py_TPFLAGS_BASETYPE,        /*tp_flags*/
             "v8___Object objects",           /* tp_doc */
             0,		               /* tp_traverse */
             0,		               /* tp_clear */
             0,		               /* tp_richcompare */
             0,		               /* tp_weaklistoffset */
             0,		               /* tp_iter */
             0,		               /* tp_iternext */
             v8___Object_methods,             /* tp_methods */
             v8___Object_members,             /* tp_members */
             0,                         /* tp_getset */
             0,                         /* tp_base */
             0,                         /* tp_dict */
             0,                         /* tp_descr_get */
             0,                         /* tp_descr_set */
             0,                         /* tp_dictoffset */
             (initproc)v8___Object_init,      /* tp_init */
             0,                         /* tp_alloc */
             v8___Object_new,                 /* tp_new */
         };

static void
v8___ObjectOperationDescriptor_dealloc(v8___ObjectOperationDescriptor* self);

static PyObject *
v8___ObjectOperationDescriptor_new(PyTypeObject *type, PyObject *args, PyObject *kwds);
static int
v8___ObjectOperationDescriptor_init(v8___ObjectOperationDescriptor *self, PyObject *args, PyObject *kwds);
           

static PyMethodDef v8___ObjectOperationDescriptor_methods[] = {
             {NULL}  /* Sentinel */
};

static PyMemberDef v8___ObjectOperationDescriptor_members[] =   {
        {NULL}
};
    

static PyTypeObject v8___ObjectOperationDescriptorType = {
             PyObject_HEAD_INIT(NULL)
             0,                         /*ob_size*/
             "v8.ObjectOperationDescriptor",             /*tp_name*/
             sizeof(v8___ObjectOperationDescriptor), /*tp_basicsize*/
             0,                         /*tp_itemsize*/
             (destructor)v8___ObjectOperationDescriptor_dealloc,                         /*tp_dealloc*/
             0,                         /*tp_print*/
             0,                         /*tp_getattr*/
             0,                         /*tp_setattr*/
             0,                         /*tp_compare*/
             0,                         /*tp_repr*/
             0,                         /*tp_as_number*/
             0,                         /*tp_as_sequence*/
             0,                         /*tp_as_mapping*/
             0,                         /*tp_hash */
             0,                         /*tp_call*/
             0,                         /*tp_str*/
             0,                         /*tp_getattro*/
             0,                         /*tp_setattro*/
             0,                         /*tp_as_buffer*/
             Py_TPFLAGS_DEFAULT| Py_TPFLAGS_BASETYPE,        /*tp_flags*/
             "v8___ObjectOperationDescriptor objects",           /* tp_doc */
             0,		               /* tp_traverse */
             0,		               /* tp_clear */
             0,		               /* tp_richcompare */
             0,		               /* tp_weaklistoffset */
             0,		               /* tp_iter */
             0,		               /* tp_iternext */
             v8___ObjectOperationDescriptor_methods,             /* tp_methods */
             v8___ObjectOperationDescriptor_members,             /* tp_members */
             0,                         /* tp_getset */
             0,                         /* tp_base */
             0,                         /* tp_dict */
             0,                         /* tp_descr_get */
             0,                         /* tp_descr_set */
             0,                         /* tp_dictoffset */
             (initproc)v8___ObjectOperationDescriptor_init,      /* tp_init */
             0,                         /* tp_alloc */
             v8___ObjectOperationDescriptor_new,                 /* tp_new */
         };

static void
v8___ObjectTemplate_dealloc(v8___ObjectTemplate* self);

static PyObject *
v8___ObjectTemplate_new(PyTypeObject *type, PyObject *args, PyObject *kwds);
static int
v8___ObjectTemplate_init(v8___ObjectTemplate *self, PyObject *args, PyObject *kwds);
           

static PyObject*
v8___ObjectTemplate__New(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___ObjectTemplate__NewInstance(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___ObjectTemplate__SetAccessor(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___ObjectTemplate__SetNamedPropertyHandler(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___ObjectTemplate__SetHandler(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___ObjectTemplate__SetIndexedPropertyHandler(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___ObjectTemplate__SetCallAsFunctionHandler(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___ObjectTemplate__MarkAsUndetectable(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___ObjectTemplate__SetAccessCheckCallbacks(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___ObjectTemplate__InternalFieldCount(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___ObjectTemplate__SetInternalFieldCount(PyObject *args, PyObject *kwds);
    
static PyMethodDef v8___ObjectTemplate_methods[] = {
             
            {"New",  (PyCFunction)v8___ObjectTemplate__New,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},
            {"New",  (PyCFunction)v8___ObjectTemplate__New,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},
            {"NewInstance",  (PyCFunction)v8___ObjectTemplate__NewInstance, METH_VARARGS| METH_KEYWORDS, ""},
            {"NewInstance",  (PyCFunction)v8___ObjectTemplate__NewInstance, METH_VARARGS| METH_KEYWORDS, ""},
            {"SetAccessor",  (PyCFunction)v8___ObjectTemplate__SetAccessor, METH_VARARGS| METH_KEYWORDS, ""},
            {"SetAccessor",  (PyCFunction)v8___ObjectTemplate__SetAccessor, METH_VARARGS| METH_KEYWORDS, ""},
            {"SetNamedPropertyHandler",  (PyCFunction)v8___ObjectTemplate__SetNamedPropertyHandler, METH_VARARGS| METH_KEYWORDS, ""},
            {"SetHandler",  (PyCFunction)v8___ObjectTemplate__SetHandler, METH_VARARGS| METH_KEYWORDS, ""},
            {"SetHandler",  (PyCFunction)v8___ObjectTemplate__SetHandler, METH_VARARGS| METH_KEYWORDS, ""},
            {"SetIndexedPropertyHandler",  (PyCFunction)v8___ObjectTemplate__SetIndexedPropertyHandler, METH_VARARGS| METH_KEYWORDS, ""},
            {"SetCallAsFunctionHandler",  (PyCFunction)v8___ObjectTemplate__SetCallAsFunctionHandler, METH_VARARGS| METH_KEYWORDS, ""},
            {"MarkAsUndetectable",  (PyCFunction)v8___ObjectTemplate__MarkAsUndetectable, METH_VARARGS| METH_KEYWORDS, ""},
            {"SetAccessCheckCallbacks",  (PyCFunction)v8___ObjectTemplate__SetAccessCheckCallbacks, METH_VARARGS| METH_KEYWORDS, ""},
            {"InternalFieldCount",  (PyCFunction)v8___ObjectTemplate__InternalFieldCount, METH_VARARGS| METH_KEYWORDS, ""},
            {"SetInternalFieldCount",  (PyCFunction)v8___ObjectTemplate__SetInternalFieldCount, METH_VARARGS| METH_KEYWORDS, ""},{NULL}  /* Sentinel */
};

static PyMemberDef v8___ObjectTemplate_members[] =   {
        {NULL}
};
    

static PyTypeObject v8___ObjectTemplateType = {
             PyObject_HEAD_INIT(NULL)
             0,                         /*ob_size*/
             "v8.ObjectTemplate",             /*tp_name*/
             sizeof(v8___ObjectTemplate), /*tp_basicsize*/
             0,                         /*tp_itemsize*/
             (destructor)v8___ObjectTemplate_dealloc,                         /*tp_dealloc*/
             0,                         /*tp_print*/
             0,                         /*tp_getattr*/
             0,                         /*tp_setattr*/
             0,                         /*tp_compare*/
             0,                         /*tp_repr*/
             0,                         /*tp_as_number*/
             0,                         /*tp_as_sequence*/
             0,                         /*tp_as_mapping*/
             0,                         /*tp_hash */
             0,                         /*tp_call*/
             0,                         /*tp_str*/
             0,                         /*tp_getattro*/
             0,                         /*tp_setattro*/
             0,                         /*tp_as_buffer*/
             Py_TPFLAGS_DEFAULT| Py_TPFLAGS_BASETYPE,        /*tp_flags*/
             "v8___ObjectTemplate objects",           /* tp_doc */
             0,		               /* tp_traverse */
             0,		               /* tp_clear */
             0,		               /* tp_richcompare */
             0,		               /* tp_weaklistoffset */
             0,		               /* tp_iter */
             0,		               /* tp_iternext */
             v8___ObjectTemplate_methods,             /* tp_methods */
             v8___ObjectTemplate_members,             /* tp_members */
             0,                         /* tp_getset */
             0,                         /* tp_base */
             0,                         /* tp_dict */
             0,                         /* tp_descr_get */
             0,                         /* tp_descr_set */
             0,                         /* tp_dictoffset */
             (initproc)v8___ObjectTemplate_init,      /* tp_init */
             0,                         /* tp_alloc */
             v8___ObjectTemplate_new,                 /* tp_new */
         };

static void
v8___Platform_dealloc(v8___Platform* self);

static PyObject *
v8___Platform_new(PyTypeObject *type, PyObject *args, PyObject *kwds);
static int
v8___Platform_init(v8___Platform *self, PyObject *args, PyObject *kwds);
           

static PyMethodDef v8___Platform_methods[] = {
             {NULL}  /* Sentinel */
};

static PyMemberDef v8___Platform_members[] =   {
        {NULL}
};
    

static PyTypeObject v8___PlatformType = {
             PyObject_HEAD_INIT(NULL)
             0,                         /*ob_size*/
             "v8.Platform",             /*tp_name*/
             sizeof(v8___Platform), /*tp_basicsize*/
             0,                         /*tp_itemsize*/
             (destructor)v8___Platform_dealloc,                         /*tp_dealloc*/
             0,                         /*tp_print*/
             0,                         /*tp_getattr*/
             0,                         /*tp_setattr*/
             0,                         /*tp_compare*/
             0,                         /*tp_repr*/
             0,                         /*tp_as_number*/
             0,                         /*tp_as_sequence*/
             0,                         /*tp_as_mapping*/
             0,                         /*tp_hash */
             0,                         /*tp_call*/
             0,                         /*tp_str*/
             0,                         /*tp_getattro*/
             0,                         /*tp_setattro*/
             0,                         /*tp_as_buffer*/
             Py_TPFLAGS_DEFAULT| Py_TPFLAGS_BASETYPE,        /*tp_flags*/
             "v8___Platform objects",           /* tp_doc */
             0,		               /* tp_traverse */
             0,		               /* tp_clear */
             0,		               /* tp_richcompare */
             0,		               /* tp_weaklistoffset */
             0,		               /* tp_iter */
             0,		               /* tp_iternext */
             v8___Platform_methods,             /* tp_methods */
             v8___Platform_members,             /* tp_members */
             0,                         /* tp_getset */
             0,                         /* tp_base */
             0,                         /* tp_dict */
             0,                         /* tp_descr_get */
             0,                         /* tp_descr_set */
             0,                         /* tp_dictoffset */
             (initproc)v8___Platform_init,      /* tp_init */
             0,                         /* tp_alloc */
             v8___Platform_new,                 /* tp_new */
         };

static void
v8___Primitive_dealloc(v8___Primitive* self);

static PyObject *
v8___Primitive_new(PyTypeObject *type, PyObject *args, PyObject *kwds);
static int
v8___Primitive_init(v8___Primitive *self, PyObject *args, PyObject *kwds);
           

static PyMethodDef v8___Primitive_methods[] = {
             {NULL}  /* Sentinel */
};

static PyMemberDef v8___Primitive_members[] =   {
        {NULL}
};
    

static PyTypeObject v8___PrimitiveType = {
             PyObject_HEAD_INIT(NULL)
             0,                         /*ob_size*/
             "v8.Primitive",             /*tp_name*/
             sizeof(v8___Primitive), /*tp_basicsize*/
             0,                         /*tp_itemsize*/
             (destructor)v8___Primitive_dealloc,                         /*tp_dealloc*/
             0,                         /*tp_print*/
             0,                         /*tp_getattr*/
             0,                         /*tp_setattr*/
             0,                         /*tp_compare*/
             0,                         /*tp_repr*/
             0,                         /*tp_as_number*/
             0,                         /*tp_as_sequence*/
             0,                         /*tp_as_mapping*/
             0,                         /*tp_hash */
             0,                         /*tp_call*/
             0,                         /*tp_str*/
             0,                         /*tp_getattro*/
             0,                         /*tp_setattro*/
             0,                         /*tp_as_buffer*/
             Py_TPFLAGS_DEFAULT| Py_TPFLAGS_BASETYPE,        /*tp_flags*/
             "v8___Primitive objects",           /* tp_doc */
             0,		               /* tp_traverse */
             0,		               /* tp_clear */
             0,		               /* tp_richcompare */
             0,		               /* tp_weaklistoffset */
             0,		               /* tp_iter */
             0,		               /* tp_iternext */
             v8___Primitive_methods,             /* tp_methods */
             v8___Primitive_members,             /* tp_members */
             0,                         /* tp_getset */
             0,                         /* tp_base */
             0,                         /* tp_dict */
             0,                         /* tp_descr_get */
             0,                         /* tp_descr_set */
             0,                         /* tp_dictoffset */
             (initproc)v8___Primitive_init,      /* tp_init */
             0,                         /* tp_alloc */
             v8___Primitive_new,                 /* tp_new */
         };

static void
v8___Promise_dealloc(v8___Promise* self);

static PyObject *
v8___Promise_new(PyTypeObject *type, PyObject *args, PyObject *kwds);
static int
v8___Promise_init(v8___Promise *self, PyObject *args, PyObject *kwds);
           

static PyObject*
v8___Promise__Chain(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Promise__Catch(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Promise__Then(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Promise__HasHandler(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Promise__Cast(PyObject *args, PyObject *kwds);
    
static PyMethodDef v8___Promise_methods[] = {
             
            {"Chain",  (PyCFunction)v8___Promise__Chain, METH_VARARGS| METH_KEYWORDS, ""},
            {"Chain",  (PyCFunction)v8___Promise__Chain, METH_VARARGS| METH_KEYWORDS, ""},
            {"Catch",  (PyCFunction)v8___Promise__Catch, METH_VARARGS| METH_KEYWORDS, ""},
            {"Catch",  (PyCFunction)v8___Promise__Catch, METH_VARARGS| METH_KEYWORDS, ""},
            {"Then",  (PyCFunction)v8___Promise__Then, METH_VARARGS| METH_KEYWORDS, ""},
            {"Then",  (PyCFunction)v8___Promise__Then, METH_VARARGS| METH_KEYWORDS, ""},
            {"HasHandler",  (PyCFunction)v8___Promise__HasHandler, METH_VARARGS| METH_KEYWORDS, ""},
            {"Cast",  (PyCFunction)v8___Promise__Cast,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},{NULL}  /* Sentinel */
};

static PyMemberDef v8___Promise_members[] =   {
        {NULL}
};
    

static PyTypeObject v8___PromiseType = {
             PyObject_HEAD_INIT(NULL)
             0,                         /*ob_size*/
             "v8.Promise",             /*tp_name*/
             sizeof(v8___Promise), /*tp_basicsize*/
             0,                         /*tp_itemsize*/
             (destructor)v8___Promise_dealloc,                         /*tp_dealloc*/
             0,                         /*tp_print*/
             0,                         /*tp_getattr*/
             0,                         /*tp_setattr*/
             0,                         /*tp_compare*/
             0,                         /*tp_repr*/
             0,                         /*tp_as_number*/
             0,                         /*tp_as_sequence*/
             0,                         /*tp_as_mapping*/
             0,                         /*tp_hash */
             0,                         /*tp_call*/
             0,                         /*tp_str*/
             0,                         /*tp_getattro*/
             0,                         /*tp_setattro*/
             0,                         /*tp_as_buffer*/
             Py_TPFLAGS_DEFAULT| Py_TPFLAGS_BASETYPE,        /*tp_flags*/
             "v8___Promise objects",           /* tp_doc */
             0,		               /* tp_traverse */
             0,		               /* tp_clear */
             0,		               /* tp_richcompare */
             0,		               /* tp_weaklistoffset */
             0,		               /* tp_iter */
             0,		               /* tp_iternext */
             v8___Promise_methods,             /* tp_methods */
             v8___Promise_members,             /* tp_members */
             0,                         /* tp_getset */
             0,                         /* tp_base */
             0,                         /* tp_dict */
             0,                         /* tp_descr_get */
             0,                         /* tp_descr_set */
             0,                         /* tp_dictoffset */
             (initproc)v8___Promise_init,      /* tp_init */
             0,                         /* tp_alloc */
             v8___Promise_new,                 /* tp_new */
         };

static void
v8___RawOperationDescriptor_dealloc(v8___RawOperationDescriptor* self);

static PyObject *
v8___RawOperationDescriptor_new(PyTypeObject *type, PyObject *args, PyObject *kwds);
static int
v8___RawOperationDescriptor_init(v8___RawOperationDescriptor *self, PyObject *args, PyObject *kwds);
           

static PyMethodDef v8___RawOperationDescriptor_methods[] = {
             {NULL}  /* Sentinel */
};

static PyMemberDef v8___RawOperationDescriptor_members[] =   {
        {NULL}
};
    

static PyTypeObject v8___RawOperationDescriptorType = {
             PyObject_HEAD_INIT(NULL)
             0,                         /*ob_size*/
             "v8.RawOperationDescriptor",             /*tp_name*/
             sizeof(v8___RawOperationDescriptor), /*tp_basicsize*/
             0,                         /*tp_itemsize*/
             (destructor)v8___RawOperationDescriptor_dealloc,                         /*tp_dealloc*/
             0,                         /*tp_print*/
             0,                         /*tp_getattr*/
             0,                         /*tp_setattr*/
             0,                         /*tp_compare*/
             0,                         /*tp_repr*/
             0,                         /*tp_as_number*/
             0,                         /*tp_as_sequence*/
             0,                         /*tp_as_mapping*/
             0,                         /*tp_hash */
             0,                         /*tp_call*/
             0,                         /*tp_str*/
             0,                         /*tp_getattro*/
             0,                         /*tp_setattro*/
             0,                         /*tp_as_buffer*/
             Py_TPFLAGS_DEFAULT| Py_TPFLAGS_BASETYPE,        /*tp_flags*/
             "v8___RawOperationDescriptor objects",           /* tp_doc */
             0,		               /* tp_traverse */
             0,		               /* tp_clear */
             0,		               /* tp_richcompare */
             0,		               /* tp_weaklistoffset */
             0,		               /* tp_iter */
             0,		               /* tp_iternext */
             v8___RawOperationDescriptor_methods,             /* tp_methods */
             v8___RawOperationDescriptor_members,             /* tp_members */
             0,                         /* tp_getset */
             0,                         /* tp_base */
             0,                         /* tp_dict */
             0,                         /* tp_descr_get */
             0,                         /* tp_descr_set */
             0,                         /* tp_dictoffset */
             (initproc)v8___RawOperationDescriptor_init,      /* tp_init */
             0,                         /* tp_alloc */
             v8___RawOperationDescriptor_new,                 /* tp_new */
         };

static void
v8___Script_dealloc(v8___Script* self);

static PyObject *
v8___Script_new(PyTypeObject *type, PyObject *args, PyObject *kwds);
static int
v8___Script_init(v8___Script *self, PyObject *args, PyObject *kwds);
           

static PyObject*
v8___Script__Compile(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Script__Run(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Script__GetUnboundScript(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Script__GetId(PyObject *args, PyObject *kwds);
    
static PyMethodDef v8___Script_methods[] = {
             
            {"Compile",  (PyCFunction)v8___Script__Compile,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},
            {"Compile",  (PyCFunction)v8___Script__Compile,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},
            {"Compile",  (PyCFunction)v8___Script__Compile,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},
            {"Run",  (PyCFunction)v8___Script__Run, METH_VARARGS| METH_KEYWORDS, ""},
            {"Run",  (PyCFunction)v8___Script__Run, METH_VARARGS| METH_KEYWORDS, ""},
            {"GetUnboundScript",  (PyCFunction)v8___Script__GetUnboundScript, METH_VARARGS| METH_KEYWORDS, ""},
            {"GetId",  (PyCFunction)v8___Script__GetId, METH_VARARGS| METH_KEYWORDS, ""},{NULL}  /* Sentinel */
};

static PyMemberDef v8___Script_members[] =   {
        {NULL}
};
    

static PyTypeObject v8___ScriptType = {
             PyObject_HEAD_INIT(NULL)
             0,                         /*ob_size*/
             "v8.Script",             /*tp_name*/
             sizeof(v8___Script), /*tp_basicsize*/
             0,                         /*tp_itemsize*/
             (destructor)v8___Script_dealloc,                         /*tp_dealloc*/
             0,                         /*tp_print*/
             0,                         /*tp_getattr*/
             0,                         /*tp_setattr*/
             0,                         /*tp_compare*/
             0,                         /*tp_repr*/
             0,                         /*tp_as_number*/
             0,                         /*tp_as_sequence*/
             0,                         /*tp_as_mapping*/
             0,                         /*tp_hash */
             0,                         /*tp_call*/
             0,                         /*tp_str*/
             0,                         /*tp_getattro*/
             0,                         /*tp_setattro*/
             0,                         /*tp_as_buffer*/
             Py_TPFLAGS_DEFAULT| Py_TPFLAGS_BASETYPE,        /*tp_flags*/
             "v8___Script objects",           /* tp_doc */
             0,		               /* tp_traverse */
             0,		               /* tp_clear */
             0,		               /* tp_richcompare */
             0,		               /* tp_weaklistoffset */
             0,		               /* tp_iter */
             0,		               /* tp_iternext */
             v8___Script_methods,             /* tp_methods */
             v8___Script_members,             /* tp_members */
             0,                         /* tp_getset */
             0,                         /* tp_base */
             0,                         /* tp_dict */
             0,                         /* tp_descr_get */
             0,                         /* tp_descr_set */
             0,                         /* tp_dictoffset */
             (initproc)v8___Script_init,      /* tp_init */
             0,                         /* tp_alloc */
             v8___Script_new,                 /* tp_new */
         };

static void
v8___SharedArrayBuffer_dealloc(v8___SharedArrayBuffer* self);

static PyObject *
v8___SharedArrayBuffer_new(PyTypeObject *type, PyObject *args, PyObject *kwds);
static int
v8___SharedArrayBuffer_init(v8___SharedArrayBuffer *self, PyObject *args, PyObject *kwds);
           

static PyObject*
v8___SharedArrayBuffer__ByteLength(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___SharedArrayBuffer__New(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___SharedArrayBuffer__IsExternal(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___SharedArrayBuffer__Externalize(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___SharedArrayBuffer__GetContents(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___SharedArrayBuffer__Cast(PyObject *args, PyObject *kwds);
    
static PyMethodDef v8___SharedArrayBuffer_methods[] = {
             
            {"ByteLength",  (PyCFunction)v8___SharedArrayBuffer__ByteLength, METH_VARARGS| METH_KEYWORDS, ""},
            {"New",  (PyCFunction)v8___SharedArrayBuffer__New,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},
            {"New",  (PyCFunction)v8___SharedArrayBuffer__New,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},
            {"IsExternal",  (PyCFunction)v8___SharedArrayBuffer__IsExternal, METH_VARARGS| METH_KEYWORDS, ""},
            {"Externalize",  (PyCFunction)v8___SharedArrayBuffer__Externalize, METH_VARARGS| METH_KEYWORDS, ""},
            {"GetContents",  (PyCFunction)v8___SharedArrayBuffer__GetContents, METH_VARARGS| METH_KEYWORDS, ""},
            {"Cast",  (PyCFunction)v8___SharedArrayBuffer__Cast,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},{NULL}  /* Sentinel */
};

static PyMemberDef v8___SharedArrayBuffer_members[] =   {
        {NULL}
};
    

static PyTypeObject v8___SharedArrayBufferType = {
             PyObject_HEAD_INIT(NULL)
             0,                         /*ob_size*/
             "v8.SharedArrayBuffer",             /*tp_name*/
             sizeof(v8___SharedArrayBuffer), /*tp_basicsize*/
             0,                         /*tp_itemsize*/
             (destructor)v8___SharedArrayBuffer_dealloc,                         /*tp_dealloc*/
             0,                         /*tp_print*/
             0,                         /*tp_getattr*/
             0,                         /*tp_setattr*/
             0,                         /*tp_compare*/
             0,                         /*tp_repr*/
             0,                         /*tp_as_number*/
             0,                         /*tp_as_sequence*/
             0,                         /*tp_as_mapping*/
             0,                         /*tp_hash */
             0,                         /*tp_call*/
             0,                         /*tp_str*/
             0,                         /*tp_getattro*/
             0,                         /*tp_setattro*/
             0,                         /*tp_as_buffer*/
             Py_TPFLAGS_DEFAULT| Py_TPFLAGS_BASETYPE,        /*tp_flags*/
             "v8___SharedArrayBuffer objects",           /* tp_doc */
             0,		               /* tp_traverse */
             0,		               /* tp_clear */
             0,		               /* tp_richcompare */
             0,		               /* tp_weaklistoffset */
             0,		               /* tp_iter */
             0,		               /* tp_iternext */
             v8___SharedArrayBuffer_methods,             /* tp_methods */
             v8___SharedArrayBuffer_members,             /* tp_members */
             0,                         /* tp_getset */
             0,                         /* tp_base */
             0,                         /* tp_dict */
             0,                         /* tp_descr_get */
             0,                         /* tp_descr_set */
             0,                         /* tp_dictoffset */
             (initproc)v8___SharedArrayBuffer_init,      /* tp_init */
             0,                         /* tp_alloc */
             v8___SharedArrayBuffer_new,                 /* tp_new */
         };

static void
v8___Signature_dealloc(v8___Signature* self);

static PyObject *
v8___Signature_new(PyTypeObject *type, PyObject *args, PyObject *kwds);
static int
v8___Signature_init(v8___Signature *self, PyObject *args, PyObject *kwds);
           

static PyObject*
v8___Signature__New(PyObject *args, PyObject *kwds);
    
static PyMethodDef v8___Signature_methods[] = {
             
            {"New",  (PyCFunction)v8___Signature__New,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},{NULL}  /* Sentinel */
};

static PyMemberDef v8___Signature_members[] =   {
        {NULL}
};
    

static PyTypeObject v8___SignatureType = {
             PyObject_HEAD_INIT(NULL)
             0,                         /*ob_size*/
             "v8.Signature",             /*tp_name*/
             sizeof(v8___Signature), /*tp_basicsize*/
             0,                         /*tp_itemsize*/
             (destructor)v8___Signature_dealloc,                         /*tp_dealloc*/
             0,                         /*tp_print*/
             0,                         /*tp_getattr*/
             0,                         /*tp_setattr*/
             0,                         /*tp_compare*/
             0,                         /*tp_repr*/
             0,                         /*tp_as_number*/
             0,                         /*tp_as_sequence*/
             0,                         /*tp_as_mapping*/
             0,                         /*tp_hash */
             0,                         /*tp_call*/
             0,                         /*tp_str*/
             0,                         /*tp_getattro*/
             0,                         /*tp_setattro*/
             0,                         /*tp_as_buffer*/
             Py_TPFLAGS_DEFAULT| Py_TPFLAGS_BASETYPE,        /*tp_flags*/
             "v8___Signature objects",           /* tp_doc */
             0,		               /* tp_traverse */
             0,		               /* tp_clear */
             0,		               /* tp_richcompare */
             0,		               /* tp_weaklistoffset */
             0,		               /* tp_iter */
             0,		               /* tp_iternext */
             v8___Signature_methods,             /* tp_methods */
             v8___Signature_members,             /* tp_members */
             0,                         /* tp_getset */
             0,                         /* tp_base */
             0,                         /* tp_dict */
             0,                         /* tp_descr_get */
             0,                         /* tp_descr_set */
             0,                         /* tp_dictoffset */
             (initproc)v8___Signature_init,      /* tp_init */
             0,                         /* tp_alloc */
             v8___Signature_new,                 /* tp_new */
         };

static void
v8___StartupData_dealloc(v8___StartupData* self);

static PyObject *
v8___StartupData_new(PyTypeObject *type, PyObject *args, PyObject *kwds);
static int
v8___StartupData_init(v8___StartupData *self, PyObject *args, PyObject *kwds);
           

static PyMethodDef v8___StartupData_methods[] = {
             {NULL}  /* Sentinel */
};

static PyMemberDef v8___StartupData_members[] =   {
        {"data", T_OBJECT_EX, offsetof(v8::StartupData,data), 0, ""},
            {"raw_size", T_OBJECT_EX, offsetof(v8::StartupData,raw_size), 0, ""},
            {NULL}
};
    

static PyTypeObject v8___StartupDataType = {
             PyObject_HEAD_INIT(NULL)
             0,                         /*ob_size*/
             "v8.StartupData",             /*tp_name*/
             sizeof(v8___StartupData), /*tp_basicsize*/
             0,                         /*tp_itemsize*/
             (destructor)v8___StartupData_dealloc,                         /*tp_dealloc*/
             0,                         /*tp_print*/
             0,                         /*tp_getattr*/
             0,                         /*tp_setattr*/
             0,                         /*tp_compare*/
             0,                         /*tp_repr*/
             0,                         /*tp_as_number*/
             0,                         /*tp_as_sequence*/
             0,                         /*tp_as_mapping*/
             0,                         /*tp_hash */
             0,                         /*tp_call*/
             0,                         /*tp_str*/
             0,                         /*tp_getattro*/
             0,                         /*tp_setattro*/
             0,                         /*tp_as_buffer*/
             Py_TPFLAGS_DEFAULT| Py_TPFLAGS_BASETYPE,        /*tp_flags*/
             "v8___StartupData objects",           /* tp_doc */
             0,		               /* tp_traverse */
             0,		               /* tp_clear */
             0,		               /* tp_richcompare */
             0,		               /* tp_weaklistoffset */
             0,		               /* tp_iter */
             0,		               /* tp_iternext */
             v8___StartupData_methods,             /* tp_methods */
             v8___StartupData_members,             /* tp_members */
             0,                         /* tp_getset */
             0,                         /* tp_base */
             0,                         /* tp_dict */
             0,                         /* tp_descr_get */
             0,                         /* tp_descr_set */
             0,                         /* tp_dictoffset */
             (initproc)v8___StartupData_init,      /* tp_init */
             0,                         /* tp_alloc */
             v8___StartupData_new,                 /* tp_new */
         };

static void
v8___StackFrame_dealloc(v8___StackFrame* self);

static PyObject *
v8___StackFrame_new(PyTypeObject *type, PyObject *args, PyObject *kwds);
static int
v8___StackFrame_init(v8___StackFrame *self, PyObject *args, PyObject *kwds);
           

static PyObject*
v8___StackFrame__GetLineNumber(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___StackFrame__GetColumn(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___StackFrame__GetScriptId(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___StackFrame__GetScriptName(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___StackFrame__GetScriptNameOrSourceURL(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___StackFrame__GetFunctionName(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___StackFrame__IsEval(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___StackFrame__IsConstructor(PyObject *args, PyObject *kwds);
    
static PyMethodDef v8___StackFrame_methods[] = {
             
            {"GetLineNumber",  (PyCFunction)v8___StackFrame__GetLineNumber, METH_VARARGS| METH_KEYWORDS, ""},
            {"GetColumn",  (PyCFunction)v8___StackFrame__GetColumn, METH_VARARGS| METH_KEYWORDS, ""},
            {"GetScriptId",  (PyCFunction)v8___StackFrame__GetScriptId, METH_VARARGS| METH_KEYWORDS, ""},
            {"GetScriptName",  (PyCFunction)v8___StackFrame__GetScriptName, METH_VARARGS| METH_KEYWORDS, ""},
            {"GetScriptNameOrSourceURL",  (PyCFunction)v8___StackFrame__GetScriptNameOrSourceURL, METH_VARARGS| METH_KEYWORDS, ""},
            {"GetFunctionName",  (PyCFunction)v8___StackFrame__GetFunctionName, METH_VARARGS| METH_KEYWORDS, ""},
            {"IsEval",  (PyCFunction)v8___StackFrame__IsEval, METH_VARARGS| METH_KEYWORDS, ""},
            {"IsConstructor",  (PyCFunction)v8___StackFrame__IsConstructor, METH_VARARGS| METH_KEYWORDS, ""},{NULL}  /* Sentinel */
};

static PyMemberDef v8___StackFrame_members[] =   {
        {NULL}
};
    

static PyTypeObject v8___StackFrameType = {
             PyObject_HEAD_INIT(NULL)
             0,                         /*ob_size*/
             "v8.StackFrame",             /*tp_name*/
             sizeof(v8___StackFrame), /*tp_basicsize*/
             0,                         /*tp_itemsize*/
             (destructor)v8___StackFrame_dealloc,                         /*tp_dealloc*/
             0,                         /*tp_print*/
             0,                         /*tp_getattr*/
             0,                         /*tp_setattr*/
             0,                         /*tp_compare*/
             0,                         /*tp_repr*/
             0,                         /*tp_as_number*/
             0,                         /*tp_as_sequence*/
             0,                         /*tp_as_mapping*/
             0,                         /*tp_hash */
             0,                         /*tp_call*/
             0,                         /*tp_str*/
             0,                         /*tp_getattro*/
             0,                         /*tp_setattro*/
             0,                         /*tp_as_buffer*/
             Py_TPFLAGS_DEFAULT| Py_TPFLAGS_BASETYPE,        /*tp_flags*/
             "v8___StackFrame objects",           /* tp_doc */
             0,		               /* tp_traverse */
             0,		               /* tp_clear */
             0,		               /* tp_richcompare */
             0,		               /* tp_weaklistoffset */
             0,		               /* tp_iter */
             0,		               /* tp_iternext */
             v8___StackFrame_methods,             /* tp_methods */
             v8___StackFrame_members,             /* tp_members */
             0,                         /* tp_getset */
             0,                         /* tp_base */
             0,                         /* tp_dict */
             0,                         /* tp_descr_get */
             0,                         /* tp_descr_set */
             0,                         /* tp_dictoffset */
             (initproc)v8___StackFrame_init,      /* tp_init */
             0,                         /* tp_alloc */
             v8___StackFrame_new,                 /* tp_new */
         };

static void
v8___StackTrace_dealloc(v8___StackTrace* self);

static PyObject *
v8___StackTrace_new(PyTypeObject *type, PyObject *args, PyObject *kwds);
static int
v8___StackTrace_init(v8___StackTrace *self, PyObject *args, PyObject *kwds);
           

static PyObject*
v8___StackTrace__GetFrame(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___StackTrace__GetFrameCount(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___StackTrace__AsArray(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___StackTrace__CurrentStackTrace(PyObject *args, PyObject *kwds);
    
static PyMethodDef v8___StackTrace_methods[] = {
             
            {"GetFrame",  (PyCFunction)v8___StackTrace__GetFrame, METH_VARARGS| METH_KEYWORDS, ""},
            {"GetFrameCount",  (PyCFunction)v8___StackTrace__GetFrameCount, METH_VARARGS| METH_KEYWORDS, ""},
            {"AsArray",  (PyCFunction)v8___StackTrace__AsArray, METH_VARARGS| METH_KEYWORDS, ""},
            {"CurrentStackTrace",  (PyCFunction)v8___StackTrace__CurrentStackTrace,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},{NULL}  /* Sentinel */
};

static PyMemberDef v8___StackTrace_members[] =   {
        {NULL}
};
    

static PyTypeObject v8___StackTraceType = {
             PyObject_HEAD_INIT(NULL)
             0,                         /*ob_size*/
             "v8.StackTrace",             /*tp_name*/
             sizeof(v8___StackTrace), /*tp_basicsize*/
             0,                         /*tp_itemsize*/
             (destructor)v8___StackTrace_dealloc,                         /*tp_dealloc*/
             0,                         /*tp_print*/
             0,                         /*tp_getattr*/
             0,                         /*tp_setattr*/
             0,                         /*tp_compare*/
             0,                         /*tp_repr*/
             0,                         /*tp_as_number*/
             0,                         /*tp_as_sequence*/
             0,                         /*tp_as_mapping*/
             0,                         /*tp_hash */
             0,                         /*tp_call*/
             0,                         /*tp_str*/
             0,                         /*tp_getattro*/
             0,                         /*tp_setattro*/
             0,                         /*tp_as_buffer*/
             Py_TPFLAGS_DEFAULT| Py_TPFLAGS_BASETYPE,        /*tp_flags*/
             "v8___StackTrace objects",           /* tp_doc */
             0,		               /* tp_traverse */
             0,		               /* tp_clear */
             0,		               /* tp_richcompare */
             0,		               /* tp_weaklistoffset */
             0,		               /* tp_iter */
             0,		               /* tp_iternext */
             v8___StackTrace_methods,             /* tp_methods */
             v8___StackTrace_members,             /* tp_members */
             0,                         /* tp_getset */
             0,                         /* tp_base */
             0,                         /* tp_dict */
             0,                         /* tp_descr_get */
             0,                         /* tp_descr_set */
             0,                         /* tp_dictoffset */
             (initproc)v8___StackTrace_init,      /* tp_init */
             0,                         /* tp_alloc */
             v8___StackTrace_new,                 /* tp_new */
         };

static void
v8___String_dealloc(v8___String* self);

static PyObject *
v8___String_new(PyTypeObject *type, PyObject *args, PyObject *kwds);
static int
v8___String_init(v8___String *self, PyObject *args, PyObject *kwds);
           

static PyObject*
v8___String__Length(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___String__Utf8Length(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___String__IsOneByte(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___String__ContainsOnlyOneByte(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___String__Write(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___String__WriteOneByte(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___String__WriteUtf8(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___String__Empty(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___String__IsExternal(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___String__IsExternalOneByte(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___String__GetExternalStringResourceBase(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___String__GetExternalStringResource(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___String__GetExternalOneByteStringResource(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___String__Cast(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___String__NewFromUtf8(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___String__NewFromOneByte(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___String__NewFromTwoByte(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___String__Concat(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___String__NewExternal(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___String__NewExternalTwoByte(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___String__MakeExternal(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___String__NewExternalOneByte(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___String__CanMakeExternal(PyObject *args, PyObject *kwds);
    
static PyMethodDef v8___String_methods[] = {
             
            {"Length",  (PyCFunction)v8___String__Length, METH_VARARGS| METH_KEYWORDS, ""},
            {"Utf8Length",  (PyCFunction)v8___String__Utf8Length, METH_VARARGS| METH_KEYWORDS, ""},
            {"IsOneByte",  (PyCFunction)v8___String__IsOneByte, METH_VARARGS| METH_KEYWORDS, ""},
            {"ContainsOnlyOneByte",  (PyCFunction)v8___String__ContainsOnlyOneByte, METH_VARARGS| METH_KEYWORDS, ""},
            {"Write",  (PyCFunction)v8___String__Write, METH_VARARGS| METH_KEYWORDS, ""},
            {"WriteOneByte",  (PyCFunction)v8___String__WriteOneByte, METH_VARARGS| METH_KEYWORDS, ""},
            {"WriteUtf8",  (PyCFunction)v8___String__WriteUtf8, METH_VARARGS| METH_KEYWORDS, ""},
            {"Empty",  (PyCFunction)v8___String__Empty,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},
            {"IsExternal",  (PyCFunction)v8___String__IsExternal, METH_VARARGS| METH_KEYWORDS, ""},
            {"IsExternalOneByte",  (PyCFunction)v8___String__IsExternalOneByte, METH_VARARGS| METH_KEYWORDS, ""},
            {"GetExternalStringResourceBase",  (PyCFunction)v8___String__GetExternalStringResourceBase, METH_VARARGS| METH_KEYWORDS, ""},
            {"GetExternalStringResource",  (PyCFunction)v8___String__GetExternalStringResource, METH_VARARGS| METH_KEYWORDS, ""},
            {"GetExternalOneByteStringResource",  (PyCFunction)v8___String__GetExternalOneByteStringResource, METH_VARARGS| METH_KEYWORDS, ""},
            {"Cast",  (PyCFunction)v8___String__Cast,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},
            {"NewFromUtf8",  (PyCFunction)v8___String__NewFromUtf8,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},
            {"NewFromUtf8",  (PyCFunction)v8___String__NewFromUtf8,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},
            {"NewFromOneByte",  (PyCFunction)v8___String__NewFromOneByte,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},
            {"NewFromOneByte",  (PyCFunction)v8___String__NewFromOneByte,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},
            {"NewFromTwoByte",  (PyCFunction)v8___String__NewFromTwoByte,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},
            {"NewFromTwoByte",  (PyCFunction)v8___String__NewFromTwoByte,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},
            {"Concat",  (PyCFunction)v8___String__Concat,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},
            {"NewExternal",  (PyCFunction)v8___String__NewExternal,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},
            {"NewExternalTwoByte",  (PyCFunction)v8___String__NewExternalTwoByte,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},
            {"MakeExternal",  (PyCFunction)v8___String__MakeExternal, METH_VARARGS| METH_KEYWORDS, ""},
            {"NewExternal",  (PyCFunction)v8___String__NewExternal,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},
            {"NewExternalOneByte",  (PyCFunction)v8___String__NewExternalOneByte,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},
            {"MakeExternal",  (PyCFunction)v8___String__MakeExternal, METH_VARARGS| METH_KEYWORDS, ""},
            {"CanMakeExternal",  (PyCFunction)v8___String__CanMakeExternal, METH_VARARGS| METH_KEYWORDS, ""},{NULL}  /* Sentinel */
};

static PyMemberDef v8___String_members[] =   {
        {NULL}
};
    

static PyTypeObject v8___StringType = {
             PyObject_HEAD_INIT(NULL)
             0,                         /*ob_size*/
             "v8.String",             /*tp_name*/
             sizeof(v8___String), /*tp_basicsize*/
             0,                         /*tp_itemsize*/
             (destructor)v8___String_dealloc,                         /*tp_dealloc*/
             0,                         /*tp_print*/
             0,                         /*tp_getattr*/
             0,                         /*tp_setattr*/
             0,                         /*tp_compare*/
             0,                         /*tp_repr*/
             0,                         /*tp_as_number*/
             0,                         /*tp_as_sequence*/
             0,                         /*tp_as_mapping*/
             0,                         /*tp_hash */
             0,                         /*tp_call*/
             0,                         /*tp_str*/
             0,                         /*tp_getattro*/
             0,                         /*tp_setattro*/
             0,                         /*tp_as_buffer*/
             Py_TPFLAGS_DEFAULT| Py_TPFLAGS_BASETYPE,        /*tp_flags*/
             "v8___String objects",           /* tp_doc */
             0,		               /* tp_traverse */
             0,		               /* tp_clear */
             0,		               /* tp_richcompare */
             0,		               /* tp_weaklistoffset */
             0,		               /* tp_iter */
             0,		               /* tp_iternext */
             v8___String_methods,             /* tp_methods */
             v8___String_members,             /* tp_members */
             0,                         /* tp_getset */
             0,                         /* tp_base */
             0,                         /* tp_dict */
             0,                         /* tp_descr_get */
             0,                         /* tp_descr_set */
             0,                         /* tp_dictoffset */
             (initproc)v8___String_init,      /* tp_init */
             0,                         /* tp_alloc */
             v8___String_new,                 /* tp_new */
         };

static void
v8___StringObject_dealloc(v8___StringObject* self);

static PyObject *
v8___StringObject_new(PyTypeObject *type, PyObject *args, PyObject *kwds);
static int
v8___StringObject_init(v8___StringObject *self, PyObject *args, PyObject *kwds);
           

static PyObject*
v8___StringObject__New(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___StringObject__ValueOf(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___StringObject__Cast(PyObject *args, PyObject *kwds);
    
static PyMethodDef v8___StringObject_methods[] = {
             
            {"New",  (PyCFunction)v8___StringObject__New,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},
            {"ValueOf",  (PyCFunction)v8___StringObject__ValueOf, METH_VARARGS| METH_KEYWORDS, ""},
            {"Cast",  (PyCFunction)v8___StringObject__Cast,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},{NULL}  /* Sentinel */
};

static PyMemberDef v8___StringObject_members[] =   {
        {NULL}
};
    

static PyTypeObject v8___StringObjectType = {
             PyObject_HEAD_INIT(NULL)
             0,                         /*ob_size*/
             "v8.StringObject",             /*tp_name*/
             sizeof(v8___StringObject), /*tp_basicsize*/
             0,                         /*tp_itemsize*/
             (destructor)v8___StringObject_dealloc,                         /*tp_dealloc*/
             0,                         /*tp_print*/
             0,                         /*tp_getattr*/
             0,                         /*tp_setattr*/
             0,                         /*tp_compare*/
             0,                         /*tp_repr*/
             0,                         /*tp_as_number*/
             0,                         /*tp_as_sequence*/
             0,                         /*tp_as_mapping*/
             0,                         /*tp_hash */
             0,                         /*tp_call*/
             0,                         /*tp_str*/
             0,                         /*tp_getattro*/
             0,                         /*tp_setattro*/
             0,                         /*tp_as_buffer*/
             Py_TPFLAGS_DEFAULT| Py_TPFLAGS_BASETYPE,        /*tp_flags*/
             "v8___StringObject objects",           /* tp_doc */
             0,		               /* tp_traverse */
             0,		               /* tp_clear */
             0,		               /* tp_richcompare */
             0,		               /* tp_weaklistoffset */
             0,		               /* tp_iter */
             0,		               /* tp_iternext */
             v8___StringObject_methods,             /* tp_methods */
             v8___StringObject_members,             /* tp_members */
             0,                         /* tp_getset */
             0,                         /* tp_base */
             0,                         /* tp_dict */
             0,                         /* tp_descr_get */
             0,                         /* tp_descr_set */
             0,                         /* tp_dictoffset */
             (initproc)v8___StringObject_init,      /* tp_init */
             0,                         /* tp_alloc */
             v8___StringObject_new,                 /* tp_new */
         };

static void
v8___Symbol_dealloc(v8___Symbol* self);

static PyObject *
v8___Symbol_new(PyTypeObject *type, PyObject *args, PyObject *kwds);
static int
v8___Symbol_init(v8___Symbol *self, PyObject *args, PyObject *kwds);
           

static PyObject*
v8___Symbol__Name(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Symbol__New(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Symbol__For(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Symbol__ForApi(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Symbol__GetIterator(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Symbol__GetUnscopables(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Symbol__GetToStringTag(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Symbol__Cast(PyObject *args, PyObject *kwds);
    
static PyMethodDef v8___Symbol_methods[] = {
             
            {"Name",  (PyCFunction)v8___Symbol__Name, METH_VARARGS| METH_KEYWORDS, ""},
            {"New",  (PyCFunction)v8___Symbol__New,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},
            {"For",  (PyCFunction)v8___Symbol__For,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},
            {"ForApi",  (PyCFunction)v8___Symbol__ForApi,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},
            {"GetIterator",  (PyCFunction)v8___Symbol__GetIterator,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},
            {"GetUnscopables",  (PyCFunction)v8___Symbol__GetUnscopables,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},
            {"GetToStringTag",  (PyCFunction)v8___Symbol__GetToStringTag,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},
            {"Cast",  (PyCFunction)v8___Symbol__Cast,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},{NULL}  /* Sentinel */
};

static PyMemberDef v8___Symbol_members[] =   {
        {NULL}
};
    

static PyTypeObject v8___SymbolType = {
             PyObject_HEAD_INIT(NULL)
             0,                         /*ob_size*/
             "v8.Symbol",             /*tp_name*/
             sizeof(v8___Symbol), /*tp_basicsize*/
             0,                         /*tp_itemsize*/
             (destructor)v8___Symbol_dealloc,                         /*tp_dealloc*/
             0,                         /*tp_print*/
             0,                         /*tp_getattr*/
             0,                         /*tp_setattr*/
             0,                         /*tp_compare*/
             0,                         /*tp_repr*/
             0,                         /*tp_as_number*/
             0,                         /*tp_as_sequence*/
             0,                         /*tp_as_mapping*/
             0,                         /*tp_hash */
             0,                         /*tp_call*/
             0,                         /*tp_str*/
             0,                         /*tp_getattro*/
             0,                         /*tp_setattro*/
             0,                         /*tp_as_buffer*/
             Py_TPFLAGS_DEFAULT| Py_TPFLAGS_BASETYPE,        /*tp_flags*/
             "v8___Symbol objects",           /* tp_doc */
             0,		               /* tp_traverse */
             0,		               /* tp_clear */
             0,		               /* tp_richcompare */
             0,		               /* tp_weaklistoffset */
             0,		               /* tp_iter */
             0,		               /* tp_iternext */
             v8___Symbol_methods,             /* tp_methods */
             v8___Symbol_members,             /* tp_members */
             0,                         /* tp_getset */
             0,                         /* tp_base */
             0,                         /* tp_dict */
             0,                         /* tp_descr_get */
             0,                         /* tp_descr_set */
             0,                         /* tp_dictoffset */
             (initproc)v8___Symbol_init,      /* tp_init */
             0,                         /* tp_alloc */
             v8___Symbol_new,                 /* tp_new */
         };

static void
v8___SymbolObject_dealloc(v8___SymbolObject* self);

static PyObject *
v8___SymbolObject_new(PyTypeObject *type, PyObject *args, PyObject *kwds);
static int
v8___SymbolObject_init(v8___SymbolObject *self, PyObject *args, PyObject *kwds);
           

static PyObject*
v8___SymbolObject__New(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___SymbolObject__ValueOf(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___SymbolObject__Cast(PyObject *args, PyObject *kwds);
    
static PyMethodDef v8___SymbolObject_methods[] = {
             
            {"New",  (PyCFunction)v8___SymbolObject__New,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},
            {"ValueOf",  (PyCFunction)v8___SymbolObject__ValueOf, METH_VARARGS| METH_KEYWORDS, ""},
            {"Cast",  (PyCFunction)v8___SymbolObject__Cast,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},{NULL}  /* Sentinel */
};

static PyMemberDef v8___SymbolObject_members[] =   {
        {NULL}
};
    

static PyTypeObject v8___SymbolObjectType = {
             PyObject_HEAD_INIT(NULL)
             0,                         /*ob_size*/
             "v8.SymbolObject",             /*tp_name*/
             sizeof(v8___SymbolObject), /*tp_basicsize*/
             0,                         /*tp_itemsize*/
             (destructor)v8___SymbolObject_dealloc,                         /*tp_dealloc*/
             0,                         /*tp_print*/
             0,                         /*tp_getattr*/
             0,                         /*tp_setattr*/
             0,                         /*tp_compare*/
             0,                         /*tp_repr*/
             0,                         /*tp_as_number*/
             0,                         /*tp_as_sequence*/
             0,                         /*tp_as_mapping*/
             0,                         /*tp_hash */
             0,                         /*tp_call*/
             0,                         /*tp_str*/
             0,                         /*tp_getattro*/
             0,                         /*tp_setattro*/
             0,                         /*tp_as_buffer*/
             Py_TPFLAGS_DEFAULT| Py_TPFLAGS_BASETYPE,        /*tp_flags*/
             "v8___SymbolObject objects",           /* tp_doc */
             0,		               /* tp_traverse */
             0,		               /* tp_clear */
             0,		               /* tp_richcompare */
             0,		               /* tp_weaklistoffset */
             0,		               /* tp_iter */
             0,		               /* tp_iternext */
             v8___SymbolObject_methods,             /* tp_methods */
             v8___SymbolObject_members,             /* tp_members */
             0,                         /* tp_getset */
             0,                         /* tp_base */
             0,                         /* tp_dict */
             0,                         /* tp_descr_get */
             0,                         /* tp_descr_set */
             0,                         /* tp_dictoffset */
             (initproc)v8___SymbolObject_init,      /* tp_init */
             0,                         /* tp_alloc */
             v8___SymbolObject_new,                 /* tp_new */
         };

static void
v8___Uint32_dealloc(v8___Uint32* self);

static PyObject *
v8___Uint32_new(PyTypeObject *type, PyObject *args, PyObject *kwds);
static int
v8___Uint32_init(v8___Uint32 *self, PyObject *args, PyObject *kwds);
           

static PyObject*
v8___Uint32__Value(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Uint32__Cast(PyObject *args, PyObject *kwds);
    
static PyMethodDef v8___Uint32_methods[] = {
             
            {"Value",  (PyCFunction)v8___Uint32__Value, METH_VARARGS| METH_KEYWORDS, ""},
            {"Cast",  (PyCFunction)v8___Uint32__Cast,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},{NULL}  /* Sentinel */
};

static PyMemberDef v8___Uint32_members[] =   {
        {NULL}
};
    

static PyTypeObject v8___Uint32Type = {
             PyObject_HEAD_INIT(NULL)
             0,                         /*ob_size*/
             "v8.Uint32",             /*tp_name*/
             sizeof(v8___Uint32), /*tp_basicsize*/
             0,                         /*tp_itemsize*/
             (destructor)v8___Uint32_dealloc,                         /*tp_dealloc*/
             0,                         /*tp_print*/
             0,                         /*tp_getattr*/
             0,                         /*tp_setattr*/
             0,                         /*tp_compare*/
             0,                         /*tp_repr*/
             0,                         /*tp_as_number*/
             0,                         /*tp_as_sequence*/
             0,                         /*tp_as_mapping*/
             0,                         /*tp_hash */
             0,                         /*tp_call*/
             0,                         /*tp_str*/
             0,                         /*tp_getattro*/
             0,                         /*tp_setattro*/
             0,                         /*tp_as_buffer*/
             Py_TPFLAGS_DEFAULT| Py_TPFLAGS_BASETYPE,        /*tp_flags*/
             "v8___Uint32 objects",           /* tp_doc */
             0,		               /* tp_traverse */
             0,		               /* tp_clear */
             0,		               /* tp_richcompare */
             0,		               /* tp_weaklistoffset */
             0,		               /* tp_iter */
             0,		               /* tp_iternext */
             v8___Uint32_methods,             /* tp_methods */
             v8___Uint32_members,             /* tp_members */
             0,                         /* tp_getset */
             0,                         /* tp_base */
             0,                         /* tp_dict */
             0,                         /* tp_descr_get */
             0,                         /* tp_descr_set */
             0,                         /* tp_dictoffset */
             (initproc)v8___Uint32_init,      /* tp_init */
             0,                         /* tp_alloc */
             v8___Uint32_new,                 /* tp_new */
         };

static void
v8___Utils_dealloc(v8___Utils* self);

static PyObject *
v8___Utils_new(PyTypeObject *type, PyObject *args, PyObject *kwds);
static int
v8___Utils_init(v8___Utils *self, PyObject *args, PyObject *kwds);
           

static PyMethodDef v8___Utils_methods[] = {
             {NULL}  /* Sentinel */
};

static PyMemberDef v8___Utils_members[] =   {
        {NULL}
};
    

static PyTypeObject v8___UtilsType = {
             PyObject_HEAD_INIT(NULL)
             0,                         /*ob_size*/
             "v8.Utils",             /*tp_name*/
             sizeof(v8___Utils), /*tp_basicsize*/
             0,                         /*tp_itemsize*/
             (destructor)v8___Utils_dealloc,                         /*tp_dealloc*/
             0,                         /*tp_print*/
             0,                         /*tp_getattr*/
             0,                         /*tp_setattr*/
             0,                         /*tp_compare*/
             0,                         /*tp_repr*/
             0,                         /*tp_as_number*/
             0,                         /*tp_as_sequence*/
             0,                         /*tp_as_mapping*/
             0,                         /*tp_hash */
             0,                         /*tp_call*/
             0,                         /*tp_str*/
             0,                         /*tp_getattro*/
             0,                         /*tp_setattro*/
             0,                         /*tp_as_buffer*/
             Py_TPFLAGS_DEFAULT| Py_TPFLAGS_BASETYPE,        /*tp_flags*/
             "v8___Utils objects",           /* tp_doc */
             0,		               /* tp_traverse */
             0,		               /* tp_clear */
             0,		               /* tp_richcompare */
             0,		               /* tp_weaklistoffset */
             0,		               /* tp_iter */
             0,		               /* tp_iternext */
             v8___Utils_methods,             /* tp_methods */
             v8___Utils_members,             /* tp_members */
             0,                         /* tp_getset */
             0,                         /* tp_base */
             0,                         /* tp_dict */
             0,                         /* tp_descr_get */
             0,                         /* tp_descr_set */
             0,                         /* tp_dictoffset */
             (initproc)v8___Utils_init,      /* tp_init */
             0,                         /* tp_alloc */
             v8___Utils_new,                 /* tp_new */
         };

static void
v8___Value_dealloc(v8___Value* self);

static PyObject *
v8___Value_new(PyTypeObject *type, PyObject *args, PyObject *kwds);
static int
v8___Value_init(v8___Value *self, PyObject *args, PyObject *kwds);
           

static PyObject*
v8___Value__IsUndefined(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Value__IsNull(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Value__IsTrue(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Value__IsFalse(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Value__IsName(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Value__IsString(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Value__IsSymbol(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Value__IsFunction(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Value__IsArray(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Value__IsObject(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Value__IsBoolean(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Value__IsNumber(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Value__IsExternal(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Value__IsInt32(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Value__IsUint32(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Value__IsDate(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Value__IsArgumentsObject(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Value__IsBooleanObject(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Value__IsNumberObject(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Value__IsStringObject(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Value__IsSymbolObject(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Value__IsNativeError(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Value__IsRegExp(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Value__IsGeneratorFunction(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Value__IsGeneratorObject(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Value__IsPromise(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Value__IsMap(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Value__IsSet(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Value__IsMapIterator(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Value__IsSetIterator(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Value__IsWeakMap(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Value__IsWeakSet(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Value__IsArrayBuffer(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Value__IsArrayBufferView(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Value__IsTypedArray(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Value__IsUint8Array(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Value__IsUint8ClampedArray(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Value__IsInt8Array(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Value__IsUint16Array(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Value__IsInt16Array(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Value__IsUint32Array(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Value__IsInt32Array(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Value__IsFloat32Array(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Value__IsFloat64Array(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Value__IsFloat32x4(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Value__IsDataView(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Value__IsSharedArrayBuffer(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Value__ToBoolean(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Value__ToNumber(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Value__ToString(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Value__ToDetailString(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Value__ToObject(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Value__ToInteger(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Value__ToUint32(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Value__ToInt32(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Value__ToArrayIndex(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Value__BooleanValue(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Value__NumberValue(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Value__IntegerValue(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Value__Uint32Value(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Value__Int32Value(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Value__Equals(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Value__StrictEquals(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Value__SameValue(PyObject *args, PyObject *kwds);
    
static PyMethodDef v8___Value_methods[] = {
             
            {"IsUndefined",  (PyCFunction)v8___Value__IsUndefined, METH_VARARGS| METH_KEYWORDS, ""},
            {"IsNull",  (PyCFunction)v8___Value__IsNull, METH_VARARGS| METH_KEYWORDS, ""},
            {"IsTrue",  (PyCFunction)v8___Value__IsTrue, METH_VARARGS| METH_KEYWORDS, ""},
            {"IsFalse",  (PyCFunction)v8___Value__IsFalse, METH_VARARGS| METH_KEYWORDS, ""},
            {"IsName",  (PyCFunction)v8___Value__IsName, METH_VARARGS| METH_KEYWORDS, ""},
            {"IsString",  (PyCFunction)v8___Value__IsString, METH_VARARGS| METH_KEYWORDS, ""},
            {"IsSymbol",  (PyCFunction)v8___Value__IsSymbol, METH_VARARGS| METH_KEYWORDS, ""},
            {"IsFunction",  (PyCFunction)v8___Value__IsFunction, METH_VARARGS| METH_KEYWORDS, ""},
            {"IsArray",  (PyCFunction)v8___Value__IsArray, METH_VARARGS| METH_KEYWORDS, ""},
            {"IsObject",  (PyCFunction)v8___Value__IsObject, METH_VARARGS| METH_KEYWORDS, ""},
            {"IsBoolean",  (PyCFunction)v8___Value__IsBoolean, METH_VARARGS| METH_KEYWORDS, ""},
            {"IsNumber",  (PyCFunction)v8___Value__IsNumber, METH_VARARGS| METH_KEYWORDS, ""},
            {"IsExternal",  (PyCFunction)v8___Value__IsExternal, METH_VARARGS| METH_KEYWORDS, ""},
            {"IsInt32",  (PyCFunction)v8___Value__IsInt32, METH_VARARGS| METH_KEYWORDS, ""},
            {"IsUint32",  (PyCFunction)v8___Value__IsUint32, METH_VARARGS| METH_KEYWORDS, ""},
            {"IsDate",  (PyCFunction)v8___Value__IsDate, METH_VARARGS| METH_KEYWORDS, ""},
            {"IsArgumentsObject",  (PyCFunction)v8___Value__IsArgumentsObject, METH_VARARGS| METH_KEYWORDS, ""},
            {"IsBooleanObject",  (PyCFunction)v8___Value__IsBooleanObject, METH_VARARGS| METH_KEYWORDS, ""},
            {"IsNumberObject",  (PyCFunction)v8___Value__IsNumberObject, METH_VARARGS| METH_KEYWORDS, ""},
            {"IsStringObject",  (PyCFunction)v8___Value__IsStringObject, METH_VARARGS| METH_KEYWORDS, ""},
            {"IsSymbolObject",  (PyCFunction)v8___Value__IsSymbolObject, METH_VARARGS| METH_KEYWORDS, ""},
            {"IsNativeError",  (PyCFunction)v8___Value__IsNativeError, METH_VARARGS| METH_KEYWORDS, ""},
            {"IsRegExp",  (PyCFunction)v8___Value__IsRegExp, METH_VARARGS| METH_KEYWORDS, ""},
            {"IsGeneratorFunction",  (PyCFunction)v8___Value__IsGeneratorFunction, METH_VARARGS| METH_KEYWORDS, ""},
            {"IsGeneratorObject",  (PyCFunction)v8___Value__IsGeneratorObject, METH_VARARGS| METH_KEYWORDS, ""},
            {"IsPromise",  (PyCFunction)v8___Value__IsPromise, METH_VARARGS| METH_KEYWORDS, ""},
            {"IsMap",  (PyCFunction)v8___Value__IsMap, METH_VARARGS| METH_KEYWORDS, ""},
            {"IsSet",  (PyCFunction)v8___Value__IsSet, METH_VARARGS| METH_KEYWORDS, ""},
            {"IsMapIterator",  (PyCFunction)v8___Value__IsMapIterator, METH_VARARGS| METH_KEYWORDS, ""},
            {"IsSetIterator",  (PyCFunction)v8___Value__IsSetIterator, METH_VARARGS| METH_KEYWORDS, ""},
            {"IsWeakMap",  (PyCFunction)v8___Value__IsWeakMap, METH_VARARGS| METH_KEYWORDS, ""},
            {"IsWeakSet",  (PyCFunction)v8___Value__IsWeakSet, METH_VARARGS| METH_KEYWORDS, ""},
            {"IsArrayBuffer",  (PyCFunction)v8___Value__IsArrayBuffer, METH_VARARGS| METH_KEYWORDS, ""},
            {"IsArrayBufferView",  (PyCFunction)v8___Value__IsArrayBufferView, METH_VARARGS| METH_KEYWORDS, ""},
            {"IsTypedArray",  (PyCFunction)v8___Value__IsTypedArray, METH_VARARGS| METH_KEYWORDS, ""},
            {"IsUint8Array",  (PyCFunction)v8___Value__IsUint8Array, METH_VARARGS| METH_KEYWORDS, ""},
            {"IsUint8ClampedArray",  (PyCFunction)v8___Value__IsUint8ClampedArray, METH_VARARGS| METH_KEYWORDS, ""},
            {"IsInt8Array",  (PyCFunction)v8___Value__IsInt8Array, METH_VARARGS| METH_KEYWORDS, ""},
            {"IsUint16Array",  (PyCFunction)v8___Value__IsUint16Array, METH_VARARGS| METH_KEYWORDS, ""},
            {"IsInt16Array",  (PyCFunction)v8___Value__IsInt16Array, METH_VARARGS| METH_KEYWORDS, ""},
            {"IsUint32Array",  (PyCFunction)v8___Value__IsUint32Array, METH_VARARGS| METH_KEYWORDS, ""},
            {"IsInt32Array",  (PyCFunction)v8___Value__IsInt32Array, METH_VARARGS| METH_KEYWORDS, ""},
            {"IsFloat32Array",  (PyCFunction)v8___Value__IsFloat32Array, METH_VARARGS| METH_KEYWORDS, ""},
            {"IsFloat64Array",  (PyCFunction)v8___Value__IsFloat64Array, METH_VARARGS| METH_KEYWORDS, ""},
            {"IsFloat32x4",  (PyCFunction)v8___Value__IsFloat32x4, METH_VARARGS| METH_KEYWORDS, ""},
            {"IsDataView",  (PyCFunction)v8___Value__IsDataView, METH_VARARGS| METH_KEYWORDS, ""},
            {"IsSharedArrayBuffer",  (PyCFunction)v8___Value__IsSharedArrayBuffer, METH_VARARGS| METH_KEYWORDS, ""},
            {"ToBoolean",  (PyCFunction)v8___Value__ToBoolean, METH_VARARGS| METH_KEYWORDS, ""},
            {"ToNumber",  (PyCFunction)v8___Value__ToNumber, METH_VARARGS| METH_KEYWORDS, ""},
            {"ToString",  (PyCFunction)v8___Value__ToString, METH_VARARGS| METH_KEYWORDS, ""},
            {"ToDetailString",  (PyCFunction)v8___Value__ToDetailString, METH_VARARGS| METH_KEYWORDS, ""},
            {"ToObject",  (PyCFunction)v8___Value__ToObject, METH_VARARGS| METH_KEYWORDS, ""},
            {"ToInteger",  (PyCFunction)v8___Value__ToInteger, METH_VARARGS| METH_KEYWORDS, ""},
            {"ToUint32",  (PyCFunction)v8___Value__ToUint32, METH_VARARGS| METH_KEYWORDS, ""},
            {"ToInt32",  (PyCFunction)v8___Value__ToInt32, METH_VARARGS| METH_KEYWORDS, ""},
            {"ToBoolean",  (PyCFunction)v8___Value__ToBoolean, METH_VARARGS| METH_KEYWORDS, ""},
            {"ToNumber",  (PyCFunction)v8___Value__ToNumber, METH_VARARGS| METH_KEYWORDS, ""},
            {"ToString",  (PyCFunction)v8___Value__ToString, METH_VARARGS| METH_KEYWORDS, ""},
            {"ToDetailString",  (PyCFunction)v8___Value__ToDetailString, METH_VARARGS| METH_KEYWORDS, ""},
            {"ToObject",  (PyCFunction)v8___Value__ToObject, METH_VARARGS| METH_KEYWORDS, ""},
            {"ToInteger",  (PyCFunction)v8___Value__ToInteger, METH_VARARGS| METH_KEYWORDS, ""},
            {"ToUint32",  (PyCFunction)v8___Value__ToUint32, METH_VARARGS| METH_KEYWORDS, ""},
            {"ToInt32",  (PyCFunction)v8___Value__ToInt32, METH_VARARGS| METH_KEYWORDS, ""},
            {"ToBoolean",  (PyCFunction)v8___Value__ToBoolean, METH_VARARGS| METH_KEYWORDS, ""},
            {"ToNumber",  (PyCFunction)v8___Value__ToNumber, METH_VARARGS| METH_KEYWORDS, ""},
            {"ToString",  (PyCFunction)v8___Value__ToString, METH_VARARGS| METH_KEYWORDS, ""},
            {"ToDetailString",  (PyCFunction)v8___Value__ToDetailString, METH_VARARGS| METH_KEYWORDS, ""},
            {"ToObject",  (PyCFunction)v8___Value__ToObject, METH_VARARGS| METH_KEYWORDS, ""},
            {"ToInteger",  (PyCFunction)v8___Value__ToInteger, METH_VARARGS| METH_KEYWORDS, ""},
            {"ToUint32",  (PyCFunction)v8___Value__ToUint32, METH_VARARGS| METH_KEYWORDS, ""},
            {"ToInt32",  (PyCFunction)v8___Value__ToInt32, METH_VARARGS| METH_KEYWORDS, ""},
            {"ToArrayIndex",  (PyCFunction)v8___Value__ToArrayIndex, METH_VARARGS| METH_KEYWORDS, ""},
            {"ToArrayIndex",  (PyCFunction)v8___Value__ToArrayIndex, METH_VARARGS| METH_KEYWORDS, ""},
            {"BooleanValue",  (PyCFunction)v8___Value__BooleanValue, METH_VARARGS| METH_KEYWORDS, ""},
            {"NumberValue",  (PyCFunction)v8___Value__NumberValue, METH_VARARGS| METH_KEYWORDS, ""},
            {"IntegerValue",  (PyCFunction)v8___Value__IntegerValue, METH_VARARGS| METH_KEYWORDS, ""},
            {"Uint32Value",  (PyCFunction)v8___Value__Uint32Value, METH_VARARGS| METH_KEYWORDS, ""},
            {"Int32Value",  (PyCFunction)v8___Value__Int32Value, METH_VARARGS| METH_KEYWORDS, ""},
            {"BooleanValue",  (PyCFunction)v8___Value__BooleanValue, METH_VARARGS| METH_KEYWORDS, ""},
            {"NumberValue",  (PyCFunction)v8___Value__NumberValue, METH_VARARGS| METH_KEYWORDS, ""},
            {"IntegerValue",  (PyCFunction)v8___Value__IntegerValue, METH_VARARGS| METH_KEYWORDS, ""},
            {"Uint32Value",  (PyCFunction)v8___Value__Uint32Value, METH_VARARGS| METH_KEYWORDS, ""},
            {"Int32Value",  (PyCFunction)v8___Value__Int32Value, METH_VARARGS| METH_KEYWORDS, ""},
            {"Equals",  (PyCFunction)v8___Value__Equals, METH_VARARGS| METH_KEYWORDS, ""},
            {"Equals",  (PyCFunction)v8___Value__Equals, METH_VARARGS| METH_KEYWORDS, ""},
            {"StrictEquals",  (PyCFunction)v8___Value__StrictEquals, METH_VARARGS| METH_KEYWORDS, ""},
            {"SameValue",  (PyCFunction)v8___Value__SameValue, METH_VARARGS| METH_KEYWORDS, ""},{NULL}  /* Sentinel */
};

static PyMemberDef v8___Value_members[] =   {
        {NULL}
};
    

static PyTypeObject v8___ValueType = {
             PyObject_HEAD_INIT(NULL)
             0,                         /*ob_size*/
             "v8.Value",             /*tp_name*/
             sizeof(v8___Value), /*tp_basicsize*/
             0,                         /*tp_itemsize*/
             (destructor)v8___Value_dealloc,                         /*tp_dealloc*/
             0,                         /*tp_print*/
             0,                         /*tp_getattr*/
             0,                         /*tp_setattr*/
             0,                         /*tp_compare*/
             0,                         /*tp_repr*/
             0,                         /*tp_as_number*/
             0,                         /*tp_as_sequence*/
             0,                         /*tp_as_mapping*/
             0,                         /*tp_hash */
             0,                         /*tp_call*/
             0,                         /*tp_str*/
             0,                         /*tp_getattro*/
             0,                         /*tp_setattro*/
             0,                         /*tp_as_buffer*/
             Py_TPFLAGS_DEFAULT| Py_TPFLAGS_BASETYPE,        /*tp_flags*/
             "v8___Value objects",           /* tp_doc */
             0,		               /* tp_traverse */
             0,		               /* tp_clear */
             0,		               /* tp_richcompare */
             0,		               /* tp_weaklistoffset */
             0,		               /* tp_iter */
             0,		               /* tp_iternext */
             v8___Value_methods,             /* tp_methods */
             v8___Value_members,             /* tp_members */
             0,                         /* tp_getset */
             0,                         /* tp_base */
             0,                         /* tp_dict */
             0,                         /* tp_descr_get */
             0,                         /* tp_descr_set */
             0,                         /* tp_dictoffset */
             (initproc)v8___Value_init,      /* tp_init */
             0,                         /* tp_alloc */
             v8___Value_new,                 /* tp_new */
         };

static void
v8___Local_v8__Primitive__dealloc(v8___Local_v8__Primitive_* self);

static PyObject *
v8___Local_v8__Primitive__new(PyTypeObject *type, PyObject *args, PyObject *kwds);
static int
v8___Local_v8__Primitive__init(v8___Local_v8__Primitive_ *self, PyObject *args, PyObject *kwds);
           

static PyObject*
v8___Local_v8__Primitive___IsEmpty(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Local_v8__Primitive___Clear(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Local_v8__Primitive___New(PyObject *args, PyObject *kwds);
    
static PyMethodDef v8___Local_v8__Primitive__methods[] = {
             
            {"IsEmpty",  (PyCFunction)v8___Local_v8__Primitive___IsEmpty, METH_VARARGS| METH_KEYWORDS, ""},
            {"Clear",  (PyCFunction)v8___Local_v8__Primitive___Clear, METH_VARARGS| METH_KEYWORDS, ""},
            {"New",  (PyCFunction)v8___Local_v8__Primitive___New,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},
            {"New",  (PyCFunction)v8___Local_v8__Primitive___New,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},{NULL}  /* Sentinel */
};

static PyMemberDef v8___Local_v8__Primitive__members[] =   {
        {NULL}
};
    

static PyTypeObject v8___Local_v8__Primitive_Type = {
             PyObject_HEAD_INIT(NULL)
             0,                         /*ob_size*/
             "v8.Local<v8::Primitive>",             /*tp_name*/
             sizeof(v8___Local_v8__Primitive_), /*tp_basicsize*/
             0,                         /*tp_itemsize*/
             (destructor)v8___Local_v8__Primitive__dealloc,                         /*tp_dealloc*/
             0,                         /*tp_print*/
             0,                         /*tp_getattr*/
             0,                         /*tp_setattr*/
             0,                         /*tp_compare*/
             0,                         /*tp_repr*/
             0,                         /*tp_as_number*/
             0,                         /*tp_as_sequence*/
             0,                         /*tp_as_mapping*/
             0,                         /*tp_hash */
             0,                         /*tp_call*/
             0,                         /*tp_str*/
             0,                         /*tp_getattro*/
             0,                         /*tp_setattro*/
             0,                         /*tp_as_buffer*/
             Py_TPFLAGS_DEFAULT| Py_TPFLAGS_BASETYPE,        /*tp_flags*/
             "v8___Local_v8__Primitive_ objects",           /* tp_doc */
             0,		               /* tp_traverse */
             0,		               /* tp_clear */
             0,		               /* tp_richcompare */
             0,		               /* tp_weaklistoffset */
             0,		               /* tp_iter */
             0,		               /* tp_iternext */
             v8___Local_v8__Primitive__methods,             /* tp_methods */
             v8___Local_v8__Primitive__members,             /* tp_members */
             0,                         /* tp_getset */
             0,                         /* tp_base */
             0,                         /* tp_dict */
             0,                         /* tp_descr_get */
             0,                         /* tp_descr_set */
             0,                         /* tp_dictoffset */
             (initproc)v8___Local_v8__Primitive__init,      /* tp_init */
             0,                         /* tp_alloc */
             v8___Local_v8__Primitive__new,                 /* tp_new */
         };

static void
v8___Local_v8__Boolean__dealloc(v8___Local_v8__Boolean_* self);

static PyObject *
v8___Local_v8__Boolean__new(PyTypeObject *type, PyObject *args, PyObject *kwds);
static int
v8___Local_v8__Boolean__init(v8___Local_v8__Boolean_ *self, PyObject *args, PyObject *kwds);
           

static PyObject*
v8___Local_v8__Boolean___IsEmpty(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Local_v8__Boolean___Clear(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Local_v8__Boolean___New(PyObject *args, PyObject *kwds);
    
static PyMethodDef v8___Local_v8__Boolean__methods[] = {
             
            {"IsEmpty",  (PyCFunction)v8___Local_v8__Boolean___IsEmpty, METH_VARARGS| METH_KEYWORDS, ""},
            {"Clear",  (PyCFunction)v8___Local_v8__Boolean___Clear, METH_VARARGS| METH_KEYWORDS, ""},
            {"New",  (PyCFunction)v8___Local_v8__Boolean___New,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},
            {"New",  (PyCFunction)v8___Local_v8__Boolean___New,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},{NULL}  /* Sentinel */
};

static PyMemberDef v8___Local_v8__Boolean__members[] =   {
        {NULL}
};
    

static PyTypeObject v8___Local_v8__Boolean_Type = {
             PyObject_HEAD_INIT(NULL)
             0,                         /*ob_size*/
             "v8.Local<v8::Boolean>",             /*tp_name*/
             sizeof(v8___Local_v8__Boolean_), /*tp_basicsize*/
             0,                         /*tp_itemsize*/
             (destructor)v8___Local_v8__Boolean__dealloc,                         /*tp_dealloc*/
             0,                         /*tp_print*/
             0,                         /*tp_getattr*/
             0,                         /*tp_setattr*/
             0,                         /*tp_compare*/
             0,                         /*tp_repr*/
             0,                         /*tp_as_number*/
             0,                         /*tp_as_sequence*/
             0,                         /*tp_as_mapping*/
             0,                         /*tp_hash */
             0,                         /*tp_call*/
             0,                         /*tp_str*/
             0,                         /*tp_getattro*/
             0,                         /*tp_setattro*/
             0,                         /*tp_as_buffer*/
             Py_TPFLAGS_DEFAULT| Py_TPFLAGS_BASETYPE,        /*tp_flags*/
             "v8___Local_v8__Boolean_ objects",           /* tp_doc */
             0,		               /* tp_traverse */
             0,		               /* tp_clear */
             0,		               /* tp_richcompare */
             0,		               /* tp_weaklistoffset */
             0,		               /* tp_iter */
             0,		               /* tp_iternext */
             v8___Local_v8__Boolean__methods,             /* tp_methods */
             v8___Local_v8__Boolean__members,             /* tp_members */
             0,                         /* tp_getset */
             0,                         /* tp_base */
             0,                         /* tp_dict */
             0,                         /* tp_descr_get */
             0,                         /* tp_descr_set */
             0,                         /* tp_dictoffset */
             (initproc)v8___Local_v8__Boolean__init,      /* tp_init */
             0,                         /* tp_alloc */
             v8___Local_v8__Boolean__new,                 /* tp_new */
         };

static void
v8___Local_v8__Value__dealloc(v8___Local_v8__Value_* self);

static PyObject *
v8___Local_v8__Value__new(PyTypeObject *type, PyObject *args, PyObject *kwds);
static int
v8___Local_v8__Value__init(v8___Local_v8__Value_ *self, PyObject *args, PyObject *kwds);
           

static PyObject*
v8___Local_v8__Value___IsEmpty(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Local_v8__Value___Clear(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Local_v8__Value___New(PyObject *args, PyObject *kwds);
    
static PyMethodDef v8___Local_v8__Value__methods[] = {
             
            {"IsEmpty",  (PyCFunction)v8___Local_v8__Value___IsEmpty, METH_VARARGS| METH_KEYWORDS, ""},
            {"Clear",  (PyCFunction)v8___Local_v8__Value___Clear, METH_VARARGS| METH_KEYWORDS, ""},
            {"New",  (PyCFunction)v8___Local_v8__Value___New,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},
            {"New",  (PyCFunction)v8___Local_v8__Value___New,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},{NULL}  /* Sentinel */
};

static PyMemberDef v8___Local_v8__Value__members[] =   {
        {NULL}
};
    

static PyTypeObject v8___Local_v8__Value_Type = {
             PyObject_HEAD_INIT(NULL)
             0,                         /*ob_size*/
             "v8.Local<v8::Value>",             /*tp_name*/
             sizeof(v8___Local_v8__Value_), /*tp_basicsize*/
             0,                         /*tp_itemsize*/
             (destructor)v8___Local_v8__Value__dealloc,                         /*tp_dealloc*/
             0,                         /*tp_print*/
             0,                         /*tp_getattr*/
             0,                         /*tp_setattr*/
             0,                         /*tp_compare*/
             0,                         /*tp_repr*/
             0,                         /*tp_as_number*/
             0,                         /*tp_as_sequence*/
             0,                         /*tp_as_mapping*/
             0,                         /*tp_hash */
             0,                         /*tp_call*/
             0,                         /*tp_str*/
             0,                         /*tp_getattro*/
             0,                         /*tp_setattro*/
             0,                         /*tp_as_buffer*/
             Py_TPFLAGS_DEFAULT| Py_TPFLAGS_BASETYPE,        /*tp_flags*/
             "v8___Local_v8__Value_ objects",           /* tp_doc */
             0,		               /* tp_traverse */
             0,		               /* tp_clear */
             0,		               /* tp_richcompare */
             0,		               /* tp_weaklistoffset */
             0,		               /* tp_iter */
             0,		               /* tp_iternext */
             v8___Local_v8__Value__methods,             /* tp_methods */
             v8___Local_v8__Value__members,             /* tp_members */
             0,                         /* tp_getset */
             0,                         /* tp_base */
             0,                         /* tp_dict */
             0,                         /* tp_descr_get */
             0,                         /* tp_descr_set */
             0,                         /* tp_dictoffset */
             (initproc)v8___Local_v8__Value__init,      /* tp_init */
             0,                         /* tp_alloc */
             v8___Local_v8__Value__new,                 /* tp_new */
         };

static void
v8___Local_v8__Integer__dealloc(v8___Local_v8__Integer_* self);

static PyObject *
v8___Local_v8__Integer__new(PyTypeObject *type, PyObject *args, PyObject *kwds);
static int
v8___Local_v8__Integer__init(v8___Local_v8__Integer_ *self, PyObject *args, PyObject *kwds);
           

static PyObject*
v8___Local_v8__Integer___IsEmpty(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Local_v8__Integer___Clear(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Local_v8__Integer___New(PyObject *args, PyObject *kwds);
    
static PyMethodDef v8___Local_v8__Integer__methods[] = {
             
            {"IsEmpty",  (PyCFunction)v8___Local_v8__Integer___IsEmpty, METH_VARARGS| METH_KEYWORDS, ""},
            {"Clear",  (PyCFunction)v8___Local_v8__Integer___Clear, METH_VARARGS| METH_KEYWORDS, ""},
            {"New",  (PyCFunction)v8___Local_v8__Integer___New,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},
            {"New",  (PyCFunction)v8___Local_v8__Integer___New,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},{NULL}  /* Sentinel */
};

static PyMemberDef v8___Local_v8__Integer__members[] =   {
        {NULL}
};
    

static PyTypeObject v8___Local_v8__Integer_Type = {
             PyObject_HEAD_INIT(NULL)
             0,                         /*ob_size*/
             "v8.Local<v8::Integer>",             /*tp_name*/
             sizeof(v8___Local_v8__Integer_), /*tp_basicsize*/
             0,                         /*tp_itemsize*/
             (destructor)v8___Local_v8__Integer__dealloc,                         /*tp_dealloc*/
             0,                         /*tp_print*/
             0,                         /*tp_getattr*/
             0,                         /*tp_setattr*/
             0,                         /*tp_compare*/
             0,                         /*tp_repr*/
             0,                         /*tp_as_number*/
             0,                         /*tp_as_sequence*/
             0,                         /*tp_as_mapping*/
             0,                         /*tp_hash */
             0,                         /*tp_call*/
             0,                         /*tp_str*/
             0,                         /*tp_getattro*/
             0,                         /*tp_setattro*/
             0,                         /*tp_as_buffer*/
             Py_TPFLAGS_DEFAULT| Py_TPFLAGS_BASETYPE,        /*tp_flags*/
             "v8___Local_v8__Integer_ objects",           /* tp_doc */
             0,		               /* tp_traverse */
             0,		               /* tp_clear */
             0,		               /* tp_richcompare */
             0,		               /* tp_weaklistoffset */
             0,		               /* tp_iter */
             0,		               /* tp_iternext */
             v8___Local_v8__Integer__methods,             /* tp_methods */
             v8___Local_v8__Integer__members,             /* tp_members */
             0,                         /* tp_getset */
             0,                         /* tp_base */
             0,                         /* tp_dict */
             0,                         /* tp_descr_get */
             0,                         /* tp_descr_set */
             0,                         /* tp_dictoffset */
             (initproc)v8___Local_v8__Integer__init,      /* tp_init */
             0,                         /* tp_alloc */
             v8___Local_v8__Integer__new,                 /* tp_new */
         };

static void
v8___Local_v8__Script__dealloc(v8___Local_v8__Script_* self);

static PyObject *
v8___Local_v8__Script__new(PyTypeObject *type, PyObject *args, PyObject *kwds);
static int
v8___Local_v8__Script__init(v8___Local_v8__Script_ *self, PyObject *args, PyObject *kwds);
           

static PyMethodDef v8___Local_v8__Script__methods[] = {
             {NULL}  /* Sentinel */
};

static PyMemberDef v8___Local_v8__Script__members[] =   {
        {NULL}
};
    

static PyTypeObject v8___Local_v8__Script_Type = {
             PyObject_HEAD_INIT(NULL)
             0,                         /*ob_size*/
             "v8.Local<v8::Script>",             /*tp_name*/
             sizeof(v8___Local_v8__Script_), /*tp_basicsize*/
             0,                         /*tp_itemsize*/
             (destructor)v8___Local_v8__Script__dealloc,                         /*tp_dealloc*/
             0,                         /*tp_print*/
             0,                         /*tp_getattr*/
             0,                         /*tp_setattr*/
             0,                         /*tp_compare*/
             0,                         /*tp_repr*/
             0,                         /*tp_as_number*/
             0,                         /*tp_as_sequence*/
             0,                         /*tp_as_mapping*/
             0,                         /*tp_hash */
             0,                         /*tp_call*/
             0,                         /*tp_str*/
             0,                         /*tp_getattro*/
             0,                         /*tp_setattro*/
             0,                         /*tp_as_buffer*/
             Py_TPFLAGS_DEFAULT| Py_TPFLAGS_BASETYPE,        /*tp_flags*/
             "v8___Local_v8__Script_ objects",           /* tp_doc */
             0,		               /* tp_traverse */
             0,		               /* tp_clear */
             0,		               /* tp_richcompare */
             0,		               /* tp_weaklistoffset */
             0,		               /* tp_iter */
             0,		               /* tp_iternext */
             v8___Local_v8__Script__methods,             /* tp_methods */
             v8___Local_v8__Script__members,             /* tp_members */
             0,                         /* tp_getset */
             0,                         /* tp_base */
             0,                         /* tp_dict */
             0,                         /* tp_descr_get */
             0,                         /* tp_descr_set */
             0,                         /* tp_dictoffset */
             (initproc)v8___Local_v8__Script__init,      /* tp_init */
             0,                         /* tp_alloc */
             v8___Local_v8__Script__new,                 /* tp_new */
         };

static void
v8___Local_v8__String__dealloc(v8___Local_v8__String_* self);

static PyObject *
v8___Local_v8__String__new(PyTypeObject *type, PyObject *args, PyObject *kwds);
static int
v8___Local_v8__String__init(v8___Local_v8__String_ *self, PyObject *args, PyObject *kwds);
           

static PyObject*
v8___Local_v8__String___IsEmpty(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Local_v8__String___Clear(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Local_v8__String___New(PyObject *args, PyObject *kwds);
    
static PyMethodDef v8___Local_v8__String__methods[] = {
             
            {"IsEmpty",  (PyCFunction)v8___Local_v8__String___IsEmpty, METH_VARARGS| METH_KEYWORDS, ""},
            {"Clear",  (PyCFunction)v8___Local_v8__String___Clear, METH_VARARGS| METH_KEYWORDS, ""},
            {"New",  (PyCFunction)v8___Local_v8__String___New,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},
            {"New",  (PyCFunction)v8___Local_v8__String___New,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},{NULL}  /* Sentinel */
};

static PyMemberDef v8___Local_v8__String__members[] =   {
        {NULL}
};
    

static PyTypeObject v8___Local_v8__String_Type = {
             PyObject_HEAD_INIT(NULL)
             0,                         /*ob_size*/
             "v8.Local<v8::String>",             /*tp_name*/
             sizeof(v8___Local_v8__String_), /*tp_basicsize*/
             0,                         /*tp_itemsize*/
             (destructor)v8___Local_v8__String__dealloc,                         /*tp_dealloc*/
             0,                         /*tp_print*/
             0,                         /*tp_getattr*/
             0,                         /*tp_setattr*/
             0,                         /*tp_compare*/
             0,                         /*tp_repr*/
             0,                         /*tp_as_number*/
             0,                         /*tp_as_sequence*/
             0,                         /*tp_as_mapping*/
             0,                         /*tp_hash */
             0,                         /*tp_call*/
             0,                         /*tp_str*/
             0,                         /*tp_getattro*/
             0,                         /*tp_setattro*/
             0,                         /*tp_as_buffer*/
             Py_TPFLAGS_DEFAULT| Py_TPFLAGS_BASETYPE,        /*tp_flags*/
             "v8___Local_v8__String_ objects",           /* tp_doc */
             0,		               /* tp_traverse */
             0,		               /* tp_clear */
             0,		               /* tp_richcompare */
             0,		               /* tp_weaklistoffset */
             0,		               /* tp_iter */
             0,		               /* tp_iternext */
             v8___Local_v8__String__methods,             /* tp_methods */
             v8___Local_v8__String__members,             /* tp_members */
             0,                         /* tp_getset */
             0,                         /* tp_base */
             0,                         /* tp_dict */
             0,                         /* tp_descr_get */
             0,                         /* tp_descr_set */
             0,                         /* tp_dictoffset */
             (initproc)v8___Local_v8__String__init,      /* tp_init */
             0,                         /* tp_alloc */
             v8___Local_v8__String__new,                 /* tp_new */
         };

static void
v8___Local_v8__Context__dealloc(v8___Local_v8__Context_* self);

static PyObject *
v8___Local_v8__Context__new(PyTypeObject *type, PyObject *args, PyObject *kwds);
static int
v8___Local_v8__Context__init(v8___Local_v8__Context_ *self, PyObject *args, PyObject *kwds);
           

static PyObject*
v8___Local_v8__Context___IsEmpty(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Local_v8__Context___Clear(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Local_v8__Context___New(PyObject *args, PyObject *kwds);
    
static PyMethodDef v8___Local_v8__Context__methods[] = {
             
            {"IsEmpty",  (PyCFunction)v8___Local_v8__Context___IsEmpty, METH_VARARGS| METH_KEYWORDS, ""},
            {"Clear",  (PyCFunction)v8___Local_v8__Context___Clear, METH_VARARGS| METH_KEYWORDS, ""},
            {"New",  (PyCFunction)v8___Local_v8__Context___New,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},
            {"New",  (PyCFunction)v8___Local_v8__Context___New,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},{NULL}  /* Sentinel */
};

static PyMemberDef v8___Local_v8__Context__members[] =   {
        {NULL}
};
    

static PyTypeObject v8___Local_v8__Context_Type = {
             PyObject_HEAD_INIT(NULL)
             0,                         /*ob_size*/
             "v8.Local<v8::Context>",             /*tp_name*/
             sizeof(v8___Local_v8__Context_), /*tp_basicsize*/
             0,                         /*tp_itemsize*/
             (destructor)v8___Local_v8__Context__dealloc,                         /*tp_dealloc*/
             0,                         /*tp_print*/
             0,                         /*tp_getattr*/
             0,                         /*tp_setattr*/
             0,                         /*tp_compare*/
             0,                         /*tp_repr*/
             0,                         /*tp_as_number*/
             0,                         /*tp_as_sequence*/
             0,                         /*tp_as_mapping*/
             0,                         /*tp_hash */
             0,                         /*tp_call*/
             0,                         /*tp_str*/
             0,                         /*tp_getattro*/
             0,                         /*tp_setattro*/
             0,                         /*tp_as_buffer*/
             Py_TPFLAGS_DEFAULT| Py_TPFLAGS_BASETYPE,        /*tp_flags*/
             "v8___Local_v8__Context_ objects",           /* tp_doc */
             0,		               /* tp_traverse */
             0,		               /* tp_clear */
             0,		               /* tp_richcompare */
             0,		               /* tp_weaklistoffset */
             0,		               /* tp_iter */
             0,		               /* tp_iternext */
             v8___Local_v8__Context__methods,             /* tp_methods */
             v8___Local_v8__Context__members,             /* tp_members */
             0,                         /* tp_getset */
             0,                         /* tp_base */
             0,                         /* tp_dict */
             0,                         /* tp_descr_get */
             0,                         /* tp_descr_set */
             0,                         /* tp_dictoffset */
             (initproc)v8___Local_v8__Context__init,      /* tp_init */
             0,                         /* tp_alloc */
             v8___Local_v8__Context__new,                 /* tp_new */
         };

static void
v8___Local_v8__UnboundScript__dealloc(v8___Local_v8__UnboundScript_* self);

static PyObject *
v8___Local_v8__UnboundScript__new(PyTypeObject *type, PyObject *args, PyObject *kwds);
static int
v8___Local_v8__UnboundScript__init(v8___Local_v8__UnboundScript_ *self, PyObject *args, PyObject *kwds);
           

static PyObject*
v8___Local_v8__UnboundScript___IsEmpty(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Local_v8__UnboundScript___Clear(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Local_v8__UnboundScript___New(PyObject *args, PyObject *kwds);
    
static PyMethodDef v8___Local_v8__UnboundScript__methods[] = {
             
            {"IsEmpty",  (PyCFunction)v8___Local_v8__UnboundScript___IsEmpty, METH_VARARGS| METH_KEYWORDS, ""},
            {"Clear",  (PyCFunction)v8___Local_v8__UnboundScript___Clear, METH_VARARGS| METH_KEYWORDS, ""},
            {"New",  (PyCFunction)v8___Local_v8__UnboundScript___New,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},
            {"New",  (PyCFunction)v8___Local_v8__UnboundScript___New,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},{NULL}  /* Sentinel */
};

static PyMemberDef v8___Local_v8__UnboundScript__members[] =   {
        {NULL}
};
    

static PyTypeObject v8___Local_v8__UnboundScript_Type = {
             PyObject_HEAD_INIT(NULL)
             0,                         /*ob_size*/
             "v8.Local<v8::UnboundScript>",             /*tp_name*/
             sizeof(v8___Local_v8__UnboundScript_), /*tp_basicsize*/
             0,                         /*tp_itemsize*/
             (destructor)v8___Local_v8__UnboundScript__dealloc,                         /*tp_dealloc*/
             0,                         /*tp_print*/
             0,                         /*tp_getattr*/
             0,                         /*tp_setattr*/
             0,                         /*tp_compare*/
             0,                         /*tp_repr*/
             0,                         /*tp_as_number*/
             0,                         /*tp_as_sequence*/
             0,                         /*tp_as_mapping*/
             0,                         /*tp_hash */
             0,                         /*tp_call*/
             0,                         /*tp_str*/
             0,                         /*tp_getattro*/
             0,                         /*tp_setattro*/
             0,                         /*tp_as_buffer*/
             Py_TPFLAGS_DEFAULT| Py_TPFLAGS_BASETYPE,        /*tp_flags*/
             "v8___Local_v8__UnboundScript_ objects",           /* tp_doc */
             0,		               /* tp_traverse */
             0,		               /* tp_clear */
             0,		               /* tp_richcompare */
             0,		               /* tp_weaklistoffset */
             0,		               /* tp_iter */
             0,		               /* tp_iternext */
             v8___Local_v8__UnboundScript__methods,             /* tp_methods */
             v8___Local_v8__UnboundScript__members,             /* tp_members */
             0,                         /* tp_getset */
             0,                         /* tp_base */
             0,                         /* tp_dict */
             0,                         /* tp_descr_get */
             0,                         /* tp_descr_set */
             0,                         /* tp_dictoffset */
             (initproc)v8___Local_v8__UnboundScript__init,      /* tp_init */
             0,                         /* tp_alloc */
             v8___Local_v8__UnboundScript__new,                 /* tp_new */
         };

static void
v8___Local_v8__Function__dealloc(v8___Local_v8__Function_* self);

static PyObject *
v8___Local_v8__Function__new(PyTypeObject *type, PyObject *args, PyObject *kwds);
static int
v8___Local_v8__Function__init(v8___Local_v8__Function_ *self, PyObject *args, PyObject *kwds);
           

static PyObject*
v8___Local_v8__Function___IsEmpty(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Local_v8__Function___Clear(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Local_v8__Function___New(PyObject *args, PyObject *kwds);
    
static PyMethodDef v8___Local_v8__Function__methods[] = {
             
            {"IsEmpty",  (PyCFunction)v8___Local_v8__Function___IsEmpty, METH_VARARGS| METH_KEYWORDS, ""},
            {"Clear",  (PyCFunction)v8___Local_v8__Function___Clear, METH_VARARGS| METH_KEYWORDS, ""},
            {"New",  (PyCFunction)v8___Local_v8__Function___New,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},
            {"New",  (PyCFunction)v8___Local_v8__Function___New,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},{NULL}  /* Sentinel */
};

static PyMemberDef v8___Local_v8__Function__members[] =   {
        {NULL}
};
    

static PyTypeObject v8___Local_v8__Function_Type = {
             PyObject_HEAD_INIT(NULL)
             0,                         /*ob_size*/
             "v8.Local<v8::Function>",             /*tp_name*/
             sizeof(v8___Local_v8__Function_), /*tp_basicsize*/
             0,                         /*tp_itemsize*/
             (destructor)v8___Local_v8__Function__dealloc,                         /*tp_dealloc*/
             0,                         /*tp_print*/
             0,                         /*tp_getattr*/
             0,                         /*tp_setattr*/
             0,                         /*tp_compare*/
             0,                         /*tp_repr*/
             0,                         /*tp_as_number*/
             0,                         /*tp_as_sequence*/
             0,                         /*tp_as_mapping*/
             0,                         /*tp_hash */
             0,                         /*tp_call*/
             0,                         /*tp_str*/
             0,                         /*tp_getattro*/
             0,                         /*tp_setattro*/
             0,                         /*tp_as_buffer*/
             Py_TPFLAGS_DEFAULT| Py_TPFLAGS_BASETYPE,        /*tp_flags*/
             "v8___Local_v8__Function_ objects",           /* tp_doc */
             0,		               /* tp_traverse */
             0,		               /* tp_clear */
             0,		               /* tp_richcompare */
             0,		               /* tp_weaklistoffset */
             0,		               /* tp_iter */
             0,		               /* tp_iternext */
             v8___Local_v8__Function__methods,             /* tp_methods */
             v8___Local_v8__Function__members,             /* tp_members */
             0,                         /* tp_getset */
             0,                         /* tp_base */
             0,                         /* tp_dict */
             0,                         /* tp_descr_get */
             0,                         /* tp_descr_set */
             0,                         /* tp_dictoffset */
             (initproc)v8___Local_v8__Function__init,      /* tp_init */
             0,                         /* tp_alloc */
             v8___Local_v8__Function__new,                 /* tp_new */
         };

static void
v8___Local_v8__Object__dealloc(v8___Local_v8__Object_* self);

static PyObject *
v8___Local_v8__Object__new(PyTypeObject *type, PyObject *args, PyObject *kwds);
static int
v8___Local_v8__Object__init(v8___Local_v8__Object_ *self, PyObject *args, PyObject *kwds);
           

static PyObject*
v8___Local_v8__Object___IsEmpty(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Local_v8__Object___Clear(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Local_v8__Object___New(PyObject *args, PyObject *kwds);
    
static PyMethodDef v8___Local_v8__Object__methods[] = {
             
            {"IsEmpty",  (PyCFunction)v8___Local_v8__Object___IsEmpty, METH_VARARGS| METH_KEYWORDS, ""},
            {"Clear",  (PyCFunction)v8___Local_v8__Object___Clear, METH_VARARGS| METH_KEYWORDS, ""},
            {"New",  (PyCFunction)v8___Local_v8__Object___New,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},
            {"New",  (PyCFunction)v8___Local_v8__Object___New,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},{NULL}  /* Sentinel */
};

static PyMemberDef v8___Local_v8__Object__members[] =   {
        {NULL}
};
    

static PyTypeObject v8___Local_v8__Object_Type = {
             PyObject_HEAD_INIT(NULL)
             0,                         /*ob_size*/
             "v8.Local<v8::Object>",             /*tp_name*/
             sizeof(v8___Local_v8__Object_), /*tp_basicsize*/
             0,                         /*tp_itemsize*/
             (destructor)v8___Local_v8__Object__dealloc,                         /*tp_dealloc*/
             0,                         /*tp_print*/
             0,                         /*tp_getattr*/
             0,                         /*tp_setattr*/
             0,                         /*tp_compare*/
             0,                         /*tp_repr*/
             0,                         /*tp_as_number*/
             0,                         /*tp_as_sequence*/
             0,                         /*tp_as_mapping*/
             0,                         /*tp_hash */
             0,                         /*tp_call*/
             0,                         /*tp_str*/
             0,                         /*tp_getattro*/
             0,                         /*tp_setattro*/
             0,                         /*tp_as_buffer*/
             Py_TPFLAGS_DEFAULT| Py_TPFLAGS_BASETYPE,        /*tp_flags*/
             "v8___Local_v8__Object_ objects",           /* tp_doc */
             0,		               /* tp_traverse */
             0,		               /* tp_clear */
             0,		               /* tp_richcompare */
             0,		               /* tp_weaklistoffset */
             0,		               /* tp_iter */
             0,		               /* tp_iternext */
             v8___Local_v8__Object__methods,             /* tp_methods */
             v8___Local_v8__Object__members,             /* tp_members */
             0,                         /* tp_getset */
             0,                         /* tp_base */
             0,                         /* tp_dict */
             0,                         /* tp_descr_get */
             0,                         /* tp_descr_set */
             0,                         /* tp_dictoffset */
             (initproc)v8___Local_v8__Object__init,      /* tp_init */
             0,                         /* tp_alloc */
             v8___Local_v8__Object__new,                 /* tp_new */
         };

static void
v8___Local_v8__StackTrace__dealloc(v8___Local_v8__StackTrace_* self);

static PyObject *
v8___Local_v8__StackTrace__new(PyTypeObject *type, PyObject *args, PyObject *kwds);
static int
v8___Local_v8__StackTrace__init(v8___Local_v8__StackTrace_ *self, PyObject *args, PyObject *kwds);
           

static PyObject*
v8___Local_v8__StackTrace___IsEmpty(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Local_v8__StackTrace___Clear(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Local_v8__StackTrace___New(PyObject *args, PyObject *kwds);
    
static PyMethodDef v8___Local_v8__StackTrace__methods[] = {
             
            {"IsEmpty",  (PyCFunction)v8___Local_v8__StackTrace___IsEmpty, METH_VARARGS| METH_KEYWORDS, ""},
            {"Clear",  (PyCFunction)v8___Local_v8__StackTrace___Clear, METH_VARARGS| METH_KEYWORDS, ""},
            {"New",  (PyCFunction)v8___Local_v8__StackTrace___New,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},
            {"New",  (PyCFunction)v8___Local_v8__StackTrace___New,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},{NULL}  /* Sentinel */
};

static PyMemberDef v8___Local_v8__StackTrace__members[] =   {
        {NULL}
};
    

static PyTypeObject v8___Local_v8__StackTrace_Type = {
             PyObject_HEAD_INIT(NULL)
             0,                         /*ob_size*/
             "v8.Local<v8::StackTrace>",             /*tp_name*/
             sizeof(v8___Local_v8__StackTrace_), /*tp_basicsize*/
             0,                         /*tp_itemsize*/
             (destructor)v8___Local_v8__StackTrace__dealloc,                         /*tp_dealloc*/
             0,                         /*tp_print*/
             0,                         /*tp_getattr*/
             0,                         /*tp_setattr*/
             0,                         /*tp_compare*/
             0,                         /*tp_repr*/
             0,                         /*tp_as_number*/
             0,                         /*tp_as_sequence*/
             0,                         /*tp_as_mapping*/
             0,                         /*tp_hash */
             0,                         /*tp_call*/
             0,                         /*tp_str*/
             0,                         /*tp_getattro*/
             0,                         /*tp_setattro*/
             0,                         /*tp_as_buffer*/
             Py_TPFLAGS_DEFAULT| Py_TPFLAGS_BASETYPE,        /*tp_flags*/
             "v8___Local_v8__StackTrace_ objects",           /* tp_doc */
             0,		               /* tp_traverse */
             0,		               /* tp_clear */
             0,		               /* tp_richcompare */
             0,		               /* tp_weaklistoffset */
             0,		               /* tp_iter */
             0,		               /* tp_iternext */
             v8___Local_v8__StackTrace__methods,             /* tp_methods */
             v8___Local_v8__StackTrace__members,             /* tp_members */
             0,                         /* tp_getset */
             0,                         /* tp_base */
             0,                         /* tp_dict */
             0,                         /* tp_descr_get */
             0,                         /* tp_descr_set */
             0,                         /* tp_dictoffset */
             (initproc)v8___Local_v8__StackTrace__init,      /* tp_init */
             0,                         /* tp_alloc */
             v8___Local_v8__StackTrace__new,                 /* tp_new */
         };

static void
v8___Local_v8__StackFrame__dealloc(v8___Local_v8__StackFrame_* self);

static PyObject *
v8___Local_v8__StackFrame__new(PyTypeObject *type, PyObject *args, PyObject *kwds);
static int
v8___Local_v8__StackFrame__init(v8___Local_v8__StackFrame_ *self, PyObject *args, PyObject *kwds);
           

static PyMethodDef v8___Local_v8__StackFrame__methods[] = {
             {NULL}  /* Sentinel */
};

static PyMemberDef v8___Local_v8__StackFrame__members[] =   {
        {NULL}
};
    

static PyTypeObject v8___Local_v8__StackFrame_Type = {
             PyObject_HEAD_INIT(NULL)
             0,                         /*ob_size*/
             "v8.Local<v8::StackFrame>",             /*tp_name*/
             sizeof(v8___Local_v8__StackFrame_), /*tp_basicsize*/
             0,                         /*tp_itemsize*/
             (destructor)v8___Local_v8__StackFrame__dealloc,                         /*tp_dealloc*/
             0,                         /*tp_print*/
             0,                         /*tp_getattr*/
             0,                         /*tp_setattr*/
             0,                         /*tp_compare*/
             0,                         /*tp_repr*/
             0,                         /*tp_as_number*/
             0,                         /*tp_as_sequence*/
             0,                         /*tp_as_mapping*/
             0,                         /*tp_hash */
             0,                         /*tp_call*/
             0,                         /*tp_str*/
             0,                         /*tp_getattro*/
             0,                         /*tp_setattro*/
             0,                         /*tp_as_buffer*/
             Py_TPFLAGS_DEFAULT| Py_TPFLAGS_BASETYPE,        /*tp_flags*/
             "v8___Local_v8__StackFrame_ objects",           /* tp_doc */
             0,		               /* tp_traverse */
             0,		               /* tp_clear */
             0,		               /* tp_richcompare */
             0,		               /* tp_weaklistoffset */
             0,		               /* tp_iter */
             0,		               /* tp_iternext */
             v8___Local_v8__StackFrame__methods,             /* tp_methods */
             v8___Local_v8__StackFrame__members,             /* tp_members */
             0,                         /* tp_getset */
             0,                         /* tp_base */
             0,                         /* tp_dict */
             0,                         /* tp_descr_get */
             0,                         /* tp_descr_set */
             0,                         /* tp_dictoffset */
             (initproc)v8___Local_v8__StackFrame__init,      /* tp_init */
             0,                         /* tp_alloc */
             v8___Local_v8__StackFrame__new,                 /* tp_new */
         };

static void
v8___Local_v8__Array__dealloc(v8___Local_v8__Array_* self);

static PyObject *
v8___Local_v8__Array__new(PyTypeObject *type, PyObject *args, PyObject *kwds);
static int
v8___Local_v8__Array__init(v8___Local_v8__Array_ *self, PyObject *args, PyObject *kwds);
           

static PyMethodDef v8___Local_v8__Array__methods[] = {
             {NULL}  /* Sentinel */
};

static PyMemberDef v8___Local_v8__Array__members[] =   {
        {NULL}
};
    

static PyTypeObject v8___Local_v8__Array_Type = {
             PyObject_HEAD_INIT(NULL)
             0,                         /*ob_size*/
             "v8.Local<v8::Array>",             /*tp_name*/
             sizeof(v8___Local_v8__Array_), /*tp_basicsize*/
             0,                         /*tp_itemsize*/
             (destructor)v8___Local_v8__Array__dealloc,                         /*tp_dealloc*/
             0,                         /*tp_print*/
             0,                         /*tp_getattr*/
             0,                         /*tp_setattr*/
             0,                         /*tp_compare*/
             0,                         /*tp_repr*/
             0,                         /*tp_as_number*/
             0,                         /*tp_as_sequence*/
             0,                         /*tp_as_mapping*/
             0,                         /*tp_hash */
             0,                         /*tp_call*/
             0,                         /*tp_str*/
             0,                         /*tp_getattro*/
             0,                         /*tp_setattro*/
             0,                         /*tp_as_buffer*/
             Py_TPFLAGS_DEFAULT| Py_TPFLAGS_BASETYPE,        /*tp_flags*/
             "v8___Local_v8__Array_ objects",           /* tp_doc */
             0,		               /* tp_traverse */
             0,		               /* tp_clear */
             0,		               /* tp_richcompare */
             0,		               /* tp_weaklistoffset */
             0,		               /* tp_iter */
             0,		               /* tp_iternext */
             v8___Local_v8__Array__methods,             /* tp_methods */
             v8___Local_v8__Array__members,             /* tp_members */
             0,                         /* tp_getset */
             0,                         /* tp_base */
             0,                         /* tp_dict */
             0,                         /* tp_descr_get */
             0,                         /* tp_descr_set */
             0,                         /* tp_dictoffset */
             (initproc)v8___Local_v8__Array__init,      /* tp_init */
             0,                         /* tp_alloc */
             v8___Local_v8__Array__new,                 /* tp_new */
         };

static void
v8___Local_v8__NativeWeakMap__dealloc(v8___Local_v8__NativeWeakMap_* self);

static PyObject *
v8___Local_v8__NativeWeakMap__new(PyTypeObject *type, PyObject *args, PyObject *kwds);
static int
v8___Local_v8__NativeWeakMap__init(v8___Local_v8__NativeWeakMap_ *self, PyObject *args, PyObject *kwds);
           

static PyMethodDef v8___Local_v8__NativeWeakMap__methods[] = {
             {NULL}  /* Sentinel */
};

static PyMemberDef v8___Local_v8__NativeWeakMap__members[] =   {
        {NULL}
};
    

static PyTypeObject v8___Local_v8__NativeWeakMap_Type = {
             PyObject_HEAD_INIT(NULL)
             0,                         /*ob_size*/
             "v8.Local<v8::NativeWeakMap>",             /*tp_name*/
             sizeof(v8___Local_v8__NativeWeakMap_), /*tp_basicsize*/
             0,                         /*tp_itemsize*/
             (destructor)v8___Local_v8__NativeWeakMap__dealloc,                         /*tp_dealloc*/
             0,                         /*tp_print*/
             0,                         /*tp_getattr*/
             0,                         /*tp_setattr*/
             0,                         /*tp_compare*/
             0,                         /*tp_repr*/
             0,                         /*tp_as_number*/
             0,                         /*tp_as_sequence*/
             0,                         /*tp_as_mapping*/
             0,                         /*tp_hash */
             0,                         /*tp_call*/
             0,                         /*tp_str*/
             0,                         /*tp_getattro*/
             0,                         /*tp_setattro*/
             0,                         /*tp_as_buffer*/
             Py_TPFLAGS_DEFAULT| Py_TPFLAGS_BASETYPE,        /*tp_flags*/
             "v8___Local_v8__NativeWeakMap_ objects",           /* tp_doc */
             0,		               /* tp_traverse */
             0,		               /* tp_clear */
             0,		               /* tp_richcompare */
             0,		               /* tp_weaklistoffset */
             0,		               /* tp_iter */
             0,		               /* tp_iternext */
             v8___Local_v8__NativeWeakMap__methods,             /* tp_methods */
             v8___Local_v8__NativeWeakMap__members,             /* tp_members */
             0,                         /* tp_getset */
             0,                         /* tp_base */
             0,                         /* tp_dict */
             0,                         /* tp_descr_get */
             0,                         /* tp_descr_set */
             0,                         /* tp_dictoffset */
             (initproc)v8___Local_v8__NativeWeakMap__init,      /* tp_init */
             0,                         /* tp_alloc */
             v8___Local_v8__NativeWeakMap__new,                 /* tp_new */
         };

static void
v8___Local_v8__Number__dealloc(v8___Local_v8__Number_* self);

static PyObject *
v8___Local_v8__Number__new(PyTypeObject *type, PyObject *args, PyObject *kwds);
static int
v8___Local_v8__Number__init(v8___Local_v8__Number_ *self, PyObject *args, PyObject *kwds);
           

static PyObject*
v8___Local_v8__Number___IsEmpty(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Local_v8__Number___Clear(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Local_v8__Number___New(PyObject *args, PyObject *kwds);
    
static PyMethodDef v8___Local_v8__Number__methods[] = {
             
            {"IsEmpty",  (PyCFunction)v8___Local_v8__Number___IsEmpty, METH_VARARGS| METH_KEYWORDS, ""},
            {"Clear",  (PyCFunction)v8___Local_v8__Number___Clear, METH_VARARGS| METH_KEYWORDS, ""},
            {"New",  (PyCFunction)v8___Local_v8__Number___New,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},
            {"New",  (PyCFunction)v8___Local_v8__Number___New,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},{NULL}  /* Sentinel */
};

static PyMemberDef v8___Local_v8__Number__members[] =   {
        {NULL}
};
    

static PyTypeObject v8___Local_v8__Number_Type = {
             PyObject_HEAD_INIT(NULL)
             0,                         /*ob_size*/
             "v8.Local<v8::Number>",             /*tp_name*/
             sizeof(v8___Local_v8__Number_), /*tp_basicsize*/
             0,                         /*tp_itemsize*/
             (destructor)v8___Local_v8__Number__dealloc,                         /*tp_dealloc*/
             0,                         /*tp_print*/
             0,                         /*tp_getattr*/
             0,                         /*tp_setattr*/
             0,                         /*tp_compare*/
             0,                         /*tp_repr*/
             0,                         /*tp_as_number*/
             0,                         /*tp_as_sequence*/
             0,                         /*tp_as_mapping*/
             0,                         /*tp_hash */
             0,                         /*tp_call*/
             0,                         /*tp_str*/
             0,                         /*tp_getattro*/
             0,                         /*tp_setattro*/
             0,                         /*tp_as_buffer*/
             Py_TPFLAGS_DEFAULT| Py_TPFLAGS_BASETYPE,        /*tp_flags*/
             "v8___Local_v8__Number_ objects",           /* tp_doc */
             0,		               /* tp_traverse */
             0,		               /* tp_clear */
             0,		               /* tp_richcompare */
             0,		               /* tp_weaklistoffset */
             0,		               /* tp_iter */
             0,		               /* tp_iternext */
             v8___Local_v8__Number__methods,             /* tp_methods */
             v8___Local_v8__Number__members,             /* tp_members */
             0,                         /* tp_getset */
             0,                         /* tp_base */
             0,                         /* tp_dict */
             0,                         /* tp_descr_get */
             0,                         /* tp_descr_set */
             0,                         /* tp_dictoffset */
             (initproc)v8___Local_v8__Number__init,      /* tp_init */
             0,                         /* tp_alloc */
             v8___Local_v8__Number__new,                 /* tp_new */
         };

static void
v8___Local_v8__Uint32__dealloc(v8___Local_v8__Uint32_* self);

static PyObject *
v8___Local_v8__Uint32__new(PyTypeObject *type, PyObject *args, PyObject *kwds);
static int
v8___Local_v8__Uint32__init(v8___Local_v8__Uint32_ *self, PyObject *args, PyObject *kwds);
           

static PyObject*
v8___Local_v8__Uint32___IsEmpty(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Local_v8__Uint32___Clear(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Local_v8__Uint32___New(PyObject *args, PyObject *kwds);
    
static PyMethodDef v8___Local_v8__Uint32__methods[] = {
             
            {"IsEmpty",  (PyCFunction)v8___Local_v8__Uint32___IsEmpty, METH_VARARGS| METH_KEYWORDS, ""},
            {"Clear",  (PyCFunction)v8___Local_v8__Uint32___Clear, METH_VARARGS| METH_KEYWORDS, ""},
            {"New",  (PyCFunction)v8___Local_v8__Uint32___New,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},
            {"New",  (PyCFunction)v8___Local_v8__Uint32___New,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},{NULL}  /* Sentinel */
};

static PyMemberDef v8___Local_v8__Uint32__members[] =   {
        {NULL}
};
    

static PyTypeObject v8___Local_v8__Uint32_Type = {
             PyObject_HEAD_INIT(NULL)
             0,                         /*ob_size*/
             "v8.Local<v8::Uint32>",             /*tp_name*/
             sizeof(v8___Local_v8__Uint32_), /*tp_basicsize*/
             0,                         /*tp_itemsize*/
             (destructor)v8___Local_v8__Uint32__dealloc,                         /*tp_dealloc*/
             0,                         /*tp_print*/
             0,                         /*tp_getattr*/
             0,                         /*tp_setattr*/
             0,                         /*tp_compare*/
             0,                         /*tp_repr*/
             0,                         /*tp_as_number*/
             0,                         /*tp_as_sequence*/
             0,                         /*tp_as_mapping*/
             0,                         /*tp_hash */
             0,                         /*tp_call*/
             0,                         /*tp_str*/
             0,                         /*tp_getattro*/
             0,                         /*tp_setattro*/
             0,                         /*tp_as_buffer*/
             Py_TPFLAGS_DEFAULT| Py_TPFLAGS_BASETYPE,        /*tp_flags*/
             "v8___Local_v8__Uint32_ objects",           /* tp_doc */
             0,		               /* tp_traverse */
             0,		               /* tp_clear */
             0,		               /* tp_richcompare */
             0,		               /* tp_weaklistoffset */
             0,		               /* tp_iter */
             0,		               /* tp_iternext */
             v8___Local_v8__Uint32__methods,             /* tp_methods */
             v8___Local_v8__Uint32__members,             /* tp_members */
             0,                         /* tp_getset */
             0,                         /* tp_base */
             0,                         /* tp_dict */
             0,                         /* tp_descr_get */
             0,                         /* tp_descr_set */
             0,                         /* tp_dictoffset */
             (initproc)v8___Local_v8__Uint32__init,      /* tp_init */
             0,                         /* tp_alloc */
             v8___Local_v8__Uint32__new,                 /* tp_new */
         };

static void
v8___Local_v8__Int32__dealloc(v8___Local_v8__Int32_* self);

static PyObject *
v8___Local_v8__Int32__new(PyTypeObject *type, PyObject *args, PyObject *kwds);
static int
v8___Local_v8__Int32__init(v8___Local_v8__Int32_ *self, PyObject *args, PyObject *kwds);
           

static PyObject*
v8___Local_v8__Int32___IsEmpty(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Local_v8__Int32___Clear(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Local_v8__Int32___New(PyObject *args, PyObject *kwds);
    
static PyMethodDef v8___Local_v8__Int32__methods[] = {
             
            {"IsEmpty",  (PyCFunction)v8___Local_v8__Int32___IsEmpty, METH_VARARGS| METH_KEYWORDS, ""},
            {"Clear",  (PyCFunction)v8___Local_v8__Int32___Clear, METH_VARARGS| METH_KEYWORDS, ""},
            {"New",  (PyCFunction)v8___Local_v8__Int32___New,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},
            {"New",  (PyCFunction)v8___Local_v8__Int32___New,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},{NULL}  /* Sentinel */
};

static PyMemberDef v8___Local_v8__Int32__members[] =   {
        {NULL}
};
    

static PyTypeObject v8___Local_v8__Int32_Type = {
             PyObject_HEAD_INIT(NULL)
             0,                         /*ob_size*/
             "v8.Local<v8::Int32>",             /*tp_name*/
             sizeof(v8___Local_v8__Int32_), /*tp_basicsize*/
             0,                         /*tp_itemsize*/
             (destructor)v8___Local_v8__Int32__dealloc,                         /*tp_dealloc*/
             0,                         /*tp_print*/
             0,                         /*tp_getattr*/
             0,                         /*tp_setattr*/
             0,                         /*tp_compare*/
             0,                         /*tp_repr*/
             0,                         /*tp_as_number*/
             0,                         /*tp_as_sequence*/
             0,                         /*tp_as_mapping*/
             0,                         /*tp_hash */
             0,                         /*tp_call*/
             0,                         /*tp_str*/
             0,                         /*tp_getattro*/
             0,                         /*tp_setattro*/
             0,                         /*tp_as_buffer*/
             Py_TPFLAGS_DEFAULT| Py_TPFLAGS_BASETYPE,        /*tp_flags*/
             "v8___Local_v8__Int32_ objects",           /* tp_doc */
             0,		               /* tp_traverse */
             0,		               /* tp_clear */
             0,		               /* tp_richcompare */
             0,		               /* tp_weaklistoffset */
             0,		               /* tp_iter */
             0,		               /* tp_iternext */
             v8___Local_v8__Int32__methods,             /* tp_methods */
             v8___Local_v8__Int32__members,             /* tp_members */
             0,                         /* tp_getset */
             0,                         /* tp_base */
             0,                         /* tp_dict */
             0,                         /* tp_descr_get */
             0,                         /* tp_descr_set */
             0,                         /* tp_dictoffset */
             (initproc)v8___Local_v8__Int32__init,      /* tp_init */
             0,                         /* tp_alloc */
             v8___Local_v8__Int32__new,                 /* tp_new */
         };

static void
v8___Local_v8__Symbol__dealloc(v8___Local_v8__Symbol_* self);

static PyObject *
v8___Local_v8__Symbol__new(PyTypeObject *type, PyObject *args, PyObject *kwds);
static int
v8___Local_v8__Symbol__init(v8___Local_v8__Symbol_ *self, PyObject *args, PyObject *kwds);
           

static PyMethodDef v8___Local_v8__Symbol__methods[] = {
             {NULL}  /* Sentinel */
};

static PyMemberDef v8___Local_v8__Symbol__members[] =   {
        {NULL}
};
    

static PyTypeObject v8___Local_v8__Symbol_Type = {
             PyObject_HEAD_INIT(NULL)
             0,                         /*ob_size*/
             "v8.Local<v8::Symbol>",             /*tp_name*/
             sizeof(v8___Local_v8__Symbol_), /*tp_basicsize*/
             0,                         /*tp_itemsize*/
             (destructor)v8___Local_v8__Symbol__dealloc,                         /*tp_dealloc*/
             0,                         /*tp_print*/
             0,                         /*tp_getattr*/
             0,                         /*tp_setattr*/
             0,                         /*tp_compare*/
             0,                         /*tp_repr*/
             0,                         /*tp_as_number*/
             0,                         /*tp_as_sequence*/
             0,                         /*tp_as_mapping*/
             0,                         /*tp_hash */
             0,                         /*tp_call*/
             0,                         /*tp_str*/
             0,                         /*tp_getattro*/
             0,                         /*tp_setattro*/
             0,                         /*tp_as_buffer*/
             Py_TPFLAGS_DEFAULT| Py_TPFLAGS_BASETYPE,        /*tp_flags*/
             "v8___Local_v8__Symbol_ objects",           /* tp_doc */
             0,		               /* tp_traverse */
             0,		               /* tp_clear */
             0,		               /* tp_richcompare */
             0,		               /* tp_weaklistoffset */
             0,		               /* tp_iter */
             0,		               /* tp_iternext */
             v8___Local_v8__Symbol__methods,             /* tp_methods */
             v8___Local_v8__Symbol__members,             /* tp_members */
             0,                         /* tp_getset */
             0,                         /* tp_base */
             0,                         /* tp_dict */
             0,                         /* tp_descr_get */
             0,                         /* tp_descr_set */
             0,                         /* tp_dictoffset */
             (initproc)v8___Local_v8__Symbol__init,      /* tp_init */
             0,                         /* tp_alloc */
             v8___Local_v8__Symbol__new,                 /* tp_new */
         };

static void
v8___Local_v8__Name__dealloc(v8___Local_v8__Name_* self);

static PyObject *
v8___Local_v8__Name__new(PyTypeObject *type, PyObject *args, PyObject *kwds);
static int
v8___Local_v8__Name__init(v8___Local_v8__Name_ *self, PyObject *args, PyObject *kwds);
           

static PyObject*
v8___Local_v8__Name___IsEmpty(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Local_v8__Name___Clear(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Local_v8__Name___New(PyObject *args, PyObject *kwds);
    
static PyMethodDef v8___Local_v8__Name__methods[] = {
             
            {"IsEmpty",  (PyCFunction)v8___Local_v8__Name___IsEmpty, METH_VARARGS| METH_KEYWORDS, ""},
            {"Clear",  (PyCFunction)v8___Local_v8__Name___Clear, METH_VARARGS| METH_KEYWORDS, ""},
            {"New",  (PyCFunction)v8___Local_v8__Name___New,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},
            {"New",  (PyCFunction)v8___Local_v8__Name___New,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},{NULL}  /* Sentinel */
};

static PyMemberDef v8___Local_v8__Name__members[] =   {
        {NULL}
};
    

static PyTypeObject v8___Local_v8__Name_Type = {
             PyObject_HEAD_INIT(NULL)
             0,                         /*ob_size*/
             "v8.Local<v8::Name>",             /*tp_name*/
             sizeof(v8___Local_v8__Name_), /*tp_basicsize*/
             0,                         /*tp_itemsize*/
             (destructor)v8___Local_v8__Name__dealloc,                         /*tp_dealloc*/
             0,                         /*tp_print*/
             0,                         /*tp_getattr*/
             0,                         /*tp_setattr*/
             0,                         /*tp_compare*/
             0,                         /*tp_repr*/
             0,                         /*tp_as_number*/
             0,                         /*tp_as_sequence*/
             0,                         /*tp_as_mapping*/
             0,                         /*tp_hash */
             0,                         /*tp_call*/
             0,                         /*tp_str*/
             0,                         /*tp_getattro*/
             0,                         /*tp_setattro*/
             0,                         /*tp_as_buffer*/
             Py_TPFLAGS_DEFAULT| Py_TPFLAGS_BASETYPE,        /*tp_flags*/
             "v8___Local_v8__Name_ objects",           /* tp_doc */
             0,		               /* tp_traverse */
             0,		               /* tp_clear */
             0,		               /* tp_richcompare */
             0,		               /* tp_weaklistoffset */
             0,		               /* tp_iter */
             0,		               /* tp_iternext */
             v8___Local_v8__Name__methods,             /* tp_methods */
             v8___Local_v8__Name__members,             /* tp_members */
             0,                         /* tp_getset */
             0,                         /* tp_base */
             0,                         /* tp_dict */
             0,                         /* tp_descr_get */
             0,                         /* tp_descr_set */
             0,                         /* tp_dictoffset */
             (initproc)v8___Local_v8__Name__init,      /* tp_init */
             0,                         /* tp_alloc */
             v8___Local_v8__Name__new,                 /* tp_new */
         };

static void
v8___Local_v8__FunctionTemplate__dealloc(v8___Local_v8__FunctionTemplate_* self);

static PyObject *
v8___Local_v8__FunctionTemplate__new(PyTypeObject *type, PyObject *args, PyObject *kwds);
static int
v8___Local_v8__FunctionTemplate__init(v8___Local_v8__FunctionTemplate_ *self, PyObject *args, PyObject *kwds);
           

static PyObject*
v8___Local_v8__FunctionTemplate___IsEmpty(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Local_v8__FunctionTemplate___Clear(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Local_v8__FunctionTemplate___New(PyObject *args, PyObject *kwds);
    
static PyMethodDef v8___Local_v8__FunctionTemplate__methods[] = {
             
            {"IsEmpty",  (PyCFunction)v8___Local_v8__FunctionTemplate___IsEmpty, METH_VARARGS| METH_KEYWORDS, ""},
            {"Clear",  (PyCFunction)v8___Local_v8__FunctionTemplate___Clear, METH_VARARGS| METH_KEYWORDS, ""},
            {"New",  (PyCFunction)v8___Local_v8__FunctionTemplate___New,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},
            {"New",  (PyCFunction)v8___Local_v8__FunctionTemplate___New,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},{NULL}  /* Sentinel */
};

static PyMemberDef v8___Local_v8__FunctionTemplate__members[] =   {
        {NULL}
};
    

static PyTypeObject v8___Local_v8__FunctionTemplate_Type = {
             PyObject_HEAD_INIT(NULL)
             0,                         /*ob_size*/
             "v8.Local<v8::FunctionTemplate>",             /*tp_name*/
             sizeof(v8___Local_v8__FunctionTemplate_), /*tp_basicsize*/
             0,                         /*tp_itemsize*/
             (destructor)v8___Local_v8__FunctionTemplate__dealloc,                         /*tp_dealloc*/
             0,                         /*tp_print*/
             0,                         /*tp_getattr*/
             0,                         /*tp_setattr*/
             0,                         /*tp_compare*/
             0,                         /*tp_repr*/
             0,                         /*tp_as_number*/
             0,                         /*tp_as_sequence*/
             0,                         /*tp_as_mapping*/
             0,                         /*tp_hash */
             0,                         /*tp_call*/
             0,                         /*tp_str*/
             0,                         /*tp_getattro*/
             0,                         /*tp_setattro*/
             0,                         /*tp_as_buffer*/
             Py_TPFLAGS_DEFAULT| Py_TPFLAGS_BASETYPE,        /*tp_flags*/
             "v8___Local_v8__FunctionTemplate_ objects",           /* tp_doc */
             0,		               /* tp_traverse */
             0,		               /* tp_clear */
             0,		               /* tp_richcompare */
             0,		               /* tp_weaklistoffset */
             0,		               /* tp_iter */
             0,		               /* tp_iternext */
             v8___Local_v8__FunctionTemplate__methods,             /* tp_methods */
             v8___Local_v8__FunctionTemplate__members,             /* tp_members */
             0,                         /* tp_getset */
             0,                         /* tp_base */
             0,                         /* tp_dict */
             0,                         /* tp_descr_get */
             0,                         /* tp_descr_set */
             0,                         /* tp_dictoffset */
             (initproc)v8___Local_v8__FunctionTemplate__init,      /* tp_init */
             0,                         /* tp_alloc */
             v8___Local_v8__FunctionTemplate__new,                 /* tp_new */
         };

static void
v8___Local_v8__Map__dealloc(v8___Local_v8__Map_* self);

static PyObject *
v8___Local_v8__Map__new(PyTypeObject *type, PyObject *args, PyObject *kwds);
static int
v8___Local_v8__Map__init(v8___Local_v8__Map_ *self, PyObject *args, PyObject *kwds);
           

static PyMethodDef v8___Local_v8__Map__methods[] = {
             {NULL}  /* Sentinel */
};

static PyMemberDef v8___Local_v8__Map__members[] =   {
        {NULL}
};
    

static PyTypeObject v8___Local_v8__Map_Type = {
             PyObject_HEAD_INIT(NULL)
             0,                         /*ob_size*/
             "v8.Local<v8::Map>",             /*tp_name*/
             sizeof(v8___Local_v8__Map_), /*tp_basicsize*/
             0,                         /*tp_itemsize*/
             (destructor)v8___Local_v8__Map__dealloc,                         /*tp_dealloc*/
             0,                         /*tp_print*/
             0,                         /*tp_getattr*/
             0,                         /*tp_setattr*/
             0,                         /*tp_compare*/
             0,                         /*tp_repr*/
             0,                         /*tp_as_number*/
             0,                         /*tp_as_sequence*/
             0,                         /*tp_as_mapping*/
             0,                         /*tp_hash */
             0,                         /*tp_call*/
             0,                         /*tp_str*/
             0,                         /*tp_getattro*/
             0,                         /*tp_setattro*/
             0,                         /*tp_as_buffer*/
             Py_TPFLAGS_DEFAULT| Py_TPFLAGS_BASETYPE,        /*tp_flags*/
             "v8___Local_v8__Map_ objects",           /* tp_doc */
             0,		               /* tp_traverse */
             0,		               /* tp_clear */
             0,		               /* tp_richcompare */
             0,		               /* tp_weaklistoffset */
             0,		               /* tp_iter */
             0,		               /* tp_iternext */
             v8___Local_v8__Map__methods,             /* tp_methods */
             v8___Local_v8__Map__members,             /* tp_members */
             0,                         /* tp_getset */
             0,                         /* tp_base */
             0,                         /* tp_dict */
             0,                         /* tp_descr_get */
             0,                         /* tp_descr_set */
             0,                         /* tp_dictoffset */
             (initproc)v8___Local_v8__Map__init,      /* tp_init */
             0,                         /* tp_alloc */
             v8___Local_v8__Map__new,                 /* tp_new */
         };

static void
v8___Local_v8__Set__dealloc(v8___Local_v8__Set_* self);

static PyObject *
v8___Local_v8__Set__new(PyTypeObject *type, PyObject *args, PyObject *kwds);
static int
v8___Local_v8__Set__init(v8___Local_v8__Set_ *self, PyObject *args, PyObject *kwds);
           

static PyMethodDef v8___Local_v8__Set__methods[] = {
             {NULL}  /* Sentinel */
};

static PyMemberDef v8___Local_v8__Set__members[] =   {
        {NULL}
};
    

static PyTypeObject v8___Local_v8__Set_Type = {
             PyObject_HEAD_INIT(NULL)
             0,                         /*ob_size*/
             "v8.Local<v8::Set>",             /*tp_name*/
             sizeof(v8___Local_v8__Set_), /*tp_basicsize*/
             0,                         /*tp_itemsize*/
             (destructor)v8___Local_v8__Set__dealloc,                         /*tp_dealloc*/
             0,                         /*tp_print*/
             0,                         /*tp_getattr*/
             0,                         /*tp_setattr*/
             0,                         /*tp_compare*/
             0,                         /*tp_repr*/
             0,                         /*tp_as_number*/
             0,                         /*tp_as_sequence*/
             0,                         /*tp_as_mapping*/
             0,                         /*tp_hash */
             0,                         /*tp_call*/
             0,                         /*tp_str*/
             0,                         /*tp_getattro*/
             0,                         /*tp_setattro*/
             0,                         /*tp_as_buffer*/
             Py_TPFLAGS_DEFAULT| Py_TPFLAGS_BASETYPE,        /*tp_flags*/
             "v8___Local_v8__Set_ objects",           /* tp_doc */
             0,		               /* tp_traverse */
             0,		               /* tp_clear */
             0,		               /* tp_richcompare */
             0,		               /* tp_weaklistoffset */
             0,		               /* tp_iter */
             0,		               /* tp_iternext */
             v8___Local_v8__Set__methods,             /* tp_methods */
             v8___Local_v8__Set__members,             /* tp_members */
             0,                         /* tp_getset */
             0,                         /* tp_base */
             0,                         /* tp_dict */
             0,                         /* tp_descr_get */
             0,                         /* tp_descr_set */
             0,                         /* tp_dictoffset */
             (initproc)v8___Local_v8__Set__init,      /* tp_init */
             0,                         /* tp_alloc */
             v8___Local_v8__Set__new,                 /* tp_new */
         };

static void
v8___Local_v8__Promise__Resolver__dealloc(v8___Local_v8__Promise__Resolver_* self);

static PyObject *
v8___Local_v8__Promise__Resolver__new(PyTypeObject *type, PyObject *args, PyObject *kwds);
static int
v8___Local_v8__Promise__Resolver__init(v8___Local_v8__Promise__Resolver_ *self, PyObject *args, PyObject *kwds);
           

static PyMethodDef v8___Local_v8__Promise__Resolver__methods[] = {
             {NULL}  /* Sentinel */
};

static PyMemberDef v8___Local_v8__Promise__Resolver__members[] =   {
        {NULL}
};
    

static PyTypeObject v8___Local_v8__Promise__Resolver_Type = {
             PyObject_HEAD_INIT(NULL)
             0,                         /*ob_size*/
             "v8.Local<v8::Promise::Resolver>",             /*tp_name*/
             sizeof(v8___Local_v8__Promise__Resolver_), /*tp_basicsize*/
             0,                         /*tp_itemsize*/
             (destructor)v8___Local_v8__Promise__Resolver__dealloc,                         /*tp_dealloc*/
             0,                         /*tp_print*/
             0,                         /*tp_getattr*/
             0,                         /*tp_setattr*/
             0,                         /*tp_compare*/
             0,                         /*tp_repr*/
             0,                         /*tp_as_number*/
             0,                         /*tp_as_sequence*/
             0,                         /*tp_as_mapping*/
             0,                         /*tp_hash */
             0,                         /*tp_call*/
             0,                         /*tp_str*/
             0,                         /*tp_getattro*/
             0,                         /*tp_setattro*/
             0,                         /*tp_as_buffer*/
             Py_TPFLAGS_DEFAULT| Py_TPFLAGS_BASETYPE,        /*tp_flags*/
             "v8___Local_v8__Promise__Resolver_ objects",           /* tp_doc */
             0,		               /* tp_traverse */
             0,		               /* tp_clear */
             0,		               /* tp_richcompare */
             0,		               /* tp_weaklistoffset */
             0,		               /* tp_iter */
             0,		               /* tp_iternext */
             v8___Local_v8__Promise__Resolver__methods,             /* tp_methods */
             v8___Local_v8__Promise__Resolver__members,             /* tp_members */
             0,                         /* tp_getset */
             0,                         /* tp_base */
             0,                         /* tp_dict */
             0,                         /* tp_descr_get */
             0,                         /* tp_descr_set */
             0,                         /* tp_dictoffset */
             (initproc)v8___Local_v8__Promise__Resolver__init,      /* tp_init */
             0,                         /* tp_alloc */
             v8___Local_v8__Promise__Resolver__new,                 /* tp_new */
         };

static void
v8___Local_v8__Promise__dealloc(v8___Local_v8__Promise_* self);

static PyObject *
v8___Local_v8__Promise__new(PyTypeObject *type, PyObject *args, PyObject *kwds);
static int
v8___Local_v8__Promise__init(v8___Local_v8__Promise_ *self, PyObject *args, PyObject *kwds);
           

static PyObject*
v8___Local_v8__Promise___IsEmpty(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Local_v8__Promise___Clear(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Local_v8__Promise___New(PyObject *args, PyObject *kwds);
    
static PyMethodDef v8___Local_v8__Promise__methods[] = {
             
            {"IsEmpty",  (PyCFunction)v8___Local_v8__Promise___IsEmpty, METH_VARARGS| METH_KEYWORDS, ""},
            {"Clear",  (PyCFunction)v8___Local_v8__Promise___Clear, METH_VARARGS| METH_KEYWORDS, ""},
            {"New",  (PyCFunction)v8___Local_v8__Promise___New,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},
            {"New",  (PyCFunction)v8___Local_v8__Promise___New,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},{NULL}  /* Sentinel */
};

static PyMemberDef v8___Local_v8__Promise__members[] =   {
        {NULL}
};
    

static PyTypeObject v8___Local_v8__Promise_Type = {
             PyObject_HEAD_INIT(NULL)
             0,                         /*ob_size*/
             "v8.Local<v8::Promise>",             /*tp_name*/
             sizeof(v8___Local_v8__Promise_), /*tp_basicsize*/
             0,                         /*tp_itemsize*/
             (destructor)v8___Local_v8__Promise__dealloc,                         /*tp_dealloc*/
             0,                         /*tp_print*/
             0,                         /*tp_getattr*/
             0,                         /*tp_setattr*/
             0,                         /*tp_compare*/
             0,                         /*tp_repr*/
             0,                         /*tp_as_number*/
             0,                         /*tp_as_sequence*/
             0,                         /*tp_as_mapping*/
             0,                         /*tp_hash */
             0,                         /*tp_call*/
             0,                         /*tp_str*/
             0,                         /*tp_getattro*/
             0,                         /*tp_setattro*/
             0,                         /*tp_as_buffer*/
             Py_TPFLAGS_DEFAULT| Py_TPFLAGS_BASETYPE,        /*tp_flags*/
             "v8___Local_v8__Promise_ objects",           /* tp_doc */
             0,		               /* tp_traverse */
             0,		               /* tp_clear */
             0,		               /* tp_richcompare */
             0,		               /* tp_weaklistoffset */
             0,		               /* tp_iter */
             0,		               /* tp_iternext */
             v8___Local_v8__Promise__methods,             /* tp_methods */
             v8___Local_v8__Promise__members,             /* tp_members */
             0,                         /* tp_getset */
             0,                         /* tp_base */
             0,                         /* tp_dict */
             0,                         /* tp_descr_get */
             0,                         /* tp_descr_set */
             0,                         /* tp_dictoffset */
             (initproc)v8___Local_v8__Promise__init,      /* tp_init */
             0,                         /* tp_alloc */
             v8___Local_v8__Promise__new,                 /* tp_new */
         };

static void
v8___Local_v8__ArrayBuffer__dealloc(v8___Local_v8__ArrayBuffer_* self);

static PyObject *
v8___Local_v8__ArrayBuffer__new(PyTypeObject *type, PyObject *args, PyObject *kwds);
static int
v8___Local_v8__ArrayBuffer__init(v8___Local_v8__ArrayBuffer_ *self, PyObject *args, PyObject *kwds);
           

static PyMethodDef v8___Local_v8__ArrayBuffer__methods[] = {
             {NULL}  /* Sentinel */
};

static PyMemberDef v8___Local_v8__ArrayBuffer__members[] =   {
        {NULL}
};
    

static PyTypeObject v8___Local_v8__ArrayBuffer_Type = {
             PyObject_HEAD_INIT(NULL)
             0,                         /*ob_size*/
             "v8.Local<v8::ArrayBuffer>",             /*tp_name*/
             sizeof(v8___Local_v8__ArrayBuffer_), /*tp_basicsize*/
             0,                         /*tp_itemsize*/
             (destructor)v8___Local_v8__ArrayBuffer__dealloc,                         /*tp_dealloc*/
             0,                         /*tp_print*/
             0,                         /*tp_getattr*/
             0,                         /*tp_setattr*/
             0,                         /*tp_compare*/
             0,                         /*tp_repr*/
             0,                         /*tp_as_number*/
             0,                         /*tp_as_sequence*/
             0,                         /*tp_as_mapping*/
             0,                         /*tp_hash */
             0,                         /*tp_call*/
             0,                         /*tp_str*/
             0,                         /*tp_getattro*/
             0,                         /*tp_setattro*/
             0,                         /*tp_as_buffer*/
             Py_TPFLAGS_DEFAULT| Py_TPFLAGS_BASETYPE,        /*tp_flags*/
             "v8___Local_v8__ArrayBuffer_ objects",           /* tp_doc */
             0,		               /* tp_traverse */
             0,		               /* tp_clear */
             0,		               /* tp_richcompare */
             0,		               /* tp_weaklistoffset */
             0,		               /* tp_iter */
             0,		               /* tp_iternext */
             v8___Local_v8__ArrayBuffer__methods,             /* tp_methods */
             v8___Local_v8__ArrayBuffer__members,             /* tp_members */
             0,                         /* tp_getset */
             0,                         /* tp_base */
             0,                         /* tp_dict */
             0,                         /* tp_descr_get */
             0,                         /* tp_descr_set */
             0,                         /* tp_dictoffset */
             (initproc)v8___Local_v8__ArrayBuffer__init,      /* tp_init */
             0,                         /* tp_alloc */
             v8___Local_v8__ArrayBuffer__new,                 /* tp_new */
         };

static void
v8___Local_v8__Uint8Array__dealloc(v8___Local_v8__Uint8Array_* self);

static PyObject *
v8___Local_v8__Uint8Array__new(PyTypeObject *type, PyObject *args, PyObject *kwds);
static int
v8___Local_v8__Uint8Array__init(v8___Local_v8__Uint8Array_ *self, PyObject *args, PyObject *kwds);
           

static PyMethodDef v8___Local_v8__Uint8Array__methods[] = {
             {NULL}  /* Sentinel */
};

static PyMemberDef v8___Local_v8__Uint8Array__members[] =   {
        {NULL}
};
    

static PyTypeObject v8___Local_v8__Uint8Array_Type = {
             PyObject_HEAD_INIT(NULL)
             0,                         /*ob_size*/
             "v8.Local<v8::Uint8Array>",             /*tp_name*/
             sizeof(v8___Local_v8__Uint8Array_), /*tp_basicsize*/
             0,                         /*tp_itemsize*/
             (destructor)v8___Local_v8__Uint8Array__dealloc,                         /*tp_dealloc*/
             0,                         /*tp_print*/
             0,                         /*tp_getattr*/
             0,                         /*tp_setattr*/
             0,                         /*tp_compare*/
             0,                         /*tp_repr*/
             0,                         /*tp_as_number*/
             0,                         /*tp_as_sequence*/
             0,                         /*tp_as_mapping*/
             0,                         /*tp_hash */
             0,                         /*tp_call*/
             0,                         /*tp_str*/
             0,                         /*tp_getattro*/
             0,                         /*tp_setattro*/
             0,                         /*tp_as_buffer*/
             Py_TPFLAGS_DEFAULT| Py_TPFLAGS_BASETYPE,        /*tp_flags*/
             "v8___Local_v8__Uint8Array_ objects",           /* tp_doc */
             0,		               /* tp_traverse */
             0,		               /* tp_clear */
             0,		               /* tp_richcompare */
             0,		               /* tp_weaklistoffset */
             0,		               /* tp_iter */
             0,		               /* tp_iternext */
             v8___Local_v8__Uint8Array__methods,             /* tp_methods */
             v8___Local_v8__Uint8Array__members,             /* tp_members */
             0,                         /* tp_getset */
             0,                         /* tp_base */
             0,                         /* tp_dict */
             0,                         /* tp_descr_get */
             0,                         /* tp_descr_set */
             0,                         /* tp_dictoffset */
             (initproc)v8___Local_v8__Uint8Array__init,      /* tp_init */
             0,                         /* tp_alloc */
             v8___Local_v8__Uint8Array__new,                 /* tp_new */
         };

static void
v8___Local_v8__SharedArrayBuffer__dealloc(v8___Local_v8__SharedArrayBuffer_* self);

static PyObject *
v8___Local_v8__SharedArrayBuffer__new(PyTypeObject *type, PyObject *args, PyObject *kwds);
static int
v8___Local_v8__SharedArrayBuffer__init(v8___Local_v8__SharedArrayBuffer_ *self, PyObject *args, PyObject *kwds);
           

static PyMethodDef v8___Local_v8__SharedArrayBuffer__methods[] = {
             {NULL}  /* Sentinel */
};

static PyMemberDef v8___Local_v8__SharedArrayBuffer__members[] =   {
        {NULL}
};
    

static PyTypeObject v8___Local_v8__SharedArrayBuffer_Type = {
             PyObject_HEAD_INIT(NULL)
             0,                         /*ob_size*/
             "v8.Local<v8::SharedArrayBuffer>",             /*tp_name*/
             sizeof(v8___Local_v8__SharedArrayBuffer_), /*tp_basicsize*/
             0,                         /*tp_itemsize*/
             (destructor)v8___Local_v8__SharedArrayBuffer__dealloc,                         /*tp_dealloc*/
             0,                         /*tp_print*/
             0,                         /*tp_getattr*/
             0,                         /*tp_setattr*/
             0,                         /*tp_compare*/
             0,                         /*tp_repr*/
             0,                         /*tp_as_number*/
             0,                         /*tp_as_sequence*/
             0,                         /*tp_as_mapping*/
             0,                         /*tp_hash */
             0,                         /*tp_call*/
             0,                         /*tp_str*/
             0,                         /*tp_getattro*/
             0,                         /*tp_setattro*/
             0,                         /*tp_as_buffer*/
             Py_TPFLAGS_DEFAULT| Py_TPFLAGS_BASETYPE,        /*tp_flags*/
             "v8___Local_v8__SharedArrayBuffer_ objects",           /* tp_doc */
             0,		               /* tp_traverse */
             0,		               /* tp_clear */
             0,		               /* tp_richcompare */
             0,		               /* tp_weaklistoffset */
             0,		               /* tp_iter */
             0,		               /* tp_iternext */
             v8___Local_v8__SharedArrayBuffer__methods,             /* tp_methods */
             v8___Local_v8__SharedArrayBuffer__members,             /* tp_members */
             0,                         /* tp_getset */
             0,                         /* tp_base */
             0,                         /* tp_dict */
             0,                         /* tp_descr_get */
             0,                         /* tp_descr_set */
             0,                         /* tp_dictoffset */
             (initproc)v8___Local_v8__SharedArrayBuffer__init,      /* tp_init */
             0,                         /* tp_alloc */
             v8___Local_v8__SharedArrayBuffer__new,                 /* tp_new */
         };

static void
v8___Local_v8__Uint8ClampedArray__dealloc(v8___Local_v8__Uint8ClampedArray_* self);

static PyObject *
v8___Local_v8__Uint8ClampedArray__new(PyTypeObject *type, PyObject *args, PyObject *kwds);
static int
v8___Local_v8__Uint8ClampedArray__init(v8___Local_v8__Uint8ClampedArray_ *self, PyObject *args, PyObject *kwds);
           

static PyMethodDef v8___Local_v8__Uint8ClampedArray__methods[] = {
             {NULL}  /* Sentinel */
};

static PyMemberDef v8___Local_v8__Uint8ClampedArray__members[] =   {
        {NULL}
};
    

static PyTypeObject v8___Local_v8__Uint8ClampedArray_Type = {
             PyObject_HEAD_INIT(NULL)
             0,                         /*ob_size*/
             "v8.Local<v8::Uint8ClampedArray>",             /*tp_name*/
             sizeof(v8___Local_v8__Uint8ClampedArray_), /*tp_basicsize*/
             0,                         /*tp_itemsize*/
             (destructor)v8___Local_v8__Uint8ClampedArray__dealloc,                         /*tp_dealloc*/
             0,                         /*tp_print*/
             0,                         /*tp_getattr*/
             0,                         /*tp_setattr*/
             0,                         /*tp_compare*/
             0,                         /*tp_repr*/
             0,                         /*tp_as_number*/
             0,                         /*tp_as_sequence*/
             0,                         /*tp_as_mapping*/
             0,                         /*tp_hash */
             0,                         /*tp_call*/
             0,                         /*tp_str*/
             0,                         /*tp_getattro*/
             0,                         /*tp_setattro*/
             0,                         /*tp_as_buffer*/
             Py_TPFLAGS_DEFAULT| Py_TPFLAGS_BASETYPE,        /*tp_flags*/
             "v8___Local_v8__Uint8ClampedArray_ objects",           /* tp_doc */
             0,		               /* tp_traverse */
             0,		               /* tp_clear */
             0,		               /* tp_richcompare */
             0,		               /* tp_weaklistoffset */
             0,		               /* tp_iter */
             0,		               /* tp_iternext */
             v8___Local_v8__Uint8ClampedArray__methods,             /* tp_methods */
             v8___Local_v8__Uint8ClampedArray__members,             /* tp_members */
             0,                         /* tp_getset */
             0,                         /* tp_base */
             0,                         /* tp_dict */
             0,                         /* tp_descr_get */
             0,                         /* tp_descr_set */
             0,                         /* tp_dictoffset */
             (initproc)v8___Local_v8__Uint8ClampedArray__init,      /* tp_init */
             0,                         /* tp_alloc */
             v8___Local_v8__Uint8ClampedArray__new,                 /* tp_new */
         };

static void
v8___Local_v8__Int8Array__dealloc(v8___Local_v8__Int8Array_* self);

static PyObject *
v8___Local_v8__Int8Array__new(PyTypeObject *type, PyObject *args, PyObject *kwds);
static int
v8___Local_v8__Int8Array__init(v8___Local_v8__Int8Array_ *self, PyObject *args, PyObject *kwds);
           

static PyMethodDef v8___Local_v8__Int8Array__methods[] = {
             {NULL}  /* Sentinel */
};

static PyMemberDef v8___Local_v8__Int8Array__members[] =   {
        {NULL}
};
    

static PyTypeObject v8___Local_v8__Int8Array_Type = {
             PyObject_HEAD_INIT(NULL)
             0,                         /*ob_size*/
             "v8.Local<v8::Int8Array>",             /*tp_name*/
             sizeof(v8___Local_v8__Int8Array_), /*tp_basicsize*/
             0,                         /*tp_itemsize*/
             (destructor)v8___Local_v8__Int8Array__dealloc,                         /*tp_dealloc*/
             0,                         /*tp_print*/
             0,                         /*tp_getattr*/
             0,                         /*tp_setattr*/
             0,                         /*tp_compare*/
             0,                         /*tp_repr*/
             0,                         /*tp_as_number*/
             0,                         /*tp_as_sequence*/
             0,                         /*tp_as_mapping*/
             0,                         /*tp_hash */
             0,                         /*tp_call*/
             0,                         /*tp_str*/
             0,                         /*tp_getattro*/
             0,                         /*tp_setattro*/
             0,                         /*tp_as_buffer*/
             Py_TPFLAGS_DEFAULT| Py_TPFLAGS_BASETYPE,        /*tp_flags*/
             "v8___Local_v8__Int8Array_ objects",           /* tp_doc */
             0,		               /* tp_traverse */
             0,		               /* tp_clear */
             0,		               /* tp_richcompare */
             0,		               /* tp_weaklistoffset */
             0,		               /* tp_iter */
             0,		               /* tp_iternext */
             v8___Local_v8__Int8Array__methods,             /* tp_methods */
             v8___Local_v8__Int8Array__members,             /* tp_members */
             0,                         /* tp_getset */
             0,                         /* tp_base */
             0,                         /* tp_dict */
             0,                         /* tp_descr_get */
             0,                         /* tp_descr_set */
             0,                         /* tp_dictoffset */
             (initproc)v8___Local_v8__Int8Array__init,      /* tp_init */
             0,                         /* tp_alloc */
             v8___Local_v8__Int8Array__new,                 /* tp_new */
         };

static void
v8___Local_v8__Uint16Array__dealloc(v8___Local_v8__Uint16Array_* self);

static PyObject *
v8___Local_v8__Uint16Array__new(PyTypeObject *type, PyObject *args, PyObject *kwds);
static int
v8___Local_v8__Uint16Array__init(v8___Local_v8__Uint16Array_ *self, PyObject *args, PyObject *kwds);
           

static PyMethodDef v8___Local_v8__Uint16Array__methods[] = {
             {NULL}  /* Sentinel */
};

static PyMemberDef v8___Local_v8__Uint16Array__members[] =   {
        {NULL}
};
    

static PyTypeObject v8___Local_v8__Uint16Array_Type = {
             PyObject_HEAD_INIT(NULL)
             0,                         /*ob_size*/
             "v8.Local<v8::Uint16Array>",             /*tp_name*/
             sizeof(v8___Local_v8__Uint16Array_), /*tp_basicsize*/
             0,                         /*tp_itemsize*/
             (destructor)v8___Local_v8__Uint16Array__dealloc,                         /*tp_dealloc*/
             0,                         /*tp_print*/
             0,                         /*tp_getattr*/
             0,                         /*tp_setattr*/
             0,                         /*tp_compare*/
             0,                         /*tp_repr*/
             0,                         /*tp_as_number*/
             0,                         /*tp_as_sequence*/
             0,                         /*tp_as_mapping*/
             0,                         /*tp_hash */
             0,                         /*tp_call*/
             0,                         /*tp_str*/
             0,                         /*tp_getattro*/
             0,                         /*tp_setattro*/
             0,                         /*tp_as_buffer*/
             Py_TPFLAGS_DEFAULT| Py_TPFLAGS_BASETYPE,        /*tp_flags*/
             "v8___Local_v8__Uint16Array_ objects",           /* tp_doc */
             0,		               /* tp_traverse */
             0,		               /* tp_clear */
             0,		               /* tp_richcompare */
             0,		               /* tp_weaklistoffset */
             0,		               /* tp_iter */
             0,		               /* tp_iternext */
             v8___Local_v8__Uint16Array__methods,             /* tp_methods */
             v8___Local_v8__Uint16Array__members,             /* tp_members */
             0,                         /* tp_getset */
             0,                         /* tp_base */
             0,                         /* tp_dict */
             0,                         /* tp_descr_get */
             0,                         /* tp_descr_set */
             0,                         /* tp_dictoffset */
             (initproc)v8___Local_v8__Uint16Array__init,      /* tp_init */
             0,                         /* tp_alloc */
             v8___Local_v8__Uint16Array__new,                 /* tp_new */
         };

static void
v8___Local_v8__Int16Array__dealloc(v8___Local_v8__Int16Array_* self);

static PyObject *
v8___Local_v8__Int16Array__new(PyTypeObject *type, PyObject *args, PyObject *kwds);
static int
v8___Local_v8__Int16Array__init(v8___Local_v8__Int16Array_ *self, PyObject *args, PyObject *kwds);
           

static PyMethodDef v8___Local_v8__Int16Array__methods[] = {
             {NULL}  /* Sentinel */
};

static PyMemberDef v8___Local_v8__Int16Array__members[] =   {
        {NULL}
};
    

static PyTypeObject v8___Local_v8__Int16Array_Type = {
             PyObject_HEAD_INIT(NULL)
             0,                         /*ob_size*/
             "v8.Local<v8::Int16Array>",             /*tp_name*/
             sizeof(v8___Local_v8__Int16Array_), /*tp_basicsize*/
             0,                         /*tp_itemsize*/
             (destructor)v8___Local_v8__Int16Array__dealloc,                         /*tp_dealloc*/
             0,                         /*tp_print*/
             0,                         /*tp_getattr*/
             0,                         /*tp_setattr*/
             0,                         /*tp_compare*/
             0,                         /*tp_repr*/
             0,                         /*tp_as_number*/
             0,                         /*tp_as_sequence*/
             0,                         /*tp_as_mapping*/
             0,                         /*tp_hash */
             0,                         /*tp_call*/
             0,                         /*tp_str*/
             0,                         /*tp_getattro*/
             0,                         /*tp_setattro*/
             0,                         /*tp_as_buffer*/
             Py_TPFLAGS_DEFAULT| Py_TPFLAGS_BASETYPE,        /*tp_flags*/
             "v8___Local_v8__Int16Array_ objects",           /* tp_doc */
             0,		               /* tp_traverse */
             0,		               /* tp_clear */
             0,		               /* tp_richcompare */
             0,		               /* tp_weaklistoffset */
             0,		               /* tp_iter */
             0,		               /* tp_iternext */
             v8___Local_v8__Int16Array__methods,             /* tp_methods */
             v8___Local_v8__Int16Array__members,             /* tp_members */
             0,                         /* tp_getset */
             0,                         /* tp_base */
             0,                         /* tp_dict */
             0,                         /* tp_descr_get */
             0,                         /* tp_descr_set */
             0,                         /* tp_dictoffset */
             (initproc)v8___Local_v8__Int16Array__init,      /* tp_init */
             0,                         /* tp_alloc */
             v8___Local_v8__Int16Array__new,                 /* tp_new */
         };

static void
v8___Local_v8__Uint32Array__dealloc(v8___Local_v8__Uint32Array_* self);

static PyObject *
v8___Local_v8__Uint32Array__new(PyTypeObject *type, PyObject *args, PyObject *kwds);
static int
v8___Local_v8__Uint32Array__init(v8___Local_v8__Uint32Array_ *self, PyObject *args, PyObject *kwds);
           

static PyMethodDef v8___Local_v8__Uint32Array__methods[] = {
             {NULL}  /* Sentinel */
};

static PyMemberDef v8___Local_v8__Uint32Array__members[] =   {
        {NULL}
};
    

static PyTypeObject v8___Local_v8__Uint32Array_Type = {
             PyObject_HEAD_INIT(NULL)
             0,                         /*ob_size*/
             "v8.Local<v8::Uint32Array>",             /*tp_name*/
             sizeof(v8___Local_v8__Uint32Array_), /*tp_basicsize*/
             0,                         /*tp_itemsize*/
             (destructor)v8___Local_v8__Uint32Array__dealloc,                         /*tp_dealloc*/
             0,                         /*tp_print*/
             0,                         /*tp_getattr*/
             0,                         /*tp_setattr*/
             0,                         /*tp_compare*/
             0,                         /*tp_repr*/
             0,                         /*tp_as_number*/
             0,                         /*tp_as_sequence*/
             0,                         /*tp_as_mapping*/
             0,                         /*tp_hash */
             0,                         /*tp_call*/
             0,                         /*tp_str*/
             0,                         /*tp_getattro*/
             0,                         /*tp_setattro*/
             0,                         /*tp_as_buffer*/
             Py_TPFLAGS_DEFAULT| Py_TPFLAGS_BASETYPE,        /*tp_flags*/
             "v8___Local_v8__Uint32Array_ objects",           /* tp_doc */
             0,		               /* tp_traverse */
             0,		               /* tp_clear */
             0,		               /* tp_richcompare */
             0,		               /* tp_weaklistoffset */
             0,		               /* tp_iter */
             0,		               /* tp_iternext */
             v8___Local_v8__Uint32Array__methods,             /* tp_methods */
             v8___Local_v8__Uint32Array__members,             /* tp_members */
             0,                         /* tp_getset */
             0,                         /* tp_base */
             0,                         /* tp_dict */
             0,                         /* tp_descr_get */
             0,                         /* tp_descr_set */
             0,                         /* tp_dictoffset */
             (initproc)v8___Local_v8__Uint32Array__init,      /* tp_init */
             0,                         /* tp_alloc */
             v8___Local_v8__Uint32Array__new,                 /* tp_new */
         };

static void
v8___Local_v8__Int32Array__dealloc(v8___Local_v8__Int32Array_* self);

static PyObject *
v8___Local_v8__Int32Array__new(PyTypeObject *type, PyObject *args, PyObject *kwds);
static int
v8___Local_v8__Int32Array__init(v8___Local_v8__Int32Array_ *self, PyObject *args, PyObject *kwds);
           

static PyMethodDef v8___Local_v8__Int32Array__methods[] = {
             {NULL}  /* Sentinel */
};

static PyMemberDef v8___Local_v8__Int32Array__members[] =   {
        {NULL}
};
    

static PyTypeObject v8___Local_v8__Int32Array_Type = {
             PyObject_HEAD_INIT(NULL)
             0,                         /*ob_size*/
             "v8.Local<v8::Int32Array>",             /*tp_name*/
             sizeof(v8___Local_v8__Int32Array_), /*tp_basicsize*/
             0,                         /*tp_itemsize*/
             (destructor)v8___Local_v8__Int32Array__dealloc,                         /*tp_dealloc*/
             0,                         /*tp_print*/
             0,                         /*tp_getattr*/
             0,                         /*tp_setattr*/
             0,                         /*tp_compare*/
             0,                         /*tp_repr*/
             0,                         /*tp_as_number*/
             0,                         /*tp_as_sequence*/
             0,                         /*tp_as_mapping*/
             0,                         /*tp_hash */
             0,                         /*tp_call*/
             0,                         /*tp_str*/
             0,                         /*tp_getattro*/
             0,                         /*tp_setattro*/
             0,                         /*tp_as_buffer*/
             Py_TPFLAGS_DEFAULT| Py_TPFLAGS_BASETYPE,        /*tp_flags*/
             "v8___Local_v8__Int32Array_ objects",           /* tp_doc */
             0,		               /* tp_traverse */
             0,		               /* tp_clear */
             0,		               /* tp_richcompare */
             0,		               /* tp_weaklistoffset */
             0,		               /* tp_iter */
             0,		               /* tp_iternext */
             v8___Local_v8__Int32Array__methods,             /* tp_methods */
             v8___Local_v8__Int32Array__members,             /* tp_members */
             0,                         /* tp_getset */
             0,                         /* tp_base */
             0,                         /* tp_dict */
             0,                         /* tp_descr_get */
             0,                         /* tp_descr_set */
             0,                         /* tp_dictoffset */
             (initproc)v8___Local_v8__Int32Array__init,      /* tp_init */
             0,                         /* tp_alloc */
             v8___Local_v8__Int32Array__new,                 /* tp_new */
         };

static void
v8___Local_v8__Float32Array__dealloc(v8___Local_v8__Float32Array_* self);

static PyObject *
v8___Local_v8__Float32Array__new(PyTypeObject *type, PyObject *args, PyObject *kwds);
static int
v8___Local_v8__Float32Array__init(v8___Local_v8__Float32Array_ *self, PyObject *args, PyObject *kwds);
           

static PyMethodDef v8___Local_v8__Float32Array__methods[] = {
             {NULL}  /* Sentinel */
};

static PyMemberDef v8___Local_v8__Float32Array__members[] =   {
        {NULL}
};
    

static PyTypeObject v8___Local_v8__Float32Array_Type = {
             PyObject_HEAD_INIT(NULL)
             0,                         /*ob_size*/
             "v8.Local<v8::Float32Array>",             /*tp_name*/
             sizeof(v8___Local_v8__Float32Array_), /*tp_basicsize*/
             0,                         /*tp_itemsize*/
             (destructor)v8___Local_v8__Float32Array__dealloc,                         /*tp_dealloc*/
             0,                         /*tp_print*/
             0,                         /*tp_getattr*/
             0,                         /*tp_setattr*/
             0,                         /*tp_compare*/
             0,                         /*tp_repr*/
             0,                         /*tp_as_number*/
             0,                         /*tp_as_sequence*/
             0,                         /*tp_as_mapping*/
             0,                         /*tp_hash */
             0,                         /*tp_call*/
             0,                         /*tp_str*/
             0,                         /*tp_getattro*/
             0,                         /*tp_setattro*/
             0,                         /*tp_as_buffer*/
             Py_TPFLAGS_DEFAULT| Py_TPFLAGS_BASETYPE,        /*tp_flags*/
             "v8___Local_v8__Float32Array_ objects",           /* tp_doc */
             0,		               /* tp_traverse */
             0,		               /* tp_clear */
             0,		               /* tp_richcompare */
             0,		               /* tp_weaklistoffset */
             0,		               /* tp_iter */
             0,		               /* tp_iternext */
             v8___Local_v8__Float32Array__methods,             /* tp_methods */
             v8___Local_v8__Float32Array__members,             /* tp_members */
             0,                         /* tp_getset */
             0,                         /* tp_base */
             0,                         /* tp_dict */
             0,                         /* tp_descr_get */
             0,                         /* tp_descr_set */
             0,                         /* tp_dictoffset */
             (initproc)v8___Local_v8__Float32Array__init,      /* tp_init */
             0,                         /* tp_alloc */
             v8___Local_v8__Float32Array__new,                 /* tp_new */
         };

static void
v8___Local_v8__Float64Array__dealloc(v8___Local_v8__Float64Array_* self);

static PyObject *
v8___Local_v8__Float64Array__new(PyTypeObject *type, PyObject *args, PyObject *kwds);
static int
v8___Local_v8__Float64Array__init(v8___Local_v8__Float64Array_ *self, PyObject *args, PyObject *kwds);
           

static PyMethodDef v8___Local_v8__Float64Array__methods[] = {
             {NULL}  /* Sentinel */
};

static PyMemberDef v8___Local_v8__Float64Array__members[] =   {
        {NULL}
};
    

static PyTypeObject v8___Local_v8__Float64Array_Type = {
             PyObject_HEAD_INIT(NULL)
             0,                         /*ob_size*/
             "v8.Local<v8::Float64Array>",             /*tp_name*/
             sizeof(v8___Local_v8__Float64Array_), /*tp_basicsize*/
             0,                         /*tp_itemsize*/
             (destructor)v8___Local_v8__Float64Array__dealloc,                         /*tp_dealloc*/
             0,                         /*tp_print*/
             0,                         /*tp_getattr*/
             0,                         /*tp_setattr*/
             0,                         /*tp_compare*/
             0,                         /*tp_repr*/
             0,                         /*tp_as_number*/
             0,                         /*tp_as_sequence*/
             0,                         /*tp_as_mapping*/
             0,                         /*tp_hash */
             0,                         /*tp_call*/
             0,                         /*tp_str*/
             0,                         /*tp_getattro*/
             0,                         /*tp_setattro*/
             0,                         /*tp_as_buffer*/
             Py_TPFLAGS_DEFAULT| Py_TPFLAGS_BASETYPE,        /*tp_flags*/
             "v8___Local_v8__Float64Array_ objects",           /* tp_doc */
             0,		               /* tp_traverse */
             0,		               /* tp_clear */
             0,		               /* tp_richcompare */
             0,		               /* tp_weaklistoffset */
             0,		               /* tp_iter */
             0,		               /* tp_iternext */
             v8___Local_v8__Float64Array__methods,             /* tp_methods */
             v8___Local_v8__Float64Array__members,             /* tp_members */
             0,                         /* tp_getset */
             0,                         /* tp_base */
             0,                         /* tp_dict */
             0,                         /* tp_descr_get */
             0,                         /* tp_descr_set */
             0,                         /* tp_dictoffset */
             (initproc)v8___Local_v8__Float64Array__init,      /* tp_init */
             0,                         /* tp_alloc */
             v8___Local_v8__Float64Array__new,                 /* tp_new */
         };

static void
v8___Local_v8__DataView__dealloc(v8___Local_v8__DataView_* self);

static PyObject *
v8___Local_v8__DataView__new(PyTypeObject *type, PyObject *args, PyObject *kwds);
static int
v8___Local_v8__DataView__init(v8___Local_v8__DataView_ *self, PyObject *args, PyObject *kwds);
           

static PyMethodDef v8___Local_v8__DataView__methods[] = {
             {NULL}  /* Sentinel */
};

static PyMemberDef v8___Local_v8__DataView__members[] =   {
        {NULL}
};
    

static PyTypeObject v8___Local_v8__DataView_Type = {
             PyObject_HEAD_INIT(NULL)
             0,                         /*ob_size*/
             "v8.Local<v8::DataView>",             /*tp_name*/
             sizeof(v8___Local_v8__DataView_), /*tp_basicsize*/
             0,                         /*tp_itemsize*/
             (destructor)v8___Local_v8__DataView__dealloc,                         /*tp_dealloc*/
             0,                         /*tp_print*/
             0,                         /*tp_getattr*/
             0,                         /*tp_setattr*/
             0,                         /*tp_compare*/
             0,                         /*tp_repr*/
             0,                         /*tp_as_number*/
             0,                         /*tp_as_sequence*/
             0,                         /*tp_as_mapping*/
             0,                         /*tp_hash */
             0,                         /*tp_call*/
             0,                         /*tp_str*/
             0,                         /*tp_getattro*/
             0,                         /*tp_setattro*/
             0,                         /*tp_as_buffer*/
             Py_TPFLAGS_DEFAULT| Py_TPFLAGS_BASETYPE,        /*tp_flags*/
             "v8___Local_v8__DataView_ objects",           /* tp_doc */
             0,		               /* tp_traverse */
             0,		               /* tp_clear */
             0,		               /* tp_richcompare */
             0,		               /* tp_weaklistoffset */
             0,		               /* tp_iter */
             0,		               /* tp_iternext */
             v8___Local_v8__DataView__methods,             /* tp_methods */
             v8___Local_v8__DataView__members,             /* tp_members */
             0,                         /* tp_getset */
             0,                         /* tp_base */
             0,                         /* tp_dict */
             0,                         /* tp_descr_get */
             0,                         /* tp_descr_set */
             0,                         /* tp_dictoffset */
             (initproc)v8___Local_v8__DataView__init,      /* tp_init */
             0,                         /* tp_alloc */
             v8___Local_v8__DataView__new,                 /* tp_new */
         };

static void
v8___Local_v8__RegExp__dealloc(v8___Local_v8__RegExp_* self);

static PyObject *
v8___Local_v8__RegExp__new(PyTypeObject *type, PyObject *args, PyObject *kwds);
static int
v8___Local_v8__RegExp__init(v8___Local_v8__RegExp_ *self, PyObject *args, PyObject *kwds);
           

static PyMethodDef v8___Local_v8__RegExp__methods[] = {
             {NULL}  /* Sentinel */
};

static PyMemberDef v8___Local_v8__RegExp__members[] =   {
        {NULL}
};
    

static PyTypeObject v8___Local_v8__RegExp_Type = {
             PyObject_HEAD_INIT(NULL)
             0,                         /*ob_size*/
             "v8.Local<v8::RegExp>",             /*tp_name*/
             sizeof(v8___Local_v8__RegExp_), /*tp_basicsize*/
             0,                         /*tp_itemsize*/
             (destructor)v8___Local_v8__RegExp__dealloc,                         /*tp_dealloc*/
             0,                         /*tp_print*/
             0,                         /*tp_getattr*/
             0,                         /*tp_setattr*/
             0,                         /*tp_compare*/
             0,                         /*tp_repr*/
             0,                         /*tp_as_number*/
             0,                         /*tp_as_sequence*/
             0,                         /*tp_as_mapping*/
             0,                         /*tp_hash */
             0,                         /*tp_call*/
             0,                         /*tp_str*/
             0,                         /*tp_getattro*/
             0,                         /*tp_setattro*/
             0,                         /*tp_as_buffer*/
             Py_TPFLAGS_DEFAULT| Py_TPFLAGS_BASETYPE,        /*tp_flags*/
             "v8___Local_v8__RegExp_ objects",           /* tp_doc */
             0,		               /* tp_traverse */
             0,		               /* tp_clear */
             0,		               /* tp_richcompare */
             0,		               /* tp_weaklistoffset */
             0,		               /* tp_iter */
             0,		               /* tp_iternext */
             v8___Local_v8__RegExp__methods,             /* tp_methods */
             v8___Local_v8__RegExp__members,             /* tp_members */
             0,                         /* tp_getset */
             0,                         /* tp_base */
             0,                         /* tp_dict */
             0,                         /* tp_descr_get */
             0,                         /* tp_descr_set */
             0,                         /* tp_dictoffset */
             (initproc)v8___Local_v8__RegExp__init,      /* tp_init */
             0,                         /* tp_alloc */
             v8___Local_v8__RegExp__new,                 /* tp_new */
         };

static void
v8___Local_v8__External__dealloc(v8___Local_v8__External_* self);

static PyObject *
v8___Local_v8__External__new(PyTypeObject *type, PyObject *args, PyObject *kwds);
static int
v8___Local_v8__External__init(v8___Local_v8__External_ *self, PyObject *args, PyObject *kwds);
           

static PyMethodDef v8___Local_v8__External__methods[] = {
             {NULL}  /* Sentinel */
};

static PyMemberDef v8___Local_v8__External__members[] =   {
        {NULL}
};
    

static PyTypeObject v8___Local_v8__External_Type = {
             PyObject_HEAD_INIT(NULL)
             0,                         /*ob_size*/
             "v8.Local<v8::External>",             /*tp_name*/
             sizeof(v8___Local_v8__External_), /*tp_basicsize*/
             0,                         /*tp_itemsize*/
             (destructor)v8___Local_v8__External__dealloc,                         /*tp_dealloc*/
             0,                         /*tp_print*/
             0,                         /*tp_getattr*/
             0,                         /*tp_setattr*/
             0,                         /*tp_compare*/
             0,                         /*tp_repr*/
             0,                         /*tp_as_number*/
             0,                         /*tp_as_sequence*/
             0,                         /*tp_as_mapping*/
             0,                         /*tp_hash */
             0,                         /*tp_call*/
             0,                         /*tp_str*/
             0,                         /*tp_getattro*/
             0,                         /*tp_setattro*/
             0,                         /*tp_as_buffer*/
             Py_TPFLAGS_DEFAULT| Py_TPFLAGS_BASETYPE,        /*tp_flags*/
             "v8___Local_v8__External_ objects",           /* tp_doc */
             0,		               /* tp_traverse */
             0,		               /* tp_clear */
             0,		               /* tp_richcompare */
             0,		               /* tp_weaklistoffset */
             0,		               /* tp_iter */
             0,		               /* tp_iternext */
             v8___Local_v8__External__methods,             /* tp_methods */
             v8___Local_v8__External__members,             /* tp_members */
             0,                         /* tp_getset */
             0,                         /* tp_base */
             0,                         /* tp_dict */
             0,                         /* tp_descr_get */
             0,                         /* tp_descr_set */
             0,                         /* tp_dictoffset */
             (initproc)v8___Local_v8__External__init,      /* tp_init */
             0,                         /* tp_alloc */
             v8___Local_v8__External__new,                 /* tp_new */
         };

static void
v8___Local_v8__Data__dealloc(v8___Local_v8__Data_* self);

static PyObject *
v8___Local_v8__Data__new(PyTypeObject *type, PyObject *args, PyObject *kwds);
static int
v8___Local_v8__Data__init(v8___Local_v8__Data_ *self, PyObject *args, PyObject *kwds);
           

static PyObject*
v8___Local_v8__Data___IsEmpty(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Local_v8__Data___Clear(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Local_v8__Data___New(PyObject *args, PyObject *kwds);
    
static PyMethodDef v8___Local_v8__Data__methods[] = {
             
            {"IsEmpty",  (PyCFunction)v8___Local_v8__Data___IsEmpty, METH_VARARGS| METH_KEYWORDS, ""},
            {"Clear",  (PyCFunction)v8___Local_v8__Data___Clear, METH_VARARGS| METH_KEYWORDS, ""},
            {"New",  (PyCFunction)v8___Local_v8__Data___New,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},
            {"New",  (PyCFunction)v8___Local_v8__Data___New,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},{NULL}  /* Sentinel */
};

static PyMemberDef v8___Local_v8__Data__members[] =   {
        {NULL}
};
    

static PyTypeObject v8___Local_v8__Data_Type = {
             PyObject_HEAD_INIT(NULL)
             0,                         /*ob_size*/
             "v8.Local<v8::Data>",             /*tp_name*/
             sizeof(v8___Local_v8__Data_), /*tp_basicsize*/
             0,                         /*tp_itemsize*/
             (destructor)v8___Local_v8__Data__dealloc,                         /*tp_dealloc*/
             0,                         /*tp_print*/
             0,                         /*tp_getattr*/
             0,                         /*tp_setattr*/
             0,                         /*tp_compare*/
             0,                         /*tp_repr*/
             0,                         /*tp_as_number*/
             0,                         /*tp_as_sequence*/
             0,                         /*tp_as_mapping*/
             0,                         /*tp_hash */
             0,                         /*tp_call*/
             0,                         /*tp_str*/
             0,                         /*tp_getattro*/
             0,                         /*tp_setattro*/
             0,                         /*tp_as_buffer*/
             Py_TPFLAGS_DEFAULT| Py_TPFLAGS_BASETYPE,        /*tp_flags*/
             "v8___Local_v8__Data_ objects",           /* tp_doc */
             0,		               /* tp_traverse */
             0,		               /* tp_clear */
             0,		               /* tp_richcompare */
             0,		               /* tp_weaklistoffset */
             0,		               /* tp_iter */
             0,		               /* tp_iternext */
             v8___Local_v8__Data__methods,             /* tp_methods */
             v8___Local_v8__Data__members,             /* tp_members */
             0,                         /* tp_getset */
             0,                         /* tp_base */
             0,                         /* tp_dict */
             0,                         /* tp_descr_get */
             0,                         /* tp_descr_set */
             0,                         /* tp_dictoffset */
             (initproc)v8___Local_v8__Data__init,      /* tp_init */
             0,                         /* tp_alloc */
             v8___Local_v8__Data__new,                 /* tp_new */
         };

static void
v8___Local_v8__AccessorSignature__dealloc(v8___Local_v8__AccessorSignature_* self);

static PyObject *
v8___Local_v8__AccessorSignature__new(PyTypeObject *type, PyObject *args, PyObject *kwds);
static int
v8___Local_v8__AccessorSignature__init(v8___Local_v8__AccessorSignature_ *self, PyObject *args, PyObject *kwds);
           

static PyObject*
v8___Local_v8__AccessorSignature___IsEmpty(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Local_v8__AccessorSignature___Clear(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Local_v8__AccessorSignature___New(PyObject *args, PyObject *kwds);
    
static PyMethodDef v8___Local_v8__AccessorSignature__methods[] = {
             
            {"IsEmpty",  (PyCFunction)v8___Local_v8__AccessorSignature___IsEmpty, METH_VARARGS| METH_KEYWORDS, ""},
            {"Clear",  (PyCFunction)v8___Local_v8__AccessorSignature___Clear, METH_VARARGS| METH_KEYWORDS, ""},
            {"New",  (PyCFunction)v8___Local_v8__AccessorSignature___New,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},
            {"New",  (PyCFunction)v8___Local_v8__AccessorSignature___New,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},{NULL}  /* Sentinel */
};

static PyMemberDef v8___Local_v8__AccessorSignature__members[] =   {
        {NULL}
};
    

static PyTypeObject v8___Local_v8__AccessorSignature_Type = {
             PyObject_HEAD_INIT(NULL)
             0,                         /*ob_size*/
             "v8.Local<v8::AccessorSignature>",             /*tp_name*/
             sizeof(v8___Local_v8__AccessorSignature_), /*tp_basicsize*/
             0,                         /*tp_itemsize*/
             (destructor)v8___Local_v8__AccessorSignature__dealloc,                         /*tp_dealloc*/
             0,                         /*tp_print*/
             0,                         /*tp_getattr*/
             0,                         /*tp_setattr*/
             0,                         /*tp_compare*/
             0,                         /*tp_repr*/
             0,                         /*tp_as_number*/
             0,                         /*tp_as_sequence*/
             0,                         /*tp_as_mapping*/
             0,                         /*tp_hash */
             0,                         /*tp_call*/
             0,                         /*tp_str*/
             0,                         /*tp_getattro*/
             0,                         /*tp_setattro*/
             0,                         /*tp_as_buffer*/
             Py_TPFLAGS_DEFAULT| Py_TPFLAGS_BASETYPE,        /*tp_flags*/
             "v8___Local_v8__AccessorSignature_ objects",           /* tp_doc */
             0,		               /* tp_traverse */
             0,		               /* tp_clear */
             0,		               /* tp_richcompare */
             0,		               /* tp_weaklistoffset */
             0,		               /* tp_iter */
             0,		               /* tp_iternext */
             v8___Local_v8__AccessorSignature__methods,             /* tp_methods */
             v8___Local_v8__AccessorSignature__members,             /* tp_members */
             0,                         /* tp_getset */
             0,                         /* tp_base */
             0,                         /* tp_dict */
             0,                         /* tp_descr_get */
             0,                         /* tp_descr_set */
             0,                         /* tp_dictoffset */
             (initproc)v8___Local_v8__AccessorSignature__init,      /* tp_init */
             0,                         /* tp_alloc */
             v8___Local_v8__AccessorSignature__new,                 /* tp_new */
         };

static void
v8___Local_v8__Signature__dealloc(v8___Local_v8__Signature_* self);

static PyObject *
v8___Local_v8__Signature__new(PyTypeObject *type, PyObject *args, PyObject *kwds);
static int
v8___Local_v8__Signature__init(v8___Local_v8__Signature_ *self, PyObject *args, PyObject *kwds);
           

static PyObject*
v8___Local_v8__Signature___IsEmpty(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Local_v8__Signature___Clear(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Local_v8__Signature___New(PyObject *args, PyObject *kwds);
    
static PyMethodDef v8___Local_v8__Signature__methods[] = {
             
            {"IsEmpty",  (PyCFunction)v8___Local_v8__Signature___IsEmpty, METH_VARARGS| METH_KEYWORDS, ""},
            {"Clear",  (PyCFunction)v8___Local_v8__Signature___Clear, METH_VARARGS| METH_KEYWORDS, ""},
            {"New",  (PyCFunction)v8___Local_v8__Signature___New,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},
            {"New",  (PyCFunction)v8___Local_v8__Signature___New,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},{NULL}  /* Sentinel */
};

static PyMemberDef v8___Local_v8__Signature__members[] =   {
        {NULL}
};
    

static PyTypeObject v8___Local_v8__Signature_Type = {
             PyObject_HEAD_INIT(NULL)
             0,                         /*ob_size*/
             "v8.Local<v8::Signature>",             /*tp_name*/
             sizeof(v8___Local_v8__Signature_), /*tp_basicsize*/
             0,                         /*tp_itemsize*/
             (destructor)v8___Local_v8__Signature__dealloc,                         /*tp_dealloc*/
             0,                         /*tp_print*/
             0,                         /*tp_getattr*/
             0,                         /*tp_setattr*/
             0,                         /*tp_compare*/
             0,                         /*tp_repr*/
             0,                         /*tp_as_number*/
             0,                         /*tp_as_sequence*/
             0,                         /*tp_as_mapping*/
             0,                         /*tp_hash */
             0,                         /*tp_call*/
             0,                         /*tp_str*/
             0,                         /*tp_getattro*/
             0,                         /*tp_setattro*/
             0,                         /*tp_as_buffer*/
             Py_TPFLAGS_DEFAULT| Py_TPFLAGS_BASETYPE,        /*tp_flags*/
             "v8___Local_v8__Signature_ objects",           /* tp_doc */
             0,		               /* tp_traverse */
             0,		               /* tp_clear */
             0,		               /* tp_richcompare */
             0,		               /* tp_weaklistoffset */
             0,		               /* tp_iter */
             0,		               /* tp_iternext */
             v8___Local_v8__Signature__methods,             /* tp_methods */
             v8___Local_v8__Signature__members,             /* tp_members */
             0,                         /* tp_getset */
             0,                         /* tp_base */
             0,                         /* tp_dict */
             0,                         /* tp_descr_get */
             0,                         /* tp_descr_set */
             0,                         /* tp_dictoffset */
             (initproc)v8___Local_v8__Signature__init,      /* tp_init */
             0,                         /* tp_alloc */
             v8___Local_v8__Signature__new,                 /* tp_new */
         };

static void
v8___Local_v8__ObjectTemplate__dealloc(v8___Local_v8__ObjectTemplate_* self);

static PyObject *
v8___Local_v8__ObjectTemplate__new(PyTypeObject *type, PyObject *args, PyObject *kwds);
static int
v8___Local_v8__ObjectTemplate__init(v8___Local_v8__ObjectTemplate_ *self, PyObject *args, PyObject *kwds);
           

static PyObject*
v8___Local_v8__ObjectTemplate___IsEmpty(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Local_v8__ObjectTemplate___Clear(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Local_v8__ObjectTemplate___New(PyObject *args, PyObject *kwds);
    
static PyMethodDef v8___Local_v8__ObjectTemplate__methods[] = {
             
            {"IsEmpty",  (PyCFunction)v8___Local_v8__ObjectTemplate___IsEmpty, METH_VARARGS| METH_KEYWORDS, ""},
            {"Clear",  (PyCFunction)v8___Local_v8__ObjectTemplate___Clear, METH_VARARGS| METH_KEYWORDS, ""},
            {"New",  (PyCFunction)v8___Local_v8__ObjectTemplate___New,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},
            {"New",  (PyCFunction)v8___Local_v8__ObjectTemplate___New,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},{NULL}  /* Sentinel */
};

static PyMemberDef v8___Local_v8__ObjectTemplate__members[] =   {
        {NULL}
};
    

static PyTypeObject v8___Local_v8__ObjectTemplate_Type = {
             PyObject_HEAD_INIT(NULL)
             0,                         /*ob_size*/
             "v8.Local<v8::ObjectTemplate>",             /*tp_name*/
             sizeof(v8___Local_v8__ObjectTemplate_), /*tp_basicsize*/
             0,                         /*tp_itemsize*/
             (destructor)v8___Local_v8__ObjectTemplate__dealloc,                         /*tp_dealloc*/
             0,                         /*tp_print*/
             0,                         /*tp_getattr*/
             0,                         /*tp_setattr*/
             0,                         /*tp_compare*/
             0,                         /*tp_repr*/
             0,                         /*tp_as_number*/
             0,                         /*tp_as_sequence*/
             0,                         /*tp_as_mapping*/
             0,                         /*tp_hash */
             0,                         /*tp_call*/
             0,                         /*tp_str*/
             0,                         /*tp_getattro*/
             0,                         /*tp_setattro*/
             0,                         /*tp_as_buffer*/
             Py_TPFLAGS_DEFAULT| Py_TPFLAGS_BASETYPE,        /*tp_flags*/
             "v8___Local_v8__ObjectTemplate_ objects",           /* tp_doc */
             0,		               /* tp_traverse */
             0,		               /* tp_clear */
             0,		               /* tp_richcompare */
             0,		               /* tp_weaklistoffset */
             0,		               /* tp_iter */
             0,		               /* tp_iternext */
             v8___Local_v8__ObjectTemplate__methods,             /* tp_methods */
             v8___Local_v8__ObjectTemplate__members,             /* tp_members */
             0,                         /* tp_getset */
             0,                         /* tp_base */
             0,                         /* tp_dict */
             0,                         /* tp_descr_get */
             0,                         /* tp_descr_set */
             0,                         /* tp_dictoffset */
             (initproc)v8___Local_v8__ObjectTemplate__init,      /* tp_init */
             0,                         /* tp_alloc */
             v8___Local_v8__ObjectTemplate__new,                 /* tp_new */
         };

static void
v8___Local_v8__TypeSwitch__dealloc(v8___Local_v8__TypeSwitch_* self);

static PyObject *
v8___Local_v8__TypeSwitch__new(PyTypeObject *type, PyObject *args, PyObject *kwds);
static int
v8___Local_v8__TypeSwitch__init(v8___Local_v8__TypeSwitch_ *self, PyObject *args, PyObject *kwds);
           

static PyMethodDef v8___Local_v8__TypeSwitch__methods[] = {
             {NULL}  /* Sentinel */
};

static PyMemberDef v8___Local_v8__TypeSwitch__members[] =   {
        {NULL}
};
    

static PyTypeObject v8___Local_v8__TypeSwitch_Type = {
             PyObject_HEAD_INIT(NULL)
             0,                         /*ob_size*/
             "v8.Local<v8::TypeSwitch>",             /*tp_name*/
             sizeof(v8___Local_v8__TypeSwitch_), /*tp_basicsize*/
             0,                         /*tp_itemsize*/
             (destructor)v8___Local_v8__TypeSwitch__dealloc,                         /*tp_dealloc*/
             0,                         /*tp_print*/
             0,                         /*tp_getattr*/
             0,                         /*tp_setattr*/
             0,                         /*tp_compare*/
             0,                         /*tp_repr*/
             0,                         /*tp_as_number*/
             0,                         /*tp_as_sequence*/
             0,                         /*tp_as_mapping*/
             0,                         /*tp_hash */
             0,                         /*tp_call*/
             0,                         /*tp_str*/
             0,                         /*tp_getattro*/
             0,                         /*tp_setattro*/
             0,                         /*tp_as_buffer*/
             Py_TPFLAGS_DEFAULT| Py_TPFLAGS_BASETYPE,        /*tp_flags*/
             "v8___Local_v8__TypeSwitch_ objects",           /* tp_doc */
             0,		               /* tp_traverse */
             0,		               /* tp_clear */
             0,		               /* tp_richcompare */
             0,		               /* tp_weaklistoffset */
             0,		               /* tp_iter */
             0,		               /* tp_iternext */
             v8___Local_v8__TypeSwitch__methods,             /* tp_methods */
             v8___Local_v8__TypeSwitch__members,             /* tp_members */
             0,                         /* tp_getset */
             0,                         /* tp_base */
             0,                         /* tp_dict */
             0,                         /* tp_descr_get */
             0,                         /* tp_descr_set */
             0,                         /* tp_dictoffset */
             (initproc)v8___Local_v8__TypeSwitch__init,      /* tp_init */
             0,                         /* tp_alloc */
             v8___Local_v8__TypeSwitch__new,                 /* tp_new */
         };

static void
v8___Local_v8__Message__dealloc(v8___Local_v8__Message_* self);

static PyObject *
v8___Local_v8__Message__new(PyTypeObject *type, PyObject *args, PyObject *kwds);
static int
v8___Local_v8__Message__init(v8___Local_v8__Message_ *self, PyObject *args, PyObject *kwds);
           

static PyMethodDef v8___Local_v8__Message__methods[] = {
             {NULL}  /* Sentinel */
};

static PyMemberDef v8___Local_v8__Message__members[] =   {
        {NULL}
};
    

static PyTypeObject v8___Local_v8__Message_Type = {
             PyObject_HEAD_INIT(NULL)
             0,                         /*ob_size*/
             "v8.Local<v8::Message>",             /*tp_name*/
             sizeof(v8___Local_v8__Message_), /*tp_basicsize*/
             0,                         /*tp_itemsize*/
             (destructor)v8___Local_v8__Message__dealloc,                         /*tp_dealloc*/
             0,                         /*tp_print*/
             0,                         /*tp_getattr*/
             0,                         /*tp_setattr*/
             0,                         /*tp_compare*/
             0,                         /*tp_repr*/
             0,                         /*tp_as_number*/
             0,                         /*tp_as_sequence*/
             0,                         /*tp_as_mapping*/
             0,                         /*tp_hash */
             0,                         /*tp_call*/
             0,                         /*tp_str*/
             0,                         /*tp_getattro*/
             0,                         /*tp_setattro*/
             0,                         /*tp_as_buffer*/
             Py_TPFLAGS_DEFAULT| Py_TPFLAGS_BASETYPE,        /*tp_flags*/
             "v8___Local_v8__Message_ objects",           /* tp_doc */
             0,		               /* tp_traverse */
             0,		               /* tp_clear */
             0,		               /* tp_richcompare */
             0,		               /* tp_weaklistoffset */
             0,		               /* tp_iter */
             0,		               /* tp_iternext */
             v8___Local_v8__Message__methods,             /* tp_methods */
             v8___Local_v8__Message__members,             /* tp_members */
             0,                         /* tp_getset */
             0,                         /* tp_base */
             0,                         /* tp_dict */
             0,                         /* tp_descr_get */
             0,                         /* tp_descr_set */
             0,                         /* tp_dictoffset */
             (initproc)v8___Local_v8__Message__init,      /* tp_init */
             0,                         /* tp_alloc */
             v8___Local_v8__Message__new,                 /* tp_new */
         };

static void
v8___MaybeLocal_v8__Script__dealloc(v8___MaybeLocal_v8__Script_* self);

static PyObject *
v8___MaybeLocal_v8__Script__new(PyTypeObject *type, PyObject *args, PyObject *kwds);
static int
v8___MaybeLocal_v8__Script__init(v8___MaybeLocal_v8__Script_ *self, PyObject *args, PyObject *kwds);
           

static PyMethodDef v8___MaybeLocal_v8__Script__methods[] = {
             {NULL}  /* Sentinel */
};

static PyMemberDef v8___MaybeLocal_v8__Script__members[] =   {
        {NULL}
};
    

static PyTypeObject v8___MaybeLocal_v8__Script_Type = {
             PyObject_HEAD_INIT(NULL)
             0,                         /*ob_size*/
             "v8.MaybeLocal<v8::Script>",             /*tp_name*/
             sizeof(v8___MaybeLocal_v8__Script_), /*tp_basicsize*/
             0,                         /*tp_itemsize*/
             (destructor)v8___MaybeLocal_v8__Script__dealloc,                         /*tp_dealloc*/
             0,                         /*tp_print*/
             0,                         /*tp_getattr*/
             0,                         /*tp_setattr*/
             0,                         /*tp_compare*/
             0,                         /*tp_repr*/
             0,                         /*tp_as_number*/
             0,                         /*tp_as_sequence*/
             0,                         /*tp_as_mapping*/
             0,                         /*tp_hash */
             0,                         /*tp_call*/
             0,                         /*tp_str*/
             0,                         /*tp_getattro*/
             0,                         /*tp_setattro*/
             0,                         /*tp_as_buffer*/
             Py_TPFLAGS_DEFAULT| Py_TPFLAGS_BASETYPE,        /*tp_flags*/
             "v8___MaybeLocal_v8__Script_ objects",           /* tp_doc */
             0,		               /* tp_traverse */
             0,		               /* tp_clear */
             0,		               /* tp_richcompare */
             0,		               /* tp_weaklistoffset */
             0,		               /* tp_iter */
             0,		               /* tp_iternext */
             v8___MaybeLocal_v8__Script__methods,             /* tp_methods */
             v8___MaybeLocal_v8__Script__members,             /* tp_members */
             0,                         /* tp_getset */
             0,                         /* tp_base */
             0,                         /* tp_dict */
             0,                         /* tp_descr_get */
             0,                         /* tp_descr_set */
             0,                         /* tp_dictoffset */
             (initproc)v8___MaybeLocal_v8__Script__init,      /* tp_init */
             0,                         /* tp_alloc */
             v8___MaybeLocal_v8__Script__new,                 /* tp_new */
         };

static void
v8___MaybeLocal_v8__Value__dealloc(v8___MaybeLocal_v8__Value_* self);

static PyObject *
v8___MaybeLocal_v8__Value__new(PyTypeObject *type, PyObject *args, PyObject *kwds);
static int
v8___MaybeLocal_v8__Value__init(v8___MaybeLocal_v8__Value_ *self, PyObject *args, PyObject *kwds);
           

static PyObject*
v8___MaybeLocal_v8__Value___IsEmpty(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___MaybeLocal_v8__Value___ToLocalChecked(PyObject *args, PyObject *kwds);
    
static PyMethodDef v8___MaybeLocal_v8__Value__methods[] = {
             
            {"IsEmpty",  (PyCFunction)v8___MaybeLocal_v8__Value___IsEmpty, METH_VARARGS| METH_KEYWORDS, ""},
            {"ToLocalChecked",  (PyCFunction)v8___MaybeLocal_v8__Value___ToLocalChecked, METH_VARARGS| METH_KEYWORDS, ""},{NULL}  /* Sentinel */
};

static PyMemberDef v8___MaybeLocal_v8__Value__members[] =   {
        {NULL}
};
    

static PyTypeObject v8___MaybeLocal_v8__Value_Type = {
             PyObject_HEAD_INIT(NULL)
             0,                         /*ob_size*/
             "v8.MaybeLocal<v8::Value>",             /*tp_name*/
             sizeof(v8___MaybeLocal_v8__Value_), /*tp_basicsize*/
             0,                         /*tp_itemsize*/
             (destructor)v8___MaybeLocal_v8__Value__dealloc,                         /*tp_dealloc*/
             0,                         /*tp_print*/
             0,                         /*tp_getattr*/
             0,                         /*tp_setattr*/
             0,                         /*tp_compare*/
             0,                         /*tp_repr*/
             0,                         /*tp_as_number*/
             0,                         /*tp_as_sequence*/
             0,                         /*tp_as_mapping*/
             0,                         /*tp_hash */
             0,                         /*tp_call*/
             0,                         /*tp_str*/
             0,                         /*tp_getattro*/
             0,                         /*tp_setattro*/
             0,                         /*tp_as_buffer*/
             Py_TPFLAGS_DEFAULT| Py_TPFLAGS_BASETYPE,        /*tp_flags*/
             "v8___MaybeLocal_v8__Value_ objects",           /* tp_doc */
             0,		               /* tp_traverse */
             0,		               /* tp_clear */
             0,		               /* tp_richcompare */
             0,		               /* tp_weaklistoffset */
             0,		               /* tp_iter */
             0,		               /* tp_iternext */
             v8___MaybeLocal_v8__Value__methods,             /* tp_methods */
             v8___MaybeLocal_v8__Value__members,             /* tp_members */
             0,                         /* tp_getset */
             0,                         /* tp_base */
             0,                         /* tp_dict */
             0,                         /* tp_descr_get */
             0,                         /* tp_descr_set */
             0,                         /* tp_dictoffset */
             (initproc)v8___MaybeLocal_v8__Value__init,      /* tp_init */
             0,                         /* tp_alloc */
             v8___MaybeLocal_v8__Value__new,                 /* tp_new */
         };

static void
v8___MaybeLocal_v8__UnboundScript__dealloc(v8___MaybeLocal_v8__UnboundScript_* self);

static PyObject *
v8___MaybeLocal_v8__UnboundScript__new(PyTypeObject *type, PyObject *args, PyObject *kwds);
static int
v8___MaybeLocal_v8__UnboundScript__init(v8___MaybeLocal_v8__UnboundScript_ *self, PyObject *args, PyObject *kwds);
           

static PyMethodDef v8___MaybeLocal_v8__UnboundScript__methods[] = {
             {NULL}  /* Sentinel */
};

static PyMemberDef v8___MaybeLocal_v8__UnboundScript__members[] =   {
        {NULL}
};
    

static PyTypeObject v8___MaybeLocal_v8__UnboundScript_Type = {
             PyObject_HEAD_INIT(NULL)
             0,                         /*ob_size*/
             "v8.MaybeLocal<v8::UnboundScript>",             /*tp_name*/
             sizeof(v8___MaybeLocal_v8__UnboundScript_), /*tp_basicsize*/
             0,                         /*tp_itemsize*/
             (destructor)v8___MaybeLocal_v8__UnboundScript__dealloc,                         /*tp_dealloc*/
             0,                         /*tp_print*/
             0,                         /*tp_getattr*/
             0,                         /*tp_setattr*/
             0,                         /*tp_compare*/
             0,                         /*tp_repr*/
             0,                         /*tp_as_number*/
             0,                         /*tp_as_sequence*/
             0,                         /*tp_as_mapping*/
             0,                         /*tp_hash */
             0,                         /*tp_call*/
             0,                         /*tp_str*/
             0,                         /*tp_getattro*/
             0,                         /*tp_setattro*/
             0,                         /*tp_as_buffer*/
             Py_TPFLAGS_DEFAULT| Py_TPFLAGS_BASETYPE,        /*tp_flags*/
             "v8___MaybeLocal_v8__UnboundScript_ objects",           /* tp_doc */
             0,		               /* tp_traverse */
             0,		               /* tp_clear */
             0,		               /* tp_richcompare */
             0,		               /* tp_weaklistoffset */
             0,		               /* tp_iter */
             0,		               /* tp_iternext */
             v8___MaybeLocal_v8__UnboundScript__methods,             /* tp_methods */
             v8___MaybeLocal_v8__UnboundScript__members,             /* tp_members */
             0,                         /* tp_getset */
             0,                         /* tp_base */
             0,                         /* tp_dict */
             0,                         /* tp_descr_get */
             0,                         /* tp_descr_set */
             0,                         /* tp_dictoffset */
             (initproc)v8___MaybeLocal_v8__UnboundScript__init,      /* tp_init */
             0,                         /* tp_alloc */
             v8___MaybeLocal_v8__UnboundScript__new,                 /* tp_new */
         };

static void
v8___MaybeLocal_v8__Function__dealloc(v8___MaybeLocal_v8__Function_* self);

static PyObject *
v8___MaybeLocal_v8__Function__new(PyTypeObject *type, PyObject *args, PyObject *kwds);
static int
v8___MaybeLocal_v8__Function__init(v8___MaybeLocal_v8__Function_ *self, PyObject *args, PyObject *kwds);
           

static PyMethodDef v8___MaybeLocal_v8__Function__methods[] = {
             {NULL}  /* Sentinel */
};

static PyMemberDef v8___MaybeLocal_v8__Function__members[] =   {
        {NULL}
};
    

static PyTypeObject v8___MaybeLocal_v8__Function_Type = {
             PyObject_HEAD_INIT(NULL)
             0,                         /*ob_size*/
             "v8.MaybeLocal<v8::Function>",             /*tp_name*/
             sizeof(v8___MaybeLocal_v8__Function_), /*tp_basicsize*/
             0,                         /*tp_itemsize*/
             (destructor)v8___MaybeLocal_v8__Function__dealloc,                         /*tp_dealloc*/
             0,                         /*tp_print*/
             0,                         /*tp_getattr*/
             0,                         /*tp_setattr*/
             0,                         /*tp_compare*/
             0,                         /*tp_repr*/
             0,                         /*tp_as_number*/
             0,                         /*tp_as_sequence*/
             0,                         /*tp_as_mapping*/
             0,                         /*tp_hash */
             0,                         /*tp_call*/
             0,                         /*tp_str*/
             0,                         /*tp_getattro*/
             0,                         /*tp_setattro*/
             0,                         /*tp_as_buffer*/
             Py_TPFLAGS_DEFAULT| Py_TPFLAGS_BASETYPE,        /*tp_flags*/
             "v8___MaybeLocal_v8__Function_ objects",           /* tp_doc */
             0,		               /* tp_traverse */
             0,		               /* tp_clear */
             0,		               /* tp_richcompare */
             0,		               /* tp_weaklistoffset */
             0,		               /* tp_iter */
             0,		               /* tp_iternext */
             v8___MaybeLocal_v8__Function__methods,             /* tp_methods */
             v8___MaybeLocal_v8__Function__members,             /* tp_members */
             0,                         /* tp_getset */
             0,                         /* tp_base */
             0,                         /* tp_dict */
             0,                         /* tp_descr_get */
             0,                         /* tp_descr_set */
             0,                         /* tp_dictoffset */
             (initproc)v8___MaybeLocal_v8__Function__init,      /* tp_init */
             0,                         /* tp_alloc */
             v8___MaybeLocal_v8__Function__new,                 /* tp_new */
         };

static void
v8___MaybeLocal_v8__String__dealloc(v8___MaybeLocal_v8__String_* self);

static PyObject *
v8___MaybeLocal_v8__String__new(PyTypeObject *type, PyObject *args, PyObject *kwds);
static int
v8___MaybeLocal_v8__String__init(v8___MaybeLocal_v8__String_ *self, PyObject *args, PyObject *kwds);
           

static PyObject*
v8___MaybeLocal_v8__String___IsEmpty(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___MaybeLocal_v8__String___ToLocalChecked(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___MaybeLocal_v8__String___FromMaybe(PyObject *args, PyObject *kwds);
    
static PyMethodDef v8___MaybeLocal_v8__String__methods[] = {
             
            {"IsEmpty",  (PyCFunction)v8___MaybeLocal_v8__String___IsEmpty, METH_VARARGS| METH_KEYWORDS, ""},
            {"ToLocalChecked",  (PyCFunction)v8___MaybeLocal_v8__String___ToLocalChecked, METH_VARARGS| METH_KEYWORDS, ""},
            {"FromMaybe",  (PyCFunction)v8___MaybeLocal_v8__String___FromMaybe, METH_VARARGS| METH_KEYWORDS, ""},{NULL}  /* Sentinel */
};

static PyMemberDef v8___MaybeLocal_v8__String__members[] =   {
        {NULL}
};
    

static PyTypeObject v8___MaybeLocal_v8__String_Type = {
             PyObject_HEAD_INIT(NULL)
             0,                         /*ob_size*/
             "v8.MaybeLocal<v8::String>",             /*tp_name*/
             sizeof(v8___MaybeLocal_v8__String_), /*tp_basicsize*/
             0,                         /*tp_itemsize*/
             (destructor)v8___MaybeLocal_v8__String__dealloc,                         /*tp_dealloc*/
             0,                         /*tp_print*/
             0,                         /*tp_getattr*/
             0,                         /*tp_setattr*/
             0,                         /*tp_compare*/
             0,                         /*tp_repr*/
             0,                         /*tp_as_number*/
             0,                         /*tp_as_sequence*/
             0,                         /*tp_as_mapping*/
             0,                         /*tp_hash */
             0,                         /*tp_call*/
             0,                         /*tp_str*/
             0,                         /*tp_getattro*/
             0,                         /*tp_setattro*/
             0,                         /*tp_as_buffer*/
             Py_TPFLAGS_DEFAULT| Py_TPFLAGS_BASETYPE,        /*tp_flags*/
             "v8___MaybeLocal_v8__String_ objects",           /* tp_doc */
             0,		               /* tp_traverse */
             0,		               /* tp_clear */
             0,		               /* tp_richcompare */
             0,		               /* tp_weaklistoffset */
             0,		               /* tp_iter */
             0,		               /* tp_iternext */
             v8___MaybeLocal_v8__String__methods,             /* tp_methods */
             v8___MaybeLocal_v8__String__members,             /* tp_members */
             0,                         /* tp_getset */
             0,                         /* tp_base */
             0,                         /* tp_dict */
             0,                         /* tp_descr_get */
             0,                         /* tp_descr_set */
             0,                         /* tp_dictoffset */
             (initproc)v8___MaybeLocal_v8__String__init,      /* tp_init */
             0,                         /* tp_alloc */
             v8___MaybeLocal_v8__String__new,                 /* tp_new */
         };

static void
v8___MaybeLocal_v8__Boolean__dealloc(v8___MaybeLocal_v8__Boolean_* self);

static PyObject *
v8___MaybeLocal_v8__Boolean__new(PyTypeObject *type, PyObject *args, PyObject *kwds);
static int
v8___MaybeLocal_v8__Boolean__init(v8___MaybeLocal_v8__Boolean_ *self, PyObject *args, PyObject *kwds);
           

static PyObject*
v8___MaybeLocal_v8__Boolean___IsEmpty(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___MaybeLocal_v8__Boolean___ToLocalChecked(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___MaybeLocal_v8__Boolean___FromMaybe(PyObject *args, PyObject *kwds);
    
static PyMethodDef v8___MaybeLocal_v8__Boolean__methods[] = {
             
            {"IsEmpty",  (PyCFunction)v8___MaybeLocal_v8__Boolean___IsEmpty, METH_VARARGS| METH_KEYWORDS, ""},
            {"ToLocalChecked",  (PyCFunction)v8___MaybeLocal_v8__Boolean___ToLocalChecked, METH_VARARGS| METH_KEYWORDS, ""},
            {"FromMaybe",  (PyCFunction)v8___MaybeLocal_v8__Boolean___FromMaybe, METH_VARARGS| METH_KEYWORDS, ""},{NULL}  /* Sentinel */
};

static PyMemberDef v8___MaybeLocal_v8__Boolean__members[] =   {
        {NULL}
};
    

static PyTypeObject v8___MaybeLocal_v8__Boolean_Type = {
             PyObject_HEAD_INIT(NULL)
             0,                         /*ob_size*/
             "v8.MaybeLocal<v8::Boolean>",             /*tp_name*/
             sizeof(v8___MaybeLocal_v8__Boolean_), /*tp_basicsize*/
             0,                         /*tp_itemsize*/
             (destructor)v8___MaybeLocal_v8__Boolean__dealloc,                         /*tp_dealloc*/
             0,                         /*tp_print*/
             0,                         /*tp_getattr*/
             0,                         /*tp_setattr*/
             0,                         /*tp_compare*/
             0,                         /*tp_repr*/
             0,                         /*tp_as_number*/
             0,                         /*tp_as_sequence*/
             0,                         /*tp_as_mapping*/
             0,                         /*tp_hash */
             0,                         /*tp_call*/
             0,                         /*tp_str*/
             0,                         /*tp_getattro*/
             0,                         /*tp_setattro*/
             0,                         /*tp_as_buffer*/
             Py_TPFLAGS_DEFAULT| Py_TPFLAGS_BASETYPE,        /*tp_flags*/
             "v8___MaybeLocal_v8__Boolean_ objects",           /* tp_doc */
             0,		               /* tp_traverse */
             0,		               /* tp_clear */
             0,		               /* tp_richcompare */
             0,		               /* tp_weaklistoffset */
             0,		               /* tp_iter */
             0,		               /* tp_iternext */
             v8___MaybeLocal_v8__Boolean__methods,             /* tp_methods */
             v8___MaybeLocal_v8__Boolean__members,             /* tp_members */
             0,                         /* tp_getset */
             0,                         /* tp_base */
             0,                         /* tp_dict */
             0,                         /* tp_descr_get */
             0,                         /* tp_descr_set */
             0,                         /* tp_dictoffset */
             (initproc)v8___MaybeLocal_v8__Boolean__init,      /* tp_init */
             0,                         /* tp_alloc */
             v8___MaybeLocal_v8__Boolean__new,                 /* tp_new */
         };

static void
v8___MaybeLocal_v8__Number__dealloc(v8___MaybeLocal_v8__Number_* self);

static PyObject *
v8___MaybeLocal_v8__Number__new(PyTypeObject *type, PyObject *args, PyObject *kwds);
static int
v8___MaybeLocal_v8__Number__init(v8___MaybeLocal_v8__Number_ *self, PyObject *args, PyObject *kwds);
           

static PyObject*
v8___MaybeLocal_v8__Number___IsEmpty(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___MaybeLocal_v8__Number___ToLocalChecked(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___MaybeLocal_v8__Number___FromMaybe(PyObject *args, PyObject *kwds);
    
static PyMethodDef v8___MaybeLocal_v8__Number__methods[] = {
             
            {"IsEmpty",  (PyCFunction)v8___MaybeLocal_v8__Number___IsEmpty, METH_VARARGS| METH_KEYWORDS, ""},
            {"ToLocalChecked",  (PyCFunction)v8___MaybeLocal_v8__Number___ToLocalChecked, METH_VARARGS| METH_KEYWORDS, ""},
            {"FromMaybe",  (PyCFunction)v8___MaybeLocal_v8__Number___FromMaybe, METH_VARARGS| METH_KEYWORDS, ""},{NULL}  /* Sentinel */
};

static PyMemberDef v8___MaybeLocal_v8__Number__members[] =   {
        {NULL}
};
    

static PyTypeObject v8___MaybeLocal_v8__Number_Type = {
             PyObject_HEAD_INIT(NULL)
             0,                         /*ob_size*/
             "v8.MaybeLocal<v8::Number>",             /*tp_name*/
             sizeof(v8___MaybeLocal_v8__Number_), /*tp_basicsize*/
             0,                         /*tp_itemsize*/
             (destructor)v8___MaybeLocal_v8__Number__dealloc,                         /*tp_dealloc*/
             0,                         /*tp_print*/
             0,                         /*tp_getattr*/
             0,                         /*tp_setattr*/
             0,                         /*tp_compare*/
             0,                         /*tp_repr*/
             0,                         /*tp_as_number*/
             0,                         /*tp_as_sequence*/
             0,                         /*tp_as_mapping*/
             0,                         /*tp_hash */
             0,                         /*tp_call*/
             0,                         /*tp_str*/
             0,                         /*tp_getattro*/
             0,                         /*tp_setattro*/
             0,                         /*tp_as_buffer*/
             Py_TPFLAGS_DEFAULT| Py_TPFLAGS_BASETYPE,        /*tp_flags*/
             "v8___MaybeLocal_v8__Number_ objects",           /* tp_doc */
             0,		               /* tp_traverse */
             0,		               /* tp_clear */
             0,		               /* tp_richcompare */
             0,		               /* tp_weaklistoffset */
             0,		               /* tp_iter */
             0,		               /* tp_iternext */
             v8___MaybeLocal_v8__Number__methods,             /* tp_methods */
             v8___MaybeLocal_v8__Number__members,             /* tp_members */
             0,                         /* tp_getset */
             0,                         /* tp_base */
             0,                         /* tp_dict */
             0,                         /* tp_descr_get */
             0,                         /* tp_descr_set */
             0,                         /* tp_dictoffset */
             (initproc)v8___MaybeLocal_v8__Number__init,      /* tp_init */
             0,                         /* tp_alloc */
             v8___MaybeLocal_v8__Number__new,                 /* tp_new */
         };

static void
v8___MaybeLocal_v8__Object__dealloc(v8___MaybeLocal_v8__Object_* self);

static PyObject *
v8___MaybeLocal_v8__Object__new(PyTypeObject *type, PyObject *args, PyObject *kwds);
static int
v8___MaybeLocal_v8__Object__init(v8___MaybeLocal_v8__Object_ *self, PyObject *args, PyObject *kwds);
           

static PyObject*
v8___MaybeLocal_v8__Object___IsEmpty(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___MaybeLocal_v8__Object___ToLocalChecked(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___MaybeLocal_v8__Object___FromMaybe(PyObject *args, PyObject *kwds);
    
static PyMethodDef v8___MaybeLocal_v8__Object__methods[] = {
             
            {"IsEmpty",  (PyCFunction)v8___MaybeLocal_v8__Object___IsEmpty, METH_VARARGS| METH_KEYWORDS, ""},
            {"ToLocalChecked",  (PyCFunction)v8___MaybeLocal_v8__Object___ToLocalChecked, METH_VARARGS| METH_KEYWORDS, ""},
            {"FromMaybe",  (PyCFunction)v8___MaybeLocal_v8__Object___FromMaybe, METH_VARARGS| METH_KEYWORDS, ""},{NULL}  /* Sentinel */
};

static PyMemberDef v8___MaybeLocal_v8__Object__members[] =   {
        {NULL}
};
    

static PyTypeObject v8___MaybeLocal_v8__Object_Type = {
             PyObject_HEAD_INIT(NULL)
             0,                         /*ob_size*/
             "v8.MaybeLocal<v8::Object>",             /*tp_name*/
             sizeof(v8___MaybeLocal_v8__Object_), /*tp_basicsize*/
             0,                         /*tp_itemsize*/
             (destructor)v8___MaybeLocal_v8__Object__dealloc,                         /*tp_dealloc*/
             0,                         /*tp_print*/
             0,                         /*tp_getattr*/
             0,                         /*tp_setattr*/
             0,                         /*tp_compare*/
             0,                         /*tp_repr*/
             0,                         /*tp_as_number*/
             0,                         /*tp_as_sequence*/
             0,                         /*tp_as_mapping*/
             0,                         /*tp_hash */
             0,                         /*tp_call*/
             0,                         /*tp_str*/
             0,                         /*tp_getattro*/
             0,                         /*tp_setattro*/
             0,                         /*tp_as_buffer*/
             Py_TPFLAGS_DEFAULT| Py_TPFLAGS_BASETYPE,        /*tp_flags*/
             "v8___MaybeLocal_v8__Object_ objects",           /* tp_doc */
             0,		               /* tp_traverse */
             0,		               /* tp_clear */
             0,		               /* tp_richcompare */
             0,		               /* tp_weaklistoffset */
             0,		               /* tp_iter */
             0,		               /* tp_iternext */
             v8___MaybeLocal_v8__Object__methods,             /* tp_methods */
             v8___MaybeLocal_v8__Object__members,             /* tp_members */
             0,                         /* tp_getset */
             0,                         /* tp_base */
             0,                         /* tp_dict */
             0,                         /* tp_descr_get */
             0,                         /* tp_descr_set */
             0,                         /* tp_dictoffset */
             (initproc)v8___MaybeLocal_v8__Object__init,      /* tp_init */
             0,                         /* tp_alloc */
             v8___MaybeLocal_v8__Object__new,                 /* tp_new */
         };

static void
v8___MaybeLocal_v8__Integer__dealloc(v8___MaybeLocal_v8__Integer_* self);

static PyObject *
v8___MaybeLocal_v8__Integer__new(PyTypeObject *type, PyObject *args, PyObject *kwds);
static int
v8___MaybeLocal_v8__Integer__init(v8___MaybeLocal_v8__Integer_ *self, PyObject *args, PyObject *kwds);
           

static PyObject*
v8___MaybeLocal_v8__Integer___IsEmpty(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___MaybeLocal_v8__Integer___ToLocalChecked(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___MaybeLocal_v8__Integer___FromMaybe(PyObject *args, PyObject *kwds);
    
static PyMethodDef v8___MaybeLocal_v8__Integer__methods[] = {
             
            {"IsEmpty",  (PyCFunction)v8___MaybeLocal_v8__Integer___IsEmpty, METH_VARARGS| METH_KEYWORDS, ""},
            {"ToLocalChecked",  (PyCFunction)v8___MaybeLocal_v8__Integer___ToLocalChecked, METH_VARARGS| METH_KEYWORDS, ""},
            {"FromMaybe",  (PyCFunction)v8___MaybeLocal_v8__Integer___FromMaybe, METH_VARARGS| METH_KEYWORDS, ""},{NULL}  /* Sentinel */
};

static PyMemberDef v8___MaybeLocal_v8__Integer__members[] =   {
        {NULL}
};
    

static PyTypeObject v8___MaybeLocal_v8__Integer_Type = {
             PyObject_HEAD_INIT(NULL)
             0,                         /*ob_size*/
             "v8.MaybeLocal<v8::Integer>",             /*tp_name*/
             sizeof(v8___MaybeLocal_v8__Integer_), /*tp_basicsize*/
             0,                         /*tp_itemsize*/
             (destructor)v8___MaybeLocal_v8__Integer__dealloc,                         /*tp_dealloc*/
             0,                         /*tp_print*/
             0,                         /*tp_getattr*/
             0,                         /*tp_setattr*/
             0,                         /*tp_compare*/
             0,                         /*tp_repr*/
             0,                         /*tp_as_number*/
             0,                         /*tp_as_sequence*/
             0,                         /*tp_as_mapping*/
             0,                         /*tp_hash */
             0,                         /*tp_call*/
             0,                         /*tp_str*/
             0,                         /*tp_getattro*/
             0,                         /*tp_setattro*/
             0,                         /*tp_as_buffer*/
             Py_TPFLAGS_DEFAULT| Py_TPFLAGS_BASETYPE,        /*tp_flags*/
             "v8___MaybeLocal_v8__Integer_ objects",           /* tp_doc */
             0,		               /* tp_traverse */
             0,		               /* tp_clear */
             0,		               /* tp_richcompare */
             0,		               /* tp_weaklistoffset */
             0,		               /* tp_iter */
             0,		               /* tp_iternext */
             v8___MaybeLocal_v8__Integer__methods,             /* tp_methods */
             v8___MaybeLocal_v8__Integer__members,             /* tp_members */
             0,                         /* tp_getset */
             0,                         /* tp_base */
             0,                         /* tp_dict */
             0,                         /* tp_descr_get */
             0,                         /* tp_descr_set */
             0,                         /* tp_dictoffset */
             (initproc)v8___MaybeLocal_v8__Integer__init,      /* tp_init */
             0,                         /* tp_alloc */
             v8___MaybeLocal_v8__Integer__new,                 /* tp_new */
         };

static void
v8___MaybeLocal_v8__Uint32__dealloc(v8___MaybeLocal_v8__Uint32_* self);

static PyObject *
v8___MaybeLocal_v8__Uint32__new(PyTypeObject *type, PyObject *args, PyObject *kwds);
static int
v8___MaybeLocal_v8__Uint32__init(v8___MaybeLocal_v8__Uint32_ *self, PyObject *args, PyObject *kwds);
           

static PyObject*
v8___MaybeLocal_v8__Uint32___IsEmpty(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___MaybeLocal_v8__Uint32___ToLocalChecked(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___MaybeLocal_v8__Uint32___FromMaybe(PyObject *args, PyObject *kwds);
    
static PyMethodDef v8___MaybeLocal_v8__Uint32__methods[] = {
             
            {"IsEmpty",  (PyCFunction)v8___MaybeLocal_v8__Uint32___IsEmpty, METH_VARARGS| METH_KEYWORDS, ""},
            {"ToLocalChecked",  (PyCFunction)v8___MaybeLocal_v8__Uint32___ToLocalChecked, METH_VARARGS| METH_KEYWORDS, ""},
            {"FromMaybe",  (PyCFunction)v8___MaybeLocal_v8__Uint32___FromMaybe, METH_VARARGS| METH_KEYWORDS, ""},{NULL}  /* Sentinel */
};

static PyMemberDef v8___MaybeLocal_v8__Uint32__members[] =   {
        {NULL}
};
    

static PyTypeObject v8___MaybeLocal_v8__Uint32_Type = {
             PyObject_HEAD_INIT(NULL)
             0,                         /*ob_size*/
             "v8.MaybeLocal<v8::Uint32>",             /*tp_name*/
             sizeof(v8___MaybeLocal_v8__Uint32_), /*tp_basicsize*/
             0,                         /*tp_itemsize*/
             (destructor)v8___MaybeLocal_v8__Uint32__dealloc,                         /*tp_dealloc*/
             0,                         /*tp_print*/
             0,                         /*tp_getattr*/
             0,                         /*tp_setattr*/
             0,                         /*tp_compare*/
             0,                         /*tp_repr*/
             0,                         /*tp_as_number*/
             0,                         /*tp_as_sequence*/
             0,                         /*tp_as_mapping*/
             0,                         /*tp_hash */
             0,                         /*tp_call*/
             0,                         /*tp_str*/
             0,                         /*tp_getattro*/
             0,                         /*tp_setattro*/
             0,                         /*tp_as_buffer*/
             Py_TPFLAGS_DEFAULT| Py_TPFLAGS_BASETYPE,        /*tp_flags*/
             "v8___MaybeLocal_v8__Uint32_ objects",           /* tp_doc */
             0,		               /* tp_traverse */
             0,		               /* tp_clear */
             0,		               /* tp_richcompare */
             0,		               /* tp_weaklistoffset */
             0,		               /* tp_iter */
             0,		               /* tp_iternext */
             v8___MaybeLocal_v8__Uint32__methods,             /* tp_methods */
             v8___MaybeLocal_v8__Uint32__members,             /* tp_members */
             0,                         /* tp_getset */
             0,                         /* tp_base */
             0,                         /* tp_dict */
             0,                         /* tp_descr_get */
             0,                         /* tp_descr_set */
             0,                         /* tp_dictoffset */
             (initproc)v8___MaybeLocal_v8__Uint32__init,      /* tp_init */
             0,                         /* tp_alloc */
             v8___MaybeLocal_v8__Uint32__new,                 /* tp_new */
         };

static void
v8___MaybeLocal_v8__Int32__dealloc(v8___MaybeLocal_v8__Int32_* self);

static PyObject *
v8___MaybeLocal_v8__Int32__new(PyTypeObject *type, PyObject *args, PyObject *kwds);
static int
v8___MaybeLocal_v8__Int32__init(v8___MaybeLocal_v8__Int32_ *self, PyObject *args, PyObject *kwds);
           

static PyObject*
v8___MaybeLocal_v8__Int32___IsEmpty(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___MaybeLocal_v8__Int32___ToLocalChecked(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___MaybeLocal_v8__Int32___FromMaybe(PyObject *args, PyObject *kwds);
    
static PyMethodDef v8___MaybeLocal_v8__Int32__methods[] = {
             
            {"IsEmpty",  (PyCFunction)v8___MaybeLocal_v8__Int32___IsEmpty, METH_VARARGS| METH_KEYWORDS, ""},
            {"ToLocalChecked",  (PyCFunction)v8___MaybeLocal_v8__Int32___ToLocalChecked, METH_VARARGS| METH_KEYWORDS, ""},
            {"FromMaybe",  (PyCFunction)v8___MaybeLocal_v8__Int32___FromMaybe, METH_VARARGS| METH_KEYWORDS, ""},{NULL}  /* Sentinel */
};

static PyMemberDef v8___MaybeLocal_v8__Int32__members[] =   {
        {NULL}
};
    

static PyTypeObject v8___MaybeLocal_v8__Int32_Type = {
             PyObject_HEAD_INIT(NULL)
             0,                         /*ob_size*/
             "v8.MaybeLocal<v8::Int32>",             /*tp_name*/
             sizeof(v8___MaybeLocal_v8__Int32_), /*tp_basicsize*/
             0,                         /*tp_itemsize*/
             (destructor)v8___MaybeLocal_v8__Int32__dealloc,                         /*tp_dealloc*/
             0,                         /*tp_print*/
             0,                         /*tp_getattr*/
             0,                         /*tp_setattr*/
             0,                         /*tp_compare*/
             0,                         /*tp_repr*/
             0,                         /*tp_as_number*/
             0,                         /*tp_as_sequence*/
             0,                         /*tp_as_mapping*/
             0,                         /*tp_hash */
             0,                         /*tp_call*/
             0,                         /*tp_str*/
             0,                         /*tp_getattro*/
             0,                         /*tp_setattro*/
             0,                         /*tp_as_buffer*/
             Py_TPFLAGS_DEFAULT| Py_TPFLAGS_BASETYPE,        /*tp_flags*/
             "v8___MaybeLocal_v8__Int32_ objects",           /* tp_doc */
             0,		               /* tp_traverse */
             0,		               /* tp_clear */
             0,		               /* tp_richcompare */
             0,		               /* tp_weaklistoffset */
             0,		               /* tp_iter */
             0,		               /* tp_iternext */
             v8___MaybeLocal_v8__Int32__methods,             /* tp_methods */
             v8___MaybeLocal_v8__Int32__members,             /* tp_members */
             0,                         /* tp_getset */
             0,                         /* tp_base */
             0,                         /* tp_dict */
             0,                         /* tp_descr_get */
             0,                         /* tp_descr_set */
             0,                         /* tp_dictoffset */
             (initproc)v8___MaybeLocal_v8__Int32__init,      /* tp_init */
             0,                         /* tp_alloc */
             v8___MaybeLocal_v8__Int32__new,                 /* tp_new */
         };

static void
v8___MaybeLocal_v8__Array__dealloc(v8___MaybeLocal_v8__Array_* self);

static PyObject *
v8___MaybeLocal_v8__Array__new(PyTypeObject *type, PyObject *args, PyObject *kwds);
static int
v8___MaybeLocal_v8__Array__init(v8___MaybeLocal_v8__Array_ *self, PyObject *args, PyObject *kwds);
           

static PyMethodDef v8___MaybeLocal_v8__Array__methods[] = {
             {NULL}  /* Sentinel */
};

static PyMemberDef v8___MaybeLocal_v8__Array__members[] =   {
        {NULL}
};
    

static PyTypeObject v8___MaybeLocal_v8__Array_Type = {
             PyObject_HEAD_INIT(NULL)
             0,                         /*ob_size*/
             "v8.MaybeLocal<v8::Array>",             /*tp_name*/
             sizeof(v8___MaybeLocal_v8__Array_), /*tp_basicsize*/
             0,                         /*tp_itemsize*/
             (destructor)v8___MaybeLocal_v8__Array__dealloc,                         /*tp_dealloc*/
             0,                         /*tp_print*/
             0,                         /*tp_getattr*/
             0,                         /*tp_setattr*/
             0,                         /*tp_compare*/
             0,                         /*tp_repr*/
             0,                         /*tp_as_number*/
             0,                         /*tp_as_sequence*/
             0,                         /*tp_as_mapping*/
             0,                         /*tp_hash */
             0,                         /*tp_call*/
             0,                         /*tp_str*/
             0,                         /*tp_getattro*/
             0,                         /*tp_setattro*/
             0,                         /*tp_as_buffer*/
             Py_TPFLAGS_DEFAULT| Py_TPFLAGS_BASETYPE,        /*tp_flags*/
             "v8___MaybeLocal_v8__Array_ objects",           /* tp_doc */
             0,		               /* tp_traverse */
             0,		               /* tp_clear */
             0,		               /* tp_richcompare */
             0,		               /* tp_weaklistoffset */
             0,		               /* tp_iter */
             0,		               /* tp_iternext */
             v8___MaybeLocal_v8__Array__methods,             /* tp_methods */
             v8___MaybeLocal_v8__Array__members,             /* tp_members */
             0,                         /* tp_getset */
             0,                         /* tp_base */
             0,                         /* tp_dict */
             0,                         /* tp_descr_get */
             0,                         /* tp_descr_set */
             0,                         /* tp_dictoffset */
             (initproc)v8___MaybeLocal_v8__Array__init,      /* tp_init */
             0,                         /* tp_alloc */
             v8___MaybeLocal_v8__Array__new,                 /* tp_new */
         };

static void
v8___MaybeLocal_v8__Map__dealloc(v8___MaybeLocal_v8__Map_* self);

static PyObject *
v8___MaybeLocal_v8__Map__new(PyTypeObject *type, PyObject *args, PyObject *kwds);
static int
v8___MaybeLocal_v8__Map__init(v8___MaybeLocal_v8__Map_ *self, PyObject *args, PyObject *kwds);
           

static PyMethodDef v8___MaybeLocal_v8__Map__methods[] = {
             {NULL}  /* Sentinel */
};

static PyMemberDef v8___MaybeLocal_v8__Map__members[] =   {
        {NULL}
};
    

static PyTypeObject v8___MaybeLocal_v8__Map_Type = {
             PyObject_HEAD_INIT(NULL)
             0,                         /*ob_size*/
             "v8.MaybeLocal<v8::Map>",             /*tp_name*/
             sizeof(v8___MaybeLocal_v8__Map_), /*tp_basicsize*/
             0,                         /*tp_itemsize*/
             (destructor)v8___MaybeLocal_v8__Map__dealloc,                         /*tp_dealloc*/
             0,                         /*tp_print*/
             0,                         /*tp_getattr*/
             0,                         /*tp_setattr*/
             0,                         /*tp_compare*/
             0,                         /*tp_repr*/
             0,                         /*tp_as_number*/
             0,                         /*tp_as_sequence*/
             0,                         /*tp_as_mapping*/
             0,                         /*tp_hash */
             0,                         /*tp_call*/
             0,                         /*tp_str*/
             0,                         /*tp_getattro*/
             0,                         /*tp_setattro*/
             0,                         /*tp_as_buffer*/
             Py_TPFLAGS_DEFAULT| Py_TPFLAGS_BASETYPE,        /*tp_flags*/
             "v8___MaybeLocal_v8__Map_ objects",           /* tp_doc */
             0,		               /* tp_traverse */
             0,		               /* tp_clear */
             0,		               /* tp_richcompare */
             0,		               /* tp_weaklistoffset */
             0,		               /* tp_iter */
             0,		               /* tp_iternext */
             v8___MaybeLocal_v8__Map__methods,             /* tp_methods */
             v8___MaybeLocal_v8__Map__members,             /* tp_members */
             0,                         /* tp_getset */
             0,                         /* tp_base */
             0,                         /* tp_dict */
             0,                         /* tp_descr_get */
             0,                         /* tp_descr_set */
             0,                         /* tp_dictoffset */
             (initproc)v8___MaybeLocal_v8__Map__init,      /* tp_init */
             0,                         /* tp_alloc */
             v8___MaybeLocal_v8__Map__new,                 /* tp_new */
         };

static void
v8___MaybeLocal_v8__Set__dealloc(v8___MaybeLocal_v8__Set_* self);

static PyObject *
v8___MaybeLocal_v8__Set__new(PyTypeObject *type, PyObject *args, PyObject *kwds);
static int
v8___MaybeLocal_v8__Set__init(v8___MaybeLocal_v8__Set_ *self, PyObject *args, PyObject *kwds);
           

static PyMethodDef v8___MaybeLocal_v8__Set__methods[] = {
             {NULL}  /* Sentinel */
};

static PyMemberDef v8___MaybeLocal_v8__Set__members[] =   {
        {NULL}
};
    

static PyTypeObject v8___MaybeLocal_v8__Set_Type = {
             PyObject_HEAD_INIT(NULL)
             0,                         /*ob_size*/
             "v8.MaybeLocal<v8::Set>",             /*tp_name*/
             sizeof(v8___MaybeLocal_v8__Set_), /*tp_basicsize*/
             0,                         /*tp_itemsize*/
             (destructor)v8___MaybeLocal_v8__Set__dealloc,                         /*tp_dealloc*/
             0,                         /*tp_print*/
             0,                         /*tp_getattr*/
             0,                         /*tp_setattr*/
             0,                         /*tp_compare*/
             0,                         /*tp_repr*/
             0,                         /*tp_as_number*/
             0,                         /*tp_as_sequence*/
             0,                         /*tp_as_mapping*/
             0,                         /*tp_hash */
             0,                         /*tp_call*/
             0,                         /*tp_str*/
             0,                         /*tp_getattro*/
             0,                         /*tp_setattro*/
             0,                         /*tp_as_buffer*/
             Py_TPFLAGS_DEFAULT| Py_TPFLAGS_BASETYPE,        /*tp_flags*/
             "v8___MaybeLocal_v8__Set_ objects",           /* tp_doc */
             0,		               /* tp_traverse */
             0,		               /* tp_clear */
             0,		               /* tp_richcompare */
             0,		               /* tp_weaklistoffset */
             0,		               /* tp_iter */
             0,		               /* tp_iternext */
             v8___MaybeLocal_v8__Set__methods,             /* tp_methods */
             v8___MaybeLocal_v8__Set__members,             /* tp_members */
             0,                         /* tp_getset */
             0,                         /* tp_base */
             0,                         /* tp_dict */
             0,                         /* tp_descr_get */
             0,                         /* tp_descr_set */
             0,                         /* tp_dictoffset */
             (initproc)v8___MaybeLocal_v8__Set__init,      /* tp_init */
             0,                         /* tp_alloc */
             v8___MaybeLocal_v8__Set__new,                 /* tp_new */
         };

static void
v8___MaybeLocal_v8__Promise__Resolver__dealloc(v8___MaybeLocal_v8__Promise__Resolver_* self);

static PyObject *
v8___MaybeLocal_v8__Promise__Resolver__new(PyTypeObject *type, PyObject *args, PyObject *kwds);
static int
v8___MaybeLocal_v8__Promise__Resolver__init(v8___MaybeLocal_v8__Promise__Resolver_ *self, PyObject *args, PyObject *kwds);
           

static PyMethodDef v8___MaybeLocal_v8__Promise__Resolver__methods[] = {
             {NULL}  /* Sentinel */
};

static PyMemberDef v8___MaybeLocal_v8__Promise__Resolver__members[] =   {
        {NULL}
};
    

static PyTypeObject v8___MaybeLocal_v8__Promise__Resolver_Type = {
             PyObject_HEAD_INIT(NULL)
             0,                         /*ob_size*/
             "v8.MaybeLocal<v8::Promise::Resolver>",             /*tp_name*/
             sizeof(v8___MaybeLocal_v8__Promise__Resolver_), /*tp_basicsize*/
             0,                         /*tp_itemsize*/
             (destructor)v8___MaybeLocal_v8__Promise__Resolver__dealloc,                         /*tp_dealloc*/
             0,                         /*tp_print*/
             0,                         /*tp_getattr*/
             0,                         /*tp_setattr*/
             0,                         /*tp_compare*/
             0,                         /*tp_repr*/
             0,                         /*tp_as_number*/
             0,                         /*tp_as_sequence*/
             0,                         /*tp_as_mapping*/
             0,                         /*tp_hash */
             0,                         /*tp_call*/
             0,                         /*tp_str*/
             0,                         /*tp_getattro*/
             0,                         /*tp_setattro*/
             0,                         /*tp_as_buffer*/
             Py_TPFLAGS_DEFAULT| Py_TPFLAGS_BASETYPE,        /*tp_flags*/
             "v8___MaybeLocal_v8__Promise__Resolver_ objects",           /* tp_doc */
             0,		               /* tp_traverse */
             0,		               /* tp_clear */
             0,		               /* tp_richcompare */
             0,		               /* tp_weaklistoffset */
             0,		               /* tp_iter */
             0,		               /* tp_iternext */
             v8___MaybeLocal_v8__Promise__Resolver__methods,             /* tp_methods */
             v8___MaybeLocal_v8__Promise__Resolver__members,             /* tp_members */
             0,                         /* tp_getset */
             0,                         /* tp_base */
             0,                         /* tp_dict */
             0,                         /* tp_descr_get */
             0,                         /* tp_descr_set */
             0,                         /* tp_dictoffset */
             (initproc)v8___MaybeLocal_v8__Promise__Resolver__init,      /* tp_init */
             0,                         /* tp_alloc */
             v8___MaybeLocal_v8__Promise__Resolver__new,                 /* tp_new */
         };

static void
v8___MaybeLocal_v8__Promise__dealloc(v8___MaybeLocal_v8__Promise_* self);

static PyObject *
v8___MaybeLocal_v8__Promise__new(PyTypeObject *type, PyObject *args, PyObject *kwds);
static int
v8___MaybeLocal_v8__Promise__init(v8___MaybeLocal_v8__Promise_ *self, PyObject *args, PyObject *kwds);
           

static PyMethodDef v8___MaybeLocal_v8__Promise__methods[] = {
             {NULL}  /* Sentinel */
};

static PyMemberDef v8___MaybeLocal_v8__Promise__members[] =   {
        {NULL}
};
    

static PyTypeObject v8___MaybeLocal_v8__Promise_Type = {
             PyObject_HEAD_INIT(NULL)
             0,                         /*ob_size*/
             "v8.MaybeLocal<v8::Promise>",             /*tp_name*/
             sizeof(v8___MaybeLocal_v8__Promise_), /*tp_basicsize*/
             0,                         /*tp_itemsize*/
             (destructor)v8___MaybeLocal_v8__Promise__dealloc,                         /*tp_dealloc*/
             0,                         /*tp_print*/
             0,                         /*tp_getattr*/
             0,                         /*tp_setattr*/
             0,                         /*tp_compare*/
             0,                         /*tp_repr*/
             0,                         /*tp_as_number*/
             0,                         /*tp_as_sequence*/
             0,                         /*tp_as_mapping*/
             0,                         /*tp_hash */
             0,                         /*tp_call*/
             0,                         /*tp_str*/
             0,                         /*tp_getattro*/
             0,                         /*tp_setattro*/
             0,                         /*tp_as_buffer*/
             Py_TPFLAGS_DEFAULT| Py_TPFLAGS_BASETYPE,        /*tp_flags*/
             "v8___MaybeLocal_v8__Promise_ objects",           /* tp_doc */
             0,		               /* tp_traverse */
             0,		               /* tp_clear */
             0,		               /* tp_richcompare */
             0,		               /* tp_weaklistoffset */
             0,		               /* tp_iter */
             0,		               /* tp_iternext */
             v8___MaybeLocal_v8__Promise__methods,             /* tp_methods */
             v8___MaybeLocal_v8__Promise__members,             /* tp_members */
             0,                         /* tp_getset */
             0,                         /* tp_base */
             0,                         /* tp_dict */
             0,                         /* tp_descr_get */
             0,                         /* tp_descr_set */
             0,                         /* tp_dictoffset */
             (initproc)v8___MaybeLocal_v8__Promise__init,      /* tp_init */
             0,                         /* tp_alloc */
             v8___MaybeLocal_v8__Promise__new,                 /* tp_new */
         };

static void
v8___MaybeLocal_v8__RegExp__dealloc(v8___MaybeLocal_v8__RegExp_* self);

static PyObject *
v8___MaybeLocal_v8__RegExp__new(PyTypeObject *type, PyObject *args, PyObject *kwds);
static int
v8___MaybeLocal_v8__RegExp__init(v8___MaybeLocal_v8__RegExp_ *self, PyObject *args, PyObject *kwds);
           

static PyMethodDef v8___MaybeLocal_v8__RegExp__methods[] = {
             {NULL}  /* Sentinel */
};

static PyMemberDef v8___MaybeLocal_v8__RegExp__members[] =   {
        {NULL}
};
    

static PyTypeObject v8___MaybeLocal_v8__RegExp_Type = {
             PyObject_HEAD_INIT(NULL)
             0,                         /*ob_size*/
             "v8.MaybeLocal<v8::RegExp>",             /*tp_name*/
             sizeof(v8___MaybeLocal_v8__RegExp_), /*tp_basicsize*/
             0,                         /*tp_itemsize*/
             (destructor)v8___MaybeLocal_v8__RegExp__dealloc,                         /*tp_dealloc*/
             0,                         /*tp_print*/
             0,                         /*tp_getattr*/
             0,                         /*tp_setattr*/
             0,                         /*tp_compare*/
             0,                         /*tp_repr*/
             0,                         /*tp_as_number*/
             0,                         /*tp_as_sequence*/
             0,                         /*tp_as_mapping*/
             0,                         /*tp_hash */
             0,                         /*tp_call*/
             0,                         /*tp_str*/
             0,                         /*tp_getattro*/
             0,                         /*tp_setattro*/
             0,                         /*tp_as_buffer*/
             Py_TPFLAGS_DEFAULT| Py_TPFLAGS_BASETYPE,        /*tp_flags*/
             "v8___MaybeLocal_v8__RegExp_ objects",           /* tp_doc */
             0,		               /* tp_traverse */
             0,		               /* tp_clear */
             0,		               /* tp_richcompare */
             0,		               /* tp_weaklistoffset */
             0,		               /* tp_iter */
             0,		               /* tp_iternext */
             v8___MaybeLocal_v8__RegExp__methods,             /* tp_methods */
             v8___MaybeLocal_v8__RegExp__members,             /* tp_members */
             0,                         /* tp_getset */
             0,                         /* tp_base */
             0,                         /* tp_dict */
             0,                         /* tp_descr_get */
             0,                         /* tp_descr_set */
             0,                         /* tp_dictoffset */
             (initproc)v8___MaybeLocal_v8__RegExp__init,      /* tp_init */
             0,                         /* tp_alloc */
             v8___MaybeLocal_v8__RegExp__new,                 /* tp_new */
         };

static void
v8___NonCopyablePersistentTraits_v8__Value__dealloc(v8___NonCopyablePersistentTraits_v8__Value_* self);

static PyObject *
v8___NonCopyablePersistentTraits_v8__Value__new(PyTypeObject *type, PyObject *args, PyObject *kwds);
static int
v8___NonCopyablePersistentTraits_v8__Value__init(v8___NonCopyablePersistentTraits_v8__Value_ *self, PyObject *args, PyObject *kwds);
           

static PyMethodDef v8___NonCopyablePersistentTraits_v8__Value__methods[] = {
             {NULL}  /* Sentinel */
};

static PyMemberDef v8___NonCopyablePersistentTraits_v8__Value__members[] =   {
        {NULL}
};
    

static PyTypeObject v8___NonCopyablePersistentTraits_v8__Value_Type = {
             PyObject_HEAD_INIT(NULL)
             0,                         /*ob_size*/
             "v8.NonCopyablePersistentTraits<v8::Value>",             /*tp_name*/
             sizeof(v8___NonCopyablePersistentTraits_v8__Value_), /*tp_basicsize*/
             0,                         /*tp_itemsize*/
             (destructor)v8___NonCopyablePersistentTraits_v8__Value__dealloc,                         /*tp_dealloc*/
             0,                         /*tp_print*/
             0,                         /*tp_getattr*/
             0,                         /*tp_setattr*/
             0,                         /*tp_compare*/
             0,                         /*tp_repr*/
             0,                         /*tp_as_number*/
             0,                         /*tp_as_sequence*/
             0,                         /*tp_as_mapping*/
             0,                         /*tp_hash */
             0,                         /*tp_call*/
             0,                         /*tp_str*/
             0,                         /*tp_getattro*/
             0,                         /*tp_setattro*/
             0,                         /*tp_as_buffer*/
             Py_TPFLAGS_DEFAULT| Py_TPFLAGS_BASETYPE,        /*tp_flags*/
             "v8___NonCopyablePersistentTraits_v8__Value_ objects",           /* tp_doc */
             0,		               /* tp_traverse */
             0,		               /* tp_clear */
             0,		               /* tp_richcompare */
             0,		               /* tp_weaklistoffset */
             0,		               /* tp_iter */
             0,		               /* tp_iternext */
             v8___NonCopyablePersistentTraits_v8__Value__methods,             /* tp_methods */
             v8___NonCopyablePersistentTraits_v8__Value__members,             /* tp_members */
             0,                         /* tp_getset */
             0,                         /* tp_base */
             0,                         /* tp_dict */
             0,                         /* tp_descr_get */
             0,                         /* tp_descr_set */
             0,                         /* tp_dictoffset */
             (initproc)v8___NonCopyablePersistentTraits_v8__Value__init,      /* tp_init */
             0,                         /* tp_alloc */
             v8___NonCopyablePersistentTraits_v8__Value__new,                 /* tp_new */
         };

static void
v8___PersistentBase_v8__Value__dealloc(v8___PersistentBase_v8__Value_* self);

static PyObject *
v8___PersistentBase_v8__Value__new(PyTypeObject *type, PyObject *args, PyObject *kwds);
static int
v8___PersistentBase_v8__Value__init(v8___PersistentBase_v8__Value_ *self, PyObject *args, PyObject *kwds);
           

static PyMethodDef v8___PersistentBase_v8__Value__methods[] = {
             {NULL}  /* Sentinel */
};

static PyMemberDef v8___PersistentBase_v8__Value__members[] =   {
        {NULL}
};
    

static PyTypeObject v8___PersistentBase_v8__Value_Type = {
             PyObject_HEAD_INIT(NULL)
             0,                         /*ob_size*/
             "v8.PersistentBase<v8::Value>",             /*tp_name*/
             sizeof(v8___PersistentBase_v8__Value_), /*tp_basicsize*/
             0,                         /*tp_itemsize*/
             (destructor)v8___PersistentBase_v8__Value__dealloc,                         /*tp_dealloc*/
             0,                         /*tp_print*/
             0,                         /*tp_getattr*/
             0,                         /*tp_setattr*/
             0,                         /*tp_compare*/
             0,                         /*tp_repr*/
             0,                         /*tp_as_number*/
             0,                         /*tp_as_sequence*/
             0,                         /*tp_as_mapping*/
             0,                         /*tp_hash */
             0,                         /*tp_call*/
             0,                         /*tp_str*/
             0,                         /*tp_getattro*/
             0,                         /*tp_setattro*/
             0,                         /*tp_as_buffer*/
             Py_TPFLAGS_DEFAULT| Py_TPFLAGS_BASETYPE,        /*tp_flags*/
             "v8___PersistentBase_v8__Value_ objects",           /* tp_doc */
             0,		               /* tp_traverse */
             0,		               /* tp_clear */
             0,		               /* tp_richcompare */
             0,		               /* tp_weaklistoffset */
             0,		               /* tp_iter */
             0,		               /* tp_iternext */
             v8___PersistentBase_v8__Value__methods,             /* tp_methods */
             v8___PersistentBase_v8__Value__members,             /* tp_members */
             0,                         /* tp_getset */
             0,                         /* tp_base */
             0,                         /* tp_dict */
             0,                         /* tp_descr_get */
             0,                         /* tp_descr_set */
             0,                         /* tp_dictoffset */
             (initproc)v8___PersistentBase_v8__Value__init,      /* tp_init */
             0,                         /* tp_alloc */
             v8___PersistentBase_v8__Value__new,                 /* tp_new */
         };

static void
v8___PersistentBase_v8__Integer__dealloc(v8___PersistentBase_v8__Integer_* self);

static PyObject *
v8___PersistentBase_v8__Integer__new(PyTypeObject *type, PyObject *args, PyObject *kwds);
static int
v8___PersistentBase_v8__Integer__init(v8___PersistentBase_v8__Integer_ *self, PyObject *args, PyObject *kwds);
           

static PyMethodDef v8___PersistentBase_v8__Integer__methods[] = {
             {NULL}  /* Sentinel */
};

static PyMemberDef v8___PersistentBase_v8__Integer__members[] =   {
        {NULL}
};
    

static PyTypeObject v8___PersistentBase_v8__Integer_Type = {
             PyObject_HEAD_INIT(NULL)
             0,                         /*ob_size*/
             "v8.PersistentBase<v8::Integer>",             /*tp_name*/
             sizeof(v8___PersistentBase_v8__Integer_), /*tp_basicsize*/
             0,                         /*tp_itemsize*/
             (destructor)v8___PersistentBase_v8__Integer__dealloc,                         /*tp_dealloc*/
             0,                         /*tp_print*/
             0,                         /*tp_getattr*/
             0,                         /*tp_setattr*/
             0,                         /*tp_compare*/
             0,                         /*tp_repr*/
             0,                         /*tp_as_number*/
             0,                         /*tp_as_sequence*/
             0,                         /*tp_as_mapping*/
             0,                         /*tp_hash */
             0,                         /*tp_call*/
             0,                         /*tp_str*/
             0,                         /*tp_getattro*/
             0,                         /*tp_setattro*/
             0,                         /*tp_as_buffer*/
             Py_TPFLAGS_DEFAULT| Py_TPFLAGS_BASETYPE,        /*tp_flags*/
             "v8___PersistentBase_v8__Integer_ objects",           /* tp_doc */
             0,		               /* tp_traverse */
             0,		               /* tp_clear */
             0,		               /* tp_richcompare */
             0,		               /* tp_weaklistoffset */
             0,		               /* tp_iter */
             0,		               /* tp_iternext */
             v8___PersistentBase_v8__Integer__methods,             /* tp_methods */
             v8___PersistentBase_v8__Integer__members,             /* tp_members */
             0,                         /* tp_getset */
             0,                         /* tp_base */
             0,                         /* tp_dict */
             0,                         /* tp_descr_get */
             0,                         /* tp_descr_set */
             0,                         /* tp_dictoffset */
             (initproc)v8___PersistentBase_v8__Integer__init,      /* tp_init */
             0,                         /* tp_alloc */
             v8___PersistentBase_v8__Integer__new,                 /* tp_new */
         };

static void
v8___PersistentBase_v8__Boolean__dealloc(v8___PersistentBase_v8__Boolean_* self);

static PyObject *
v8___PersistentBase_v8__Boolean__new(PyTypeObject *type, PyObject *args, PyObject *kwds);
static int
v8___PersistentBase_v8__Boolean__init(v8___PersistentBase_v8__Boolean_ *self, PyObject *args, PyObject *kwds);
           

static PyMethodDef v8___PersistentBase_v8__Boolean__methods[] = {
             {NULL}  /* Sentinel */
};

static PyMemberDef v8___PersistentBase_v8__Boolean__members[] =   {
        {NULL}
};
    

static PyTypeObject v8___PersistentBase_v8__Boolean_Type = {
             PyObject_HEAD_INIT(NULL)
             0,                         /*ob_size*/
             "v8.PersistentBase<v8::Boolean>",             /*tp_name*/
             sizeof(v8___PersistentBase_v8__Boolean_), /*tp_basicsize*/
             0,                         /*tp_itemsize*/
             (destructor)v8___PersistentBase_v8__Boolean__dealloc,                         /*tp_dealloc*/
             0,                         /*tp_print*/
             0,                         /*tp_getattr*/
             0,                         /*tp_setattr*/
             0,                         /*tp_compare*/
             0,                         /*tp_repr*/
             0,                         /*tp_as_number*/
             0,                         /*tp_as_sequence*/
             0,                         /*tp_as_mapping*/
             0,                         /*tp_hash */
             0,                         /*tp_call*/
             0,                         /*tp_str*/
             0,                         /*tp_getattro*/
             0,                         /*tp_setattro*/
             0,                         /*tp_as_buffer*/
             Py_TPFLAGS_DEFAULT| Py_TPFLAGS_BASETYPE,        /*tp_flags*/
             "v8___PersistentBase_v8__Boolean_ objects",           /* tp_doc */
             0,		               /* tp_traverse */
             0,		               /* tp_clear */
             0,		               /* tp_richcompare */
             0,		               /* tp_weaklistoffset */
             0,		               /* tp_iter */
             0,		               /* tp_iternext */
             v8___PersistentBase_v8__Boolean__methods,             /* tp_methods */
             v8___PersistentBase_v8__Boolean__members,             /* tp_members */
             0,                         /* tp_getset */
             0,                         /* tp_base */
             0,                         /* tp_dict */
             0,                         /* tp_descr_get */
             0,                         /* tp_descr_set */
             0,                         /* tp_dictoffset */
             (initproc)v8___PersistentBase_v8__Boolean__init,      /* tp_init */
             0,                         /* tp_alloc */
             v8___PersistentBase_v8__Boolean__new,                 /* tp_new */
         };

static void
v8___PersistentBase_v8__UnboundScript__dealloc(v8___PersistentBase_v8__UnboundScript_* self);

static PyObject *
v8___PersistentBase_v8__UnboundScript__new(PyTypeObject *type, PyObject *args, PyObject *kwds);
static int
v8___PersistentBase_v8__UnboundScript__init(v8___PersistentBase_v8__UnboundScript_ *self, PyObject *args, PyObject *kwds);
           

static PyMethodDef v8___PersistentBase_v8__UnboundScript__methods[] = {
             {NULL}  /* Sentinel */
};

static PyMemberDef v8___PersistentBase_v8__UnboundScript__members[] =   {
        {NULL}
};
    

static PyTypeObject v8___PersistentBase_v8__UnboundScript_Type = {
             PyObject_HEAD_INIT(NULL)
             0,                         /*ob_size*/
             "v8.PersistentBase<v8::UnboundScript>",             /*tp_name*/
             sizeof(v8___PersistentBase_v8__UnboundScript_), /*tp_basicsize*/
             0,                         /*tp_itemsize*/
             (destructor)v8___PersistentBase_v8__UnboundScript__dealloc,                         /*tp_dealloc*/
             0,                         /*tp_print*/
             0,                         /*tp_getattr*/
             0,                         /*tp_setattr*/
             0,                         /*tp_compare*/
             0,                         /*tp_repr*/
             0,                         /*tp_as_number*/
             0,                         /*tp_as_sequence*/
             0,                         /*tp_as_mapping*/
             0,                         /*tp_hash */
             0,                         /*tp_call*/
             0,                         /*tp_str*/
             0,                         /*tp_getattro*/
             0,                         /*tp_setattro*/
             0,                         /*tp_as_buffer*/
             Py_TPFLAGS_DEFAULT| Py_TPFLAGS_BASETYPE,        /*tp_flags*/
             "v8___PersistentBase_v8__UnboundScript_ objects",           /* tp_doc */
             0,		               /* tp_traverse */
             0,		               /* tp_clear */
             0,		               /* tp_richcompare */
             0,		               /* tp_weaklistoffset */
             0,		               /* tp_iter */
             0,		               /* tp_iternext */
             v8___PersistentBase_v8__UnboundScript__methods,             /* tp_methods */
             v8___PersistentBase_v8__UnboundScript__members,             /* tp_members */
             0,                         /* tp_getset */
             0,                         /* tp_base */
             0,                         /* tp_dict */
             0,                         /* tp_descr_get */
             0,                         /* tp_descr_set */
             0,                         /* tp_dictoffset */
             (initproc)v8___PersistentBase_v8__UnboundScript__init,      /* tp_init */
             0,                         /* tp_alloc */
             v8___PersistentBase_v8__UnboundScript__new,                 /* tp_new */
         };

static void
v8___PersistentBase_v8__String__dealloc(v8___PersistentBase_v8__String_* self);

static PyObject *
v8___PersistentBase_v8__String__new(PyTypeObject *type, PyObject *args, PyObject *kwds);
static int
v8___PersistentBase_v8__String__init(v8___PersistentBase_v8__String_ *self, PyObject *args, PyObject *kwds);
           

static PyMethodDef v8___PersistentBase_v8__String__methods[] = {
             {NULL}  /* Sentinel */
};

static PyMemberDef v8___PersistentBase_v8__String__members[] =   {
        {NULL}
};
    

static PyTypeObject v8___PersistentBase_v8__String_Type = {
             PyObject_HEAD_INIT(NULL)
             0,                         /*ob_size*/
             "v8.PersistentBase<v8::String>",             /*tp_name*/
             sizeof(v8___PersistentBase_v8__String_), /*tp_basicsize*/
             0,                         /*tp_itemsize*/
             (destructor)v8___PersistentBase_v8__String__dealloc,                         /*tp_dealloc*/
             0,                         /*tp_print*/
             0,                         /*tp_getattr*/
             0,                         /*tp_setattr*/
             0,                         /*tp_compare*/
             0,                         /*tp_repr*/
             0,                         /*tp_as_number*/
             0,                         /*tp_as_sequence*/
             0,                         /*tp_as_mapping*/
             0,                         /*tp_hash */
             0,                         /*tp_call*/
             0,                         /*tp_str*/
             0,                         /*tp_getattro*/
             0,                         /*tp_setattro*/
             0,                         /*tp_as_buffer*/
             Py_TPFLAGS_DEFAULT| Py_TPFLAGS_BASETYPE,        /*tp_flags*/
             "v8___PersistentBase_v8__String_ objects",           /* tp_doc */
             0,		               /* tp_traverse */
             0,		               /* tp_clear */
             0,		               /* tp_richcompare */
             0,		               /* tp_weaklistoffset */
             0,		               /* tp_iter */
             0,		               /* tp_iternext */
             v8___PersistentBase_v8__String__methods,             /* tp_methods */
             v8___PersistentBase_v8__String__members,             /* tp_members */
             0,                         /* tp_getset */
             0,                         /* tp_base */
             0,                         /* tp_dict */
             0,                         /* tp_descr_get */
             0,                         /* tp_descr_set */
             0,                         /* tp_dictoffset */
             (initproc)v8___PersistentBase_v8__String__init,      /* tp_init */
             0,                         /* tp_alloc */
             v8___PersistentBase_v8__String__new,                 /* tp_new */
         };

static void
v8___PersistentBase_v8__Object__dealloc(v8___PersistentBase_v8__Object_* self);

static PyObject *
v8___PersistentBase_v8__Object__new(PyTypeObject *type, PyObject *args, PyObject *kwds);
static int
v8___PersistentBase_v8__Object__init(v8___PersistentBase_v8__Object_ *self, PyObject *args, PyObject *kwds);
           

static PyObject*
v8___PersistentBase_v8__Object___Reset(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___PersistentBase_v8__Object___IsEmpty(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___PersistentBase_v8__Object___Empty(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___PersistentBase_v8__Object___ClearWeak(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___PersistentBase_v8__Object___MarkIndependent(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___PersistentBase_v8__Object___MarkPartiallyDependent(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___PersistentBase_v8__Object___IsIndependent(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___PersistentBase_v8__Object___IsNearDeath(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___PersistentBase_v8__Object___IsWeak(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___PersistentBase_v8__Object___SetWrapperClassId(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___PersistentBase_v8__Object___WrapperClassId(PyObject *args, PyObject *kwds);
    
static PyMethodDef v8___PersistentBase_v8__Object__methods[] = {
             
            {"Reset",  (PyCFunction)v8___PersistentBase_v8__Object___Reset, METH_VARARGS| METH_KEYWORDS, ""},
            {"IsEmpty",  (PyCFunction)v8___PersistentBase_v8__Object___IsEmpty, METH_VARARGS| METH_KEYWORDS, ""},
            {"Empty",  (PyCFunction)v8___PersistentBase_v8__Object___Empty, METH_VARARGS| METH_KEYWORDS, ""},
            {"ClearWeak",  (PyCFunction)v8___PersistentBase_v8__Object___ClearWeak, METH_VARARGS| METH_KEYWORDS, ""},
            {"MarkIndependent",  (PyCFunction)v8___PersistentBase_v8__Object___MarkIndependent, METH_VARARGS| METH_KEYWORDS, ""},
            {"MarkPartiallyDependent",  (PyCFunction)v8___PersistentBase_v8__Object___MarkPartiallyDependent, METH_VARARGS| METH_KEYWORDS, ""},
            {"IsIndependent",  (PyCFunction)v8___PersistentBase_v8__Object___IsIndependent, METH_VARARGS| METH_KEYWORDS, ""},
            {"IsNearDeath",  (PyCFunction)v8___PersistentBase_v8__Object___IsNearDeath, METH_VARARGS| METH_KEYWORDS, ""},
            {"IsWeak",  (PyCFunction)v8___PersistentBase_v8__Object___IsWeak, METH_VARARGS| METH_KEYWORDS, ""},
            {"SetWrapperClassId",  (PyCFunction)v8___PersistentBase_v8__Object___SetWrapperClassId, METH_VARARGS| METH_KEYWORDS, ""},
            {"WrapperClassId",  (PyCFunction)v8___PersistentBase_v8__Object___WrapperClassId, METH_VARARGS| METH_KEYWORDS, ""},{NULL}  /* Sentinel */
};

static PyMemberDef v8___PersistentBase_v8__Object__members[] =   {
        {NULL}
};
    

static PyTypeObject v8___PersistentBase_v8__Object_Type = {
             PyObject_HEAD_INIT(NULL)
             0,                         /*ob_size*/
             "v8.PersistentBase<v8::Object>",             /*tp_name*/
             sizeof(v8___PersistentBase_v8__Object_), /*tp_basicsize*/
             0,                         /*tp_itemsize*/
             (destructor)v8___PersistentBase_v8__Object__dealloc,                         /*tp_dealloc*/
             0,                         /*tp_print*/
             0,                         /*tp_getattr*/
             0,                         /*tp_setattr*/
             0,                         /*tp_compare*/
             0,                         /*tp_repr*/
             0,                         /*tp_as_number*/
             0,                         /*tp_as_sequence*/
             0,                         /*tp_as_mapping*/
             0,                         /*tp_hash */
             0,                         /*tp_call*/
             0,                         /*tp_str*/
             0,                         /*tp_getattro*/
             0,                         /*tp_setattro*/
             0,                         /*tp_as_buffer*/
             Py_TPFLAGS_DEFAULT| Py_TPFLAGS_BASETYPE,        /*tp_flags*/
             "v8___PersistentBase_v8__Object_ objects",           /* tp_doc */
             0,		               /* tp_traverse */
             0,		               /* tp_clear */
             0,		               /* tp_richcompare */
             0,		               /* tp_weaklistoffset */
             0,		               /* tp_iter */
             0,		               /* tp_iternext */
             v8___PersistentBase_v8__Object__methods,             /* tp_methods */
             v8___PersistentBase_v8__Object__members,             /* tp_members */
             0,                         /* tp_getset */
             0,                         /* tp_base */
             0,                         /* tp_dict */
             0,                         /* tp_descr_get */
             0,                         /* tp_descr_set */
             0,                         /* tp_dictoffset */
             (initproc)v8___PersistentBase_v8__Object__init,      /* tp_init */
             0,                         /* tp_alloc */
             v8___PersistentBase_v8__Object__new,                 /* tp_new */
         };

static void
v8___PersistentBase_v8__Function__dealloc(v8___PersistentBase_v8__Function_* self);

static PyObject *
v8___PersistentBase_v8__Function__new(PyTypeObject *type, PyObject *args, PyObject *kwds);
static int
v8___PersistentBase_v8__Function__init(v8___PersistentBase_v8__Function_ *self, PyObject *args, PyObject *kwds);
           

static PyMethodDef v8___PersistentBase_v8__Function__methods[] = {
             {NULL}  /* Sentinel */
};

static PyMemberDef v8___PersistentBase_v8__Function__members[] =   {
        {NULL}
};
    

static PyTypeObject v8___PersistentBase_v8__Function_Type = {
             PyObject_HEAD_INIT(NULL)
             0,                         /*ob_size*/
             "v8.PersistentBase<v8::Function>",             /*tp_name*/
             sizeof(v8___PersistentBase_v8__Function_), /*tp_basicsize*/
             0,                         /*tp_itemsize*/
             (destructor)v8___PersistentBase_v8__Function__dealloc,                         /*tp_dealloc*/
             0,                         /*tp_print*/
             0,                         /*tp_getattr*/
             0,                         /*tp_setattr*/
             0,                         /*tp_compare*/
             0,                         /*tp_repr*/
             0,                         /*tp_as_number*/
             0,                         /*tp_as_sequence*/
             0,                         /*tp_as_mapping*/
             0,                         /*tp_hash */
             0,                         /*tp_call*/
             0,                         /*tp_str*/
             0,                         /*tp_getattro*/
             0,                         /*tp_setattro*/
             0,                         /*tp_as_buffer*/
             Py_TPFLAGS_DEFAULT| Py_TPFLAGS_BASETYPE,        /*tp_flags*/
             "v8___PersistentBase_v8__Function_ objects",           /* tp_doc */
             0,		               /* tp_traverse */
             0,		               /* tp_clear */
             0,		               /* tp_richcompare */
             0,		               /* tp_weaklistoffset */
             0,		               /* tp_iter */
             0,		               /* tp_iternext */
             v8___PersistentBase_v8__Function__methods,             /* tp_methods */
             v8___PersistentBase_v8__Function__members,             /* tp_members */
             0,                         /* tp_getset */
             0,                         /* tp_base */
             0,                         /* tp_dict */
             0,                         /* tp_descr_get */
             0,                         /* tp_descr_set */
             0,                         /* tp_dictoffset */
             (initproc)v8___PersistentBase_v8__Function__init,      /* tp_init */
             0,                         /* tp_alloc */
             v8___PersistentBase_v8__Function__new,                 /* tp_new */
         };

static void
v8___PersistentBase_v8__Context__dealloc(v8___PersistentBase_v8__Context_* self);

static PyObject *
v8___PersistentBase_v8__Context__new(PyTypeObject *type, PyObject *args, PyObject *kwds);
static int
v8___PersistentBase_v8__Context__init(v8___PersistentBase_v8__Context_ *self, PyObject *args, PyObject *kwds);
           

static PyMethodDef v8___PersistentBase_v8__Context__methods[] = {
             {NULL}  /* Sentinel */
};

static PyMemberDef v8___PersistentBase_v8__Context__members[] =   {
        {NULL}
};
    

static PyTypeObject v8___PersistentBase_v8__Context_Type = {
             PyObject_HEAD_INIT(NULL)
             0,                         /*ob_size*/
             "v8.PersistentBase<v8::Context>",             /*tp_name*/
             sizeof(v8___PersistentBase_v8__Context_), /*tp_basicsize*/
             0,                         /*tp_itemsize*/
             (destructor)v8___PersistentBase_v8__Context__dealloc,                         /*tp_dealloc*/
             0,                         /*tp_print*/
             0,                         /*tp_getattr*/
             0,                         /*tp_setattr*/
             0,                         /*tp_compare*/
             0,                         /*tp_repr*/
             0,                         /*tp_as_number*/
             0,                         /*tp_as_sequence*/
             0,                         /*tp_as_mapping*/
             0,                         /*tp_hash */
             0,                         /*tp_call*/
             0,                         /*tp_str*/
             0,                         /*tp_getattro*/
             0,                         /*tp_setattro*/
             0,                         /*tp_as_buffer*/
             Py_TPFLAGS_DEFAULT| Py_TPFLAGS_BASETYPE,        /*tp_flags*/
             "v8___PersistentBase_v8__Context_ objects",           /* tp_doc */
             0,		               /* tp_traverse */
             0,		               /* tp_clear */
             0,		               /* tp_richcompare */
             0,		               /* tp_weaklistoffset */
             0,		               /* tp_iter */
             0,		               /* tp_iternext */
             v8___PersistentBase_v8__Context__methods,             /* tp_methods */
             v8___PersistentBase_v8__Context__members,             /* tp_members */
             0,                         /* tp_getset */
             0,                         /* tp_base */
             0,                         /* tp_dict */
             0,                         /* tp_descr_get */
             0,                         /* tp_descr_set */
             0,                         /* tp_dictoffset */
             (initproc)v8___PersistentBase_v8__Context__init,      /* tp_init */
             0,                         /* tp_alloc */
             v8___PersistentBase_v8__Context__new,                 /* tp_new */
         };

static void
v8___PersistentBase_v8__FunctionTemplate__dealloc(v8___PersistentBase_v8__FunctionTemplate_* self);

static PyObject *
v8___PersistentBase_v8__FunctionTemplate__new(PyTypeObject *type, PyObject *args, PyObject *kwds);
static int
v8___PersistentBase_v8__FunctionTemplate__init(v8___PersistentBase_v8__FunctionTemplate_ *self, PyObject *args, PyObject *kwds);
           

static PyMethodDef v8___PersistentBase_v8__FunctionTemplate__methods[] = {
             {NULL}  /* Sentinel */
};

static PyMemberDef v8___PersistentBase_v8__FunctionTemplate__members[] =   {
        {NULL}
};
    

static PyTypeObject v8___PersistentBase_v8__FunctionTemplate_Type = {
             PyObject_HEAD_INIT(NULL)
             0,                         /*ob_size*/
             "v8.PersistentBase<v8::FunctionTemplate>",             /*tp_name*/
             sizeof(v8___PersistentBase_v8__FunctionTemplate_), /*tp_basicsize*/
             0,                         /*tp_itemsize*/
             (destructor)v8___PersistentBase_v8__FunctionTemplate__dealloc,                         /*tp_dealloc*/
             0,                         /*tp_print*/
             0,                         /*tp_getattr*/
             0,                         /*tp_setattr*/
             0,                         /*tp_compare*/
             0,                         /*tp_repr*/
             0,                         /*tp_as_number*/
             0,                         /*tp_as_sequence*/
             0,                         /*tp_as_mapping*/
             0,                         /*tp_hash */
             0,                         /*tp_call*/
             0,                         /*tp_str*/
             0,                         /*tp_getattro*/
             0,                         /*tp_setattro*/
             0,                         /*tp_as_buffer*/
             Py_TPFLAGS_DEFAULT| Py_TPFLAGS_BASETYPE,        /*tp_flags*/
             "v8___PersistentBase_v8__FunctionTemplate_ objects",           /* tp_doc */
             0,		               /* tp_traverse */
             0,		               /* tp_clear */
             0,		               /* tp_richcompare */
             0,		               /* tp_weaklistoffset */
             0,		               /* tp_iter */
             0,		               /* tp_iternext */
             v8___PersistentBase_v8__FunctionTemplate__methods,             /* tp_methods */
             v8___PersistentBase_v8__FunctionTemplate__members,             /* tp_members */
             0,                         /* tp_getset */
             0,                         /* tp_base */
             0,                         /* tp_dict */
             0,                         /* tp_descr_get */
             0,                         /* tp_descr_set */
             0,                         /* tp_dictoffset */
             (initproc)v8___PersistentBase_v8__FunctionTemplate__init,      /* tp_init */
             0,                         /* tp_alloc */
             v8___PersistentBase_v8__FunctionTemplate__new,                 /* tp_new */
         };

static void
v8___PersistentBase_v8__AccessorSignature__dealloc(v8___PersistentBase_v8__AccessorSignature_* self);

static PyObject *
v8___PersistentBase_v8__AccessorSignature__new(PyTypeObject *type, PyObject *args, PyObject *kwds);
static int
v8___PersistentBase_v8__AccessorSignature__init(v8___PersistentBase_v8__AccessorSignature_ *self, PyObject *args, PyObject *kwds);
           

static PyMethodDef v8___PersistentBase_v8__AccessorSignature__methods[] = {
             {NULL}  /* Sentinel */
};

static PyMemberDef v8___PersistentBase_v8__AccessorSignature__members[] =   {
        {NULL}
};
    

static PyTypeObject v8___PersistentBase_v8__AccessorSignature_Type = {
             PyObject_HEAD_INIT(NULL)
             0,                         /*ob_size*/
             "v8.PersistentBase<v8::AccessorSignature>",             /*tp_name*/
             sizeof(v8___PersistentBase_v8__AccessorSignature_), /*tp_basicsize*/
             0,                         /*tp_itemsize*/
             (destructor)v8___PersistentBase_v8__AccessorSignature__dealloc,                         /*tp_dealloc*/
             0,                         /*tp_print*/
             0,                         /*tp_getattr*/
             0,                         /*tp_setattr*/
             0,                         /*tp_compare*/
             0,                         /*tp_repr*/
             0,                         /*tp_as_number*/
             0,                         /*tp_as_sequence*/
             0,                         /*tp_as_mapping*/
             0,                         /*tp_hash */
             0,                         /*tp_call*/
             0,                         /*tp_str*/
             0,                         /*tp_getattro*/
             0,                         /*tp_setattro*/
             0,                         /*tp_as_buffer*/
             Py_TPFLAGS_DEFAULT| Py_TPFLAGS_BASETYPE,        /*tp_flags*/
             "v8___PersistentBase_v8__AccessorSignature_ objects",           /* tp_doc */
             0,		               /* tp_traverse */
             0,		               /* tp_clear */
             0,		               /* tp_richcompare */
             0,		               /* tp_weaklistoffset */
             0,		               /* tp_iter */
             0,		               /* tp_iternext */
             v8___PersistentBase_v8__AccessorSignature__methods,             /* tp_methods */
             v8___PersistentBase_v8__AccessorSignature__members,             /* tp_members */
             0,                         /* tp_getset */
             0,                         /* tp_base */
             0,                         /* tp_dict */
             0,                         /* tp_descr_get */
             0,                         /* tp_descr_set */
             0,                         /* tp_dictoffset */
             (initproc)v8___PersistentBase_v8__AccessorSignature__init,      /* tp_init */
             0,                         /* tp_alloc */
             v8___PersistentBase_v8__AccessorSignature__new,                 /* tp_new */
         };

static void
v8___PersistentBase_v8__Signature__dealloc(v8___PersistentBase_v8__Signature_* self);

static PyObject *
v8___PersistentBase_v8__Signature__new(PyTypeObject *type, PyObject *args, PyObject *kwds);
static int
v8___PersistentBase_v8__Signature__init(v8___PersistentBase_v8__Signature_ *self, PyObject *args, PyObject *kwds);
           

static PyMethodDef v8___PersistentBase_v8__Signature__methods[] = {
             {NULL}  /* Sentinel */
};

static PyMemberDef v8___PersistentBase_v8__Signature__members[] =   {
        {NULL}
};
    

static PyTypeObject v8___PersistentBase_v8__Signature_Type = {
             PyObject_HEAD_INIT(NULL)
             0,                         /*ob_size*/
             "v8.PersistentBase<v8::Signature>",             /*tp_name*/
             sizeof(v8___PersistentBase_v8__Signature_), /*tp_basicsize*/
             0,                         /*tp_itemsize*/
             (destructor)v8___PersistentBase_v8__Signature__dealloc,                         /*tp_dealloc*/
             0,                         /*tp_print*/
             0,                         /*tp_getattr*/
             0,                         /*tp_setattr*/
             0,                         /*tp_compare*/
             0,                         /*tp_repr*/
             0,                         /*tp_as_number*/
             0,                         /*tp_as_sequence*/
             0,                         /*tp_as_mapping*/
             0,                         /*tp_hash */
             0,                         /*tp_call*/
             0,                         /*tp_str*/
             0,                         /*tp_getattro*/
             0,                         /*tp_setattro*/
             0,                         /*tp_as_buffer*/
             Py_TPFLAGS_DEFAULT| Py_TPFLAGS_BASETYPE,        /*tp_flags*/
             "v8___PersistentBase_v8__Signature_ objects",           /* tp_doc */
             0,		               /* tp_traverse */
             0,		               /* tp_clear */
             0,		               /* tp_richcompare */
             0,		               /* tp_weaklistoffset */
             0,		               /* tp_iter */
             0,		               /* tp_iternext */
             v8___PersistentBase_v8__Signature__methods,             /* tp_methods */
             v8___PersistentBase_v8__Signature__members,             /* tp_members */
             0,                         /* tp_getset */
             0,                         /* tp_base */
             0,                         /* tp_dict */
             0,                         /* tp_descr_get */
             0,                         /* tp_descr_set */
             0,                         /* tp_dictoffset */
             (initproc)v8___PersistentBase_v8__Signature__init,      /* tp_init */
             0,                         /* tp_alloc */
             v8___PersistentBase_v8__Signature__new,                 /* tp_new */
         };

static void
v8___PersistentBase_v8__Promise__dealloc(v8___PersistentBase_v8__Promise_* self);

static PyObject *
v8___PersistentBase_v8__Promise__new(PyTypeObject *type, PyObject *args, PyObject *kwds);
static int
v8___PersistentBase_v8__Promise__init(v8___PersistentBase_v8__Promise_ *self, PyObject *args, PyObject *kwds);
           

static PyMethodDef v8___PersistentBase_v8__Promise__methods[] = {
             {NULL}  /* Sentinel */
};

static PyMemberDef v8___PersistentBase_v8__Promise__members[] =   {
        {NULL}
};
    

static PyTypeObject v8___PersistentBase_v8__Promise_Type = {
             PyObject_HEAD_INIT(NULL)
             0,                         /*ob_size*/
             "v8.PersistentBase<v8::Promise>",             /*tp_name*/
             sizeof(v8___PersistentBase_v8__Promise_), /*tp_basicsize*/
             0,                         /*tp_itemsize*/
             (destructor)v8___PersistentBase_v8__Promise__dealloc,                         /*tp_dealloc*/
             0,                         /*tp_print*/
             0,                         /*tp_getattr*/
             0,                         /*tp_setattr*/
             0,                         /*tp_compare*/
             0,                         /*tp_repr*/
             0,                         /*tp_as_number*/
             0,                         /*tp_as_sequence*/
             0,                         /*tp_as_mapping*/
             0,                         /*tp_hash */
             0,                         /*tp_call*/
             0,                         /*tp_str*/
             0,                         /*tp_getattro*/
             0,                         /*tp_setattro*/
             0,                         /*tp_as_buffer*/
             Py_TPFLAGS_DEFAULT| Py_TPFLAGS_BASETYPE,        /*tp_flags*/
             "v8___PersistentBase_v8__Promise_ objects",           /* tp_doc */
             0,		               /* tp_traverse */
             0,		               /* tp_clear */
             0,		               /* tp_richcompare */
             0,		               /* tp_weaklistoffset */
             0,		               /* tp_iter */
             0,		               /* tp_iternext */
             v8___PersistentBase_v8__Promise__methods,             /* tp_methods */
             v8___PersistentBase_v8__Promise__members,             /* tp_members */
             0,                         /* tp_getset */
             0,                         /* tp_base */
             0,                         /* tp_dict */
             0,                         /* tp_descr_get */
             0,                         /* tp_descr_set */
             0,                         /* tp_dictoffset */
             (initproc)v8___PersistentBase_v8__Promise__init,      /* tp_init */
             0,                         /* tp_alloc */
             v8___PersistentBase_v8__Promise__new,                 /* tp_new */
         };

static void
v8___PersistentBase_v8__StackTrace__dealloc(v8___PersistentBase_v8__StackTrace_* self);

static PyObject *
v8___PersistentBase_v8__StackTrace__new(PyTypeObject *type, PyObject *args, PyObject *kwds);
static int
v8___PersistentBase_v8__StackTrace__init(v8___PersistentBase_v8__StackTrace_ *self, PyObject *args, PyObject *kwds);
           

static PyMethodDef v8___PersistentBase_v8__StackTrace__methods[] = {
             {NULL}  /* Sentinel */
};

static PyMemberDef v8___PersistentBase_v8__StackTrace__members[] =   {
        {NULL}
};
    

static PyTypeObject v8___PersistentBase_v8__StackTrace_Type = {
             PyObject_HEAD_INIT(NULL)
             0,                         /*ob_size*/
             "v8.PersistentBase<v8::StackTrace>",             /*tp_name*/
             sizeof(v8___PersistentBase_v8__StackTrace_), /*tp_basicsize*/
             0,                         /*tp_itemsize*/
             (destructor)v8___PersistentBase_v8__StackTrace__dealloc,                         /*tp_dealloc*/
             0,                         /*tp_print*/
             0,                         /*tp_getattr*/
             0,                         /*tp_setattr*/
             0,                         /*tp_compare*/
             0,                         /*tp_repr*/
             0,                         /*tp_as_number*/
             0,                         /*tp_as_sequence*/
             0,                         /*tp_as_mapping*/
             0,                         /*tp_hash */
             0,                         /*tp_call*/
             0,                         /*tp_str*/
             0,                         /*tp_getattro*/
             0,                         /*tp_setattro*/
             0,                         /*tp_as_buffer*/
             Py_TPFLAGS_DEFAULT| Py_TPFLAGS_BASETYPE,        /*tp_flags*/
             "v8___PersistentBase_v8__StackTrace_ objects",           /* tp_doc */
             0,		               /* tp_traverse */
             0,		               /* tp_clear */
             0,		               /* tp_richcompare */
             0,		               /* tp_weaklistoffset */
             0,		               /* tp_iter */
             0,		               /* tp_iternext */
             v8___PersistentBase_v8__StackTrace__methods,             /* tp_methods */
             v8___PersistentBase_v8__StackTrace__members,             /* tp_members */
             0,                         /* tp_getset */
             0,                         /* tp_base */
             0,                         /* tp_dict */
             0,                         /* tp_descr_get */
             0,                         /* tp_descr_set */
             0,                         /* tp_dictoffset */
             (initproc)v8___PersistentBase_v8__StackTrace__init,      /* tp_init */
             0,                         /* tp_alloc */
             v8___PersistentBase_v8__StackTrace__new,                 /* tp_new */
         };

static void
v8___PersistentBase_v8__ObjectTemplate__dealloc(v8___PersistentBase_v8__ObjectTemplate_* self);

static PyObject *
v8___PersistentBase_v8__ObjectTemplate__new(PyTypeObject *type, PyObject *args, PyObject *kwds);
static int
v8___PersistentBase_v8__ObjectTemplate__init(v8___PersistentBase_v8__ObjectTemplate_ *self, PyObject *args, PyObject *kwds);
           

static PyMethodDef v8___PersistentBase_v8__ObjectTemplate__methods[] = {
             {NULL}  /* Sentinel */
};

static PyMemberDef v8___PersistentBase_v8__ObjectTemplate__members[] =   {
        {NULL}
};
    

static PyTypeObject v8___PersistentBase_v8__ObjectTemplate_Type = {
             PyObject_HEAD_INIT(NULL)
             0,                         /*ob_size*/
             "v8.PersistentBase<v8::ObjectTemplate>",             /*tp_name*/
             sizeof(v8___PersistentBase_v8__ObjectTemplate_), /*tp_basicsize*/
             0,                         /*tp_itemsize*/
             (destructor)v8___PersistentBase_v8__ObjectTemplate__dealloc,                         /*tp_dealloc*/
             0,                         /*tp_print*/
             0,                         /*tp_getattr*/
             0,                         /*tp_setattr*/
             0,                         /*tp_compare*/
             0,                         /*tp_repr*/
             0,                         /*tp_as_number*/
             0,                         /*tp_as_sequence*/
             0,                         /*tp_as_mapping*/
             0,                         /*tp_hash */
             0,                         /*tp_call*/
             0,                         /*tp_str*/
             0,                         /*tp_getattro*/
             0,                         /*tp_setattro*/
             0,                         /*tp_as_buffer*/
             Py_TPFLAGS_DEFAULT| Py_TPFLAGS_BASETYPE,        /*tp_flags*/
             "v8___PersistentBase_v8__ObjectTemplate_ objects",           /* tp_doc */
             0,		               /* tp_traverse */
             0,		               /* tp_clear */
             0,		               /* tp_richcompare */
             0,		               /* tp_weaklistoffset */
             0,		               /* tp_iter */
             0,		               /* tp_iternext */
             v8___PersistentBase_v8__ObjectTemplate__methods,             /* tp_methods */
             v8___PersistentBase_v8__ObjectTemplate__members,             /* tp_members */
             0,                         /* tp_getset */
             0,                         /* tp_base */
             0,                         /* tp_dict */
             0,                         /* tp_descr_get */
             0,                         /* tp_descr_set */
             0,                         /* tp_dictoffset */
             (initproc)v8___PersistentBase_v8__ObjectTemplate__init,      /* tp_init */
             0,                         /* tp_alloc */
             v8___PersistentBase_v8__ObjectTemplate__new,                 /* tp_new */
         };

static void
v8___PersistentBase_v8__Data__dealloc(v8___PersistentBase_v8__Data_* self);

static PyObject *
v8___PersistentBase_v8__Data__new(PyTypeObject *type, PyObject *args, PyObject *kwds);
static int
v8___PersistentBase_v8__Data__init(v8___PersistentBase_v8__Data_ *self, PyObject *args, PyObject *kwds);
           

static PyMethodDef v8___PersistentBase_v8__Data__methods[] = {
             {NULL}  /* Sentinel */
};

static PyMemberDef v8___PersistentBase_v8__Data__members[] =   {
        {NULL}
};
    

static PyTypeObject v8___PersistentBase_v8__Data_Type = {
             PyObject_HEAD_INIT(NULL)
             0,                         /*ob_size*/
             "v8.PersistentBase<v8::Data>",             /*tp_name*/
             sizeof(v8___PersistentBase_v8__Data_), /*tp_basicsize*/
             0,                         /*tp_itemsize*/
             (destructor)v8___PersistentBase_v8__Data__dealloc,                         /*tp_dealloc*/
             0,                         /*tp_print*/
             0,                         /*tp_getattr*/
             0,                         /*tp_setattr*/
             0,                         /*tp_compare*/
             0,                         /*tp_repr*/
             0,                         /*tp_as_number*/
             0,                         /*tp_as_sequence*/
             0,                         /*tp_as_mapping*/
             0,                         /*tp_hash */
             0,                         /*tp_call*/
             0,                         /*tp_str*/
             0,                         /*tp_getattro*/
             0,                         /*tp_setattro*/
             0,                         /*tp_as_buffer*/
             Py_TPFLAGS_DEFAULT| Py_TPFLAGS_BASETYPE,        /*tp_flags*/
             "v8___PersistentBase_v8__Data_ objects",           /* tp_doc */
             0,		               /* tp_traverse */
             0,		               /* tp_clear */
             0,		               /* tp_richcompare */
             0,		               /* tp_weaklistoffset */
             0,		               /* tp_iter */
             0,		               /* tp_iternext */
             v8___PersistentBase_v8__Data__methods,             /* tp_methods */
             v8___PersistentBase_v8__Data__members,             /* tp_members */
             0,                         /* tp_getset */
             0,                         /* tp_base */
             0,                         /* tp_dict */
             0,                         /* tp_descr_get */
             0,                         /* tp_descr_set */
             0,                         /* tp_dictoffset */
             (initproc)v8___PersistentBase_v8__Data__init,      /* tp_init */
             0,                         /* tp_alloc */
             v8___PersistentBase_v8__Data__new,                 /* tp_new */
         };

static void
v8___PersistentBase_v8__Name__dealloc(v8___PersistentBase_v8__Name_* self);

static PyObject *
v8___PersistentBase_v8__Name__new(PyTypeObject *type, PyObject *args, PyObject *kwds);
static int
v8___PersistentBase_v8__Name__init(v8___PersistentBase_v8__Name_ *self, PyObject *args, PyObject *kwds);
           

static PyMethodDef v8___PersistentBase_v8__Name__methods[] = {
             {NULL}  /* Sentinel */
};

static PyMemberDef v8___PersistentBase_v8__Name__members[] =   {
        {NULL}
};
    

static PyTypeObject v8___PersistentBase_v8__Name_Type = {
             PyObject_HEAD_INIT(NULL)
             0,                         /*ob_size*/
             "v8.PersistentBase<v8::Name>",             /*tp_name*/
             sizeof(v8___PersistentBase_v8__Name_), /*tp_basicsize*/
             0,                         /*tp_itemsize*/
             (destructor)v8___PersistentBase_v8__Name__dealloc,                         /*tp_dealloc*/
             0,                         /*tp_print*/
             0,                         /*tp_getattr*/
             0,                         /*tp_setattr*/
             0,                         /*tp_compare*/
             0,                         /*tp_repr*/
             0,                         /*tp_as_number*/
             0,                         /*tp_as_sequence*/
             0,                         /*tp_as_mapping*/
             0,                         /*tp_hash */
             0,                         /*tp_call*/
             0,                         /*tp_str*/
             0,                         /*tp_getattro*/
             0,                         /*tp_setattro*/
             0,                         /*tp_as_buffer*/
             Py_TPFLAGS_DEFAULT| Py_TPFLAGS_BASETYPE,        /*tp_flags*/
             "v8___PersistentBase_v8__Name_ objects",           /* tp_doc */
             0,		               /* tp_traverse */
             0,		               /* tp_clear */
             0,		               /* tp_richcompare */
             0,		               /* tp_weaklistoffset */
             0,		               /* tp_iter */
             0,		               /* tp_iternext */
             v8___PersistentBase_v8__Name__methods,             /* tp_methods */
             v8___PersistentBase_v8__Name__members,             /* tp_members */
             0,                         /* tp_getset */
             0,                         /* tp_base */
             0,                         /* tp_dict */
             0,                         /* tp_descr_get */
             0,                         /* tp_descr_set */
             0,                         /* tp_dictoffset */
             (initproc)v8___PersistentBase_v8__Name__init,      /* tp_init */
             0,                         /* tp_alloc */
             v8___PersistentBase_v8__Name__new,                 /* tp_new */
         };

static void
v8___PersistentBase_v8__Number__dealloc(v8___PersistentBase_v8__Number_* self);

static PyObject *
v8___PersistentBase_v8__Number__new(PyTypeObject *type, PyObject *args, PyObject *kwds);
static int
v8___PersistentBase_v8__Number__init(v8___PersistentBase_v8__Number_ *self, PyObject *args, PyObject *kwds);
           

static PyMethodDef v8___PersistentBase_v8__Number__methods[] = {
             {NULL}  /* Sentinel */
};

static PyMemberDef v8___PersistentBase_v8__Number__members[] =   {
        {NULL}
};
    

static PyTypeObject v8___PersistentBase_v8__Number_Type = {
             PyObject_HEAD_INIT(NULL)
             0,                         /*ob_size*/
             "v8.PersistentBase<v8::Number>",             /*tp_name*/
             sizeof(v8___PersistentBase_v8__Number_), /*tp_basicsize*/
             0,                         /*tp_itemsize*/
             (destructor)v8___PersistentBase_v8__Number__dealloc,                         /*tp_dealloc*/
             0,                         /*tp_print*/
             0,                         /*tp_getattr*/
             0,                         /*tp_setattr*/
             0,                         /*tp_compare*/
             0,                         /*tp_repr*/
             0,                         /*tp_as_number*/
             0,                         /*tp_as_sequence*/
             0,                         /*tp_as_mapping*/
             0,                         /*tp_hash */
             0,                         /*tp_call*/
             0,                         /*tp_str*/
             0,                         /*tp_getattro*/
             0,                         /*tp_setattro*/
             0,                         /*tp_as_buffer*/
             Py_TPFLAGS_DEFAULT| Py_TPFLAGS_BASETYPE,        /*tp_flags*/
             "v8___PersistentBase_v8__Number_ objects",           /* tp_doc */
             0,		               /* tp_traverse */
             0,		               /* tp_clear */
             0,		               /* tp_richcompare */
             0,		               /* tp_weaklistoffset */
             0,		               /* tp_iter */
             0,		               /* tp_iternext */
             v8___PersistentBase_v8__Number__methods,             /* tp_methods */
             v8___PersistentBase_v8__Number__members,             /* tp_members */
             0,                         /* tp_getset */
             0,                         /* tp_base */
             0,                         /* tp_dict */
             0,                         /* tp_descr_get */
             0,                         /* tp_descr_set */
             0,                         /* tp_dictoffset */
             (initproc)v8___PersistentBase_v8__Number__init,      /* tp_init */
             0,                         /* tp_alloc */
             v8___PersistentBase_v8__Number__new,                 /* tp_new */
         };

static void
v8___PersistentBase_v8__Uint32__dealloc(v8___PersistentBase_v8__Uint32_* self);

static PyObject *
v8___PersistentBase_v8__Uint32__new(PyTypeObject *type, PyObject *args, PyObject *kwds);
static int
v8___PersistentBase_v8__Uint32__init(v8___PersistentBase_v8__Uint32_ *self, PyObject *args, PyObject *kwds);
           

static PyMethodDef v8___PersistentBase_v8__Uint32__methods[] = {
             {NULL}  /* Sentinel */
};

static PyMemberDef v8___PersistentBase_v8__Uint32__members[] =   {
        {NULL}
};
    

static PyTypeObject v8___PersistentBase_v8__Uint32_Type = {
             PyObject_HEAD_INIT(NULL)
             0,                         /*ob_size*/
             "v8.PersistentBase<v8::Uint32>",             /*tp_name*/
             sizeof(v8___PersistentBase_v8__Uint32_), /*tp_basicsize*/
             0,                         /*tp_itemsize*/
             (destructor)v8___PersistentBase_v8__Uint32__dealloc,                         /*tp_dealloc*/
             0,                         /*tp_print*/
             0,                         /*tp_getattr*/
             0,                         /*tp_setattr*/
             0,                         /*tp_compare*/
             0,                         /*tp_repr*/
             0,                         /*tp_as_number*/
             0,                         /*tp_as_sequence*/
             0,                         /*tp_as_mapping*/
             0,                         /*tp_hash */
             0,                         /*tp_call*/
             0,                         /*tp_str*/
             0,                         /*tp_getattro*/
             0,                         /*tp_setattro*/
             0,                         /*tp_as_buffer*/
             Py_TPFLAGS_DEFAULT| Py_TPFLAGS_BASETYPE,        /*tp_flags*/
             "v8___PersistentBase_v8__Uint32_ objects",           /* tp_doc */
             0,		               /* tp_traverse */
             0,		               /* tp_clear */
             0,		               /* tp_richcompare */
             0,		               /* tp_weaklistoffset */
             0,		               /* tp_iter */
             0,		               /* tp_iternext */
             v8___PersistentBase_v8__Uint32__methods,             /* tp_methods */
             v8___PersistentBase_v8__Uint32__members,             /* tp_members */
             0,                         /* tp_getset */
             0,                         /* tp_base */
             0,                         /* tp_dict */
             0,                         /* tp_descr_get */
             0,                         /* tp_descr_set */
             0,                         /* tp_dictoffset */
             (initproc)v8___PersistentBase_v8__Uint32__init,      /* tp_init */
             0,                         /* tp_alloc */
             v8___PersistentBase_v8__Uint32__new,                 /* tp_new */
         };

static void
v8___PersistentBase_v8__Int32__dealloc(v8___PersistentBase_v8__Int32_* self);

static PyObject *
v8___PersistentBase_v8__Int32__new(PyTypeObject *type, PyObject *args, PyObject *kwds);
static int
v8___PersistentBase_v8__Int32__init(v8___PersistentBase_v8__Int32_ *self, PyObject *args, PyObject *kwds);
           

static PyMethodDef v8___PersistentBase_v8__Int32__methods[] = {
             {NULL}  /* Sentinel */
};

static PyMemberDef v8___PersistentBase_v8__Int32__members[] =   {
        {NULL}
};
    

static PyTypeObject v8___PersistentBase_v8__Int32_Type = {
             PyObject_HEAD_INIT(NULL)
             0,                         /*ob_size*/
             "v8.PersistentBase<v8::Int32>",             /*tp_name*/
             sizeof(v8___PersistentBase_v8__Int32_), /*tp_basicsize*/
             0,                         /*tp_itemsize*/
             (destructor)v8___PersistentBase_v8__Int32__dealloc,                         /*tp_dealloc*/
             0,                         /*tp_print*/
             0,                         /*tp_getattr*/
             0,                         /*tp_setattr*/
             0,                         /*tp_compare*/
             0,                         /*tp_repr*/
             0,                         /*tp_as_number*/
             0,                         /*tp_as_sequence*/
             0,                         /*tp_as_mapping*/
             0,                         /*tp_hash */
             0,                         /*tp_call*/
             0,                         /*tp_str*/
             0,                         /*tp_getattro*/
             0,                         /*tp_setattro*/
             0,                         /*tp_as_buffer*/
             Py_TPFLAGS_DEFAULT| Py_TPFLAGS_BASETYPE,        /*tp_flags*/
             "v8___PersistentBase_v8__Int32_ objects",           /* tp_doc */
             0,		               /* tp_traverse */
             0,		               /* tp_clear */
             0,		               /* tp_richcompare */
             0,		               /* tp_weaklistoffset */
             0,		               /* tp_iter */
             0,		               /* tp_iternext */
             v8___PersistentBase_v8__Int32__methods,             /* tp_methods */
             v8___PersistentBase_v8__Int32__members,             /* tp_members */
             0,                         /* tp_getset */
             0,                         /* tp_base */
             0,                         /* tp_dict */
             0,                         /* tp_descr_get */
             0,                         /* tp_descr_set */
             0,                         /* tp_dictoffset */
             (initproc)v8___PersistentBase_v8__Int32__init,      /* tp_init */
             0,                         /* tp_alloc */
             v8___PersistentBase_v8__Int32__new,                 /* tp_new */
         };

static void
v8___PersistentBase_v8__Primitive__dealloc(v8___PersistentBase_v8__Primitive_* self);

static PyObject *
v8___PersistentBase_v8__Primitive__new(PyTypeObject *type, PyObject *args, PyObject *kwds);
static int
v8___PersistentBase_v8__Primitive__init(v8___PersistentBase_v8__Primitive_ *self, PyObject *args, PyObject *kwds);
           

static PyMethodDef v8___PersistentBase_v8__Primitive__methods[] = {
             {NULL}  /* Sentinel */
};

static PyMemberDef v8___PersistentBase_v8__Primitive__members[] =   {
        {NULL}
};
    

static PyTypeObject v8___PersistentBase_v8__Primitive_Type = {
             PyObject_HEAD_INIT(NULL)
             0,                         /*ob_size*/
             "v8.PersistentBase<v8::Primitive>",             /*tp_name*/
             sizeof(v8___PersistentBase_v8__Primitive_), /*tp_basicsize*/
             0,                         /*tp_itemsize*/
             (destructor)v8___PersistentBase_v8__Primitive__dealloc,                         /*tp_dealloc*/
             0,                         /*tp_print*/
             0,                         /*tp_getattr*/
             0,                         /*tp_setattr*/
             0,                         /*tp_compare*/
             0,                         /*tp_repr*/
             0,                         /*tp_as_number*/
             0,                         /*tp_as_sequence*/
             0,                         /*tp_as_mapping*/
             0,                         /*tp_hash */
             0,                         /*tp_call*/
             0,                         /*tp_str*/
             0,                         /*tp_getattro*/
             0,                         /*tp_setattro*/
             0,                         /*tp_as_buffer*/
             Py_TPFLAGS_DEFAULT| Py_TPFLAGS_BASETYPE,        /*tp_flags*/
             "v8___PersistentBase_v8__Primitive_ objects",           /* tp_doc */
             0,		               /* tp_traverse */
             0,		               /* tp_clear */
             0,		               /* tp_richcompare */
             0,		               /* tp_weaklistoffset */
             0,		               /* tp_iter */
             0,		               /* tp_iternext */
             v8___PersistentBase_v8__Primitive__methods,             /* tp_methods */
             v8___PersistentBase_v8__Primitive__members,             /* tp_members */
             0,                         /* tp_getset */
             0,                         /* tp_base */
             0,                         /* tp_dict */
             0,                         /* tp_descr_get */
             0,                         /* tp_descr_set */
             0,                         /* tp_dictoffset */
             (initproc)v8___PersistentBase_v8__Primitive__init,      /* tp_init */
             0,                         /* tp_alloc */
             v8___PersistentBase_v8__Primitive__new,                 /* tp_new */
         };

static void
v8___Persistent_v8__Value__v8__NonCopyablePersistentTraits_v8__Value____dealloc(v8___Persistent_v8__Value__v8__NonCopyablePersistentTraits_v8__Value___* self);

static PyObject *
v8___Persistent_v8__Value__v8__NonCopyablePersistentTraits_v8__Value____new(PyTypeObject *type, PyObject *args, PyObject *kwds);
static int
v8___Persistent_v8__Value__v8__NonCopyablePersistentTraits_v8__Value____init(v8___Persistent_v8__Value__v8__NonCopyablePersistentTraits_v8__Value___ *self, PyObject *args, PyObject *kwds);
           

static PyMethodDef v8___Persistent_v8__Value__v8__NonCopyablePersistentTraits_v8__Value____methods[] = {
             {NULL}  /* Sentinel */
};

static PyMemberDef v8___Persistent_v8__Value__v8__NonCopyablePersistentTraits_v8__Value____members[] =   {
        {NULL}
};
    

static PyTypeObject v8___Persistent_v8__Value__v8__NonCopyablePersistentTraits_v8__Value___Type = {
             PyObject_HEAD_INIT(NULL)
             0,                         /*ob_size*/
             "v8.Persistent<v8::Value, v8::NonCopyablePersistentTraits<v8::Value> >",             /*tp_name*/
             sizeof(v8___Persistent_v8__Value__v8__NonCopyablePersistentTraits_v8__Value___), /*tp_basicsize*/
             0,                         /*tp_itemsize*/
             (destructor)v8___Persistent_v8__Value__v8__NonCopyablePersistentTraits_v8__Value____dealloc,                         /*tp_dealloc*/
             0,                         /*tp_print*/
             0,                         /*tp_getattr*/
             0,                         /*tp_setattr*/
             0,                         /*tp_compare*/
             0,                         /*tp_repr*/
             0,                         /*tp_as_number*/
             0,                         /*tp_as_sequence*/
             0,                         /*tp_as_mapping*/
             0,                         /*tp_hash */
             0,                         /*tp_call*/
             0,                         /*tp_str*/
             0,                         /*tp_getattro*/
             0,                         /*tp_setattro*/
             0,                         /*tp_as_buffer*/
             Py_TPFLAGS_DEFAULT| Py_TPFLAGS_BASETYPE,        /*tp_flags*/
             "v8___Persistent_v8__Value__v8__NonCopyablePersistentTraits_v8__Value___ objects",           /* tp_doc */
             0,		               /* tp_traverse */
             0,		               /* tp_clear */
             0,		               /* tp_richcompare */
             0,		               /* tp_weaklistoffset */
             0,		               /* tp_iter */
             0,		               /* tp_iternext */
             v8___Persistent_v8__Value__v8__NonCopyablePersistentTraits_v8__Value____methods,             /* tp_methods */
             v8___Persistent_v8__Value__v8__NonCopyablePersistentTraits_v8__Value____members,             /* tp_members */
             0,                         /* tp_getset */
             0,                         /* tp_base */
             0,                         /* tp_dict */
             0,                         /* tp_descr_get */
             0,                         /* tp_descr_set */
             0,                         /* tp_dictoffset */
             (initproc)v8___Persistent_v8__Value__v8__NonCopyablePersistentTraits_v8__Value____init,      /* tp_init */
             0,                         /* tp_alloc */
             v8___Persistent_v8__Value__v8__NonCopyablePersistentTraits_v8__Value____new,                 /* tp_new */
         };

static void
v8___FunctionCallbackInfo_v8__Value__dealloc(v8___FunctionCallbackInfo_v8__Value_* self);

static PyObject *
v8___FunctionCallbackInfo_v8__Value__new(PyTypeObject *type, PyObject *args, PyObject *kwds);
static int
v8___FunctionCallbackInfo_v8__Value__init(v8___FunctionCallbackInfo_v8__Value_ *self, PyObject *args, PyObject *kwds);
           

static PyMethodDef v8___FunctionCallbackInfo_v8__Value__methods[] = {
             {NULL}  /* Sentinel */
};

static PyMemberDef v8___FunctionCallbackInfo_v8__Value__members[] =   {
        {NULL}
};
    

static PyTypeObject v8___FunctionCallbackInfo_v8__Value_Type = {
             PyObject_HEAD_INIT(NULL)
             0,                         /*ob_size*/
             "v8.FunctionCallbackInfo<v8::Value>",             /*tp_name*/
             sizeof(v8___FunctionCallbackInfo_v8__Value_), /*tp_basicsize*/
             0,                         /*tp_itemsize*/
             (destructor)v8___FunctionCallbackInfo_v8__Value__dealloc,                         /*tp_dealloc*/
             0,                         /*tp_print*/
             0,                         /*tp_getattr*/
             0,                         /*tp_setattr*/
             0,                         /*tp_compare*/
             0,                         /*tp_repr*/
             0,                         /*tp_as_number*/
             0,                         /*tp_as_sequence*/
             0,                         /*tp_as_mapping*/
             0,                         /*tp_hash */
             0,                         /*tp_call*/
             0,                         /*tp_str*/
             0,                         /*tp_getattro*/
             0,                         /*tp_setattro*/
             0,                         /*tp_as_buffer*/
             Py_TPFLAGS_DEFAULT| Py_TPFLAGS_BASETYPE,        /*tp_flags*/
             "v8___FunctionCallbackInfo_v8__Value_ objects",           /* tp_doc */
             0,		               /* tp_traverse */
             0,		               /* tp_clear */
             0,		               /* tp_richcompare */
             0,		               /* tp_weaklistoffset */
             0,		               /* tp_iter */
             0,		               /* tp_iternext */
             v8___FunctionCallbackInfo_v8__Value__methods,             /* tp_methods */
             v8___FunctionCallbackInfo_v8__Value__members,             /* tp_members */
             0,                         /* tp_getset */
             0,                         /* tp_base */
             0,                         /* tp_dict */
             0,                         /* tp_descr_get */
             0,                         /* tp_descr_set */
             0,                         /* tp_dictoffset */
             (initproc)v8___FunctionCallbackInfo_v8__Value__init,      /* tp_init */
             0,                         /* tp_alloc */
             v8___FunctionCallbackInfo_v8__Value__new,                 /* tp_new */
         };

static void
v8___PropertyCallbackInfo_v8__Value__dealloc(v8___PropertyCallbackInfo_v8__Value_* self);

static PyObject *
v8___PropertyCallbackInfo_v8__Value__new(PyTypeObject *type, PyObject *args, PyObject *kwds);
static int
v8___PropertyCallbackInfo_v8__Value__init(v8___PropertyCallbackInfo_v8__Value_ *self, PyObject *args, PyObject *kwds);
           

static PyMethodDef v8___PropertyCallbackInfo_v8__Value__methods[] = {
             {NULL}  /* Sentinel */
};

static PyMemberDef v8___PropertyCallbackInfo_v8__Value__members[] =   {
        {NULL}
};
    

static PyTypeObject v8___PropertyCallbackInfo_v8__Value_Type = {
             PyObject_HEAD_INIT(NULL)
             0,                         /*ob_size*/
             "v8.PropertyCallbackInfo<v8::Value>",             /*tp_name*/
             sizeof(v8___PropertyCallbackInfo_v8__Value_), /*tp_basicsize*/
             0,                         /*tp_itemsize*/
             (destructor)v8___PropertyCallbackInfo_v8__Value__dealloc,                         /*tp_dealloc*/
             0,                         /*tp_print*/
             0,                         /*tp_getattr*/
             0,                         /*tp_setattr*/
             0,                         /*tp_compare*/
             0,                         /*tp_repr*/
             0,                         /*tp_as_number*/
             0,                         /*tp_as_sequence*/
             0,                         /*tp_as_mapping*/
             0,                         /*tp_hash */
             0,                         /*tp_call*/
             0,                         /*tp_str*/
             0,                         /*tp_getattro*/
             0,                         /*tp_setattro*/
             0,                         /*tp_as_buffer*/
             Py_TPFLAGS_DEFAULT| Py_TPFLAGS_BASETYPE,        /*tp_flags*/
             "v8___PropertyCallbackInfo_v8__Value_ objects",           /* tp_doc */
             0,		               /* tp_traverse */
             0,		               /* tp_clear */
             0,		               /* tp_richcompare */
             0,		               /* tp_weaklistoffset */
             0,		               /* tp_iter */
             0,		               /* tp_iternext */
             v8___PropertyCallbackInfo_v8__Value__methods,             /* tp_methods */
             v8___PropertyCallbackInfo_v8__Value__members,             /* tp_members */
             0,                         /* tp_getset */
             0,                         /* tp_base */
             0,                         /* tp_dict */
             0,                         /* tp_descr_get */
             0,                         /* tp_descr_set */
             0,                         /* tp_dictoffset */
             (initproc)v8___PropertyCallbackInfo_v8__Value__init,      /* tp_init */
             0,                         /* tp_alloc */
             v8___PropertyCallbackInfo_v8__Value__new,                 /* tp_new */
         };

static void
v8___PropertyCallbackInfo_void__dealloc(v8___PropertyCallbackInfo_void_* self);

static PyObject *
v8___PropertyCallbackInfo_void__new(PyTypeObject *type, PyObject *args, PyObject *kwds);
static int
v8___PropertyCallbackInfo_void__init(v8___PropertyCallbackInfo_void_ *self, PyObject *args, PyObject *kwds);
           

static PyMethodDef v8___PropertyCallbackInfo_void__methods[] = {
             {NULL}  /* Sentinel */
};

static PyMemberDef v8___PropertyCallbackInfo_void__members[] =   {
        {NULL}
};
    

static PyTypeObject v8___PropertyCallbackInfo_void_Type = {
             PyObject_HEAD_INIT(NULL)
             0,                         /*ob_size*/
             "v8.PropertyCallbackInfo<void>",             /*tp_name*/
             sizeof(v8___PropertyCallbackInfo_void_), /*tp_basicsize*/
             0,                         /*tp_itemsize*/
             (destructor)v8___PropertyCallbackInfo_void__dealloc,                         /*tp_dealloc*/
             0,                         /*tp_print*/
             0,                         /*tp_getattr*/
             0,                         /*tp_setattr*/
             0,                         /*tp_compare*/
             0,                         /*tp_repr*/
             0,                         /*tp_as_number*/
             0,                         /*tp_as_sequence*/
             0,                         /*tp_as_mapping*/
             0,                         /*tp_hash */
             0,                         /*tp_call*/
             0,                         /*tp_str*/
             0,                         /*tp_getattro*/
             0,                         /*tp_setattro*/
             0,                         /*tp_as_buffer*/
             Py_TPFLAGS_DEFAULT| Py_TPFLAGS_BASETYPE,        /*tp_flags*/
             "v8___PropertyCallbackInfo_void_ objects",           /* tp_doc */
             0,		               /* tp_traverse */
             0,		               /* tp_clear */
             0,		               /* tp_richcompare */
             0,		               /* tp_weaklistoffset */
             0,		               /* tp_iter */
             0,		               /* tp_iternext */
             v8___PropertyCallbackInfo_void__methods,             /* tp_methods */
             v8___PropertyCallbackInfo_void__members,             /* tp_members */
             0,                         /* tp_getset */
             0,                         /* tp_base */
             0,                         /* tp_dict */
             0,                         /* tp_descr_get */
             0,                         /* tp_descr_set */
             0,                         /* tp_dictoffset */
             (initproc)v8___PropertyCallbackInfo_void__init,      /* tp_init */
             0,                         /* tp_alloc */
             v8___PropertyCallbackInfo_void__new,                 /* tp_new */
         };

static void
v8___PropertyCallbackInfo_v8__Integer__dealloc(v8___PropertyCallbackInfo_v8__Integer_* self);

static PyObject *
v8___PropertyCallbackInfo_v8__Integer__new(PyTypeObject *type, PyObject *args, PyObject *kwds);
static int
v8___PropertyCallbackInfo_v8__Integer__init(v8___PropertyCallbackInfo_v8__Integer_ *self, PyObject *args, PyObject *kwds);
           

static PyMethodDef v8___PropertyCallbackInfo_v8__Integer__methods[] = {
             {NULL}  /* Sentinel */
};

static PyMemberDef v8___PropertyCallbackInfo_v8__Integer__members[] =   {
        {NULL}
};
    

static PyTypeObject v8___PropertyCallbackInfo_v8__Integer_Type = {
             PyObject_HEAD_INIT(NULL)
             0,                         /*ob_size*/
             "v8.PropertyCallbackInfo<v8::Integer>",             /*tp_name*/
             sizeof(v8___PropertyCallbackInfo_v8__Integer_), /*tp_basicsize*/
             0,                         /*tp_itemsize*/
             (destructor)v8___PropertyCallbackInfo_v8__Integer__dealloc,                         /*tp_dealloc*/
             0,                         /*tp_print*/
             0,                         /*tp_getattr*/
             0,                         /*tp_setattr*/
             0,                         /*tp_compare*/
             0,                         /*tp_repr*/
             0,                         /*tp_as_number*/
             0,                         /*tp_as_sequence*/
             0,                         /*tp_as_mapping*/
             0,                         /*tp_hash */
             0,                         /*tp_call*/
             0,                         /*tp_str*/
             0,                         /*tp_getattro*/
             0,                         /*tp_setattro*/
             0,                         /*tp_as_buffer*/
             Py_TPFLAGS_DEFAULT| Py_TPFLAGS_BASETYPE,        /*tp_flags*/
             "v8___PropertyCallbackInfo_v8__Integer_ objects",           /* tp_doc */
             0,		               /* tp_traverse */
             0,		               /* tp_clear */
             0,		               /* tp_richcompare */
             0,		               /* tp_weaklistoffset */
             0,		               /* tp_iter */
             0,		               /* tp_iternext */
             v8___PropertyCallbackInfo_v8__Integer__methods,             /* tp_methods */
             v8___PropertyCallbackInfo_v8__Integer__members,             /* tp_members */
             0,                         /* tp_getset */
             0,                         /* tp_base */
             0,                         /* tp_dict */
             0,                         /* tp_descr_get */
             0,                         /* tp_descr_set */
             0,                         /* tp_dictoffset */
             (initproc)v8___PropertyCallbackInfo_v8__Integer__init,      /* tp_init */
             0,                         /* tp_alloc */
             v8___PropertyCallbackInfo_v8__Integer__new,                 /* tp_new */
         };

static void
v8___PropertyCallbackInfo_v8__Boolean__dealloc(v8___PropertyCallbackInfo_v8__Boolean_* self);

static PyObject *
v8___PropertyCallbackInfo_v8__Boolean__new(PyTypeObject *type, PyObject *args, PyObject *kwds);
static int
v8___PropertyCallbackInfo_v8__Boolean__init(v8___PropertyCallbackInfo_v8__Boolean_ *self, PyObject *args, PyObject *kwds);
           

static PyMethodDef v8___PropertyCallbackInfo_v8__Boolean__methods[] = {
             {NULL}  /* Sentinel */
};

static PyMemberDef v8___PropertyCallbackInfo_v8__Boolean__members[] =   {
        {NULL}
};
    

static PyTypeObject v8___PropertyCallbackInfo_v8__Boolean_Type = {
             PyObject_HEAD_INIT(NULL)
             0,                         /*ob_size*/
             "v8.PropertyCallbackInfo<v8::Boolean>",             /*tp_name*/
             sizeof(v8___PropertyCallbackInfo_v8__Boolean_), /*tp_basicsize*/
             0,                         /*tp_itemsize*/
             (destructor)v8___PropertyCallbackInfo_v8__Boolean__dealloc,                         /*tp_dealloc*/
             0,                         /*tp_print*/
             0,                         /*tp_getattr*/
             0,                         /*tp_setattr*/
             0,                         /*tp_compare*/
             0,                         /*tp_repr*/
             0,                         /*tp_as_number*/
             0,                         /*tp_as_sequence*/
             0,                         /*tp_as_mapping*/
             0,                         /*tp_hash */
             0,                         /*tp_call*/
             0,                         /*tp_str*/
             0,                         /*tp_getattro*/
             0,                         /*tp_setattro*/
             0,                         /*tp_as_buffer*/
             Py_TPFLAGS_DEFAULT| Py_TPFLAGS_BASETYPE,        /*tp_flags*/
             "v8___PropertyCallbackInfo_v8__Boolean_ objects",           /* tp_doc */
             0,		               /* tp_traverse */
             0,		               /* tp_clear */
             0,		               /* tp_richcompare */
             0,		               /* tp_weaklistoffset */
             0,		               /* tp_iter */
             0,		               /* tp_iternext */
             v8___PropertyCallbackInfo_v8__Boolean__methods,             /* tp_methods */
             v8___PropertyCallbackInfo_v8__Boolean__members,             /* tp_members */
             0,                         /* tp_getset */
             0,                         /* tp_base */
             0,                         /* tp_dict */
             0,                         /* tp_descr_get */
             0,                         /* tp_descr_set */
             0,                         /* tp_dictoffset */
             (initproc)v8___PropertyCallbackInfo_v8__Boolean__init,      /* tp_init */
             0,                         /* tp_alloc */
             v8___PropertyCallbackInfo_v8__Boolean__new,                 /* tp_new */
         };

static void
v8___PropertyCallbackInfo_v8__Array__dealloc(v8___PropertyCallbackInfo_v8__Array_* self);

static PyObject *
v8___PropertyCallbackInfo_v8__Array__new(PyTypeObject *type, PyObject *args, PyObject *kwds);
static int
v8___PropertyCallbackInfo_v8__Array__init(v8___PropertyCallbackInfo_v8__Array_ *self, PyObject *args, PyObject *kwds);
           

static PyMethodDef v8___PropertyCallbackInfo_v8__Array__methods[] = {
             {NULL}  /* Sentinel */
};

static PyMemberDef v8___PropertyCallbackInfo_v8__Array__members[] =   {
        {NULL}
};
    

static PyTypeObject v8___PropertyCallbackInfo_v8__Array_Type = {
             PyObject_HEAD_INIT(NULL)
             0,                         /*ob_size*/
             "v8.PropertyCallbackInfo<v8::Array>",             /*tp_name*/
             sizeof(v8___PropertyCallbackInfo_v8__Array_), /*tp_basicsize*/
             0,                         /*tp_itemsize*/
             (destructor)v8___PropertyCallbackInfo_v8__Array__dealloc,                         /*tp_dealloc*/
             0,                         /*tp_print*/
             0,                         /*tp_getattr*/
             0,                         /*tp_setattr*/
             0,                         /*tp_compare*/
             0,                         /*tp_repr*/
             0,                         /*tp_as_number*/
             0,                         /*tp_as_sequence*/
             0,                         /*tp_as_mapping*/
             0,                         /*tp_hash */
             0,                         /*tp_call*/
             0,                         /*tp_str*/
             0,                         /*tp_getattro*/
             0,                         /*tp_setattro*/
             0,                         /*tp_as_buffer*/
             Py_TPFLAGS_DEFAULT| Py_TPFLAGS_BASETYPE,        /*tp_flags*/
             "v8___PropertyCallbackInfo_v8__Array_ objects",           /* tp_doc */
             0,		               /* tp_traverse */
             0,		               /* tp_clear */
             0,		               /* tp_richcompare */
             0,		               /* tp_weaklistoffset */
             0,		               /* tp_iter */
             0,		               /* tp_iternext */
             v8___PropertyCallbackInfo_v8__Array__methods,             /* tp_methods */
             v8___PropertyCallbackInfo_v8__Array__members,             /* tp_members */
             0,                         /* tp_getset */
             0,                         /* tp_base */
             0,                         /* tp_dict */
             0,                         /* tp_descr_get */
             0,                         /* tp_descr_set */
             0,                         /* tp_dictoffset */
             (initproc)v8___PropertyCallbackInfo_v8__Array__init,      /* tp_init */
             0,                         /* tp_alloc */
             v8___PropertyCallbackInfo_v8__Array__new,                 /* tp_new */
         };

static void
v8___CallHandlerHelper_dealloc(v8___CallHandlerHelper* self);

static PyObject *
v8___CallHandlerHelper_new(PyTypeObject *type, PyObject *args, PyObject *kwds);
static int
v8___CallHandlerHelper_init(v8___CallHandlerHelper *self, PyObject *args, PyObject *kwds);
           

static PyMethodDef v8___CallHandlerHelper_methods[] = {
             {NULL}  /* Sentinel */
};

static PyMemberDef v8___CallHandlerHelper_members[] =   {
        {NULL}
};
    

static PyTypeObject v8___CallHandlerHelperType = {
             PyObject_HEAD_INIT(NULL)
             0,                         /*ob_size*/
             "v8.CallHandlerHelper",             /*tp_name*/
             sizeof(v8___CallHandlerHelper), /*tp_basicsize*/
             0,                         /*tp_itemsize*/
             (destructor)v8___CallHandlerHelper_dealloc,                         /*tp_dealloc*/
             0,                         /*tp_print*/
             0,                         /*tp_getattr*/
             0,                         /*tp_setattr*/
             0,                         /*tp_compare*/
             0,                         /*tp_repr*/
             0,                         /*tp_as_number*/
             0,                         /*tp_as_sequence*/
             0,                         /*tp_as_mapping*/
             0,                         /*tp_hash */
             0,                         /*tp_call*/
             0,                         /*tp_str*/
             0,                         /*tp_getattro*/
             0,                         /*tp_setattro*/
             0,                         /*tp_as_buffer*/
             Py_TPFLAGS_DEFAULT| Py_TPFLAGS_BASETYPE,        /*tp_flags*/
             "v8___CallHandlerHelper objects",           /* tp_doc */
             0,		               /* tp_traverse */
             0,		               /* tp_clear */
             0,		               /* tp_richcompare */
             0,		               /* tp_weaklistoffset */
             0,		               /* tp_iter */
             0,		               /* tp_iternext */
             v8___CallHandlerHelper_methods,             /* tp_methods */
             v8___CallHandlerHelper_members,             /* tp_members */
             0,                         /* tp_getset */
             0,                         /* tp_base */
             0,                         /* tp_dict */
             0,                         /* tp_descr_get */
             0,                         /* tp_descr_set */
             0,                         /* tp_dictoffset */
             (initproc)v8___CallHandlerHelper_init,      /* tp_init */
             0,                         /* tp_alloc */
             v8___CallHandlerHelper_new,                 /* tp_new */
         };

static void
v8___EscapableHandleScope_dealloc(v8___EscapableHandleScope* self);

static PyObject *
v8___EscapableHandleScope_new(PyTypeObject *type, PyObject *args, PyObject *kwds);
static int
v8___EscapableHandleScope_init(v8___EscapableHandleScope *self, PyObject *args, PyObject *kwds);
           

static PyMethodDef v8___EscapableHandleScope_methods[] = {
             {NULL}  /* Sentinel */
};

static PyMemberDef v8___EscapableHandleScope_members[] =   {
        {NULL}
};
    

static PyTypeObject v8___EscapableHandleScopeType = {
             PyObject_HEAD_INIT(NULL)
             0,                         /*ob_size*/
             "v8.EscapableHandleScope",             /*tp_name*/
             sizeof(v8___EscapableHandleScope), /*tp_basicsize*/
             0,                         /*tp_itemsize*/
             (destructor)v8___EscapableHandleScope_dealloc,                         /*tp_dealloc*/
             0,                         /*tp_print*/
             0,                         /*tp_getattr*/
             0,                         /*tp_setattr*/
             0,                         /*tp_compare*/
             0,                         /*tp_repr*/
             0,                         /*tp_as_number*/
             0,                         /*tp_as_sequence*/
             0,                         /*tp_as_mapping*/
             0,                         /*tp_hash */
             0,                         /*tp_call*/
             0,                         /*tp_str*/
             0,                         /*tp_getattro*/
             0,                         /*tp_setattro*/
             0,                         /*tp_as_buffer*/
             Py_TPFLAGS_DEFAULT| Py_TPFLAGS_BASETYPE,        /*tp_flags*/
             "v8___EscapableHandleScope objects",           /* tp_doc */
             0,		               /* tp_traverse */
             0,		               /* tp_clear */
             0,		               /* tp_richcompare */
             0,		               /* tp_weaklistoffset */
             0,		               /* tp_iter */
             0,		               /* tp_iternext */
             v8___EscapableHandleScope_methods,             /* tp_methods */
             v8___EscapableHandleScope_members,             /* tp_members */
             0,                         /* tp_getset */
             0,                         /* tp_base */
             0,                         /* tp_dict */
             0,                         /* tp_descr_get */
             0,                         /* tp_descr_set */
             0,                         /* tp_dictoffset */
             (initproc)v8___EscapableHandleScope_init,      /* tp_init */
             0,                         /* tp_alloc */
             v8___EscapableHandleScope_new,                 /* tp_new */
         };

static void
v8___UniqueId_dealloc(v8___UniqueId* self);

static PyObject *
v8___UniqueId_new(PyTypeObject *type, PyObject *args, PyObject *kwds);
static int
v8___UniqueId_init(v8___UniqueId *self, PyObject *args, PyObject *kwds);
           

static PyMethodDef v8___UniqueId_methods[] = {
             {NULL}  /* Sentinel */
};

static PyMemberDef v8___UniqueId_members[] =   {
        {NULL}
};
    

static PyTypeObject v8___UniqueIdType = {
             PyObject_HEAD_INIT(NULL)
             0,                         /*ob_size*/
             "v8.UniqueId",             /*tp_name*/
             sizeof(v8___UniqueId), /*tp_basicsize*/
             0,                         /*tp_itemsize*/
             (destructor)v8___UniqueId_dealloc,                         /*tp_dealloc*/
             0,                         /*tp_print*/
             0,                         /*tp_getattr*/
             0,                         /*tp_setattr*/
             0,                         /*tp_compare*/
             0,                         /*tp_repr*/
             0,                         /*tp_as_number*/
             0,                         /*tp_as_sequence*/
             0,                         /*tp_as_mapping*/
             0,                         /*tp_hash */
             0,                         /*tp_call*/
             0,                         /*tp_str*/
             0,                         /*tp_getattro*/
             0,                         /*tp_setattro*/
             0,                         /*tp_as_buffer*/
             Py_TPFLAGS_DEFAULT| Py_TPFLAGS_BASETYPE,        /*tp_flags*/
             "v8___UniqueId objects",           /* tp_doc */
             0,		               /* tp_traverse */
             0,		               /* tp_clear */
             0,		               /* tp_richcompare */
             0,		               /* tp_weaklistoffset */
             0,		               /* tp_iter */
             0,		               /* tp_iternext */
             v8___UniqueId_methods,             /* tp_methods */
             v8___UniqueId_members,             /* tp_members */
             0,                         /* tp_getset */
             0,                         /* tp_base */
             0,                         /* tp_dict */
             0,                         /* tp_descr_get */
             0,                         /* tp_descr_set */
             0,                         /* tp_dictoffset */
             (initproc)v8___UniqueId_init,      /* tp_init */
             0,                         /* tp_alloc */
             v8___UniqueId_new,                 /* tp_new */
         };

static void
v8___WeakCallbackInfo_void__dealloc(v8___WeakCallbackInfo_void_* self);

static PyObject *
v8___WeakCallbackInfo_void__new(PyTypeObject *type, PyObject *args, PyObject *kwds);
static int
v8___WeakCallbackInfo_void__init(v8___WeakCallbackInfo_void_ *self, PyObject *args, PyObject *kwds);
           

static PyObject*
v8___WeakCallbackInfo_void___GetIsolate(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___WeakCallbackInfo_void___GetParameter(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___WeakCallbackInfo_void___GetInternalField(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___WeakCallbackInfo_void___GetInternalField1(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___WeakCallbackInfo_void___GetInternalField2(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___WeakCallbackInfo_void___IsFirstPass(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___WeakCallbackInfo_void___SetSecondPassCallback(PyObject *args, PyObject *kwds);
    
static PyMethodDef v8___WeakCallbackInfo_void__methods[] = {
             
            {"GetIsolate",  (PyCFunction)v8___WeakCallbackInfo_void___GetIsolate, METH_VARARGS| METH_KEYWORDS, ""},
            {"GetParameter",  (PyCFunction)v8___WeakCallbackInfo_void___GetParameter, METH_VARARGS| METH_KEYWORDS, ""},
            {"GetInternalField",  (PyCFunction)v8___WeakCallbackInfo_void___GetInternalField, METH_VARARGS| METH_KEYWORDS, ""},
            {"GetInternalField1",  (PyCFunction)v8___WeakCallbackInfo_void___GetInternalField1, METH_VARARGS| METH_KEYWORDS, ""},
            {"GetInternalField2",  (PyCFunction)v8___WeakCallbackInfo_void___GetInternalField2, METH_VARARGS| METH_KEYWORDS, ""},
            {"IsFirstPass",  (PyCFunction)v8___WeakCallbackInfo_void___IsFirstPass, METH_VARARGS| METH_KEYWORDS, ""},
            {"SetSecondPassCallback",  (PyCFunction)v8___WeakCallbackInfo_void___SetSecondPassCallback, METH_VARARGS| METH_KEYWORDS, ""},{NULL}  /* Sentinel */
};

static PyMemberDef v8___WeakCallbackInfo_void__members[] =   {
        {NULL}
};
    

static PyTypeObject v8___WeakCallbackInfo_void_Type = {
             PyObject_HEAD_INIT(NULL)
             0,                         /*ob_size*/
             "v8.WeakCallbackInfo<void>",             /*tp_name*/
             sizeof(v8___WeakCallbackInfo_void_), /*tp_basicsize*/
             0,                         /*tp_itemsize*/
             (destructor)v8___WeakCallbackInfo_void__dealloc,                         /*tp_dealloc*/
             0,                         /*tp_print*/
             0,                         /*tp_getattr*/
             0,                         /*tp_setattr*/
             0,                         /*tp_compare*/
             0,                         /*tp_repr*/
             0,                         /*tp_as_number*/
             0,                         /*tp_as_sequence*/
             0,                         /*tp_as_mapping*/
             0,                         /*tp_hash */
             0,                         /*tp_call*/
             0,                         /*tp_str*/
             0,                         /*tp_getattro*/
             0,                         /*tp_setattro*/
             0,                         /*tp_as_buffer*/
             Py_TPFLAGS_DEFAULT| Py_TPFLAGS_BASETYPE,        /*tp_flags*/
             "v8___WeakCallbackInfo_void_ objects",           /* tp_doc */
             0,		               /* tp_traverse */
             0,		               /* tp_clear */
             0,		               /* tp_richcompare */
             0,		               /* tp_weaklistoffset */
             0,		               /* tp_iter */
             0,		               /* tp_iternext */
             v8___WeakCallbackInfo_void__methods,             /* tp_methods */
             v8___WeakCallbackInfo_void__members,             /* tp_members */
             0,                         /* tp_getset */
             0,                         /* tp_base */
             0,                         /* tp_dict */
             0,                         /* tp_descr_get */
             0,                         /* tp_descr_set */
             0,                         /* tp_dictoffset */
             (initproc)v8___WeakCallbackInfo_void__init,      /* tp_init */
             0,                         /* tp_alloc */
             v8___WeakCallbackInfo_void__new,                 /* tp_new */
         };

static void
v8___WeakCallbackData_v8__Value__void__dealloc(v8___WeakCallbackData_v8__Value__void_* self);

static PyObject *
v8___WeakCallbackData_v8__Value__void__new(PyTypeObject *type, PyObject *args, PyObject *kwds);
static int
v8___WeakCallbackData_v8__Value__void__init(v8___WeakCallbackData_v8__Value__void_ *self, PyObject *args, PyObject *kwds);
           

static PyObject*
v8___WeakCallbackData_v8__Value__void___GetIsolate(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___WeakCallbackData_v8__Value__void___GetParameter(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___WeakCallbackData_v8__Value__void___GetValue(PyObject *args, PyObject *kwds);
    
static PyMethodDef v8___WeakCallbackData_v8__Value__void__methods[] = {
             
            {"GetIsolate",  (PyCFunction)v8___WeakCallbackData_v8__Value__void___GetIsolate, METH_VARARGS| METH_KEYWORDS, ""},
            {"GetParameter",  (PyCFunction)v8___WeakCallbackData_v8__Value__void___GetParameter, METH_VARARGS| METH_KEYWORDS, ""},
            {"GetValue",  (PyCFunction)v8___WeakCallbackData_v8__Value__void___GetValue, METH_VARARGS| METH_KEYWORDS, ""},{NULL}  /* Sentinel */
};

static PyMemberDef v8___WeakCallbackData_v8__Value__void__members[] =   {
        {NULL}
};
    

static PyTypeObject v8___WeakCallbackData_v8__Value__void_Type = {
             PyObject_HEAD_INIT(NULL)
             0,                         /*ob_size*/
             "v8.WeakCallbackData<v8::Value, void>",             /*tp_name*/
             sizeof(v8___WeakCallbackData_v8__Value__void_), /*tp_basicsize*/
             0,                         /*tp_itemsize*/
             (destructor)v8___WeakCallbackData_v8__Value__void__dealloc,                         /*tp_dealloc*/
             0,                         /*tp_print*/
             0,                         /*tp_getattr*/
             0,                         /*tp_setattr*/
             0,                         /*tp_compare*/
             0,                         /*tp_repr*/
             0,                         /*tp_as_number*/
             0,                         /*tp_as_sequence*/
             0,                         /*tp_as_mapping*/
             0,                         /*tp_hash */
             0,                         /*tp_call*/
             0,                         /*tp_str*/
             0,                         /*tp_getattro*/
             0,                         /*tp_setattro*/
             0,                         /*tp_as_buffer*/
             Py_TPFLAGS_DEFAULT| Py_TPFLAGS_BASETYPE,        /*tp_flags*/
             "v8___WeakCallbackData_v8__Value__void_ objects",           /* tp_doc */
             0,		               /* tp_traverse */
             0,		               /* tp_clear */
             0,		               /* tp_richcompare */
             0,		               /* tp_weaklistoffset */
             0,		               /* tp_iter */
             0,		               /* tp_iternext */
             v8___WeakCallbackData_v8__Value__void__methods,             /* tp_methods */
             v8___WeakCallbackData_v8__Value__void__members,             /* tp_members */
             0,                         /* tp_getset */
             0,                         /* tp_base */
             0,                         /* tp_dict */
             0,                         /* tp_descr_get */
             0,                         /* tp_descr_set */
             0,                         /* tp_dictoffset */
             (initproc)v8___WeakCallbackData_v8__Value__void__init,      /* tp_init */
             0,                         /* tp_alloc */
             v8___WeakCallbackData_v8__Value__void__new,                 /* tp_new */
         };

static void
v8___HandleScope_dealloc(v8___HandleScope* self);

static PyObject *
v8___HandleScope_new(PyTypeObject *type, PyObject *args, PyObject *kwds);
static int
v8___HandleScope_init(v8___HandleScope *self, PyObject *args, PyObject *kwds);
           

static PyObject*
v8___HandleScope__NumberOfHandles(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___HandleScope__GetIsolate(PyObject *args, PyObject *kwds);
    
static PyMethodDef v8___HandleScope_methods[] = {
             
            {"NumberOfHandles",  (PyCFunction)v8___HandleScope__NumberOfHandles,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},
            {"GetIsolate",  (PyCFunction)v8___HandleScope__GetIsolate, METH_VARARGS| METH_KEYWORDS, ""},{NULL}  /* Sentinel */
};

static PyMemberDef v8___HandleScope_members[] =   {
        {NULL}
};
    

static PyTypeObject v8___HandleScopeType = {
             PyObject_HEAD_INIT(NULL)
             0,                         /*ob_size*/
             "v8.HandleScope",             /*tp_name*/
             sizeof(v8___HandleScope), /*tp_basicsize*/
             0,                         /*tp_itemsize*/
             (destructor)v8___HandleScope_dealloc,                         /*tp_dealloc*/
             0,                         /*tp_print*/
             0,                         /*tp_getattr*/
             0,                         /*tp_setattr*/
             0,                         /*tp_compare*/
             0,                         /*tp_repr*/
             0,                         /*tp_as_number*/
             0,                         /*tp_as_sequence*/
             0,                         /*tp_as_mapping*/
             0,                         /*tp_hash */
             0,                         /*tp_call*/
             0,                         /*tp_str*/
             0,                         /*tp_getattro*/
             0,                         /*tp_setattro*/
             0,                         /*tp_as_buffer*/
             Py_TPFLAGS_DEFAULT| Py_TPFLAGS_BASETYPE,        /*tp_flags*/
             "v8___HandleScope objects",           /* tp_doc */
             0,		               /* tp_traverse */
             0,		               /* tp_clear */
             0,		               /* tp_richcompare */
             0,		               /* tp_weaklistoffset */
             0,		               /* tp_iter */
             0,		               /* tp_iternext */
             v8___HandleScope_methods,             /* tp_methods */
             v8___HandleScope_members,             /* tp_members */
             0,                         /* tp_getset */
             0,                         /* tp_base */
             0,                         /* tp_dict */
             0,                         /* tp_descr_get */
             0,                         /* tp_descr_set */
             0,                         /* tp_dictoffset */
             (initproc)v8___HandleScope_init,      /* tp_init */
             0,                         /* tp_alloc */
             v8___HandleScope_new,                 /* tp_new */
         };

static void
v8___SealHandleScope_dealloc(v8___SealHandleScope* self);

static PyObject *
v8___SealHandleScope_new(PyTypeObject *type, PyObject *args, PyObject *kwds);
static int
v8___SealHandleScope_init(v8___SealHandleScope *self, PyObject *args, PyObject *kwds);
           

static PyMethodDef v8___SealHandleScope_methods[] = {
             {NULL}  /* Sentinel */
};

static PyMemberDef v8___SealHandleScope_members[] =   {
        {NULL}
};
    

static PyTypeObject v8___SealHandleScopeType = {
             PyObject_HEAD_INIT(NULL)
             0,                         /*ob_size*/
             "v8.SealHandleScope",             /*tp_name*/
             sizeof(v8___SealHandleScope), /*tp_basicsize*/
             0,                         /*tp_itemsize*/
             (destructor)v8___SealHandleScope_dealloc,                         /*tp_dealloc*/
             0,                         /*tp_print*/
             0,                         /*tp_getattr*/
             0,                         /*tp_setattr*/
             0,                         /*tp_compare*/
             0,                         /*tp_repr*/
             0,                         /*tp_as_number*/
             0,                         /*tp_as_sequence*/
             0,                         /*tp_as_mapping*/
             0,                         /*tp_hash */
             0,                         /*tp_call*/
             0,                         /*tp_str*/
             0,                         /*tp_getattro*/
             0,                         /*tp_setattro*/
             0,                         /*tp_as_buffer*/
             Py_TPFLAGS_DEFAULT| Py_TPFLAGS_BASETYPE,        /*tp_flags*/
             "v8___SealHandleScope objects",           /* tp_doc */
             0,		               /* tp_traverse */
             0,		               /* tp_clear */
             0,		               /* tp_richcompare */
             0,		               /* tp_weaklistoffset */
             0,		               /* tp_iter */
             0,		               /* tp_iternext */
             v8___SealHandleScope_methods,             /* tp_methods */
             v8___SealHandleScope_members,             /* tp_members */
             0,                         /* tp_getset */
             0,                         /* tp_base */
             0,                         /* tp_dict */
             0,                         /* tp_descr_get */
             0,                         /* tp_descr_set */
             0,                         /* tp_dictoffset */
             (initproc)v8___SealHandleScope_init,      /* tp_init */
             0,                         /* tp_alloc */
             v8___SealHandleScope_new,                 /* tp_new */
         };

static void
v8___ScriptOriginOptions_dealloc(v8___ScriptOriginOptions* self);

static PyObject *
v8___ScriptOriginOptions_new(PyTypeObject *type, PyObject *args, PyObject *kwds);
static int
v8___ScriptOriginOptions_init(v8___ScriptOriginOptions *self, PyObject *args, PyObject *kwds);
           

static PyObject*
v8___ScriptOriginOptions__IsEmbedderDebugScript(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___ScriptOriginOptions__IsSharedCrossOrigin(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___ScriptOriginOptions__IsOpaque(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___ScriptOriginOptions__Flags(PyObject *args, PyObject *kwds);
    
static PyMethodDef v8___ScriptOriginOptions_methods[] = {
             
            {"IsEmbedderDebugScript",  (PyCFunction)v8___ScriptOriginOptions__IsEmbedderDebugScript, METH_VARARGS| METH_KEYWORDS, ""},
            {"IsSharedCrossOrigin",  (PyCFunction)v8___ScriptOriginOptions__IsSharedCrossOrigin, METH_VARARGS| METH_KEYWORDS, ""},
            {"IsOpaque",  (PyCFunction)v8___ScriptOriginOptions__IsOpaque, METH_VARARGS| METH_KEYWORDS, ""},
            {"Flags",  (PyCFunction)v8___ScriptOriginOptions__Flags, METH_VARARGS| METH_KEYWORDS, ""},{NULL}  /* Sentinel */
};

static PyMemberDef v8___ScriptOriginOptions_members[] =   {
        {NULL}
};
    

static PyTypeObject v8___ScriptOriginOptionsType = {
             PyObject_HEAD_INIT(NULL)
             0,                         /*ob_size*/
             "v8.ScriptOriginOptions",             /*tp_name*/
             sizeof(v8___ScriptOriginOptions), /*tp_basicsize*/
             0,                         /*tp_itemsize*/
             (destructor)v8___ScriptOriginOptions_dealloc,                         /*tp_dealloc*/
             0,                         /*tp_print*/
             0,                         /*tp_getattr*/
             0,                         /*tp_setattr*/
             0,                         /*tp_compare*/
             0,                         /*tp_repr*/
             0,                         /*tp_as_number*/
             0,                         /*tp_as_sequence*/
             0,                         /*tp_as_mapping*/
             0,                         /*tp_hash */
             0,                         /*tp_call*/
             0,                         /*tp_str*/
             0,                         /*tp_getattro*/
             0,                         /*tp_setattro*/
             0,                         /*tp_as_buffer*/
             Py_TPFLAGS_DEFAULT| Py_TPFLAGS_BASETYPE,        /*tp_flags*/
             "v8___ScriptOriginOptions objects",           /* tp_doc */
             0,		               /* tp_traverse */
             0,		               /* tp_clear */
             0,		               /* tp_richcompare */
             0,		               /* tp_weaklistoffset */
             0,		               /* tp_iter */
             0,		               /* tp_iternext */
             v8___ScriptOriginOptions_methods,             /* tp_methods */
             v8___ScriptOriginOptions_members,             /* tp_members */
             0,                         /* tp_getset */
             0,                         /* tp_base */
             0,                         /* tp_dict */
             0,                         /* tp_descr_get */
             0,                         /* tp_descr_set */
             0,                         /* tp_dictoffset */
             (initproc)v8___ScriptOriginOptions_init,      /* tp_init */
             0,                         /* tp_alloc */
             v8___ScriptOriginOptions_new,                 /* tp_new */
         };

static void
v8___ScriptOrigin_dealloc(v8___ScriptOrigin* self);

static PyObject *
v8___ScriptOrigin_new(PyTypeObject *type, PyObject *args, PyObject *kwds);
static int
v8___ScriptOrigin_init(v8___ScriptOrigin *self, PyObject *args, PyObject *kwds);
           

static PyObject*
v8___ScriptOrigin__ResourceName(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___ScriptOrigin__ResourceLineOffset(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___ScriptOrigin__ResourceColumnOffset(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___ScriptOrigin__ScriptID(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___ScriptOrigin__SourceMapUrl(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___ScriptOrigin__Options(PyObject *args, PyObject *kwds);
    
static PyMethodDef v8___ScriptOrigin_methods[] = {
             
            {"ResourceName",  (PyCFunction)v8___ScriptOrigin__ResourceName, METH_VARARGS| METH_KEYWORDS, ""},
            {"ResourceLineOffset",  (PyCFunction)v8___ScriptOrigin__ResourceLineOffset, METH_VARARGS| METH_KEYWORDS, ""},
            {"ResourceColumnOffset",  (PyCFunction)v8___ScriptOrigin__ResourceColumnOffset, METH_VARARGS| METH_KEYWORDS, ""},
            {"ScriptID",  (PyCFunction)v8___ScriptOrigin__ScriptID, METH_VARARGS| METH_KEYWORDS, ""},
            {"SourceMapUrl",  (PyCFunction)v8___ScriptOrigin__SourceMapUrl, METH_VARARGS| METH_KEYWORDS, ""},
            {"Options",  (PyCFunction)v8___ScriptOrigin__Options, METH_VARARGS| METH_KEYWORDS, ""},{NULL}  /* Sentinel */
};

static PyMemberDef v8___ScriptOrigin_members[] =   {
        {NULL}
};
    

static PyTypeObject v8___ScriptOriginType = {
             PyObject_HEAD_INIT(NULL)
             0,                         /*ob_size*/
             "v8.ScriptOrigin",             /*tp_name*/
             sizeof(v8___ScriptOrigin), /*tp_basicsize*/
             0,                         /*tp_itemsize*/
             (destructor)v8___ScriptOrigin_dealloc,                         /*tp_dealloc*/
             0,                         /*tp_print*/
             0,                         /*tp_getattr*/
             0,                         /*tp_setattr*/
             0,                         /*tp_compare*/
             0,                         /*tp_repr*/
             0,                         /*tp_as_number*/
             0,                         /*tp_as_sequence*/
             0,                         /*tp_as_mapping*/
             0,                         /*tp_hash */
             0,                         /*tp_call*/
             0,                         /*tp_str*/
             0,                         /*tp_getattro*/
             0,                         /*tp_setattro*/
             0,                         /*tp_as_buffer*/
             Py_TPFLAGS_DEFAULT| Py_TPFLAGS_BASETYPE,        /*tp_flags*/
             "v8___ScriptOrigin objects",           /* tp_doc */
             0,		               /* tp_traverse */
             0,		               /* tp_clear */
             0,		               /* tp_richcompare */
             0,		               /* tp_weaklistoffset */
             0,		               /* tp_iter */
             0,		               /* tp_iternext */
             v8___ScriptOrigin_methods,             /* tp_methods */
             v8___ScriptOrigin_members,             /* tp_members */
             0,                         /* tp_getset */
             0,                         /* tp_base */
             0,                         /* tp_dict */
             0,                         /* tp_descr_get */
             0,                         /* tp_descr_set */
             0,                         /* tp_dictoffset */
             (initproc)v8___ScriptOrigin_init,      /* tp_init */
             0,                         /* tp_alloc */
             v8___ScriptOrigin_new,                 /* tp_new */
         };

static void
v8___UnboundScript_dealloc(v8___UnboundScript* self);

static PyObject *
v8___UnboundScript_new(PyTypeObject *type, PyObject *args, PyObject *kwds);
static int
v8___UnboundScript_init(v8___UnboundScript *self, PyObject *args, PyObject *kwds);
           

static PyObject*
v8___UnboundScript__BindToCurrentContext(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___UnboundScript__GetId(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___UnboundScript__GetScriptName(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___UnboundScript__GetSourceURL(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___UnboundScript__GetSourceMappingURL(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___UnboundScript__GetLineNumber(PyObject *args, PyObject *kwds);
    
static PyMethodDef v8___UnboundScript_methods[] = {
             
            {"BindToCurrentContext",  (PyCFunction)v8___UnboundScript__BindToCurrentContext, METH_VARARGS| METH_KEYWORDS, ""},
            {"GetId",  (PyCFunction)v8___UnboundScript__GetId, METH_VARARGS| METH_KEYWORDS, ""},
            {"GetScriptName",  (PyCFunction)v8___UnboundScript__GetScriptName, METH_VARARGS| METH_KEYWORDS, ""},
            {"GetSourceURL",  (PyCFunction)v8___UnboundScript__GetSourceURL, METH_VARARGS| METH_KEYWORDS, ""},
            {"GetSourceMappingURL",  (PyCFunction)v8___UnboundScript__GetSourceMappingURL, METH_VARARGS| METH_KEYWORDS, ""},
            {"GetLineNumber",  (PyCFunction)v8___UnboundScript__GetLineNumber, METH_VARARGS| METH_KEYWORDS, ""},{NULL}  /* Sentinel */
};

static PyMemberDef v8___UnboundScript_members[] =   {
        {NULL}
};
    

static PyTypeObject v8___UnboundScriptType = {
             PyObject_HEAD_INIT(NULL)
             0,                         /*ob_size*/
             "v8.UnboundScript",             /*tp_name*/
             sizeof(v8___UnboundScript), /*tp_basicsize*/
             0,                         /*tp_itemsize*/
             (destructor)v8___UnboundScript_dealloc,                         /*tp_dealloc*/
             0,                         /*tp_print*/
             0,                         /*tp_getattr*/
             0,                         /*tp_setattr*/
             0,                         /*tp_compare*/
             0,                         /*tp_repr*/
             0,                         /*tp_as_number*/
             0,                         /*tp_as_sequence*/
             0,                         /*tp_as_mapping*/
             0,                         /*tp_hash */
             0,                         /*tp_call*/
             0,                         /*tp_str*/
             0,                         /*tp_getattro*/
             0,                         /*tp_setattro*/
             0,                         /*tp_as_buffer*/
             Py_TPFLAGS_DEFAULT| Py_TPFLAGS_BASETYPE,        /*tp_flags*/
             "v8___UnboundScript objects",           /* tp_doc */
             0,		               /* tp_traverse */
             0,		               /* tp_clear */
             0,		               /* tp_richcompare */
             0,		               /* tp_weaklistoffset */
             0,		               /* tp_iter */
             0,		               /* tp_iternext */
             v8___UnboundScript_methods,             /* tp_methods */
             v8___UnboundScript_members,             /* tp_members */
             0,                         /* tp_getset */
             0,                         /* tp_base */
             0,                         /* tp_dict */
             0,                         /* tp_descr_get */
             0,                         /* tp_descr_set */
             0,                         /* tp_dictoffset */
             (initproc)v8___UnboundScript_init,      /* tp_init */
             0,                         /* tp_alloc */
             v8___UnboundScript_new,                 /* tp_new */
         };

static void
v8___ScriptCompiler_dealloc(v8___ScriptCompiler* self);

static PyObject *
v8___ScriptCompiler_new(PyTypeObject *type, PyObject *args, PyObject *kwds);
static int
v8___ScriptCompiler_init(v8___ScriptCompiler *self, PyObject *args, PyObject *kwds);
           

static PyObject*
v8___ScriptCompiler__CompileUnbound(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___ScriptCompiler__CompileUnboundScript(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___ScriptCompiler__Compile(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___ScriptCompiler__StartStreamingScript(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___ScriptCompiler__CachedDataVersionTag(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___ScriptCompiler__CompileModule(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___ScriptCompiler__CompileFunctionInContext(PyObject *args, PyObject *kwds);
    
static PyMethodDef v8___ScriptCompiler_methods[] = {
             
            {"CompileUnbound",  (PyCFunction)v8___ScriptCompiler__CompileUnbound,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},
            {"CompileUnboundScript",  (PyCFunction)v8___ScriptCompiler__CompileUnboundScript,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},
            {"Compile",  (PyCFunction)v8___ScriptCompiler__Compile,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},
            {"Compile",  (PyCFunction)v8___ScriptCompiler__Compile,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},
            {"StartStreamingScript",  (PyCFunction)v8___ScriptCompiler__StartStreamingScript,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},
            {"Compile",  (PyCFunction)v8___ScriptCompiler__Compile,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},
            {"Compile",  (PyCFunction)v8___ScriptCompiler__Compile,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},
            {"CachedDataVersionTag",  (PyCFunction)v8___ScriptCompiler__CachedDataVersionTag,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},
            {"CompileModule",  (PyCFunction)v8___ScriptCompiler__CompileModule,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},
            {"CompileModule",  (PyCFunction)v8___ScriptCompiler__CompileModule,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},
            {"CompileFunctionInContext",  (PyCFunction)v8___ScriptCompiler__CompileFunctionInContext,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},
            {"CompileFunctionInContext",  (PyCFunction)v8___ScriptCompiler__CompileFunctionInContext,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},{NULL}  /* Sentinel */
};

static PyMemberDef v8___ScriptCompiler_members[] =   {
        {NULL}
};
    

static PyTypeObject v8___ScriptCompilerType = {
             PyObject_HEAD_INIT(NULL)
             0,                         /*ob_size*/
             "v8.ScriptCompiler",             /*tp_name*/
             sizeof(v8___ScriptCompiler), /*tp_basicsize*/
             0,                         /*tp_itemsize*/
             (destructor)v8___ScriptCompiler_dealloc,                         /*tp_dealloc*/
             0,                         /*tp_print*/
             0,                         /*tp_getattr*/
             0,                         /*tp_setattr*/
             0,                         /*tp_compare*/
             0,                         /*tp_repr*/
             0,                         /*tp_as_number*/
             0,                         /*tp_as_sequence*/
             0,                         /*tp_as_mapping*/
             0,                         /*tp_hash */
             0,                         /*tp_call*/
             0,                         /*tp_str*/
             0,                         /*tp_getattro*/
             0,                         /*tp_setattro*/
             0,                         /*tp_as_buffer*/
             Py_TPFLAGS_DEFAULT| Py_TPFLAGS_BASETYPE,        /*tp_flags*/
             "v8___ScriptCompiler objects",           /* tp_doc */
             0,		               /* tp_traverse */
             0,		               /* tp_clear */
             0,		               /* tp_richcompare */
             0,		               /* tp_weaklistoffset */
             0,		               /* tp_iter */
             0,		               /* tp_iternext */
             v8___ScriptCompiler_methods,             /* tp_methods */
             v8___ScriptCompiler_members,             /* tp_members */
             0,                         /* tp_getset */
             0,                         /* tp_base */
             0,                         /* tp_dict */
             0,                         /* tp_descr_get */
             0,                         /* tp_descr_set */
             0,                         /* tp_dictoffset */
             (initproc)v8___ScriptCompiler_init,      /* tp_init */
             0,                         /* tp_alloc */
             v8___ScriptCompiler_new,                 /* tp_new */
         };

static void
v8___Message_dealloc(v8___Message* self);

static PyObject *
v8___Message_new(PyTypeObject *type, PyObject *args, PyObject *kwds);
static int
v8___Message_init(v8___Message *self, PyObject *args, PyObject *kwds);
           

static PyObject*
v8___Message__Get(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Message__GetSourceLine(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Message__GetScriptOrigin(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Message__GetScriptResourceName(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Message__GetStackTrace(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Message__GetLineNumber(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Message__GetStartPosition(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Message__GetEndPosition(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Message__GetStartColumn(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Message__GetEndColumn(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Message__IsSharedCrossOrigin(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Message__IsOpaque(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Message__PrintCurrentStackTrace(PyObject *args, PyObject *kwds);
    
static PyMethodDef v8___Message_methods[] = {
             
            {"Get",  (PyCFunction)v8___Message__Get, METH_VARARGS| METH_KEYWORDS, ""},
            {"GetSourceLine",  (PyCFunction)v8___Message__GetSourceLine, METH_VARARGS| METH_KEYWORDS, ""},
            {"GetSourceLine",  (PyCFunction)v8___Message__GetSourceLine, METH_VARARGS| METH_KEYWORDS, ""},
            {"GetScriptOrigin",  (PyCFunction)v8___Message__GetScriptOrigin, METH_VARARGS| METH_KEYWORDS, ""},
            {"GetScriptResourceName",  (PyCFunction)v8___Message__GetScriptResourceName, METH_VARARGS| METH_KEYWORDS, ""},
            {"GetStackTrace",  (PyCFunction)v8___Message__GetStackTrace, METH_VARARGS| METH_KEYWORDS, ""},
            {"GetLineNumber",  (PyCFunction)v8___Message__GetLineNumber, METH_VARARGS| METH_KEYWORDS, ""},
            {"GetLineNumber",  (PyCFunction)v8___Message__GetLineNumber, METH_VARARGS| METH_KEYWORDS, ""},
            {"GetStartPosition",  (PyCFunction)v8___Message__GetStartPosition, METH_VARARGS| METH_KEYWORDS, ""},
            {"GetEndPosition",  (PyCFunction)v8___Message__GetEndPosition, METH_VARARGS| METH_KEYWORDS, ""},
            {"GetStartColumn",  (PyCFunction)v8___Message__GetStartColumn, METH_VARARGS| METH_KEYWORDS, ""},
            {"GetStartColumn",  (PyCFunction)v8___Message__GetStartColumn, METH_VARARGS| METH_KEYWORDS, ""},
            {"GetEndColumn",  (PyCFunction)v8___Message__GetEndColumn, METH_VARARGS| METH_KEYWORDS, ""},
            {"GetEndColumn",  (PyCFunction)v8___Message__GetEndColumn, METH_VARARGS| METH_KEYWORDS, ""},
            {"IsSharedCrossOrigin",  (PyCFunction)v8___Message__IsSharedCrossOrigin, METH_VARARGS| METH_KEYWORDS, ""},
            {"IsOpaque",  (PyCFunction)v8___Message__IsOpaque, METH_VARARGS| METH_KEYWORDS, ""},
            {"PrintCurrentStackTrace",  (PyCFunction)v8___Message__PrintCurrentStackTrace,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},{NULL}  /* Sentinel */
};

static PyMemberDef v8___Message_members[] =   {
        {NULL}
};
    

static PyTypeObject v8___MessageType = {
             PyObject_HEAD_INIT(NULL)
             0,                         /*ob_size*/
             "v8.Message",             /*tp_name*/
             sizeof(v8___Message), /*tp_basicsize*/
             0,                         /*tp_itemsize*/
             (destructor)v8___Message_dealloc,                         /*tp_dealloc*/
             0,                         /*tp_print*/
             0,                         /*tp_getattr*/
             0,                         /*tp_setattr*/
             0,                         /*tp_compare*/
             0,                         /*tp_repr*/
             0,                         /*tp_as_number*/
             0,                         /*tp_as_sequence*/
             0,                         /*tp_as_mapping*/
             0,                         /*tp_hash */
             0,                         /*tp_call*/
             0,                         /*tp_str*/
             0,                         /*tp_getattro*/
             0,                         /*tp_setattro*/
             0,                         /*tp_as_buffer*/
             Py_TPFLAGS_DEFAULT| Py_TPFLAGS_BASETYPE,        /*tp_flags*/
             "v8___Message objects",           /* tp_doc */
             0,		               /* tp_traverse */
             0,		               /* tp_clear */
             0,		               /* tp_richcompare */
             0,		               /* tp_weaklistoffset */
             0,		               /* tp_iter */
             0,		               /* tp_iternext */
             v8___Message_methods,             /* tp_methods */
             v8___Message_members,             /* tp_members */
             0,                         /* tp_getset */
             0,                         /* tp_base */
             0,                         /* tp_dict */
             0,                         /* tp_descr_get */
             0,                         /* tp_descr_set */
             0,                         /* tp_dictoffset */
             (initproc)v8___Message_init,      /* tp_init */
             0,                         /* tp_alloc */
             v8___Message_new,                 /* tp_new */
         };

static void
v8___RegisterState_dealloc(v8___RegisterState* self);

static PyObject *
v8___RegisterState_new(PyTypeObject *type, PyObject *args, PyObject *kwds);
static int
v8___RegisterState_init(v8___RegisterState *self, PyObject *args, PyObject *kwds);
           

static PyMethodDef v8___RegisterState_methods[] = {
             {NULL}  /* Sentinel */
};

static PyMemberDef v8___RegisterState_members[] =   {
        {"pc", T_OBJECT_EX, offsetof(v8::RegisterState,pc), 0, ""},
            {"sp", T_OBJECT_EX, offsetof(v8::RegisterState,sp), 0, ""},
            {"fp", T_OBJECT_EX, offsetof(v8::RegisterState,fp), 0, ""},
            {NULL}
};
    

static PyTypeObject v8___RegisterStateType = {
             PyObject_HEAD_INIT(NULL)
             0,                         /*ob_size*/
             "v8.RegisterState",             /*tp_name*/
             sizeof(v8___RegisterState), /*tp_basicsize*/
             0,                         /*tp_itemsize*/
             (destructor)v8___RegisterState_dealloc,                         /*tp_dealloc*/
             0,                         /*tp_print*/
             0,                         /*tp_getattr*/
             0,                         /*tp_setattr*/
             0,                         /*tp_compare*/
             0,                         /*tp_repr*/
             0,                         /*tp_as_number*/
             0,                         /*tp_as_sequence*/
             0,                         /*tp_as_mapping*/
             0,                         /*tp_hash */
             0,                         /*tp_call*/
             0,                         /*tp_str*/
             0,                         /*tp_getattro*/
             0,                         /*tp_setattro*/
             0,                         /*tp_as_buffer*/
             Py_TPFLAGS_DEFAULT| Py_TPFLAGS_BASETYPE,        /*tp_flags*/
             "v8___RegisterState objects",           /* tp_doc */
             0,		               /* tp_traverse */
             0,		               /* tp_clear */
             0,		               /* tp_richcompare */
             0,		               /* tp_weaklistoffset */
             0,		               /* tp_iter */
             0,		               /* tp_iternext */
             v8___RegisterState_methods,             /* tp_methods */
             v8___RegisterState_members,             /* tp_members */
             0,                         /* tp_getset */
             0,                         /* tp_base */
             0,                         /* tp_dict */
             0,                         /* tp_descr_get */
             0,                         /* tp_descr_set */
             0,                         /* tp_dictoffset */
             (initproc)v8___RegisterState_init,      /* tp_init */
             0,                         /* tp_alloc */
             v8___RegisterState_new,                 /* tp_new */
         };

static void
v8___SampleInfo_dealloc(v8___SampleInfo* self);

static PyObject *
v8___SampleInfo_new(PyTypeObject *type, PyObject *args, PyObject *kwds);
static int
v8___SampleInfo_init(v8___SampleInfo *self, PyObject *args, PyObject *kwds);
           

static PyMethodDef v8___SampleInfo_methods[] = {
             {NULL}  /* Sentinel */
};

static PyMemberDef v8___SampleInfo_members[] =   {
        {"frames_count", T_OBJECT_EX, offsetof(v8::SampleInfo,frames_count), 0, ""},
            {"vm_state", T_OBJECT_EX, offsetof(v8::SampleInfo,vm_state), 0, ""},
            {NULL}
};
    

static PyTypeObject v8___SampleInfoType = {
             PyObject_HEAD_INIT(NULL)
             0,                         /*ob_size*/
             "v8.SampleInfo",             /*tp_name*/
             sizeof(v8___SampleInfo), /*tp_basicsize*/
             0,                         /*tp_itemsize*/
             (destructor)v8___SampleInfo_dealloc,                         /*tp_dealloc*/
             0,                         /*tp_print*/
             0,                         /*tp_getattr*/
             0,                         /*tp_setattr*/
             0,                         /*tp_compare*/
             0,                         /*tp_repr*/
             0,                         /*tp_as_number*/
             0,                         /*tp_as_sequence*/
             0,                         /*tp_as_mapping*/
             0,                         /*tp_hash */
             0,                         /*tp_call*/
             0,                         /*tp_str*/
             0,                         /*tp_getattro*/
             0,                         /*tp_setattro*/
             0,                         /*tp_as_buffer*/
             Py_TPFLAGS_DEFAULT| Py_TPFLAGS_BASETYPE,        /*tp_flags*/
             "v8___SampleInfo objects",           /* tp_doc */
             0,		               /* tp_traverse */
             0,		               /* tp_clear */
             0,		               /* tp_richcompare */
             0,		               /* tp_weaklistoffset */
             0,		               /* tp_iter */
             0,		               /* tp_iternext */
             v8___SampleInfo_methods,             /* tp_methods */
             v8___SampleInfo_members,             /* tp_members */
             0,                         /* tp_getset */
             0,                         /* tp_base */
             0,                         /* tp_dict */
             0,                         /* tp_descr_get */
             0,                         /* tp_descr_set */
             0,                         /* tp_dictoffset */
             (initproc)v8___SampleInfo_init,      /* tp_init */
             0,                         /* tp_alloc */
             v8___SampleInfo_new,                 /* tp_new */
         };

static void
v8___JSON_dealloc(v8___JSON* self);

static PyObject *
v8___JSON_new(PyTypeObject *type, PyObject *args, PyObject *kwds);
static int
v8___JSON_init(v8___JSON *self, PyObject *args, PyObject *kwds);
           

static PyObject*
v8___JSON__Parse(PyObject *args, PyObject *kwds);
    
static PyMethodDef v8___JSON_methods[] = {
             
            {"Parse",  (PyCFunction)v8___JSON__Parse,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},
            {"Parse",  (PyCFunction)v8___JSON__Parse,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},{NULL}  /* Sentinel */
};

static PyMemberDef v8___JSON_members[] =   {
        {NULL}
};
    

static PyTypeObject v8___JSONType = {
             PyObject_HEAD_INIT(NULL)
             0,                         /*ob_size*/
             "v8.JSON",             /*tp_name*/
             sizeof(v8___JSON), /*tp_basicsize*/
             0,                         /*tp_itemsize*/
             (destructor)v8___JSON_dealloc,                         /*tp_dealloc*/
             0,                         /*tp_print*/
             0,                         /*tp_getattr*/
             0,                         /*tp_setattr*/
             0,                         /*tp_compare*/
             0,                         /*tp_repr*/
             0,                         /*tp_as_number*/
             0,                         /*tp_as_sequence*/
             0,                         /*tp_as_mapping*/
             0,                         /*tp_hash */
             0,                         /*tp_call*/
             0,                         /*tp_str*/
             0,                         /*tp_getattro*/
             0,                         /*tp_setattro*/
             0,                         /*tp_as_buffer*/
             Py_TPFLAGS_DEFAULT| Py_TPFLAGS_BASETYPE,        /*tp_flags*/
             "v8___JSON objects",           /* tp_doc */
             0,		               /* tp_traverse */
             0,		               /* tp_clear */
             0,		               /* tp_richcompare */
             0,		               /* tp_weaklistoffset */
             0,		               /* tp_iter */
             0,		               /* tp_iternext */
             v8___JSON_methods,             /* tp_methods */
             v8___JSON_members,             /* tp_members */
             0,                         /* tp_getset */
             0,                         /* tp_base */
             0,                         /* tp_dict */
             0,                         /* tp_descr_get */
             0,                         /* tp_descr_set */
             0,                         /* tp_dictoffset */
             (initproc)v8___JSON_init,      /* tp_init */
             0,                         /* tp_alloc */
             v8___JSON_new,                 /* tp_new */
         };

static void
v8___NativeWeakMap_dealloc(v8___NativeWeakMap* self);

static PyObject *
v8___NativeWeakMap_new(PyTypeObject *type, PyObject *args, PyObject *kwds);
static int
v8___NativeWeakMap_init(v8___NativeWeakMap *self, PyObject *args, PyObject *kwds);
           

static PyObject*
v8___NativeWeakMap__New(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___NativeWeakMap__Set(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___NativeWeakMap__Get(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___NativeWeakMap__Has(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___NativeWeakMap__Delete(PyObject *args, PyObject *kwds);
    
static PyMethodDef v8___NativeWeakMap_methods[] = {
             
            {"New",  (PyCFunction)v8___NativeWeakMap__New,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},
            {"Set",  (PyCFunction)v8___NativeWeakMap__Set, METH_VARARGS| METH_KEYWORDS, ""},
            {"Get",  (PyCFunction)v8___NativeWeakMap__Get, METH_VARARGS| METH_KEYWORDS, ""},
            {"Has",  (PyCFunction)v8___NativeWeakMap__Has, METH_VARARGS| METH_KEYWORDS, ""},
            {"Delete",  (PyCFunction)v8___NativeWeakMap__Delete, METH_VARARGS| METH_KEYWORDS, ""},{NULL}  /* Sentinel */
};

static PyMemberDef v8___NativeWeakMap_members[] =   {
        {NULL}
};
    

static PyTypeObject v8___NativeWeakMapType = {
             PyObject_HEAD_INIT(NULL)
             0,                         /*ob_size*/
             "v8.NativeWeakMap",             /*tp_name*/
             sizeof(v8___NativeWeakMap), /*tp_basicsize*/
             0,                         /*tp_itemsize*/
             (destructor)v8___NativeWeakMap_dealloc,                         /*tp_dealloc*/
             0,                         /*tp_print*/
             0,                         /*tp_getattr*/
             0,                         /*tp_setattr*/
             0,                         /*tp_compare*/
             0,                         /*tp_repr*/
             0,                         /*tp_as_number*/
             0,                         /*tp_as_sequence*/
             0,                         /*tp_as_mapping*/
             0,                         /*tp_hash */
             0,                         /*tp_call*/
             0,                         /*tp_str*/
             0,                         /*tp_getattro*/
             0,                         /*tp_setattro*/
             0,                         /*tp_as_buffer*/
             Py_TPFLAGS_DEFAULT| Py_TPFLAGS_BASETYPE,        /*tp_flags*/
             "v8___NativeWeakMap objects",           /* tp_doc */
             0,		               /* tp_traverse */
             0,		               /* tp_clear */
             0,		               /* tp_richcompare */
             0,		               /* tp_weaklistoffset */
             0,		               /* tp_iter */
             0,		               /* tp_iternext */
             v8___NativeWeakMap_methods,             /* tp_methods */
             v8___NativeWeakMap_members,             /* tp_members */
             0,                         /* tp_getset */
             0,                         /* tp_base */
             0,                         /* tp_dict */
             0,                         /* tp_descr_get */
             0,                         /* tp_descr_set */
             0,                         /* tp_dictoffset */
             (initproc)v8___NativeWeakMap_init,      /* tp_init */
             0,                         /* tp_alloc */
             v8___NativeWeakMap_new,                 /* tp_new */
         };

static void
v8___Map_dealloc(v8___Map* self);

static PyObject *
v8___Map_new(PyTypeObject *type, PyObject *args, PyObject *kwds);
static int
v8___Map_init(v8___Map *self, PyObject *args, PyObject *kwds);
           

static PyObject*
v8___Map__Size(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Map__AsArray(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Map__New(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Map__FromArray(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Map__Cast(PyObject *args, PyObject *kwds);
    
static PyMethodDef v8___Map_methods[] = {
             
            {"Size",  (PyCFunction)v8___Map__Size, METH_VARARGS| METH_KEYWORDS, ""},
            {"AsArray",  (PyCFunction)v8___Map__AsArray, METH_VARARGS| METH_KEYWORDS, ""},
            {"New",  (PyCFunction)v8___Map__New,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},
            {"FromArray",  (PyCFunction)v8___Map__FromArray,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},
            {"Cast",  (PyCFunction)v8___Map__Cast,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},{NULL}  /* Sentinel */
};

static PyMemberDef v8___Map_members[] =   {
        {NULL}
};
    

static PyTypeObject v8___MapType = {
             PyObject_HEAD_INIT(NULL)
             0,                         /*ob_size*/
             "v8.Map",             /*tp_name*/
             sizeof(v8___Map), /*tp_basicsize*/
             0,                         /*tp_itemsize*/
             (destructor)v8___Map_dealloc,                         /*tp_dealloc*/
             0,                         /*tp_print*/
             0,                         /*tp_getattr*/
             0,                         /*tp_setattr*/
             0,                         /*tp_compare*/
             0,                         /*tp_repr*/
             0,                         /*tp_as_number*/
             0,                         /*tp_as_sequence*/
             0,                         /*tp_as_mapping*/
             0,                         /*tp_hash */
             0,                         /*tp_call*/
             0,                         /*tp_str*/
             0,                         /*tp_getattro*/
             0,                         /*tp_setattro*/
             0,                         /*tp_as_buffer*/
             Py_TPFLAGS_DEFAULT| Py_TPFLAGS_BASETYPE,        /*tp_flags*/
             "v8___Map objects",           /* tp_doc */
             0,		               /* tp_traverse */
             0,		               /* tp_clear */
             0,		               /* tp_richcompare */
             0,		               /* tp_weaklistoffset */
             0,		               /* tp_iter */
             0,		               /* tp_iternext */
             v8___Map_methods,             /* tp_methods */
             v8___Map_members,             /* tp_members */
             0,                         /* tp_getset */
             0,                         /* tp_base */
             0,                         /* tp_dict */
             0,                         /* tp_descr_get */
             0,                         /* tp_descr_set */
             0,                         /* tp_dictoffset */
             (initproc)v8___Map_init,      /* tp_init */
             0,                         /* tp_alloc */
             v8___Map_new,                 /* tp_new */
         };

static void
v8___Set_dealloc(v8___Set* self);

static PyObject *
v8___Set_new(PyTypeObject *type, PyObject *args, PyObject *kwds);
static int
v8___Set_init(v8___Set *self, PyObject *args, PyObject *kwds);
           

static PyObject*
v8___Set__Size(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Set__AsArray(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Set__New(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Set__FromArray(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Set__Cast(PyObject *args, PyObject *kwds);
    
static PyMethodDef v8___Set_methods[] = {
             
            {"Size",  (PyCFunction)v8___Set__Size, METH_VARARGS| METH_KEYWORDS, ""},
            {"AsArray",  (PyCFunction)v8___Set__AsArray, METH_VARARGS| METH_KEYWORDS, ""},
            {"New",  (PyCFunction)v8___Set__New,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},
            {"FromArray",  (PyCFunction)v8___Set__FromArray,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},
            {"Cast",  (PyCFunction)v8___Set__Cast,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},{NULL}  /* Sentinel */
};

static PyMemberDef v8___Set_members[] =   {
        {NULL}
};
    

static PyTypeObject v8___SetType = {
             PyObject_HEAD_INIT(NULL)
             0,                         /*ob_size*/
             "v8.Set",             /*tp_name*/
             sizeof(v8___Set), /*tp_basicsize*/
             0,                         /*tp_itemsize*/
             (destructor)v8___Set_dealloc,                         /*tp_dealloc*/
             0,                         /*tp_print*/
             0,                         /*tp_getattr*/
             0,                         /*tp_setattr*/
             0,                         /*tp_compare*/
             0,                         /*tp_repr*/
             0,                         /*tp_as_number*/
             0,                         /*tp_as_sequence*/
             0,                         /*tp_as_mapping*/
             0,                         /*tp_hash */
             0,                         /*tp_call*/
             0,                         /*tp_str*/
             0,                         /*tp_getattro*/
             0,                         /*tp_setattro*/
             0,                         /*tp_as_buffer*/
             Py_TPFLAGS_DEFAULT| Py_TPFLAGS_BASETYPE,        /*tp_flags*/
             "v8___Set objects",           /* tp_doc */
             0,		               /* tp_traverse */
             0,		               /* tp_clear */
             0,		               /* tp_richcompare */
             0,		               /* tp_weaklistoffset */
             0,		               /* tp_iter */
             0,		               /* tp_iternext */
             v8___Set_methods,             /* tp_methods */
             v8___Set_members,             /* tp_members */
             0,                         /* tp_getset */
             0,                         /* tp_base */
             0,                         /* tp_dict */
             0,                         /* tp_descr_get */
             0,                         /* tp_descr_set */
             0,                         /* tp_dictoffset */
             (initproc)v8___Set_init,      /* tp_init */
             0,                         /* tp_alloc */
             v8___Set_new,                 /* tp_new */
         };

static void
v8___ArrayBuffer_dealloc(v8___ArrayBuffer* self);

static PyObject *
v8___ArrayBuffer_new(PyTypeObject *type, PyObject *args, PyObject *kwds);
static int
v8___ArrayBuffer_init(v8___ArrayBuffer *self, PyObject *args, PyObject *kwds);
           

static PyObject*
v8___ArrayBuffer__ByteLength(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___ArrayBuffer__New(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___ArrayBuffer__IsExternal(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___ArrayBuffer__IsNeuterable(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___ArrayBuffer__Neuter(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___ArrayBuffer__Externalize(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___ArrayBuffer__GetContents(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___ArrayBuffer__Cast(PyObject *args, PyObject *kwds);
    
static PyMethodDef v8___ArrayBuffer_methods[] = {
             
            {"ByteLength",  (PyCFunction)v8___ArrayBuffer__ByteLength, METH_VARARGS| METH_KEYWORDS, ""},
            {"New",  (PyCFunction)v8___ArrayBuffer__New,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},
            {"New",  (PyCFunction)v8___ArrayBuffer__New,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},
            {"IsExternal",  (PyCFunction)v8___ArrayBuffer__IsExternal, METH_VARARGS| METH_KEYWORDS, ""},
            {"IsNeuterable",  (PyCFunction)v8___ArrayBuffer__IsNeuterable, METH_VARARGS| METH_KEYWORDS, ""},
            {"Neuter",  (PyCFunction)v8___ArrayBuffer__Neuter, METH_VARARGS| METH_KEYWORDS, ""},
            {"Externalize",  (PyCFunction)v8___ArrayBuffer__Externalize, METH_VARARGS| METH_KEYWORDS, ""},
            {"GetContents",  (PyCFunction)v8___ArrayBuffer__GetContents, METH_VARARGS| METH_KEYWORDS, ""},
            {"Cast",  (PyCFunction)v8___ArrayBuffer__Cast,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},{NULL}  /* Sentinel */
};

static PyMemberDef v8___ArrayBuffer_members[] =   {
        {NULL}
};
    

static PyTypeObject v8___ArrayBufferType = {
             PyObject_HEAD_INIT(NULL)
             0,                         /*ob_size*/
             "v8.ArrayBuffer",             /*tp_name*/
             sizeof(v8___ArrayBuffer), /*tp_basicsize*/
             0,                         /*tp_itemsize*/
             (destructor)v8___ArrayBuffer_dealloc,                         /*tp_dealloc*/
             0,                         /*tp_print*/
             0,                         /*tp_getattr*/
             0,                         /*tp_setattr*/
             0,                         /*tp_compare*/
             0,                         /*tp_repr*/
             0,                         /*tp_as_number*/
             0,                         /*tp_as_sequence*/
             0,                         /*tp_as_mapping*/
             0,                         /*tp_hash */
             0,                         /*tp_call*/
             0,                         /*tp_str*/
             0,                         /*tp_getattro*/
             0,                         /*tp_setattro*/
             0,                         /*tp_as_buffer*/
             Py_TPFLAGS_DEFAULT| Py_TPFLAGS_BASETYPE,        /*tp_flags*/
             "v8___ArrayBuffer objects",           /* tp_doc */
             0,		               /* tp_traverse */
             0,		               /* tp_clear */
             0,		               /* tp_richcompare */
             0,		               /* tp_weaklistoffset */
             0,		               /* tp_iter */
             0,		               /* tp_iternext */
             v8___ArrayBuffer_methods,             /* tp_methods */
             v8___ArrayBuffer_members,             /* tp_members */
             0,                         /* tp_getset */
             0,                         /* tp_base */
             0,                         /* tp_dict */
             0,                         /* tp_descr_get */
             0,                         /* tp_descr_set */
             0,                         /* tp_dictoffset */
             (initproc)v8___ArrayBuffer_init,      /* tp_init */
             0,                         /* tp_alloc */
             v8___ArrayBuffer_new,                 /* tp_new */
         };

static void
v8___ArrayBufferView_dealloc(v8___ArrayBufferView* self);

static PyObject *
v8___ArrayBufferView_new(PyTypeObject *type, PyObject *args, PyObject *kwds);
static int
v8___ArrayBufferView_init(v8___ArrayBufferView *self, PyObject *args, PyObject *kwds);
           

static PyObject*
v8___ArrayBufferView__Buffer(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___ArrayBufferView__ByteOffset(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___ArrayBufferView__ByteLength(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___ArrayBufferView__CopyContents(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___ArrayBufferView__HasBuffer(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___ArrayBufferView__Cast(PyObject *args, PyObject *kwds);
    
static PyMethodDef v8___ArrayBufferView_methods[] = {
             
            {"Buffer",  (PyCFunction)v8___ArrayBufferView__Buffer, METH_VARARGS| METH_KEYWORDS, ""},
            {"ByteOffset",  (PyCFunction)v8___ArrayBufferView__ByteOffset, METH_VARARGS| METH_KEYWORDS, ""},
            {"ByteLength",  (PyCFunction)v8___ArrayBufferView__ByteLength, METH_VARARGS| METH_KEYWORDS, ""},
            {"CopyContents",  (PyCFunction)v8___ArrayBufferView__CopyContents, METH_VARARGS| METH_KEYWORDS, ""},
            {"HasBuffer",  (PyCFunction)v8___ArrayBufferView__HasBuffer, METH_VARARGS| METH_KEYWORDS, ""},
            {"Cast",  (PyCFunction)v8___ArrayBufferView__Cast,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},{NULL}  /* Sentinel */
};

static PyMemberDef v8___ArrayBufferView_members[] =   {
        {NULL}
};
    

static PyTypeObject v8___ArrayBufferViewType = {
             PyObject_HEAD_INIT(NULL)
             0,                         /*ob_size*/
             "v8.ArrayBufferView",             /*tp_name*/
             sizeof(v8___ArrayBufferView), /*tp_basicsize*/
             0,                         /*tp_itemsize*/
             (destructor)v8___ArrayBufferView_dealloc,                         /*tp_dealloc*/
             0,                         /*tp_print*/
             0,                         /*tp_getattr*/
             0,                         /*tp_setattr*/
             0,                         /*tp_compare*/
             0,                         /*tp_repr*/
             0,                         /*tp_as_number*/
             0,                         /*tp_as_sequence*/
             0,                         /*tp_as_mapping*/
             0,                         /*tp_hash */
             0,                         /*tp_call*/
             0,                         /*tp_str*/
             0,                         /*tp_getattro*/
             0,                         /*tp_setattro*/
             0,                         /*tp_as_buffer*/
             Py_TPFLAGS_DEFAULT| Py_TPFLAGS_BASETYPE,        /*tp_flags*/
             "v8___ArrayBufferView objects",           /* tp_doc */
             0,		               /* tp_traverse */
             0,		               /* tp_clear */
             0,		               /* tp_richcompare */
             0,		               /* tp_weaklistoffset */
             0,		               /* tp_iter */
             0,		               /* tp_iternext */
             v8___ArrayBufferView_methods,             /* tp_methods */
             v8___ArrayBufferView_members,             /* tp_members */
             0,                         /* tp_getset */
             0,                         /* tp_base */
             0,                         /* tp_dict */
             0,                         /* tp_descr_get */
             0,                         /* tp_descr_set */
             0,                         /* tp_dictoffset */
             (initproc)v8___ArrayBufferView_init,      /* tp_init */
             0,                         /* tp_alloc */
             v8___ArrayBufferView_new,                 /* tp_new */
         };

static void
v8___TypedArray_dealloc(v8___TypedArray* self);

static PyObject *
v8___TypedArray_new(PyTypeObject *type, PyObject *args, PyObject *kwds);
static int
v8___TypedArray_init(v8___TypedArray *self, PyObject *args, PyObject *kwds);
           

static PyObject*
v8___TypedArray__Length(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___TypedArray__Cast(PyObject *args, PyObject *kwds);
    
static PyMethodDef v8___TypedArray_methods[] = {
             
            {"Length",  (PyCFunction)v8___TypedArray__Length, METH_VARARGS| METH_KEYWORDS, ""},
            {"Cast",  (PyCFunction)v8___TypedArray__Cast,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},{NULL}  /* Sentinel */
};

static PyMemberDef v8___TypedArray_members[] =   {
        {NULL}
};
    

static PyTypeObject v8___TypedArrayType = {
             PyObject_HEAD_INIT(NULL)
             0,                         /*ob_size*/
             "v8.TypedArray",             /*tp_name*/
             sizeof(v8___TypedArray), /*tp_basicsize*/
             0,                         /*tp_itemsize*/
             (destructor)v8___TypedArray_dealloc,                         /*tp_dealloc*/
             0,                         /*tp_print*/
             0,                         /*tp_getattr*/
             0,                         /*tp_setattr*/
             0,                         /*tp_compare*/
             0,                         /*tp_repr*/
             0,                         /*tp_as_number*/
             0,                         /*tp_as_sequence*/
             0,                         /*tp_as_mapping*/
             0,                         /*tp_hash */
             0,                         /*tp_call*/
             0,                         /*tp_str*/
             0,                         /*tp_getattro*/
             0,                         /*tp_setattro*/
             0,                         /*tp_as_buffer*/
             Py_TPFLAGS_DEFAULT| Py_TPFLAGS_BASETYPE,        /*tp_flags*/
             "v8___TypedArray objects",           /* tp_doc */
             0,		               /* tp_traverse */
             0,		               /* tp_clear */
             0,		               /* tp_richcompare */
             0,		               /* tp_weaklistoffset */
             0,		               /* tp_iter */
             0,		               /* tp_iternext */
             v8___TypedArray_methods,             /* tp_methods */
             v8___TypedArray_members,             /* tp_members */
             0,                         /* tp_getset */
             0,                         /* tp_base */
             0,                         /* tp_dict */
             0,                         /* tp_descr_get */
             0,                         /* tp_descr_set */
             0,                         /* tp_dictoffset */
             (initproc)v8___TypedArray_init,      /* tp_init */
             0,                         /* tp_alloc */
             v8___TypedArray_new,                 /* tp_new */
         };

static void
v8___Uint8Array_dealloc(v8___Uint8Array* self);

static PyObject *
v8___Uint8Array_new(PyTypeObject *type, PyObject *args, PyObject *kwds);
static int
v8___Uint8Array_init(v8___Uint8Array *self, PyObject *args, PyObject *kwds);
           

static PyObject*
v8___Uint8Array__New(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Uint8Array__Cast(PyObject *args, PyObject *kwds);
    
static PyMethodDef v8___Uint8Array_methods[] = {
             
            {"New",  (PyCFunction)v8___Uint8Array__New,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},
            {"New",  (PyCFunction)v8___Uint8Array__New,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},
            {"Cast",  (PyCFunction)v8___Uint8Array__Cast,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},{NULL}  /* Sentinel */
};

static PyMemberDef v8___Uint8Array_members[] =   {
        {NULL}
};
    

static PyTypeObject v8___Uint8ArrayType = {
             PyObject_HEAD_INIT(NULL)
             0,                         /*ob_size*/
             "v8.Uint8Array",             /*tp_name*/
             sizeof(v8___Uint8Array), /*tp_basicsize*/
             0,                         /*tp_itemsize*/
             (destructor)v8___Uint8Array_dealloc,                         /*tp_dealloc*/
             0,                         /*tp_print*/
             0,                         /*tp_getattr*/
             0,                         /*tp_setattr*/
             0,                         /*tp_compare*/
             0,                         /*tp_repr*/
             0,                         /*tp_as_number*/
             0,                         /*tp_as_sequence*/
             0,                         /*tp_as_mapping*/
             0,                         /*tp_hash */
             0,                         /*tp_call*/
             0,                         /*tp_str*/
             0,                         /*tp_getattro*/
             0,                         /*tp_setattro*/
             0,                         /*tp_as_buffer*/
             Py_TPFLAGS_DEFAULT| Py_TPFLAGS_BASETYPE,        /*tp_flags*/
             "v8___Uint8Array objects",           /* tp_doc */
             0,		               /* tp_traverse */
             0,		               /* tp_clear */
             0,		               /* tp_richcompare */
             0,		               /* tp_weaklistoffset */
             0,		               /* tp_iter */
             0,		               /* tp_iternext */
             v8___Uint8Array_methods,             /* tp_methods */
             v8___Uint8Array_members,             /* tp_members */
             0,                         /* tp_getset */
             0,                         /* tp_base */
             0,                         /* tp_dict */
             0,                         /* tp_descr_get */
             0,                         /* tp_descr_set */
             0,                         /* tp_dictoffset */
             (initproc)v8___Uint8Array_init,      /* tp_init */
             0,                         /* tp_alloc */
             v8___Uint8Array_new,                 /* tp_new */
         };

static void
v8___Uint8ClampedArray_dealloc(v8___Uint8ClampedArray* self);

static PyObject *
v8___Uint8ClampedArray_new(PyTypeObject *type, PyObject *args, PyObject *kwds);
static int
v8___Uint8ClampedArray_init(v8___Uint8ClampedArray *self, PyObject *args, PyObject *kwds);
           

static PyObject*
v8___Uint8ClampedArray__New(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Uint8ClampedArray__Cast(PyObject *args, PyObject *kwds);
    
static PyMethodDef v8___Uint8ClampedArray_methods[] = {
             
            {"New",  (PyCFunction)v8___Uint8ClampedArray__New,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},
            {"New",  (PyCFunction)v8___Uint8ClampedArray__New,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},
            {"Cast",  (PyCFunction)v8___Uint8ClampedArray__Cast,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},{NULL}  /* Sentinel */
};

static PyMemberDef v8___Uint8ClampedArray_members[] =   {
        {NULL}
};
    

static PyTypeObject v8___Uint8ClampedArrayType = {
             PyObject_HEAD_INIT(NULL)
             0,                         /*ob_size*/
             "v8.Uint8ClampedArray",             /*tp_name*/
             sizeof(v8___Uint8ClampedArray), /*tp_basicsize*/
             0,                         /*tp_itemsize*/
             (destructor)v8___Uint8ClampedArray_dealloc,                         /*tp_dealloc*/
             0,                         /*tp_print*/
             0,                         /*tp_getattr*/
             0,                         /*tp_setattr*/
             0,                         /*tp_compare*/
             0,                         /*tp_repr*/
             0,                         /*tp_as_number*/
             0,                         /*tp_as_sequence*/
             0,                         /*tp_as_mapping*/
             0,                         /*tp_hash */
             0,                         /*tp_call*/
             0,                         /*tp_str*/
             0,                         /*tp_getattro*/
             0,                         /*tp_setattro*/
             0,                         /*tp_as_buffer*/
             Py_TPFLAGS_DEFAULT| Py_TPFLAGS_BASETYPE,        /*tp_flags*/
             "v8___Uint8ClampedArray objects",           /* tp_doc */
             0,		               /* tp_traverse */
             0,		               /* tp_clear */
             0,		               /* tp_richcompare */
             0,		               /* tp_weaklistoffset */
             0,		               /* tp_iter */
             0,		               /* tp_iternext */
             v8___Uint8ClampedArray_methods,             /* tp_methods */
             v8___Uint8ClampedArray_members,             /* tp_members */
             0,                         /* tp_getset */
             0,                         /* tp_base */
             0,                         /* tp_dict */
             0,                         /* tp_descr_get */
             0,                         /* tp_descr_set */
             0,                         /* tp_dictoffset */
             (initproc)v8___Uint8ClampedArray_init,      /* tp_init */
             0,                         /* tp_alloc */
             v8___Uint8ClampedArray_new,                 /* tp_new */
         };

static void
v8___Int8Array_dealloc(v8___Int8Array* self);

static PyObject *
v8___Int8Array_new(PyTypeObject *type, PyObject *args, PyObject *kwds);
static int
v8___Int8Array_init(v8___Int8Array *self, PyObject *args, PyObject *kwds);
           

static PyObject*
v8___Int8Array__New(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Int8Array__Cast(PyObject *args, PyObject *kwds);
    
static PyMethodDef v8___Int8Array_methods[] = {
             
            {"New",  (PyCFunction)v8___Int8Array__New,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},
            {"New",  (PyCFunction)v8___Int8Array__New,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},
            {"Cast",  (PyCFunction)v8___Int8Array__Cast,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},{NULL}  /* Sentinel */
};

static PyMemberDef v8___Int8Array_members[] =   {
        {NULL}
};
    

static PyTypeObject v8___Int8ArrayType = {
             PyObject_HEAD_INIT(NULL)
             0,                         /*ob_size*/
             "v8.Int8Array",             /*tp_name*/
             sizeof(v8___Int8Array), /*tp_basicsize*/
             0,                         /*tp_itemsize*/
             (destructor)v8___Int8Array_dealloc,                         /*tp_dealloc*/
             0,                         /*tp_print*/
             0,                         /*tp_getattr*/
             0,                         /*tp_setattr*/
             0,                         /*tp_compare*/
             0,                         /*tp_repr*/
             0,                         /*tp_as_number*/
             0,                         /*tp_as_sequence*/
             0,                         /*tp_as_mapping*/
             0,                         /*tp_hash */
             0,                         /*tp_call*/
             0,                         /*tp_str*/
             0,                         /*tp_getattro*/
             0,                         /*tp_setattro*/
             0,                         /*tp_as_buffer*/
             Py_TPFLAGS_DEFAULT| Py_TPFLAGS_BASETYPE,        /*tp_flags*/
             "v8___Int8Array objects",           /* tp_doc */
             0,		               /* tp_traverse */
             0,		               /* tp_clear */
             0,		               /* tp_richcompare */
             0,		               /* tp_weaklistoffset */
             0,		               /* tp_iter */
             0,		               /* tp_iternext */
             v8___Int8Array_methods,             /* tp_methods */
             v8___Int8Array_members,             /* tp_members */
             0,                         /* tp_getset */
             0,                         /* tp_base */
             0,                         /* tp_dict */
             0,                         /* tp_descr_get */
             0,                         /* tp_descr_set */
             0,                         /* tp_dictoffset */
             (initproc)v8___Int8Array_init,      /* tp_init */
             0,                         /* tp_alloc */
             v8___Int8Array_new,                 /* tp_new */
         };

static void
v8___Uint16Array_dealloc(v8___Uint16Array* self);

static PyObject *
v8___Uint16Array_new(PyTypeObject *type, PyObject *args, PyObject *kwds);
static int
v8___Uint16Array_init(v8___Uint16Array *self, PyObject *args, PyObject *kwds);
           

static PyObject*
v8___Uint16Array__New(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Uint16Array__Cast(PyObject *args, PyObject *kwds);
    
static PyMethodDef v8___Uint16Array_methods[] = {
             
            {"New",  (PyCFunction)v8___Uint16Array__New,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},
            {"New",  (PyCFunction)v8___Uint16Array__New,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},
            {"Cast",  (PyCFunction)v8___Uint16Array__Cast,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},{NULL}  /* Sentinel */
};

static PyMemberDef v8___Uint16Array_members[] =   {
        {NULL}
};
    

static PyTypeObject v8___Uint16ArrayType = {
             PyObject_HEAD_INIT(NULL)
             0,                         /*ob_size*/
             "v8.Uint16Array",             /*tp_name*/
             sizeof(v8___Uint16Array), /*tp_basicsize*/
             0,                         /*tp_itemsize*/
             (destructor)v8___Uint16Array_dealloc,                         /*tp_dealloc*/
             0,                         /*tp_print*/
             0,                         /*tp_getattr*/
             0,                         /*tp_setattr*/
             0,                         /*tp_compare*/
             0,                         /*tp_repr*/
             0,                         /*tp_as_number*/
             0,                         /*tp_as_sequence*/
             0,                         /*tp_as_mapping*/
             0,                         /*tp_hash */
             0,                         /*tp_call*/
             0,                         /*tp_str*/
             0,                         /*tp_getattro*/
             0,                         /*tp_setattro*/
             0,                         /*tp_as_buffer*/
             Py_TPFLAGS_DEFAULT| Py_TPFLAGS_BASETYPE,        /*tp_flags*/
             "v8___Uint16Array objects",           /* tp_doc */
             0,		               /* tp_traverse */
             0,		               /* tp_clear */
             0,		               /* tp_richcompare */
             0,		               /* tp_weaklistoffset */
             0,		               /* tp_iter */
             0,		               /* tp_iternext */
             v8___Uint16Array_methods,             /* tp_methods */
             v8___Uint16Array_members,             /* tp_members */
             0,                         /* tp_getset */
             0,                         /* tp_base */
             0,                         /* tp_dict */
             0,                         /* tp_descr_get */
             0,                         /* tp_descr_set */
             0,                         /* tp_dictoffset */
             (initproc)v8___Uint16Array_init,      /* tp_init */
             0,                         /* tp_alloc */
             v8___Uint16Array_new,                 /* tp_new */
         };

static void
v8___Int16Array_dealloc(v8___Int16Array* self);

static PyObject *
v8___Int16Array_new(PyTypeObject *type, PyObject *args, PyObject *kwds);
static int
v8___Int16Array_init(v8___Int16Array *self, PyObject *args, PyObject *kwds);
           

static PyObject*
v8___Int16Array__New(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Int16Array__Cast(PyObject *args, PyObject *kwds);
    
static PyMethodDef v8___Int16Array_methods[] = {
             
            {"New",  (PyCFunction)v8___Int16Array__New,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},
            {"New",  (PyCFunction)v8___Int16Array__New,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},
            {"Cast",  (PyCFunction)v8___Int16Array__Cast,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},{NULL}  /* Sentinel */
};

static PyMemberDef v8___Int16Array_members[] =   {
        {NULL}
};
    

static PyTypeObject v8___Int16ArrayType = {
             PyObject_HEAD_INIT(NULL)
             0,                         /*ob_size*/
             "v8.Int16Array",             /*tp_name*/
             sizeof(v8___Int16Array), /*tp_basicsize*/
             0,                         /*tp_itemsize*/
             (destructor)v8___Int16Array_dealloc,                         /*tp_dealloc*/
             0,                         /*tp_print*/
             0,                         /*tp_getattr*/
             0,                         /*tp_setattr*/
             0,                         /*tp_compare*/
             0,                         /*tp_repr*/
             0,                         /*tp_as_number*/
             0,                         /*tp_as_sequence*/
             0,                         /*tp_as_mapping*/
             0,                         /*tp_hash */
             0,                         /*tp_call*/
             0,                         /*tp_str*/
             0,                         /*tp_getattro*/
             0,                         /*tp_setattro*/
             0,                         /*tp_as_buffer*/
             Py_TPFLAGS_DEFAULT| Py_TPFLAGS_BASETYPE,        /*tp_flags*/
             "v8___Int16Array objects",           /* tp_doc */
             0,		               /* tp_traverse */
             0,		               /* tp_clear */
             0,		               /* tp_richcompare */
             0,		               /* tp_weaklistoffset */
             0,		               /* tp_iter */
             0,		               /* tp_iternext */
             v8___Int16Array_methods,             /* tp_methods */
             v8___Int16Array_members,             /* tp_members */
             0,                         /* tp_getset */
             0,                         /* tp_base */
             0,                         /* tp_dict */
             0,                         /* tp_descr_get */
             0,                         /* tp_descr_set */
             0,                         /* tp_dictoffset */
             (initproc)v8___Int16Array_init,      /* tp_init */
             0,                         /* tp_alloc */
             v8___Int16Array_new,                 /* tp_new */
         };

static void
v8___Uint32Array_dealloc(v8___Uint32Array* self);

static PyObject *
v8___Uint32Array_new(PyTypeObject *type, PyObject *args, PyObject *kwds);
static int
v8___Uint32Array_init(v8___Uint32Array *self, PyObject *args, PyObject *kwds);
           

static PyObject*
v8___Uint32Array__New(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Uint32Array__Cast(PyObject *args, PyObject *kwds);
    
static PyMethodDef v8___Uint32Array_methods[] = {
             
            {"New",  (PyCFunction)v8___Uint32Array__New,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},
            {"New",  (PyCFunction)v8___Uint32Array__New,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},
            {"Cast",  (PyCFunction)v8___Uint32Array__Cast,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},{NULL}  /* Sentinel */
};

static PyMemberDef v8___Uint32Array_members[] =   {
        {NULL}
};
    

static PyTypeObject v8___Uint32ArrayType = {
             PyObject_HEAD_INIT(NULL)
             0,                         /*ob_size*/
             "v8.Uint32Array",             /*tp_name*/
             sizeof(v8___Uint32Array), /*tp_basicsize*/
             0,                         /*tp_itemsize*/
             (destructor)v8___Uint32Array_dealloc,                         /*tp_dealloc*/
             0,                         /*tp_print*/
             0,                         /*tp_getattr*/
             0,                         /*tp_setattr*/
             0,                         /*tp_compare*/
             0,                         /*tp_repr*/
             0,                         /*tp_as_number*/
             0,                         /*tp_as_sequence*/
             0,                         /*tp_as_mapping*/
             0,                         /*tp_hash */
             0,                         /*tp_call*/
             0,                         /*tp_str*/
             0,                         /*tp_getattro*/
             0,                         /*tp_setattro*/
             0,                         /*tp_as_buffer*/
             Py_TPFLAGS_DEFAULT| Py_TPFLAGS_BASETYPE,        /*tp_flags*/
             "v8___Uint32Array objects",           /* tp_doc */
             0,		               /* tp_traverse */
             0,		               /* tp_clear */
             0,		               /* tp_richcompare */
             0,		               /* tp_weaklistoffset */
             0,		               /* tp_iter */
             0,		               /* tp_iternext */
             v8___Uint32Array_methods,             /* tp_methods */
             v8___Uint32Array_members,             /* tp_members */
             0,                         /* tp_getset */
             0,                         /* tp_base */
             0,                         /* tp_dict */
             0,                         /* tp_descr_get */
             0,                         /* tp_descr_set */
             0,                         /* tp_dictoffset */
             (initproc)v8___Uint32Array_init,      /* tp_init */
             0,                         /* tp_alloc */
             v8___Uint32Array_new,                 /* tp_new */
         };

static void
v8___Int32Array_dealloc(v8___Int32Array* self);

static PyObject *
v8___Int32Array_new(PyTypeObject *type, PyObject *args, PyObject *kwds);
static int
v8___Int32Array_init(v8___Int32Array *self, PyObject *args, PyObject *kwds);
           

static PyObject*
v8___Int32Array__New(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Int32Array__Cast(PyObject *args, PyObject *kwds);
    
static PyMethodDef v8___Int32Array_methods[] = {
             
            {"New",  (PyCFunction)v8___Int32Array__New,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},
            {"New",  (PyCFunction)v8___Int32Array__New,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},
            {"Cast",  (PyCFunction)v8___Int32Array__Cast,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},{NULL}  /* Sentinel */
};

static PyMemberDef v8___Int32Array_members[] =   {
        {NULL}
};
    

static PyTypeObject v8___Int32ArrayType = {
             PyObject_HEAD_INIT(NULL)
             0,                         /*ob_size*/
             "v8.Int32Array",             /*tp_name*/
             sizeof(v8___Int32Array), /*tp_basicsize*/
             0,                         /*tp_itemsize*/
             (destructor)v8___Int32Array_dealloc,                         /*tp_dealloc*/
             0,                         /*tp_print*/
             0,                         /*tp_getattr*/
             0,                         /*tp_setattr*/
             0,                         /*tp_compare*/
             0,                         /*tp_repr*/
             0,                         /*tp_as_number*/
             0,                         /*tp_as_sequence*/
             0,                         /*tp_as_mapping*/
             0,                         /*tp_hash */
             0,                         /*tp_call*/
             0,                         /*tp_str*/
             0,                         /*tp_getattro*/
             0,                         /*tp_setattro*/
             0,                         /*tp_as_buffer*/
             Py_TPFLAGS_DEFAULT| Py_TPFLAGS_BASETYPE,        /*tp_flags*/
             "v8___Int32Array objects",           /* tp_doc */
             0,		               /* tp_traverse */
             0,		               /* tp_clear */
             0,		               /* tp_richcompare */
             0,		               /* tp_weaklistoffset */
             0,		               /* tp_iter */
             0,		               /* tp_iternext */
             v8___Int32Array_methods,             /* tp_methods */
             v8___Int32Array_members,             /* tp_members */
             0,                         /* tp_getset */
             0,                         /* tp_base */
             0,                         /* tp_dict */
             0,                         /* tp_descr_get */
             0,                         /* tp_descr_set */
             0,                         /* tp_dictoffset */
             (initproc)v8___Int32Array_init,      /* tp_init */
             0,                         /* tp_alloc */
             v8___Int32Array_new,                 /* tp_new */
         };

static void
v8___Float32Array_dealloc(v8___Float32Array* self);

static PyObject *
v8___Float32Array_new(PyTypeObject *type, PyObject *args, PyObject *kwds);
static int
v8___Float32Array_init(v8___Float32Array *self, PyObject *args, PyObject *kwds);
           

static PyObject*
v8___Float32Array__New(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Float32Array__Cast(PyObject *args, PyObject *kwds);
    
static PyMethodDef v8___Float32Array_methods[] = {
             
            {"New",  (PyCFunction)v8___Float32Array__New,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},
            {"New",  (PyCFunction)v8___Float32Array__New,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},
            {"Cast",  (PyCFunction)v8___Float32Array__Cast,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},{NULL}  /* Sentinel */
};

static PyMemberDef v8___Float32Array_members[] =   {
        {NULL}
};
    

static PyTypeObject v8___Float32ArrayType = {
             PyObject_HEAD_INIT(NULL)
             0,                         /*ob_size*/
             "v8.Float32Array",             /*tp_name*/
             sizeof(v8___Float32Array), /*tp_basicsize*/
             0,                         /*tp_itemsize*/
             (destructor)v8___Float32Array_dealloc,                         /*tp_dealloc*/
             0,                         /*tp_print*/
             0,                         /*tp_getattr*/
             0,                         /*tp_setattr*/
             0,                         /*tp_compare*/
             0,                         /*tp_repr*/
             0,                         /*tp_as_number*/
             0,                         /*tp_as_sequence*/
             0,                         /*tp_as_mapping*/
             0,                         /*tp_hash */
             0,                         /*tp_call*/
             0,                         /*tp_str*/
             0,                         /*tp_getattro*/
             0,                         /*tp_setattro*/
             0,                         /*tp_as_buffer*/
             Py_TPFLAGS_DEFAULT| Py_TPFLAGS_BASETYPE,        /*tp_flags*/
             "v8___Float32Array objects",           /* tp_doc */
             0,		               /* tp_traverse */
             0,		               /* tp_clear */
             0,		               /* tp_richcompare */
             0,		               /* tp_weaklistoffset */
             0,		               /* tp_iter */
             0,		               /* tp_iternext */
             v8___Float32Array_methods,             /* tp_methods */
             v8___Float32Array_members,             /* tp_members */
             0,                         /* tp_getset */
             0,                         /* tp_base */
             0,                         /* tp_dict */
             0,                         /* tp_descr_get */
             0,                         /* tp_descr_set */
             0,                         /* tp_dictoffset */
             (initproc)v8___Float32Array_init,      /* tp_init */
             0,                         /* tp_alloc */
             v8___Float32Array_new,                 /* tp_new */
         };

static void
v8___Float64Array_dealloc(v8___Float64Array* self);

static PyObject *
v8___Float64Array_new(PyTypeObject *type, PyObject *args, PyObject *kwds);
static int
v8___Float64Array_init(v8___Float64Array *self, PyObject *args, PyObject *kwds);
           

static PyObject*
v8___Float64Array__New(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Float64Array__Cast(PyObject *args, PyObject *kwds);
    
static PyMethodDef v8___Float64Array_methods[] = {
             
            {"New",  (PyCFunction)v8___Float64Array__New,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},
            {"New",  (PyCFunction)v8___Float64Array__New,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},
            {"Cast",  (PyCFunction)v8___Float64Array__Cast,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},{NULL}  /* Sentinel */
};

static PyMemberDef v8___Float64Array_members[] =   {
        {NULL}
};
    

static PyTypeObject v8___Float64ArrayType = {
             PyObject_HEAD_INIT(NULL)
             0,                         /*ob_size*/
             "v8.Float64Array",             /*tp_name*/
             sizeof(v8___Float64Array), /*tp_basicsize*/
             0,                         /*tp_itemsize*/
             (destructor)v8___Float64Array_dealloc,                         /*tp_dealloc*/
             0,                         /*tp_print*/
             0,                         /*tp_getattr*/
             0,                         /*tp_setattr*/
             0,                         /*tp_compare*/
             0,                         /*tp_repr*/
             0,                         /*tp_as_number*/
             0,                         /*tp_as_sequence*/
             0,                         /*tp_as_mapping*/
             0,                         /*tp_hash */
             0,                         /*tp_call*/
             0,                         /*tp_str*/
             0,                         /*tp_getattro*/
             0,                         /*tp_setattro*/
             0,                         /*tp_as_buffer*/
             Py_TPFLAGS_DEFAULT| Py_TPFLAGS_BASETYPE,        /*tp_flags*/
             "v8___Float64Array objects",           /* tp_doc */
             0,		               /* tp_traverse */
             0,		               /* tp_clear */
             0,		               /* tp_richcompare */
             0,		               /* tp_weaklistoffset */
             0,		               /* tp_iter */
             0,		               /* tp_iternext */
             v8___Float64Array_methods,             /* tp_methods */
             v8___Float64Array_members,             /* tp_members */
             0,                         /* tp_getset */
             0,                         /* tp_base */
             0,                         /* tp_dict */
             0,                         /* tp_descr_get */
             0,                         /* tp_descr_set */
             0,                         /* tp_dictoffset */
             (initproc)v8___Float64Array_init,      /* tp_init */
             0,                         /* tp_alloc */
             v8___Float64Array_new,                 /* tp_new */
         };

static void
v8___DataView_dealloc(v8___DataView* self);

static PyObject *
v8___DataView_new(PyTypeObject *type, PyObject *args, PyObject *kwds);
static int
v8___DataView_init(v8___DataView *self, PyObject *args, PyObject *kwds);
           

static PyObject*
v8___DataView__New(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___DataView__Cast(PyObject *args, PyObject *kwds);
    
static PyMethodDef v8___DataView_methods[] = {
             
            {"New",  (PyCFunction)v8___DataView__New,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},
            {"New",  (PyCFunction)v8___DataView__New,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},
            {"Cast",  (PyCFunction)v8___DataView__Cast,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},{NULL}  /* Sentinel */
};

static PyMemberDef v8___DataView_members[] =   {
        {NULL}
};
    

static PyTypeObject v8___DataViewType = {
             PyObject_HEAD_INIT(NULL)
             0,                         /*ob_size*/
             "v8.DataView",             /*tp_name*/
             sizeof(v8___DataView), /*tp_basicsize*/
             0,                         /*tp_itemsize*/
             (destructor)v8___DataView_dealloc,                         /*tp_dealloc*/
             0,                         /*tp_print*/
             0,                         /*tp_getattr*/
             0,                         /*tp_setattr*/
             0,                         /*tp_compare*/
             0,                         /*tp_repr*/
             0,                         /*tp_as_number*/
             0,                         /*tp_as_sequence*/
             0,                         /*tp_as_mapping*/
             0,                         /*tp_hash */
             0,                         /*tp_call*/
             0,                         /*tp_str*/
             0,                         /*tp_getattro*/
             0,                         /*tp_setattro*/
             0,                         /*tp_as_buffer*/
             Py_TPFLAGS_DEFAULT| Py_TPFLAGS_BASETYPE,        /*tp_flags*/
             "v8___DataView objects",           /* tp_doc */
             0,		               /* tp_traverse */
             0,		               /* tp_clear */
             0,		               /* tp_richcompare */
             0,		               /* tp_weaklistoffset */
             0,		               /* tp_iter */
             0,		               /* tp_iternext */
             v8___DataView_methods,             /* tp_methods */
             v8___DataView_members,             /* tp_members */
             0,                         /* tp_getset */
             0,                         /* tp_base */
             0,                         /* tp_dict */
             0,                         /* tp_descr_get */
             0,                         /* tp_descr_set */
             0,                         /* tp_dictoffset */
             (initproc)v8___DataView_init,      /* tp_init */
             0,                         /* tp_alloc */
             v8___DataView_new,                 /* tp_new */
         };

static void
v8___RegExp_dealloc(v8___RegExp* self);

static PyObject *
v8___RegExp_new(PyTypeObject *type, PyObject *args, PyObject *kwds);
static int
v8___RegExp_init(v8___RegExp *self, PyObject *args, PyObject *kwds);
           

static PyObject*
v8___RegExp__New(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___RegExp__GetSource(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___RegExp__GetFlags(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___RegExp__Cast(PyObject *args, PyObject *kwds);
    
static PyMethodDef v8___RegExp_methods[] = {
             
            {"New",  (PyCFunction)v8___RegExp__New,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},
            {"New",  (PyCFunction)v8___RegExp__New,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},
            {"GetSource",  (PyCFunction)v8___RegExp__GetSource, METH_VARARGS| METH_KEYWORDS, ""},
            {"GetFlags",  (PyCFunction)v8___RegExp__GetFlags, METH_VARARGS| METH_KEYWORDS, ""},
            {"Cast",  (PyCFunction)v8___RegExp__Cast,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},{NULL}  /* Sentinel */
};

static PyMemberDef v8___RegExp_members[] =   {
        {NULL}
};
    

static PyTypeObject v8___RegExpType = {
             PyObject_HEAD_INIT(NULL)
             0,                         /*ob_size*/
             "v8.RegExp",             /*tp_name*/
             sizeof(v8___RegExp), /*tp_basicsize*/
             0,                         /*tp_itemsize*/
             (destructor)v8___RegExp_dealloc,                         /*tp_dealloc*/
             0,                         /*tp_print*/
             0,                         /*tp_getattr*/
             0,                         /*tp_setattr*/
             0,                         /*tp_compare*/
             0,                         /*tp_repr*/
             0,                         /*tp_as_number*/
             0,                         /*tp_as_sequence*/
             0,                         /*tp_as_mapping*/
             0,                         /*tp_hash */
             0,                         /*tp_call*/
             0,                         /*tp_str*/
             0,                         /*tp_getattro*/
             0,                         /*tp_setattro*/
             0,                         /*tp_as_buffer*/
             Py_TPFLAGS_DEFAULT| Py_TPFLAGS_BASETYPE,        /*tp_flags*/
             "v8___RegExp objects",           /* tp_doc */
             0,		               /* tp_traverse */
             0,		               /* tp_clear */
             0,		               /* tp_richcompare */
             0,		               /* tp_weaklistoffset */
             0,		               /* tp_iter */
             0,		               /* tp_iternext */
             v8___RegExp_methods,             /* tp_methods */
             v8___RegExp_members,             /* tp_members */
             0,                         /* tp_getset */
             0,                         /* tp_base */
             0,                         /* tp_dict */
             0,                         /* tp_descr_get */
             0,                         /* tp_descr_set */
             0,                         /* tp_dictoffset */
             (initproc)v8___RegExp_init,      /* tp_init */
             0,                         /* tp_alloc */
             v8___RegExp_new,                 /* tp_new */
         };

static void
v8___Template_dealloc(v8___Template* self);

static PyObject *
v8___Template_new(PyTypeObject *type, PyObject *args, PyObject *kwds);
static int
v8___Template_init(v8___Template *self, PyObject *args, PyObject *kwds);
           

static PyObject*
v8___Template__Set(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Template__SetAccessorProperty(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Template__SetNativeDataProperty(PyObject *args, PyObject *kwds);
    
static PyMethodDef v8___Template_methods[] = {
             
            {"Set",  (PyCFunction)v8___Template__Set, METH_VARARGS| METH_KEYWORDS, ""},
            {"Set",  (PyCFunction)v8___Template__Set, METH_VARARGS| METH_KEYWORDS, ""},
            {"SetAccessorProperty",  (PyCFunction)v8___Template__SetAccessorProperty, METH_VARARGS| METH_KEYWORDS, ""},
            {"SetNativeDataProperty",  (PyCFunction)v8___Template__SetNativeDataProperty, METH_VARARGS| METH_KEYWORDS, ""},
            {"SetNativeDataProperty",  (PyCFunction)v8___Template__SetNativeDataProperty, METH_VARARGS| METH_KEYWORDS, ""},{NULL}  /* Sentinel */
};

static PyMemberDef v8___Template_members[] =   {
        {NULL}
};
    

static PyTypeObject v8___TemplateType = {
             PyObject_HEAD_INIT(NULL)
             0,                         /*ob_size*/
             "v8.Template",             /*tp_name*/
             sizeof(v8___Template), /*tp_basicsize*/
             0,                         /*tp_itemsize*/
             (destructor)v8___Template_dealloc,                         /*tp_dealloc*/
             0,                         /*tp_print*/
             0,                         /*tp_getattr*/
             0,                         /*tp_setattr*/
             0,                         /*tp_compare*/
             0,                         /*tp_repr*/
             0,                         /*tp_as_number*/
             0,                         /*tp_as_sequence*/
             0,                         /*tp_as_mapping*/
             0,                         /*tp_hash */
             0,                         /*tp_call*/
             0,                         /*tp_str*/
             0,                         /*tp_getattro*/
             0,                         /*tp_setattro*/
             0,                         /*tp_as_buffer*/
             Py_TPFLAGS_DEFAULT| Py_TPFLAGS_BASETYPE,        /*tp_flags*/
             "v8___Template objects",           /* tp_doc */
             0,		               /* tp_traverse */
             0,		               /* tp_clear */
             0,		               /* tp_richcompare */
             0,		               /* tp_weaklistoffset */
             0,		               /* tp_iter */
             0,		               /* tp_iternext */
             v8___Template_methods,             /* tp_methods */
             v8___Template_members,             /* tp_members */
             0,                         /* tp_getset */
             0,                         /* tp_base */
             0,                         /* tp_dict */
             0,                         /* tp_descr_get */
             0,                         /* tp_descr_set */
             0,                         /* tp_dictoffset */
             (initproc)v8___Template_init,      /* tp_init */
             0,                         /* tp_alloc */
             v8___Template_new,                 /* tp_new */
         };

static void
v8___NamedPropertyHandlerConfiguration_dealloc(v8___NamedPropertyHandlerConfiguration* self);

static PyObject *
v8___NamedPropertyHandlerConfiguration_new(PyTypeObject *type, PyObject *args, PyObject *kwds);
static int
v8___NamedPropertyHandlerConfiguration_init(v8___NamedPropertyHandlerConfiguration *self, PyObject *args, PyObject *kwds);
           

static PyMethodDef v8___NamedPropertyHandlerConfiguration_methods[] = {
             {NULL}  /* Sentinel */
};

static PyMemberDef v8___NamedPropertyHandlerConfiguration_members[] =   {
        {"getter", T_OBJECT_EX, offsetof(v8::NamedPropertyHandlerConfiguration,getter), 0, ""},
            {"setter", T_OBJECT_EX, offsetof(v8::NamedPropertyHandlerConfiguration,setter), 0, ""},
            {"query", T_OBJECT_EX, offsetof(v8::NamedPropertyHandlerConfiguration,query), 0, ""},
            {"deleter", T_OBJECT_EX, offsetof(v8::NamedPropertyHandlerConfiguration,deleter), 0, ""},
            {"enumerator", T_OBJECT_EX, offsetof(v8::NamedPropertyHandlerConfiguration,enumerator), 0, ""},
            {"data", T_OBJECT_EX, offsetof(v8::NamedPropertyHandlerConfiguration,data), 0, ""},
            {"flags", T_OBJECT_EX, offsetof(v8::NamedPropertyHandlerConfiguration,flags), 0, ""},
            {NULL}
};
    

static PyTypeObject v8___NamedPropertyHandlerConfigurationType = {
             PyObject_HEAD_INIT(NULL)
             0,                         /*ob_size*/
             "v8.NamedPropertyHandlerConfiguration",             /*tp_name*/
             sizeof(v8___NamedPropertyHandlerConfiguration), /*tp_basicsize*/
             0,                         /*tp_itemsize*/
             (destructor)v8___NamedPropertyHandlerConfiguration_dealloc,                         /*tp_dealloc*/
             0,                         /*tp_print*/
             0,                         /*tp_getattr*/
             0,                         /*tp_setattr*/
             0,                         /*tp_compare*/
             0,                         /*tp_repr*/
             0,                         /*tp_as_number*/
             0,                         /*tp_as_sequence*/
             0,                         /*tp_as_mapping*/
             0,                         /*tp_hash */
             0,                         /*tp_call*/
             0,                         /*tp_str*/
             0,                         /*tp_getattro*/
             0,                         /*tp_setattro*/
             0,                         /*tp_as_buffer*/
             Py_TPFLAGS_DEFAULT| Py_TPFLAGS_BASETYPE,        /*tp_flags*/
             "v8___NamedPropertyHandlerConfiguration objects",           /* tp_doc */
             0,		               /* tp_traverse */
             0,		               /* tp_clear */
             0,		               /* tp_richcompare */
             0,		               /* tp_weaklistoffset */
             0,		               /* tp_iter */
             0,		               /* tp_iternext */
             v8___NamedPropertyHandlerConfiguration_methods,             /* tp_methods */
             v8___NamedPropertyHandlerConfiguration_members,             /* tp_members */
             0,                         /* tp_getset */
             0,                         /* tp_base */
             0,                         /* tp_dict */
             0,                         /* tp_descr_get */
             0,                         /* tp_descr_set */
             0,                         /* tp_dictoffset */
             (initproc)v8___NamedPropertyHandlerConfiguration_init,      /* tp_init */
             0,                         /* tp_alloc */
             v8___NamedPropertyHandlerConfiguration_new,                 /* tp_new */
         };

static void
v8___IndexedPropertyHandlerConfiguration_dealloc(v8___IndexedPropertyHandlerConfiguration* self);

static PyObject *
v8___IndexedPropertyHandlerConfiguration_new(PyTypeObject *type, PyObject *args, PyObject *kwds);
static int
v8___IndexedPropertyHandlerConfiguration_init(v8___IndexedPropertyHandlerConfiguration *self, PyObject *args, PyObject *kwds);
           

static PyMethodDef v8___IndexedPropertyHandlerConfiguration_methods[] = {
             {NULL}  /* Sentinel */
};

static PyMemberDef v8___IndexedPropertyHandlerConfiguration_members[] =   {
        {"getter", T_OBJECT_EX, offsetof(v8::IndexedPropertyHandlerConfiguration,getter), 0, ""},
            {"setter", T_OBJECT_EX, offsetof(v8::IndexedPropertyHandlerConfiguration,setter), 0, ""},
            {"query", T_OBJECT_EX, offsetof(v8::IndexedPropertyHandlerConfiguration,query), 0, ""},
            {"deleter", T_OBJECT_EX, offsetof(v8::IndexedPropertyHandlerConfiguration,deleter), 0, ""},
            {"enumerator", T_OBJECT_EX, offsetof(v8::IndexedPropertyHandlerConfiguration,enumerator), 0, ""},
            {"data", T_OBJECT_EX, offsetof(v8::IndexedPropertyHandlerConfiguration,data), 0, ""},
            {"flags", T_OBJECT_EX, offsetof(v8::IndexedPropertyHandlerConfiguration,flags), 0, ""},
            {NULL}
};
    

static PyTypeObject v8___IndexedPropertyHandlerConfigurationType = {
             PyObject_HEAD_INIT(NULL)
             0,                         /*ob_size*/
             "v8.IndexedPropertyHandlerConfiguration",             /*tp_name*/
             sizeof(v8___IndexedPropertyHandlerConfiguration), /*tp_basicsize*/
             0,                         /*tp_itemsize*/
             (destructor)v8___IndexedPropertyHandlerConfiguration_dealloc,                         /*tp_dealloc*/
             0,                         /*tp_print*/
             0,                         /*tp_getattr*/
             0,                         /*tp_setattr*/
             0,                         /*tp_compare*/
             0,                         /*tp_repr*/
             0,                         /*tp_as_number*/
             0,                         /*tp_as_sequence*/
             0,                         /*tp_as_mapping*/
             0,                         /*tp_hash */
             0,                         /*tp_call*/
             0,                         /*tp_str*/
             0,                         /*tp_getattro*/
             0,                         /*tp_setattro*/
             0,                         /*tp_as_buffer*/
             Py_TPFLAGS_DEFAULT| Py_TPFLAGS_BASETYPE,        /*tp_flags*/
             "v8___IndexedPropertyHandlerConfiguration objects",           /* tp_doc */
             0,		               /* tp_traverse */
             0,		               /* tp_clear */
             0,		               /* tp_richcompare */
             0,		               /* tp_weaklistoffset */
             0,		               /* tp_iter */
             0,		               /* tp_iternext */
             v8___IndexedPropertyHandlerConfiguration_methods,             /* tp_methods */
             v8___IndexedPropertyHandlerConfiguration_members,             /* tp_members */
             0,                         /* tp_getset */
             0,                         /* tp_base */
             0,                         /* tp_dict */
             0,                         /* tp_descr_get */
             0,                         /* tp_descr_set */
             0,                         /* tp_dictoffset */
             (initproc)v8___IndexedPropertyHandlerConfiguration_init,      /* tp_init */
             0,                         /* tp_alloc */
             v8___IndexedPropertyHandlerConfiguration_new,                 /* tp_new */
         };

static void
v8___TypeSwitch_dealloc(v8___TypeSwitch* self);

static PyObject *
v8___TypeSwitch_new(PyTypeObject *type, PyObject *args, PyObject *kwds);
static int
v8___TypeSwitch_init(v8___TypeSwitch *self, PyObject *args, PyObject *kwds);
           

static PyObject*
v8___TypeSwitch__New(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___TypeSwitch__match(PyObject *args, PyObject *kwds);
    
static PyMethodDef v8___TypeSwitch_methods[] = {
             
            {"New",  (PyCFunction)v8___TypeSwitch__New,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},
            {"New",  (PyCFunction)v8___TypeSwitch__New,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},
            {"match",  (PyCFunction)v8___TypeSwitch__match, METH_VARARGS| METH_KEYWORDS, ""},{NULL}  /* Sentinel */
};

static PyMemberDef v8___TypeSwitch_members[] =   {
        {NULL}
};
    

static PyTypeObject v8___TypeSwitchType = {
             PyObject_HEAD_INIT(NULL)
             0,                         /*ob_size*/
             "v8.TypeSwitch",             /*tp_name*/
             sizeof(v8___TypeSwitch), /*tp_basicsize*/
             0,                         /*tp_itemsize*/
             (destructor)v8___TypeSwitch_dealloc,                         /*tp_dealloc*/
             0,                         /*tp_print*/
             0,                         /*tp_getattr*/
             0,                         /*tp_setattr*/
             0,                         /*tp_compare*/
             0,                         /*tp_repr*/
             0,                         /*tp_as_number*/
             0,                         /*tp_as_sequence*/
             0,                         /*tp_as_mapping*/
             0,                         /*tp_hash */
             0,                         /*tp_call*/
             0,                         /*tp_str*/
             0,                         /*tp_getattro*/
             0,                         /*tp_setattro*/
             0,                         /*tp_as_buffer*/
             Py_TPFLAGS_DEFAULT| Py_TPFLAGS_BASETYPE,        /*tp_flags*/
             "v8___TypeSwitch objects",           /* tp_doc */
             0,		               /* tp_traverse */
             0,		               /* tp_clear */
             0,		               /* tp_richcompare */
             0,		               /* tp_weaklistoffset */
             0,		               /* tp_iter */
             0,		               /* tp_iternext */
             v8___TypeSwitch_methods,             /* tp_methods */
             v8___TypeSwitch_members,             /* tp_members */
             0,                         /* tp_getset */
             0,                         /* tp_base */
             0,                         /* tp_dict */
             0,                         /* tp_descr_get */
             0,                         /* tp_descr_set */
             0,                         /* tp_dictoffset */
             (initproc)v8___TypeSwitch_init,      /* tp_init */
             0,                         /* tp_alloc */
             v8___TypeSwitch_new,                 /* tp_new */
         };

static void
v8___ExternalOneByteStringResourceImpl_dealloc(v8___ExternalOneByteStringResourceImpl* self);

static PyObject *
v8___ExternalOneByteStringResourceImpl_new(PyTypeObject *type, PyObject *args, PyObject *kwds);
static int
v8___ExternalOneByteStringResourceImpl_init(v8___ExternalOneByteStringResourceImpl *self, PyObject *args, PyObject *kwds);
           

static PyObject*
v8___ExternalOneByteStringResourceImpl__data(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___ExternalOneByteStringResourceImpl__length(PyObject *args, PyObject *kwds);
    
static PyMethodDef v8___ExternalOneByteStringResourceImpl_methods[] = {
             
            {"data",  (PyCFunction)v8___ExternalOneByteStringResourceImpl__data, METH_VARARGS| METH_KEYWORDS, ""},
            {"length",  (PyCFunction)v8___ExternalOneByteStringResourceImpl__length, METH_VARARGS| METH_KEYWORDS, ""},{NULL}  /* Sentinel */
};

static PyMemberDef v8___ExternalOneByteStringResourceImpl_members[] =   {
        {NULL}
};
    

static PyTypeObject v8___ExternalOneByteStringResourceImplType = {
             PyObject_HEAD_INIT(NULL)
             0,                         /*ob_size*/
             "v8.ExternalOneByteStringResourceImpl",             /*tp_name*/
             sizeof(v8___ExternalOneByteStringResourceImpl), /*tp_basicsize*/
             0,                         /*tp_itemsize*/
             (destructor)v8___ExternalOneByteStringResourceImpl_dealloc,                         /*tp_dealloc*/
             0,                         /*tp_print*/
             0,                         /*tp_getattr*/
             0,                         /*tp_setattr*/
             0,                         /*tp_compare*/
             0,                         /*tp_repr*/
             0,                         /*tp_as_number*/
             0,                         /*tp_as_sequence*/
             0,                         /*tp_as_mapping*/
             0,                         /*tp_hash */
             0,                         /*tp_call*/
             0,                         /*tp_str*/
             0,                         /*tp_getattro*/
             0,                         /*tp_setattro*/
             0,                         /*tp_as_buffer*/
             Py_TPFLAGS_DEFAULT| Py_TPFLAGS_BASETYPE,        /*tp_flags*/
             "v8___ExternalOneByteStringResourceImpl objects",           /* tp_doc */
             0,		               /* tp_traverse */
             0,		               /* tp_clear */
             0,		               /* tp_richcompare */
             0,		               /* tp_weaklistoffset */
             0,		               /* tp_iter */
             0,		               /* tp_iternext */
             v8___ExternalOneByteStringResourceImpl_methods,             /* tp_methods */
             v8___ExternalOneByteStringResourceImpl_members,             /* tp_members */
             0,                         /* tp_getset */
             0,                         /* tp_base */
             0,                         /* tp_dict */
             0,                         /* tp_descr_get */
             0,                         /* tp_descr_set */
             0,                         /* tp_dictoffset */
             (initproc)v8___ExternalOneByteStringResourceImpl_init,      /* tp_init */
             0,                         /* tp_alloc */
             v8___ExternalOneByteStringResourceImpl_new,                 /* tp_new */
         };

static void
v8___Extension_dealloc(v8___Extension* self);

static PyObject *
v8___Extension_new(PyTypeObject *type, PyObject *args, PyObject *kwds);
static int
v8___Extension_init(v8___Extension *self, PyObject *args, PyObject *kwds);
           

static PyObject*
v8___Extension__GetNativeFunctionTemplate(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Extension__name(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Extension__source_length(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Extension__source(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Extension__dependency_count(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Extension__dependencies(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Extension__set_auto_enable(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Extension__auto_enable(PyObject *args, PyObject *kwds);
    
static PyMethodDef v8___Extension_methods[] = {
             
            {"GetNativeFunctionTemplate",  (PyCFunction)v8___Extension__GetNativeFunctionTemplate, METH_VARARGS| METH_KEYWORDS, ""},
            {"name",  (PyCFunction)v8___Extension__name, METH_VARARGS| METH_KEYWORDS, ""},
            {"source_length",  (PyCFunction)v8___Extension__source_length, METH_VARARGS| METH_KEYWORDS, ""},
            {"source",  (PyCFunction)v8___Extension__source, METH_VARARGS| METH_KEYWORDS, ""},
            {"dependency_count",  (PyCFunction)v8___Extension__dependency_count, METH_VARARGS| METH_KEYWORDS, ""},
            {"dependencies",  (PyCFunction)v8___Extension__dependencies, METH_VARARGS| METH_KEYWORDS, ""},
            {"set_auto_enable",  (PyCFunction)v8___Extension__set_auto_enable, METH_VARARGS| METH_KEYWORDS, ""},
            {"auto_enable",  (PyCFunction)v8___Extension__auto_enable, METH_VARARGS| METH_KEYWORDS, ""},{NULL}  /* Sentinel */
};

static PyMemberDef v8___Extension_members[] =   {
        {NULL}
};
    

static PyTypeObject v8___ExtensionType = {
             PyObject_HEAD_INIT(NULL)
             0,                         /*ob_size*/
             "v8.Extension",             /*tp_name*/
             sizeof(v8___Extension), /*tp_basicsize*/
             0,                         /*tp_itemsize*/
             (destructor)v8___Extension_dealloc,                         /*tp_dealloc*/
             0,                         /*tp_print*/
             0,                         /*tp_getattr*/
             0,                         /*tp_setattr*/
             0,                         /*tp_compare*/
             0,                         /*tp_repr*/
             0,                         /*tp_as_number*/
             0,                         /*tp_as_sequence*/
             0,                         /*tp_as_mapping*/
             0,                         /*tp_hash */
             0,                         /*tp_call*/
             0,                         /*tp_str*/
             0,                         /*tp_getattro*/
             0,                         /*tp_setattro*/
             0,                         /*tp_as_buffer*/
             Py_TPFLAGS_DEFAULT| Py_TPFLAGS_BASETYPE,        /*tp_flags*/
             "v8___Extension objects",           /* tp_doc */
             0,		               /* tp_traverse */
             0,		               /* tp_clear */
             0,		               /* tp_richcompare */
             0,		               /* tp_weaklistoffset */
             0,		               /* tp_iter */
             0,		               /* tp_iternext */
             v8___Extension_methods,             /* tp_methods */
             v8___Extension_members,             /* tp_members */
             0,                         /* tp_getset */
             0,                         /* tp_base */
             0,                         /* tp_dict */
             0,                         /* tp_descr_get */
             0,                         /* tp_descr_set */
             0,                         /* tp_dictoffset */
             (initproc)v8___Extension_init,      /* tp_init */
             0,                         /* tp_alloc */
             v8___Extension_new,                 /* tp_new */
         };

static void
v8___ResourceConstraints_dealloc(v8___ResourceConstraints* self);

static PyObject *
v8___ResourceConstraints_new(PyTypeObject *type, PyObject *args, PyObject *kwds);
static int
v8___ResourceConstraints_init(v8___ResourceConstraints *self, PyObject *args, PyObject *kwds);
           

static PyObject*
v8___ResourceConstraints__ConfigureDefaults(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___ResourceConstraints__max_semi_space_size(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___ResourceConstraints__set_max_semi_space_size(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___ResourceConstraints__max_old_space_size(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___ResourceConstraints__set_max_old_space_size(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___ResourceConstraints__max_executable_size(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___ResourceConstraints__set_max_executable_size(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___ResourceConstraints__stack_limit(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___ResourceConstraints__set_stack_limit(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___ResourceConstraints__max_available_threads(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___ResourceConstraints__set_max_available_threads(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___ResourceConstraints__code_range_size(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___ResourceConstraints__set_code_range_size(PyObject *args, PyObject *kwds);
    
static PyMethodDef v8___ResourceConstraints_methods[] = {
             
            {"ConfigureDefaults",  (PyCFunction)v8___ResourceConstraints__ConfigureDefaults, METH_VARARGS| METH_KEYWORDS, ""},
            {"ConfigureDefaults",  (PyCFunction)v8___ResourceConstraints__ConfigureDefaults, METH_VARARGS| METH_KEYWORDS, ""},
            {"max_semi_space_size",  (PyCFunction)v8___ResourceConstraints__max_semi_space_size, METH_VARARGS| METH_KEYWORDS, ""},
            {"set_max_semi_space_size",  (PyCFunction)v8___ResourceConstraints__set_max_semi_space_size, METH_VARARGS| METH_KEYWORDS, ""},
            {"max_old_space_size",  (PyCFunction)v8___ResourceConstraints__max_old_space_size, METH_VARARGS| METH_KEYWORDS, ""},
            {"set_max_old_space_size",  (PyCFunction)v8___ResourceConstraints__set_max_old_space_size, METH_VARARGS| METH_KEYWORDS, ""},
            {"max_executable_size",  (PyCFunction)v8___ResourceConstraints__max_executable_size, METH_VARARGS| METH_KEYWORDS, ""},
            {"set_max_executable_size",  (PyCFunction)v8___ResourceConstraints__set_max_executable_size, METH_VARARGS| METH_KEYWORDS, ""},
            {"stack_limit",  (PyCFunction)v8___ResourceConstraints__stack_limit, METH_VARARGS| METH_KEYWORDS, ""},
            {"set_stack_limit",  (PyCFunction)v8___ResourceConstraints__set_stack_limit, METH_VARARGS| METH_KEYWORDS, ""},
            {"max_available_threads",  (PyCFunction)v8___ResourceConstraints__max_available_threads, METH_VARARGS| METH_KEYWORDS, ""},
            {"set_max_available_threads",  (PyCFunction)v8___ResourceConstraints__set_max_available_threads, METH_VARARGS| METH_KEYWORDS, ""},
            {"code_range_size",  (PyCFunction)v8___ResourceConstraints__code_range_size, METH_VARARGS| METH_KEYWORDS, ""},
            {"set_code_range_size",  (PyCFunction)v8___ResourceConstraints__set_code_range_size, METH_VARARGS| METH_KEYWORDS, ""},{NULL}  /* Sentinel */
};

static PyMemberDef v8___ResourceConstraints_members[] =   {
        {NULL}
};
    

static PyTypeObject v8___ResourceConstraintsType = {
             PyObject_HEAD_INIT(NULL)
             0,                         /*ob_size*/
             "v8.ResourceConstraints",             /*tp_name*/
             sizeof(v8___ResourceConstraints), /*tp_basicsize*/
             0,                         /*tp_itemsize*/
             (destructor)v8___ResourceConstraints_dealloc,                         /*tp_dealloc*/
             0,                         /*tp_print*/
             0,                         /*tp_getattr*/
             0,                         /*tp_setattr*/
             0,                         /*tp_compare*/
             0,                         /*tp_repr*/
             0,                         /*tp_as_number*/
             0,                         /*tp_as_sequence*/
             0,                         /*tp_as_mapping*/
             0,                         /*tp_hash */
             0,                         /*tp_call*/
             0,                         /*tp_str*/
             0,                         /*tp_getattro*/
             0,                         /*tp_setattro*/
             0,                         /*tp_as_buffer*/
             Py_TPFLAGS_DEFAULT| Py_TPFLAGS_BASETYPE,        /*tp_flags*/
             "v8___ResourceConstraints objects",           /* tp_doc */
             0,		               /* tp_traverse */
             0,		               /* tp_clear */
             0,		               /* tp_richcompare */
             0,		               /* tp_weaklistoffset */
             0,		               /* tp_iter */
             0,		               /* tp_iternext */
             v8___ResourceConstraints_methods,             /* tp_methods */
             v8___ResourceConstraints_members,             /* tp_members */
             0,                         /* tp_getset */
             0,                         /* tp_base */
             0,                         /* tp_dict */
             0,                         /* tp_descr_get */
             0,                         /* tp_descr_set */
             0,                         /* tp_dictoffset */
             (initproc)v8___ResourceConstraints_init,      /* tp_init */
             0,                         /* tp_alloc */
             v8___ResourceConstraints_new,                 /* tp_new */
         };

static void
v8___Exception_dealloc(v8___Exception* self);

static PyObject *
v8___Exception_new(PyTypeObject *type, PyObject *args, PyObject *kwds);
static int
v8___Exception_init(v8___Exception *self, PyObject *args, PyObject *kwds);
           

static PyObject*
v8___Exception__RangeError(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Exception__ReferenceError(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Exception__SyntaxError(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Exception__TypeError(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Exception__Error(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Exception__CreateMessage(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Exception__GetStackTrace(PyObject *args, PyObject *kwds);
    
static PyMethodDef v8___Exception_methods[] = {
             
            {"RangeError",  (PyCFunction)v8___Exception__RangeError,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},
            {"ReferenceError",  (PyCFunction)v8___Exception__ReferenceError,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},
            {"SyntaxError",  (PyCFunction)v8___Exception__SyntaxError,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},
            {"TypeError",  (PyCFunction)v8___Exception__TypeError,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},
            {"Error",  (PyCFunction)v8___Exception__Error,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},
            {"CreateMessage",  (PyCFunction)v8___Exception__CreateMessage,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},
            {"GetStackTrace",  (PyCFunction)v8___Exception__GetStackTrace,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},{NULL}  /* Sentinel */
};

static PyMemberDef v8___Exception_members[] =   {
        {NULL}
};
    

static PyTypeObject v8___ExceptionType = {
             PyObject_HEAD_INIT(NULL)
             0,                         /*ob_size*/
             "v8.Exception",             /*tp_name*/
             sizeof(v8___Exception), /*tp_basicsize*/
             0,                         /*tp_itemsize*/
             (destructor)v8___Exception_dealloc,                         /*tp_dealloc*/
             0,                         /*tp_print*/
             0,                         /*tp_getattr*/
             0,                         /*tp_setattr*/
             0,                         /*tp_compare*/
             0,                         /*tp_repr*/
             0,                         /*tp_as_number*/
             0,                         /*tp_as_sequence*/
             0,                         /*tp_as_mapping*/
             0,                         /*tp_hash */
             0,                         /*tp_call*/
             0,                         /*tp_str*/
             0,                         /*tp_getattro*/
             0,                         /*tp_setattro*/
             0,                         /*tp_as_buffer*/
             Py_TPFLAGS_DEFAULT| Py_TPFLAGS_BASETYPE,        /*tp_flags*/
             "v8___Exception objects",           /* tp_doc */
             0,		               /* tp_traverse */
             0,		               /* tp_clear */
             0,		               /* tp_richcompare */
             0,		               /* tp_weaklistoffset */
             0,		               /* tp_iter */
             0,		               /* tp_iternext */
             v8___Exception_methods,             /* tp_methods */
             v8___Exception_members,             /* tp_members */
             0,                         /* tp_getset */
             0,                         /* tp_base */
             0,                         /* tp_dict */
             0,                         /* tp_descr_get */
             0,                         /* tp_descr_set */
             0,                         /* tp_dictoffset */
             (initproc)v8___Exception_init,      /* tp_init */
             0,                         /* tp_alloc */
             v8___Exception_new,                 /* tp_new */
         };

static void
v8___PromiseRejectMessage_dealloc(v8___PromiseRejectMessage* self);

static PyObject *
v8___PromiseRejectMessage_new(PyTypeObject *type, PyObject *args, PyObject *kwds);
static int
v8___PromiseRejectMessage_init(v8___PromiseRejectMessage *self, PyObject *args, PyObject *kwds);
           

static PyObject*
v8___PromiseRejectMessage__GetPromise(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___PromiseRejectMessage__GetEvent(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___PromiseRejectMessage__GetValue(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___PromiseRejectMessage__GetStackTrace(PyObject *args, PyObject *kwds);
    
static PyMethodDef v8___PromiseRejectMessage_methods[] = {
             
            {"GetPromise",  (PyCFunction)v8___PromiseRejectMessage__GetPromise, METH_VARARGS| METH_KEYWORDS, ""},
            {"GetEvent",  (PyCFunction)v8___PromiseRejectMessage__GetEvent, METH_VARARGS| METH_KEYWORDS, ""},
            {"GetValue",  (PyCFunction)v8___PromiseRejectMessage__GetValue, METH_VARARGS| METH_KEYWORDS, ""},
            {"GetStackTrace",  (PyCFunction)v8___PromiseRejectMessage__GetStackTrace, METH_VARARGS| METH_KEYWORDS, ""},{NULL}  /* Sentinel */
};

static PyMemberDef v8___PromiseRejectMessage_members[] =   {
        {NULL}
};
    

static PyTypeObject v8___PromiseRejectMessageType = {
             PyObject_HEAD_INIT(NULL)
             0,                         /*ob_size*/
             "v8.PromiseRejectMessage",             /*tp_name*/
             sizeof(v8___PromiseRejectMessage), /*tp_basicsize*/
             0,                         /*tp_itemsize*/
             (destructor)v8___PromiseRejectMessage_dealloc,                         /*tp_dealloc*/
             0,                         /*tp_print*/
             0,                         /*tp_getattr*/
             0,                         /*tp_setattr*/
             0,                         /*tp_compare*/
             0,                         /*tp_repr*/
             0,                         /*tp_as_number*/
             0,                         /*tp_as_sequence*/
             0,                         /*tp_as_mapping*/
             0,                         /*tp_hash */
             0,                         /*tp_call*/
             0,                         /*tp_str*/
             0,                         /*tp_getattro*/
             0,                         /*tp_setattro*/
             0,                         /*tp_as_buffer*/
             Py_TPFLAGS_DEFAULT| Py_TPFLAGS_BASETYPE,        /*tp_flags*/
             "v8___PromiseRejectMessage objects",           /* tp_doc */
             0,		               /* tp_traverse */
             0,		               /* tp_clear */
             0,		               /* tp_richcompare */
             0,		               /* tp_weaklistoffset */
             0,		               /* tp_iter */
             0,		               /* tp_iternext */
             v8___PromiseRejectMessage_methods,             /* tp_methods */
             v8___PromiseRejectMessage_members,             /* tp_members */
             0,                         /* tp_getset */
             0,                         /* tp_base */
             0,                         /* tp_dict */
             0,                         /* tp_descr_get */
             0,                         /* tp_descr_set */
             0,                         /* tp_dictoffset */
             (initproc)v8___PromiseRejectMessage_init,      /* tp_init */
             0,                         /* tp_alloc */
             v8___PromiseRejectMessage_new,                 /* tp_new */
         };

static void
v8___HeapStatistics_dealloc(v8___HeapStatistics* self);

static PyObject *
v8___HeapStatistics_new(PyTypeObject *type, PyObject *args, PyObject *kwds);
static int
v8___HeapStatistics_init(v8___HeapStatistics *self, PyObject *args, PyObject *kwds);
           

static PyObject*
v8___HeapStatistics__total_heap_size(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___HeapStatistics__total_heap_size_executable(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___HeapStatistics__total_physical_size(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___HeapStatistics__total_available_size(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___HeapStatistics__used_heap_size(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___HeapStatistics__heap_size_limit(PyObject *args, PyObject *kwds);
    
static PyMethodDef v8___HeapStatistics_methods[] = {
             
            {"total_heap_size",  (PyCFunction)v8___HeapStatistics__total_heap_size, METH_VARARGS| METH_KEYWORDS, ""},
            {"total_heap_size_executable",  (PyCFunction)v8___HeapStatistics__total_heap_size_executable, METH_VARARGS| METH_KEYWORDS, ""},
            {"total_physical_size",  (PyCFunction)v8___HeapStatistics__total_physical_size, METH_VARARGS| METH_KEYWORDS, ""},
            {"total_available_size",  (PyCFunction)v8___HeapStatistics__total_available_size, METH_VARARGS| METH_KEYWORDS, ""},
            {"used_heap_size",  (PyCFunction)v8___HeapStatistics__used_heap_size, METH_VARARGS| METH_KEYWORDS, ""},
            {"heap_size_limit",  (PyCFunction)v8___HeapStatistics__heap_size_limit, METH_VARARGS| METH_KEYWORDS, ""},{NULL}  /* Sentinel */
};

static PyMemberDef v8___HeapStatistics_members[] =   {
        {NULL}
};
    

static PyTypeObject v8___HeapStatisticsType = {
             PyObject_HEAD_INIT(NULL)
             0,                         /*ob_size*/
             "v8.HeapStatistics",             /*tp_name*/
             sizeof(v8___HeapStatistics), /*tp_basicsize*/
             0,                         /*tp_itemsize*/
             (destructor)v8___HeapStatistics_dealloc,                         /*tp_dealloc*/
             0,                         /*tp_print*/
             0,                         /*tp_getattr*/
             0,                         /*tp_setattr*/
             0,                         /*tp_compare*/
             0,                         /*tp_repr*/
             0,                         /*tp_as_number*/
             0,                         /*tp_as_sequence*/
             0,                         /*tp_as_mapping*/
             0,                         /*tp_hash */
             0,                         /*tp_call*/
             0,                         /*tp_str*/
             0,                         /*tp_getattro*/
             0,                         /*tp_setattro*/
             0,                         /*tp_as_buffer*/
             Py_TPFLAGS_DEFAULT| Py_TPFLAGS_BASETYPE,        /*tp_flags*/
             "v8___HeapStatistics objects",           /* tp_doc */
             0,		               /* tp_traverse */
             0,		               /* tp_clear */
             0,		               /* tp_richcompare */
             0,		               /* tp_weaklistoffset */
             0,		               /* tp_iter */
             0,		               /* tp_iternext */
             v8___HeapStatistics_methods,             /* tp_methods */
             v8___HeapStatistics_members,             /* tp_members */
             0,                         /* tp_getset */
             0,                         /* tp_base */
             0,                         /* tp_dict */
             0,                         /* tp_descr_get */
             0,                         /* tp_descr_set */
             0,                         /* tp_dictoffset */
             (initproc)v8___HeapStatistics_init,      /* tp_init */
             0,                         /* tp_alloc */
             v8___HeapStatistics_new,                 /* tp_new */
         };

static void
v8___HeapSpaceStatistics_dealloc(v8___HeapSpaceStatistics* self);

static PyObject *
v8___HeapSpaceStatistics_new(PyTypeObject *type, PyObject *args, PyObject *kwds);
static int
v8___HeapSpaceStatistics_init(v8___HeapSpaceStatistics *self, PyObject *args, PyObject *kwds);
           

static PyObject*
v8___HeapSpaceStatistics__space_name(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___HeapSpaceStatistics__space_size(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___HeapSpaceStatistics__space_used_size(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___HeapSpaceStatistics__space_available_size(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___HeapSpaceStatistics__physical_space_size(PyObject *args, PyObject *kwds);
    
static PyMethodDef v8___HeapSpaceStatistics_methods[] = {
             
            {"space_name",  (PyCFunction)v8___HeapSpaceStatistics__space_name, METH_VARARGS| METH_KEYWORDS, ""},
            {"space_size",  (PyCFunction)v8___HeapSpaceStatistics__space_size, METH_VARARGS| METH_KEYWORDS, ""},
            {"space_used_size",  (PyCFunction)v8___HeapSpaceStatistics__space_used_size, METH_VARARGS| METH_KEYWORDS, ""},
            {"space_available_size",  (PyCFunction)v8___HeapSpaceStatistics__space_available_size, METH_VARARGS| METH_KEYWORDS, ""},
            {"physical_space_size",  (PyCFunction)v8___HeapSpaceStatistics__physical_space_size, METH_VARARGS| METH_KEYWORDS, ""},{NULL}  /* Sentinel */
};

static PyMemberDef v8___HeapSpaceStatistics_members[] =   {
        {NULL}
};
    

static PyTypeObject v8___HeapSpaceStatisticsType = {
             PyObject_HEAD_INIT(NULL)
             0,                         /*ob_size*/
             "v8.HeapSpaceStatistics",             /*tp_name*/
             sizeof(v8___HeapSpaceStatistics), /*tp_basicsize*/
             0,                         /*tp_itemsize*/
             (destructor)v8___HeapSpaceStatistics_dealloc,                         /*tp_dealloc*/
             0,                         /*tp_print*/
             0,                         /*tp_getattr*/
             0,                         /*tp_setattr*/
             0,                         /*tp_compare*/
             0,                         /*tp_repr*/
             0,                         /*tp_as_number*/
             0,                         /*tp_as_sequence*/
             0,                         /*tp_as_mapping*/
             0,                         /*tp_hash */
             0,                         /*tp_call*/
             0,                         /*tp_str*/
             0,                         /*tp_getattro*/
             0,                         /*tp_setattro*/
             0,                         /*tp_as_buffer*/
             Py_TPFLAGS_DEFAULT| Py_TPFLAGS_BASETYPE,        /*tp_flags*/
             "v8___HeapSpaceStatistics objects",           /* tp_doc */
             0,		               /* tp_traverse */
             0,		               /* tp_clear */
             0,		               /* tp_richcompare */
             0,		               /* tp_weaklistoffset */
             0,		               /* tp_iter */
             0,		               /* tp_iternext */
             v8___HeapSpaceStatistics_methods,             /* tp_methods */
             v8___HeapSpaceStatistics_members,             /* tp_members */
             0,                         /* tp_getset */
             0,                         /* tp_base */
             0,                         /* tp_dict */
             0,                         /* tp_descr_get */
             0,                         /* tp_descr_set */
             0,                         /* tp_dictoffset */
             (initproc)v8___HeapSpaceStatistics_init,      /* tp_init */
             0,                         /* tp_alloc */
             v8___HeapSpaceStatistics_new,                 /* tp_new */
         };

static void
v8___HeapObjectStatistics_dealloc(v8___HeapObjectStatistics* self);

static PyObject *
v8___HeapObjectStatistics_new(PyTypeObject *type, PyObject *args, PyObject *kwds);
static int
v8___HeapObjectStatistics_init(v8___HeapObjectStatistics *self, PyObject *args, PyObject *kwds);
           

static PyObject*
v8___HeapObjectStatistics__object_type(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___HeapObjectStatistics__object_sub_type(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___HeapObjectStatistics__object_count(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___HeapObjectStatistics__object_size(PyObject *args, PyObject *kwds);
    
static PyMethodDef v8___HeapObjectStatistics_methods[] = {
             
            {"object_type",  (PyCFunction)v8___HeapObjectStatistics__object_type, METH_VARARGS| METH_KEYWORDS, ""},
            {"object_sub_type",  (PyCFunction)v8___HeapObjectStatistics__object_sub_type, METH_VARARGS| METH_KEYWORDS, ""},
            {"object_count",  (PyCFunction)v8___HeapObjectStatistics__object_count, METH_VARARGS| METH_KEYWORDS, ""},
            {"object_size",  (PyCFunction)v8___HeapObjectStatistics__object_size, METH_VARARGS| METH_KEYWORDS, ""},{NULL}  /* Sentinel */
};

static PyMemberDef v8___HeapObjectStatistics_members[] =   {
        {NULL}
};
    

static PyTypeObject v8___HeapObjectStatisticsType = {
             PyObject_HEAD_INIT(NULL)
             0,                         /*ob_size*/
             "v8.HeapObjectStatistics",             /*tp_name*/
             sizeof(v8___HeapObjectStatistics), /*tp_basicsize*/
             0,                         /*tp_itemsize*/
             (destructor)v8___HeapObjectStatistics_dealloc,                         /*tp_dealloc*/
             0,                         /*tp_print*/
             0,                         /*tp_getattr*/
             0,                         /*tp_setattr*/
             0,                         /*tp_compare*/
             0,                         /*tp_repr*/
             0,                         /*tp_as_number*/
             0,                         /*tp_as_sequence*/
             0,                         /*tp_as_mapping*/
             0,                         /*tp_hash */
             0,                         /*tp_call*/
             0,                         /*tp_str*/
             0,                         /*tp_getattro*/
             0,                         /*tp_setattro*/
             0,                         /*tp_as_buffer*/
             Py_TPFLAGS_DEFAULT| Py_TPFLAGS_BASETYPE,        /*tp_flags*/
             "v8___HeapObjectStatistics objects",           /* tp_doc */
             0,		               /* tp_traverse */
             0,		               /* tp_clear */
             0,		               /* tp_richcompare */
             0,		               /* tp_weaklistoffset */
             0,		               /* tp_iter */
             0,		               /* tp_iternext */
             v8___HeapObjectStatistics_methods,             /* tp_methods */
             v8___HeapObjectStatistics_members,             /* tp_members */
             0,                         /* tp_getset */
             0,                         /* tp_base */
             0,                         /* tp_dict */
             0,                         /* tp_descr_get */
             0,                         /* tp_descr_set */
             0,                         /* tp_dictoffset */
             (initproc)v8___HeapObjectStatistics_init,      /* tp_init */
             0,                         /* tp_alloc */
             v8___HeapObjectStatistics_new,                 /* tp_new */
         };

static void
v8___RetainedObjectInfo_dealloc(v8___RetainedObjectInfo* self);

static PyObject *
v8___RetainedObjectInfo_new(PyTypeObject *type, PyObject *args, PyObject *kwds);
static int
v8___RetainedObjectInfo_init(v8___RetainedObjectInfo *self, PyObject *args, PyObject *kwds);
           

static PyMethodDef v8___RetainedObjectInfo_methods[] = {
             {NULL}  /* Sentinel */
};

static PyMemberDef v8___RetainedObjectInfo_members[] =   {
        {NULL}
};
    

static PyTypeObject v8___RetainedObjectInfoType = {
             PyObject_HEAD_INIT(NULL)
             0,                         /*ob_size*/
             "v8.RetainedObjectInfo",             /*tp_name*/
             sizeof(v8___RetainedObjectInfo), /*tp_basicsize*/
             0,                         /*tp_itemsize*/
             (destructor)v8___RetainedObjectInfo_dealloc,                         /*tp_dealloc*/
             0,                         /*tp_print*/
             0,                         /*tp_getattr*/
             0,                         /*tp_setattr*/
             0,                         /*tp_compare*/
             0,                         /*tp_repr*/
             0,                         /*tp_as_number*/
             0,                         /*tp_as_sequence*/
             0,                         /*tp_as_mapping*/
             0,                         /*tp_hash */
             0,                         /*tp_call*/
             0,                         /*tp_str*/
             0,                         /*tp_getattro*/
             0,                         /*tp_setattro*/
             0,                         /*tp_as_buffer*/
             Py_TPFLAGS_DEFAULT| Py_TPFLAGS_BASETYPE,        /*tp_flags*/
             "v8___RetainedObjectInfo objects",           /* tp_doc */
             0,		               /* tp_traverse */
             0,		               /* tp_clear */
             0,		               /* tp_richcompare */
             0,		               /* tp_weaklistoffset */
             0,		               /* tp_iter */
             0,		               /* tp_iternext */
             v8___RetainedObjectInfo_methods,             /* tp_methods */
             v8___RetainedObjectInfo_members,             /* tp_members */
             0,                         /* tp_getset */
             0,                         /* tp_base */
             0,                         /* tp_dict */
             0,                         /* tp_descr_get */
             0,                         /* tp_descr_set */
             0,                         /* tp_dictoffset */
             (initproc)v8___RetainedObjectInfo_init,      /* tp_init */
             0,                         /* tp_alloc */
             v8___RetainedObjectInfo_new,                 /* tp_new */
         };

static void
v8___JitCodeEvent_dealloc(v8___JitCodeEvent* self);

static PyObject *
v8___JitCodeEvent_new(PyTypeObject *type, PyObject *args, PyObject *kwds);
static int
v8___JitCodeEvent_init(v8___JitCodeEvent *self, PyObject *args, PyObject *kwds);
           

static PyMethodDef v8___JitCodeEvent_methods[] = {
             {NULL}  /* Sentinel */
};

static PyMemberDef v8___JitCodeEvent_members[] =   {
        {"type", T_OBJECT_EX, offsetof(v8::JitCodeEvent,type), 0, ""},
            {"code_start", T_OBJECT_EX, offsetof(v8::JitCodeEvent,code_start), 0, ""},
            {"code_len", T_OBJECT_EX, offsetof(v8::JitCodeEvent,code_len), 0, ""},
            {"script", T_OBJECT_EX, offsetof(v8::JitCodeEvent,script), 0, ""},
            {"user_data", T_OBJECT_EX, offsetof(v8::JitCodeEvent,user_data), 0, ""},
            {NULL}
};
    

static PyTypeObject v8___JitCodeEventType = {
             PyObject_HEAD_INIT(NULL)
             0,                         /*ob_size*/
             "v8.JitCodeEvent",             /*tp_name*/
             sizeof(v8___JitCodeEvent), /*tp_basicsize*/
             0,                         /*tp_itemsize*/
             (destructor)v8___JitCodeEvent_dealloc,                         /*tp_dealloc*/
             0,                         /*tp_print*/
             0,                         /*tp_getattr*/
             0,                         /*tp_setattr*/
             0,                         /*tp_compare*/
             0,                         /*tp_repr*/
             0,                         /*tp_as_number*/
             0,                         /*tp_as_sequence*/
             0,                         /*tp_as_mapping*/
             0,                         /*tp_hash */
             0,                         /*tp_call*/
             0,                         /*tp_str*/
             0,                         /*tp_getattro*/
             0,                         /*tp_setattro*/
             0,                         /*tp_as_buffer*/
             Py_TPFLAGS_DEFAULT| Py_TPFLAGS_BASETYPE,        /*tp_flags*/
             "v8___JitCodeEvent objects",           /* tp_doc */
             0,		               /* tp_traverse */
             0,		               /* tp_clear */
             0,		               /* tp_richcompare */
             0,		               /* tp_weaklistoffset */
             0,		               /* tp_iter */
             0,		               /* tp_iternext */
             v8___JitCodeEvent_methods,             /* tp_methods */
             v8___JitCodeEvent_members,             /* tp_members */
             0,                         /* tp_getset */
             0,                         /* tp_base */
             0,                         /* tp_dict */
             0,                         /* tp_descr_get */
             0,                         /* tp_descr_set */
             0,                         /* tp_dictoffset */
             (initproc)v8___JitCodeEvent_init,      /* tp_init */
             0,                         /* tp_alloc */
             v8___JitCodeEvent_new,                 /* tp_new */
         };

static void
v8___ExternalResourceVisitor_dealloc(v8___ExternalResourceVisitor* self);

static PyObject *
v8___ExternalResourceVisitor_new(PyTypeObject *type, PyObject *args, PyObject *kwds);
static int
v8___ExternalResourceVisitor_init(v8___ExternalResourceVisitor *self, PyObject *args, PyObject *kwds);
           

static PyObject*
v8___ExternalResourceVisitor__VisitExternalString(PyObject *args, PyObject *kwds);
    
static PyMethodDef v8___ExternalResourceVisitor_methods[] = {
             
            {"VisitExternalString",  (PyCFunction)v8___ExternalResourceVisitor__VisitExternalString, METH_VARARGS| METH_KEYWORDS, ""},{NULL}  /* Sentinel */
};

static PyMemberDef v8___ExternalResourceVisitor_members[] =   {
        {NULL}
};
    

static PyTypeObject v8___ExternalResourceVisitorType = {
             PyObject_HEAD_INIT(NULL)
             0,                         /*ob_size*/
             "v8.ExternalResourceVisitor",             /*tp_name*/
             sizeof(v8___ExternalResourceVisitor), /*tp_basicsize*/
             0,                         /*tp_itemsize*/
             (destructor)v8___ExternalResourceVisitor_dealloc,                         /*tp_dealloc*/
             0,                         /*tp_print*/
             0,                         /*tp_getattr*/
             0,                         /*tp_setattr*/
             0,                         /*tp_compare*/
             0,                         /*tp_repr*/
             0,                         /*tp_as_number*/
             0,                         /*tp_as_sequence*/
             0,                         /*tp_as_mapping*/
             0,                         /*tp_hash */
             0,                         /*tp_call*/
             0,                         /*tp_str*/
             0,                         /*tp_getattro*/
             0,                         /*tp_setattro*/
             0,                         /*tp_as_buffer*/
             Py_TPFLAGS_DEFAULT| Py_TPFLAGS_BASETYPE,        /*tp_flags*/
             "v8___ExternalResourceVisitor objects",           /* tp_doc */
             0,		               /* tp_traverse */
             0,		               /* tp_clear */
             0,		               /* tp_richcompare */
             0,		               /* tp_weaklistoffset */
             0,		               /* tp_iter */
             0,		               /* tp_iternext */
             v8___ExternalResourceVisitor_methods,             /* tp_methods */
             v8___ExternalResourceVisitor_members,             /* tp_members */
             0,                         /* tp_getset */
             0,                         /* tp_base */
             0,                         /* tp_dict */
             0,                         /* tp_descr_get */
             0,                         /* tp_descr_set */
             0,                         /* tp_dictoffset */
             (initproc)v8___ExternalResourceVisitor_init,      /* tp_init */
             0,                         /* tp_alloc */
             v8___ExternalResourceVisitor_new,                 /* tp_new */
         };

static void
v8___PersistentHandleVisitor_dealloc(v8___PersistentHandleVisitor* self);

static PyObject *
v8___PersistentHandleVisitor_new(PyTypeObject *type, PyObject *args, PyObject *kwds);
static int
v8___PersistentHandleVisitor_init(v8___PersistentHandleVisitor *self, PyObject *args, PyObject *kwds);
           

static PyObject*
v8___PersistentHandleVisitor__VisitPersistentHandle(PyObject *args, PyObject *kwds);
    
static PyMethodDef v8___PersistentHandleVisitor_methods[] = {
             
            {"VisitPersistentHandle",  (PyCFunction)v8___PersistentHandleVisitor__VisitPersistentHandle, METH_VARARGS| METH_KEYWORDS, ""},{NULL}  /* Sentinel */
};

static PyMemberDef v8___PersistentHandleVisitor_members[] =   {
        {NULL}
};
    

static PyTypeObject v8___PersistentHandleVisitorType = {
             PyObject_HEAD_INIT(NULL)
             0,                         /*ob_size*/
             "v8.PersistentHandleVisitor",             /*tp_name*/
             sizeof(v8___PersistentHandleVisitor), /*tp_basicsize*/
             0,                         /*tp_itemsize*/
             (destructor)v8___PersistentHandleVisitor_dealloc,                         /*tp_dealloc*/
             0,                         /*tp_print*/
             0,                         /*tp_getattr*/
             0,                         /*tp_setattr*/
             0,                         /*tp_compare*/
             0,                         /*tp_repr*/
             0,                         /*tp_as_number*/
             0,                         /*tp_as_sequence*/
             0,                         /*tp_as_mapping*/
             0,                         /*tp_hash */
             0,                         /*tp_call*/
             0,                         /*tp_str*/
             0,                         /*tp_getattro*/
             0,                         /*tp_setattro*/
             0,                         /*tp_as_buffer*/
             Py_TPFLAGS_DEFAULT| Py_TPFLAGS_BASETYPE,        /*tp_flags*/
             "v8___PersistentHandleVisitor objects",           /* tp_doc */
             0,		               /* tp_traverse */
             0,		               /* tp_clear */
             0,		               /* tp_richcompare */
             0,		               /* tp_weaklistoffset */
             0,		               /* tp_iter */
             0,		               /* tp_iternext */
             v8___PersistentHandleVisitor_methods,             /* tp_methods */
             v8___PersistentHandleVisitor_members,             /* tp_members */
             0,                         /* tp_getset */
             0,                         /* tp_base */
             0,                         /* tp_dict */
             0,                         /* tp_descr_get */
             0,                         /* tp_descr_set */
             0,                         /* tp_dictoffset */
             (initproc)v8___PersistentHandleVisitor_init,      /* tp_init */
             0,                         /* tp_alloc */
             v8___PersistentHandleVisitor_new,                 /* tp_new */
         };

static void
v8___V8_dealloc(v8___V8* self);

static PyObject *
v8___V8_new(PyTypeObject *type, PyObject *args, PyObject *kwds);
static int
v8___V8_init(v8___V8 *self, PyObject *args, PyObject *kwds);
           

static PyObject*
v8___V8__SetFatalErrorHandler(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___V8__SetAllowCodeGenerationFromStringsCallback(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___V8__SetArrayBufferAllocator(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___V8__IsDead(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___V8__SetNativesDataBlob(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___V8__SetSnapshotDataBlob(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___V8__CreateSnapshotDataBlob(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___V8__AddMessageListener(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___V8__RemoveMessageListeners(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___V8__SetCaptureStackTraceForUncaughtExceptions(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___V8__SetFlagsFromString(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___V8__SetFlagsFromCommandLine(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___V8__GetVersion(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___V8__SetFailedAccessCheckCallbackFunction(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___V8__AddGCPrologueCallback(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___V8__RemoveGCPrologueCallback(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___V8__AddGCEpilogueCallback(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___V8__RemoveGCEpilogueCallback(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___V8__AddMemoryAllocationCallback(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___V8__RemoveMemoryAllocationCallback(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___V8__Initialize(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___V8__SetEntropySource(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___V8__SetReturnAddressLocationResolver(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___V8__TerminateExecution(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___V8__IsExecutionTerminating(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___V8__CancelTerminateExecution(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___V8__Dispose(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___V8__VisitExternalResources(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___V8__VisitHandlesWithClassIds(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___V8__VisitHandlesForPartialDependence(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___V8__InitializeICU(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___V8__InitializePlatform(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___V8__ShutdownPlatform(PyObject *args, PyObject *kwds);
    
static PyMethodDef v8___V8_methods[] = {
             
            {"SetFatalErrorHandler",  (PyCFunction)v8___V8__SetFatalErrorHandler,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},
            {"SetAllowCodeGenerationFromStringsCallback",  (PyCFunction)v8___V8__SetAllowCodeGenerationFromStringsCallback,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},
            {"SetArrayBufferAllocator",  (PyCFunction)v8___V8__SetArrayBufferAllocator,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},
            {"IsDead",  (PyCFunction)v8___V8__IsDead,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},
            {"SetNativesDataBlob",  (PyCFunction)v8___V8__SetNativesDataBlob,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},
            {"SetSnapshotDataBlob",  (PyCFunction)v8___V8__SetSnapshotDataBlob,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},
            {"CreateSnapshotDataBlob",  (PyCFunction)v8___V8__CreateSnapshotDataBlob,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},
            {"AddMessageListener",  (PyCFunction)v8___V8__AddMessageListener,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},
            {"RemoveMessageListeners",  (PyCFunction)v8___V8__RemoveMessageListeners,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},
            {"SetCaptureStackTraceForUncaughtExceptions",  (PyCFunction)v8___V8__SetCaptureStackTraceForUncaughtExceptions,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},
            {"SetFlagsFromString",  (PyCFunction)v8___V8__SetFlagsFromString,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},
            {"SetFlagsFromCommandLine",  (PyCFunction)v8___V8__SetFlagsFromCommandLine,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},
            {"GetVersion",  (PyCFunction)v8___V8__GetVersion,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},
            {"SetFailedAccessCheckCallbackFunction",  (PyCFunction)v8___V8__SetFailedAccessCheckCallbackFunction,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},
            {"AddGCPrologueCallback",  (PyCFunction)v8___V8__AddGCPrologueCallback,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},
            {"RemoveGCPrologueCallback",  (PyCFunction)v8___V8__RemoveGCPrologueCallback,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},
            {"AddGCEpilogueCallback",  (PyCFunction)v8___V8__AddGCEpilogueCallback,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},
            {"RemoveGCEpilogueCallback",  (PyCFunction)v8___V8__RemoveGCEpilogueCallback,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},
            {"AddMemoryAllocationCallback",  (PyCFunction)v8___V8__AddMemoryAllocationCallback,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},
            {"RemoveMemoryAllocationCallback",  (PyCFunction)v8___V8__RemoveMemoryAllocationCallback,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},
            {"Initialize",  (PyCFunction)v8___V8__Initialize,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},
            {"SetEntropySource",  (PyCFunction)v8___V8__SetEntropySource,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},
            {"SetReturnAddressLocationResolver",  (PyCFunction)v8___V8__SetReturnAddressLocationResolver,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},
            {"TerminateExecution",  (PyCFunction)v8___V8__TerminateExecution,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},
            {"IsExecutionTerminating",  (PyCFunction)v8___V8__IsExecutionTerminating,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},
            {"CancelTerminateExecution",  (PyCFunction)v8___V8__CancelTerminateExecution,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},
            {"Dispose",  (PyCFunction)v8___V8__Dispose,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},
            {"VisitExternalResources",  (PyCFunction)v8___V8__VisitExternalResources,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},
            {"VisitHandlesWithClassIds",  (PyCFunction)v8___V8__VisitHandlesWithClassIds,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},
            {"VisitHandlesWithClassIds",  (PyCFunction)v8___V8__VisitHandlesWithClassIds,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},
            {"VisitHandlesForPartialDependence",  (PyCFunction)v8___V8__VisitHandlesForPartialDependence,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},
            {"InitializeICU",  (PyCFunction)v8___V8__InitializeICU,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},
            {"InitializePlatform",  (PyCFunction)v8___V8__InitializePlatform,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},
            {"ShutdownPlatform",  (PyCFunction)v8___V8__ShutdownPlatform,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},{NULL}  /* Sentinel */
};

static PyMemberDef v8___V8_members[] =   {
        {NULL}
};
    

static PyTypeObject v8___V8Type = {
             PyObject_HEAD_INIT(NULL)
             0,                         /*ob_size*/
             "v8.V8",             /*tp_name*/
             sizeof(v8___V8), /*tp_basicsize*/
             0,                         /*tp_itemsize*/
             (destructor)v8___V8_dealloc,                         /*tp_dealloc*/
             0,                         /*tp_print*/
             0,                         /*tp_getattr*/
             0,                         /*tp_setattr*/
             0,                         /*tp_compare*/
             0,                         /*tp_repr*/
             0,                         /*tp_as_number*/
             0,                         /*tp_as_sequence*/
             0,                         /*tp_as_mapping*/
             0,                         /*tp_hash */
             0,                         /*tp_call*/
             0,                         /*tp_str*/
             0,                         /*tp_getattro*/
             0,                         /*tp_setattro*/
             0,                         /*tp_as_buffer*/
             Py_TPFLAGS_DEFAULT| Py_TPFLAGS_BASETYPE,        /*tp_flags*/
             "v8___V8 objects",           /* tp_doc */
             0,		               /* tp_traverse */
             0,		               /* tp_clear */
             0,		               /* tp_richcompare */
             0,		               /* tp_weaklistoffset */
             0,		               /* tp_iter */
             0,		               /* tp_iternext */
             v8___V8_methods,             /* tp_methods */
             v8___V8_members,             /* tp_members */
             0,                         /* tp_getset */
             0,                         /* tp_base */
             0,                         /* tp_dict */
             0,                         /* tp_descr_get */
             0,                         /* tp_descr_set */
             0,                         /* tp_dictoffset */
             (initproc)v8___V8_init,      /* tp_init */
             0,                         /* tp_alloc */
             v8___V8_new,                 /* tp_new */
         };

static void
v8___TryCatch_dealloc(v8___TryCatch* self);

static PyObject *
v8___TryCatch_new(PyTypeObject *type, PyObject *args, PyObject *kwds);
static int
v8___TryCatch_init(v8___TryCatch *self, PyObject *args, PyObject *kwds);
           

static PyObject*
v8___TryCatch__HasCaught(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___TryCatch__CanContinue(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___TryCatch__HasTerminated(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___TryCatch__ReThrow(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___TryCatch__Exception(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___TryCatch__StackTrace(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___TryCatch__Message(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___TryCatch__Reset(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___TryCatch__SetVerbose(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___TryCatch__SetCaptureMessage(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___TryCatch__JSStackComparableAddress(PyObject *args, PyObject *kwds);
    
static PyMethodDef v8___TryCatch_methods[] = {
             
            {"HasCaught",  (PyCFunction)v8___TryCatch__HasCaught, METH_VARARGS| METH_KEYWORDS, ""},
            {"CanContinue",  (PyCFunction)v8___TryCatch__CanContinue, METH_VARARGS| METH_KEYWORDS, ""},
            {"HasTerminated",  (PyCFunction)v8___TryCatch__HasTerminated, METH_VARARGS| METH_KEYWORDS, ""},
            {"ReThrow",  (PyCFunction)v8___TryCatch__ReThrow, METH_VARARGS| METH_KEYWORDS, ""},
            {"Exception",  (PyCFunction)v8___TryCatch__Exception, METH_VARARGS| METH_KEYWORDS, ""},
            {"StackTrace",  (PyCFunction)v8___TryCatch__StackTrace, METH_VARARGS| METH_KEYWORDS, ""},
            {"StackTrace",  (PyCFunction)v8___TryCatch__StackTrace, METH_VARARGS| METH_KEYWORDS, ""},
            {"Message",  (PyCFunction)v8___TryCatch__Message, METH_VARARGS| METH_KEYWORDS, ""},
            {"Reset",  (PyCFunction)v8___TryCatch__Reset, METH_VARARGS| METH_KEYWORDS, ""},
            {"SetVerbose",  (PyCFunction)v8___TryCatch__SetVerbose, METH_VARARGS| METH_KEYWORDS, ""},
            {"SetCaptureMessage",  (PyCFunction)v8___TryCatch__SetCaptureMessage, METH_VARARGS| METH_KEYWORDS, ""},
            {"JSStackComparableAddress",  (PyCFunction)v8___TryCatch__JSStackComparableAddress,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},{NULL}  /* Sentinel */
};

static PyMemberDef v8___TryCatch_members[] =   {
        {NULL}
};
    

static PyTypeObject v8___TryCatchType = {
             PyObject_HEAD_INIT(NULL)
             0,                         /*ob_size*/
             "v8.TryCatch",             /*tp_name*/
             sizeof(v8___TryCatch), /*tp_basicsize*/
             0,                         /*tp_itemsize*/
             (destructor)v8___TryCatch_dealloc,                         /*tp_dealloc*/
             0,                         /*tp_print*/
             0,                         /*tp_getattr*/
             0,                         /*tp_setattr*/
             0,                         /*tp_compare*/
             0,                         /*tp_repr*/
             0,                         /*tp_as_number*/
             0,                         /*tp_as_sequence*/
             0,                         /*tp_as_mapping*/
             0,                         /*tp_hash */
             0,                         /*tp_call*/
             0,                         /*tp_str*/
             0,                         /*tp_getattro*/
             0,                         /*tp_setattro*/
             0,                         /*tp_as_buffer*/
             Py_TPFLAGS_DEFAULT| Py_TPFLAGS_BASETYPE,        /*tp_flags*/
             "v8___TryCatch objects",           /* tp_doc */
             0,		               /* tp_traverse */
             0,		               /* tp_clear */
             0,		               /* tp_richcompare */
             0,		               /* tp_weaklistoffset */
             0,		               /* tp_iter */
             0,		               /* tp_iternext */
             v8___TryCatch_methods,             /* tp_methods */
             v8___TryCatch_members,             /* tp_members */
             0,                         /* tp_getset */
             0,                         /* tp_base */
             0,                         /* tp_dict */
             0,                         /* tp_descr_get */
             0,                         /* tp_descr_set */
             0,                         /* tp_dictoffset */
             (initproc)v8___TryCatch_init,      /* tp_init */
             0,                         /* tp_alloc */
             v8___TryCatch_new,                 /* tp_new */
         };

static void
v8___ExtensionConfiguration_dealloc(v8___ExtensionConfiguration* self);

static PyObject *
v8___ExtensionConfiguration_new(PyTypeObject *type, PyObject *args, PyObject *kwds);
static int
v8___ExtensionConfiguration_init(v8___ExtensionConfiguration *self, PyObject *args, PyObject *kwds);
           

static PyObject*
v8___ExtensionConfiguration__begin(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___ExtensionConfiguration__end(PyObject *args, PyObject *kwds);
    
static PyMethodDef v8___ExtensionConfiguration_methods[] = {
             
            {"begin",  (PyCFunction)v8___ExtensionConfiguration__begin, METH_VARARGS| METH_KEYWORDS, ""},
            {"end",  (PyCFunction)v8___ExtensionConfiguration__end, METH_VARARGS| METH_KEYWORDS, ""},{NULL}  /* Sentinel */
};

static PyMemberDef v8___ExtensionConfiguration_members[] =   {
        {NULL}
};
    

static PyTypeObject v8___ExtensionConfigurationType = {
             PyObject_HEAD_INIT(NULL)
             0,                         /*ob_size*/
             "v8.ExtensionConfiguration",             /*tp_name*/
             sizeof(v8___ExtensionConfiguration), /*tp_basicsize*/
             0,                         /*tp_itemsize*/
             (destructor)v8___ExtensionConfiguration_dealloc,                         /*tp_dealloc*/
             0,                         /*tp_print*/
             0,                         /*tp_getattr*/
             0,                         /*tp_setattr*/
             0,                         /*tp_compare*/
             0,                         /*tp_repr*/
             0,                         /*tp_as_number*/
             0,                         /*tp_as_sequence*/
             0,                         /*tp_as_mapping*/
             0,                         /*tp_hash */
             0,                         /*tp_call*/
             0,                         /*tp_str*/
             0,                         /*tp_getattro*/
             0,                         /*tp_setattro*/
             0,                         /*tp_as_buffer*/
             Py_TPFLAGS_DEFAULT| Py_TPFLAGS_BASETYPE,        /*tp_flags*/
             "v8___ExtensionConfiguration objects",           /* tp_doc */
             0,		               /* tp_traverse */
             0,		               /* tp_clear */
             0,		               /* tp_richcompare */
             0,		               /* tp_weaklistoffset */
             0,		               /* tp_iter */
             0,		               /* tp_iternext */
             v8___ExtensionConfiguration_methods,             /* tp_methods */
             v8___ExtensionConfiguration_members,             /* tp_members */
             0,                         /* tp_getset */
             0,                         /* tp_base */
             0,                         /* tp_dict */
             0,                         /* tp_descr_get */
             0,                         /* tp_descr_set */
             0,                         /* tp_dictoffset */
             (initproc)v8___ExtensionConfiguration_init,      /* tp_init */
             0,                         /* tp_alloc */
             v8___ExtensionConfiguration_new,                 /* tp_new */
         };

static void
v8___Unlocker_dealloc(v8___Unlocker* self);

static PyObject *
v8___Unlocker_new(PyTypeObject *type, PyObject *args, PyObject *kwds);
static int
v8___Unlocker_init(v8___Unlocker *self, PyObject *args, PyObject *kwds);
           

static PyMethodDef v8___Unlocker_methods[] = {
             {NULL}  /* Sentinel */
};

static PyMemberDef v8___Unlocker_members[] =   {
        {NULL}
};
    

static PyTypeObject v8___UnlockerType = {
             PyObject_HEAD_INIT(NULL)
             0,                         /*ob_size*/
             "v8.Unlocker",             /*tp_name*/
             sizeof(v8___Unlocker), /*tp_basicsize*/
             0,                         /*tp_itemsize*/
             (destructor)v8___Unlocker_dealloc,                         /*tp_dealloc*/
             0,                         /*tp_print*/
             0,                         /*tp_getattr*/
             0,                         /*tp_setattr*/
             0,                         /*tp_compare*/
             0,                         /*tp_repr*/
             0,                         /*tp_as_number*/
             0,                         /*tp_as_sequence*/
             0,                         /*tp_as_mapping*/
             0,                         /*tp_hash */
             0,                         /*tp_call*/
             0,                         /*tp_str*/
             0,                         /*tp_getattro*/
             0,                         /*tp_setattro*/
             0,                         /*tp_as_buffer*/
             Py_TPFLAGS_DEFAULT| Py_TPFLAGS_BASETYPE,        /*tp_flags*/
             "v8___Unlocker objects",           /* tp_doc */
             0,		               /* tp_traverse */
             0,		               /* tp_clear */
             0,		               /* tp_richcompare */
             0,		               /* tp_weaklistoffset */
             0,		               /* tp_iter */
             0,		               /* tp_iternext */
             v8___Unlocker_methods,             /* tp_methods */
             v8___Unlocker_members,             /* tp_members */
             0,                         /* tp_getset */
             0,                         /* tp_base */
             0,                         /* tp_dict */
             0,                         /* tp_descr_get */
             0,                         /* tp_descr_set */
             0,                         /* tp_dictoffset */
             (initproc)v8___Unlocker_init,      /* tp_init */
             0,                         /* tp_alloc */
             v8___Unlocker_new,                 /* tp_new */
         };

static void
v8___Locker_dealloc(v8___Locker* self);

static PyObject *
v8___Locker_new(PyTypeObject *type, PyObject *args, PyObject *kwds);
static int
v8___Locker_init(v8___Locker *self, PyObject *args, PyObject *kwds);
           

static PyObject*
v8___Locker__IsLocked(PyObject *args, PyObject *kwds);
    
static PyObject*
v8___Locker__IsActive(PyObject *args, PyObject *kwds);
    
static PyMethodDef v8___Locker_methods[] = {
             
            {"IsLocked",  (PyCFunction)v8___Locker__IsLocked,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},
            {"IsActive",  (PyCFunction)v8___Locker__IsActive,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},{NULL}  /* Sentinel */
};

static PyMemberDef v8___Locker_members[] =   {
        {NULL}
};
    

static PyTypeObject v8___LockerType = {
             PyObject_HEAD_INIT(NULL)
             0,                         /*ob_size*/
             "v8.Locker",             /*tp_name*/
             sizeof(v8___Locker), /*tp_basicsize*/
             0,                         /*tp_itemsize*/
             (destructor)v8___Locker_dealloc,                         /*tp_dealloc*/
             0,                         /*tp_print*/
             0,                         /*tp_getattr*/
             0,                         /*tp_setattr*/
             0,                         /*tp_compare*/
             0,                         /*tp_repr*/
             0,                         /*tp_as_number*/
             0,                         /*tp_as_sequence*/
             0,                         /*tp_as_mapping*/
             0,                         /*tp_hash */
             0,                         /*tp_call*/
             0,                         /*tp_str*/
             0,                         /*tp_getattro*/
             0,                         /*tp_setattro*/
             0,                         /*tp_as_buffer*/
             Py_TPFLAGS_DEFAULT| Py_TPFLAGS_BASETYPE,        /*tp_flags*/
             "v8___Locker objects",           /* tp_doc */
             0,		               /* tp_traverse */
             0,		               /* tp_clear */
             0,		               /* tp_richcompare */
             0,		               /* tp_weaklistoffset */
             0,		               /* tp_iter */
             0,		               /* tp_iternext */
             v8___Locker_methods,             /* tp_methods */
             v8___Locker_members,             /* tp_members */
             0,                         /* tp_getset */
             0,                         /* tp_base */
             0,                         /* tp_dict */
             0,                         /* tp_descr_get */
             0,                         /* tp_descr_set */
             0,                         /* tp_dictoffset */
             (initproc)v8___Locker_init,      /* tp_init */
             0,                         /* tp_alloc */
             v8___Locker_new,                 /* tp_new */
         };


#ifndef PyMODINIT_FUNC	/* declarations for DLL import/export */
#define PyMODINIT_FUNC void
#endif


static PyMethodDef v8___methods[] = {
             
                 {"RegisterExtension",  (PyCFunction)v8___RegisterExtension, METH_VARARGS| METH_KEYWORDS, ""},
             
                 {"Undefined",  (PyCFunction)v8___Undefined, METH_VARARGS| METH_KEYWORDS, ""},
             
                 {"Null",  (PyCFunction)v8___Null, METH_VARARGS| METH_KEYWORDS, ""},
             
                 {"True",  (PyCFunction)v8___True, METH_VARARGS| METH_KEYWORDS, ""},
             
                 {"False",  (PyCFunction)v8___False, METH_VARARGS| METH_KEYWORDS, ""},
             {NULL}  /* Sentinel */
};


static void
v8___AccessorSignature_dealloc(v8___AccessorSignature* self)
{
    if(!self) return;
    if (!self->_is_c_reference){
        delete self->_Cobject;
    }
    self->_Cobject = NULL;
    self->_owner = NULL;
    self->_is_c_reference = false;
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject *
v8___AccessorSignature_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
    v8___AccessorSignature *self;

    self = (v8___AccessorSignature *)type->tp_alloc(type, 0);
    if (self != NULL) {
        self->_Cobject = NULL;
        self->_owner = NULL;
    }

    return (PyObject *)self;
}       

static int
v8___AccessorSignature_init(v8___AccessorSignature *self, PyObject *args, PyObject *kwds)
{
    int status = -1;
    if(!self) return status;
    self->_owner = (PyObject*)self;
    
    {
        PyObject * tmp = NULL;
        (void)tmp;
         
        static char *kwlist[] = { "Anon_1", NULL};
        
        PyObject* Anon_1 = NULL;
        
            
        if ( 0 != status ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &Anon_1);
            if ( 0 == status  && Anon_1){
                
                
                if(status == 0){
                    
                   v8::AccessorSignature const& Anon_1_C = *((v8___AccessorSignature*)Anon_1)->_Cobject;
    
                    self->_Cobject = new v8::AccessorSignature(Anon_1_C);
                    
                        
                }
            }
        }
    }
    if (status != 0){
       self->_Cobject = NULL;
       status = 0;
    }
    return status;
}


static PyObject*
v8___AccessorSignature__New(PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* isolate = NULL;
            PyObject* receiver = NULL;
        
        static char *kwlist[] = { "isolate""receiver", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OO", kwlist, &isolate,&receiver);
            if ( 0 == status  && isolate && receiver){
                    
                    
                if (!checkType(&v8___IsolateType, isolate )){ status = -1;}
    
                if (!checkType(&v8___Local_v8__FunctionTemplate_Type, receiver )){ status = -1;}
    
                        
                   v8::Isolate * isolate_C = ((v8___Isolate*)isolate)->_Cobject;
    
                   v8::Local<v8::FunctionTemplate>& receiver_C = *((v8___Local_v8__FunctionTemplate_*)receiver)->_Cobject;
    
                        if( 0 == status ){
                       v8::Local<v8::AccessorSignature> result = v8::AccessorSignature::New(isolate_C, receiver_C);
                       result_py = 
                        PyObject_CallObject((PyObject *) & v8___Local_v8__AccessorSignature_Type, NULL);
                        if(result_py){
                            delete ((v8___Local_v8__AccessorSignature_*) result_py)->_Cobject ;
                            ((v8___Local_v8__AccessorSignature_*) result_py)->_Cobject = new v8::Local<v8::AccessorSignature>(result);
                        };
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        

static void
v8___Array_dealloc(v8___Array* self)
{
    if(!self) return;
    if (!self->_is_c_reference){
        delete self->_Cobject;
    }
    self->_Cobject = NULL;
    self->_owner = NULL;
    self->_is_c_reference = false;
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject *
v8___Array_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
    v8___Array *self;

    self = (v8___Array *)type->tp_alloc(type, 0);
    if (self != NULL) {
        self->_Cobject = NULL;
        self->_owner = NULL;
    }

    return (PyObject *)self;
}       

static int
v8___Array_init(v8___Array *self, PyObject *args, PyObject *kwds)
{
    int status = -1;
    if(!self) return status;
    self->_owner = (PyObject*)self;
    
    {
        PyObject * tmp = NULL;
        (void)tmp;
         
        static char *kwlist[] = { "Anon_1", NULL};
        
        PyObject* Anon_1 = NULL;
        
            
        if ( 0 != status ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &Anon_1);
            if ( 0 == status  && Anon_1){
                
                
                if(status == 0){
                    
                   v8::Array const& Anon_1_C = *((v8___Array*)Anon_1)->_Cobject;
    
                    self->_Cobject = new v8::Array(Anon_1_C);
                    
                        
                }
            }
        }
    }
    if (status != 0){
       self->_Cobject = NULL;
       status = 0;
    }
    return status;
}


static PyObject*
v8___Array__Length(v8___Array* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->Length();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Array__CloneElementAt(v8___Array* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* index = NULL;
        
        static char *kwlist[] = { "index", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &index);
            if ( 0 == status ){
                    
                    
                if(!PyInt_Check(index)){ status = -1;}
            
                        
                    unsigned intindex_C = PyInt_Check(index)? PyInt_AsLong(index):PyLong_AsLong(index);     
                
                        if( 0 == status ){
                        self->_Cobject->CloneElementAt(index_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    {
        
            PyObject* context = NULL;
            PyObject* index = NULL;
        
        static char *kwlist[] = { "context""index", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &context,&index);
            if ( 0 == status  && context){
                    
                    
                if (!checkType(&v8___Local_v8__Context_Type, context )){ status = -1;}
    
                if(!PyInt_Check(index)){ status = -1;}
            
                        
                   v8::Local<v8::Context>& context_C = *((v8___Local_v8__Context_*)context)->_Cobject;
    
                    unsigned intindex_C = PyInt_Check(index)? PyInt_AsLong(index):PyLong_AsLong(index);     
                
                        if( 0 == status ){
                        self->_Cobject->CloneElementAt(context_C, index_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Array__New(PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* isolate = NULL;
            PyObject* length = NULL;
        
        static char *kwlist[] = { "isolate""length", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OO", kwlist, &isolate,&length);
            if ( 0 == status  && isolate){
                    
                    
                if (!checkType(&v8___IsolateType, isolate )){ status = -1;}
    
                if(!PyInt_Check(length)){ status = -1;}
            
                        
                   v8::Isolate * isolate_C = ((v8___Isolate*)isolate)->_Cobject;
    
                    intlength_C = PyInt_Check(length)? PyInt_AsLong(length):PyLong_AsLong(length);     
                
                        if( 0 == status ){
                       v8::Local<v8::Array> result = v8::Array::New(isolate_C, length_C);
                       result_py = 
                        PyObject_CallObject((PyObject *) & v8___Local_v8__Array_Type, NULL);
                        if(result_py){
                            delete ((v8___Local_v8__Array_*) result_py)->_Cobject ;
                            ((v8___Local_v8__Array_*) result_py)->_Cobject = new v8::Local<v8::Array>(result);
                        };
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Array__Cast(PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* obj = NULL;
        
        static char *kwlist[] = { "obj", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &obj);
            if ( 0 == status  && obj){
                    
                    
                if (!checkType(&v8___ValueType, obj )){ status = -1;}
    
                        
                   v8::Value * obj_C = ((v8___Value*)obj)->_Cobject;
    
                        if( 0 == status ){
                       v8::Array * result = v8::Array::Cast(obj_C);
                       result_py = 
                       PyObject_CallObject((PyObject *) & v8___ArrayType, NULL);
                       if(result_py){
                           delete ((v8___Array*) result_py)->_Cobject ;
                           ((v8___Array*) result_py)->_Cobject = result;
                       };
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        

static void
v8___Boolean_dealloc(v8___Boolean* self)
{
    if(!self) return;
    if (!self->_is_c_reference){
        delete self->_Cobject;
    }
    self->_Cobject = NULL;
    self->_owner = NULL;
    self->_is_c_reference = false;
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject *
v8___Boolean_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
    v8___Boolean *self;

    self = (v8___Boolean *)type->tp_alloc(type, 0);
    if (self != NULL) {
        self->_Cobject = NULL;
        self->_owner = NULL;
    }

    return (PyObject *)self;
}       

static int
v8___Boolean_init(v8___Boolean *self, PyObject *args, PyObject *kwds)
{
    int status = -1;
    if(!self) return status;
    self->_owner = (PyObject*)self;
    
    {
        PyObject * tmp = NULL;
        (void)tmp;
         
        static char *kwlist[] = { "Anon_1", NULL};
        
        PyObject* Anon_1 = NULL;
        
            
        if ( 0 != status ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &Anon_1);
            if ( 0 == status  && Anon_1){
                
                
                if(status == 0){
                    
                   v8::Boolean const& Anon_1_C = *((v8___Boolean*)Anon_1)->_Cobject;
    
                    self->_Cobject = new v8::Boolean(Anon_1_C);
                    
                        
                }
            }
        }
    }
    if (status != 0){
       self->_Cobject = NULL;
       status = 0;
    }
    return status;
}


static PyObject*
v8___Boolean__Value(v8___Boolean* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->Value();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Boolean__Cast(PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* obj = NULL;
        
        static char *kwlist[] = { "obj", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &obj);
            if ( 0 == status  && obj){
                    
                    
                if (!checkType(&v8___ValueType, obj )){ status = -1;}
    
                        
                   v8::Value * obj_C = ((v8___Value*)obj)->_Cobject;
    
                        if( 0 == status ){
                       v8::Boolean * result = v8::Boolean::Cast(obj_C);
                       result_py = 
                       PyObject_CallObject((PyObject *) & v8___BooleanType, NULL);
                       if(result_py){
                           delete ((v8___Boolean*) result_py)->_Cobject ;
                           ((v8___Boolean*) result_py)->_Cobject = result;
                       };
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Boolean__New(PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* isolate = NULL;
            PyObject* value = NULL;
        
        static char *kwlist[] = { "isolate""value", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OO", kwlist, &isolate,&value);
            if ( 0 == status  && isolate){
                    
                    
                if (!checkType(&v8___IsolateType, isolate )){ status = -1;}
    
                if(!PyBool_Check(value)){ status = -1;}
            
                        
                   v8::Isolate * isolate_C = ((v8___Isolate*)isolate)->_Cobject;
    
                    
                bool  value_C = (PyInt_Check(value)? PyInt_AsLong(value):PyLongAsLong(value))!=0     
                
                        if( 0 == status ){
                       v8::Local<v8::Boolean> result = v8::Boolean::New(isolate_C, value_C);
                       result_py = 
                        PyObject_CallObject((PyObject *) & v8___Local_v8__Boolean_Type, NULL);
                        if(result_py){
                            delete ((v8___Local_v8__Boolean_*) result_py)->_Cobject ;
                            ((v8___Local_v8__Boolean_*) result_py)->_Cobject = new v8::Local<v8::Boolean>(result);
                        };
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        

static void
v8___BooleanObject_dealloc(v8___BooleanObject* self)
{
    if(!self) return;
    if (!self->_is_c_reference){
        delete self->_Cobject;
    }
    self->_Cobject = NULL;
    self->_owner = NULL;
    self->_is_c_reference = false;
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject *
v8___BooleanObject_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
    v8___BooleanObject *self;

    self = (v8___BooleanObject *)type->tp_alloc(type, 0);
    if (self != NULL) {
        self->_Cobject = NULL;
        self->_owner = NULL;
    }

    return (PyObject *)self;
}       

static int
v8___BooleanObject_init(v8___BooleanObject *self, PyObject *args, PyObject *kwds)
{
    int status = -1;
    if(!self) return status;
    self->_owner = (PyObject*)self;
    
    {
        PyObject * tmp = NULL;
        (void)tmp;
         
        static char *kwlist[] = { "Anon_1", NULL};
        
        PyObject* Anon_1 = NULL;
        
            
        if ( 0 != status ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &Anon_1);
            if ( 0 == status  && Anon_1){
                
                
                if(status == 0){
                    
                   v8::BooleanObject const& Anon_1_C = *((v8___BooleanObject*)Anon_1)->_Cobject;
    
                    self->_Cobject = new v8::BooleanObject(Anon_1_C);
                    
                        
                }
            }
        }
    }
    if (status != 0){
       self->_Cobject = NULL;
       status = 0;
    }
    return status;
}


static PyObject*
v8___BooleanObject__New(PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* value = NULL;
        
        static char *kwlist[] = { "value", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &value);
            if ( 0 == status ){
                    
                    
                if(!PyBool_Check(value)){ status = -1;}
            
                        
                    
                bool  value_C = (PyInt_Check(value)? PyInt_AsLong(value):PyLongAsLong(value))!=0     
                
                        if( 0 == status ){
                       v8::Local<v8::Value> result = v8::BooleanObject::New(value_C);
                       result_py = 
                        PyObject_CallObject((PyObject *) & v8___Local_v8__Value_Type, NULL);
                        if(result_py){
                            delete ((v8___Local_v8__Value_*) result_py)->_Cobject ;
                            ((v8___Local_v8__Value_*) result_py)->_Cobject = new v8::Local<v8::Value>(result);
                        };
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___BooleanObject__ValueOf(v8___BooleanObject* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->ValueOf();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___BooleanObject__Cast(PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* obj = NULL;
        
        static char *kwlist[] = { "obj", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &obj);
            if ( 0 == status  && obj){
                    
                    
                if (!checkType(&v8___ValueType, obj )){ status = -1;}
    
                        
                   v8::Value * obj_C = ((v8___Value*)obj)->_Cobject;
    
                        if( 0 == status ){
                       v8::BooleanObject * result = v8::BooleanObject::Cast(obj_C);
                       result_py = 
                       PyObject_CallObject((PyObject *) & v8___BooleanObjectType, NULL);
                       if(result_py){
                           delete ((v8___BooleanObject*) result_py)->_Cobject ;
                           ((v8___BooleanObject*) result_py)->_Cobject = result;
                       };
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        

static void
v8___Context_dealloc(v8___Context* self)
{
    if(!self) return;
    if (!self->_is_c_reference){
        delete self->_Cobject;
    }
    self->_Cobject = NULL;
    self->_owner = NULL;
    self->_is_c_reference = false;
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject *
v8___Context_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
    v8___Context *self;

    self = (v8___Context *)type->tp_alloc(type, 0);
    if (self != NULL) {
        self->_Cobject = NULL;
        self->_owner = NULL;
    }

    return (PyObject *)self;
}       

static int
v8___Context_init(v8___Context *self, PyObject *args, PyObject *kwds)
{
    int status = -1;
    if(!self) return status;
    self->_owner = (PyObject*)self;
    
    {
        PyObject * tmp = NULL;
        (void)tmp;
         
        static char *kwlist[] = {  NULL};
        
            
        if ( 0 != status ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist, );
            if ( 0 == status ){
                
                
                if(status == 0){
                    
                    self->_Cobject = new v8::Context();
                    
                        
                }
            }
        }
    }
    {
        PyObject * tmp = NULL;
        (void)tmp;
         
        static char *kwlist[] = { "Anon_1", NULL};
        
        PyObject* Anon_1 = NULL;
        
            
        if ( 0 != status ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &Anon_1);
            if ( 0 == status  && Anon_1){
                
                
                if(status == 0){
                    
                   v8::Context const& Anon_1_C = *((v8___Context*)Anon_1)->_Cobject;
    
                    self->_Cobject = new v8::Context(Anon_1_C);
                    
                        
                }
            }
        }
    }
    if (status != 0){
       self->_Cobject = NULL;
       status = 0;
    }
    return status;
}


static PyObject*
v8___Context__Global(v8___Context* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->Global();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Context__DetachGlobal(v8___Context* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->DetachGlobal();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Context__New(PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* isolate = NULL;
            PyObject* extensions = NULL;
            PyObject* global_template = NULL;
            PyObject* global_object = NULL;
        
        static char *kwlist[] = { "isolate""extensions""global_template""global_object", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OOOO", kwlist, &isolate,&extensions,&global_template,&global_object);
            if ( 0 == status  && isolate && extensions && global_template && global_object){
                    
                    
                if (!checkType(&v8___IsolateType, isolate )){ status = -1;}
    
                if (!checkType(&v8___ExtensionConfigurationType, extensions )){ status = -1;}
    
                if (!checkType(&v8___Local_v8__ObjectTemplate_Type, global_template )){ status = -1;}
    
                if (!checkType(&v8___Local_v8__Value_Type, global_object )){ status = -1;}
    
                        
                   v8::Isolate * isolate_C = ((v8___Isolate*)isolate)->_Cobject;
    
                   v8::ExtensionConfiguration * extensions_C = ((v8___ExtensionConfiguration*)extensions)->_Cobject;
    
                   v8::Local<v8::ObjectTemplate>& global_template_C = *((v8___Local_v8__ObjectTemplate_*)global_template)->_Cobject;
    
                   v8::Local<v8::Value>& global_object_C = *((v8___Local_v8__Value_*)global_object)->_Cobject;
    
                        if( 0 == status ){
                       v8::Local<v8::Context> result = v8::Context::New(isolate_C, extensions_C, global_template_C, global_object_C);
                       result_py = 
                        PyObject_CallObject((PyObject *) & v8___Local_v8__Context_Type, NULL);
                        if(result_py){
                            delete ((v8___Local_v8__Context_*) result_py)->_Cobject ;
                            ((v8___Local_v8__Context_*) result_py)->_Cobject = new v8::Local<v8::Context>(result);
                        };
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Context__SetSecurityToken(v8___Context* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* token = NULL;
        
        static char *kwlist[] = { "token", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &token);
            if ( 0 == status  && token){
                    
                    
                if (!checkType(&v8___Local_v8__Value_Type, token )){ status = -1;}
    
                        
                   v8::Local<v8::Value>& token_C = *((v8___Local_v8__Value_*)token)->_Cobject;
    
                        if( 0 == status ){
                        self->_Cobject->SetSecurityToken(token_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Context__UseDefaultSecurityToken(v8___Context* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->UseDefaultSecurityToken();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Context__GetSecurityToken(v8___Context* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->GetSecurityToken();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Context__Enter(v8___Context* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->Enter();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Context__Exit(v8___Context* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->Exit();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Context__GetIsolate(v8___Context* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->GetIsolate();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Context__GetEmbedderData(v8___Context* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* index = NULL;
        
        static char *kwlist[] = { "index", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &index);
            if ( 0 == status ){
                    
                    
                if(!PyInt_Check(index)){ status = -1;}
            
                        
                    intindex_C = PyInt_Check(index)? PyInt_AsLong(index):PyLong_AsLong(index);     
                
                        if( 0 == status ){
                        self->_Cobject->GetEmbedderData(index_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Context__GetExtrasExportsObject(v8___Context* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->GetExtrasExportsObject();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Context__SetEmbedderData(v8___Context* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* index = NULL;
            PyObject* value = NULL;
        
        static char *kwlist[] = { "index""value", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OO", kwlist, &index,&value);
            if ( 0 == status  && value){
                    
                    
                if(!PyInt_Check(index)){ status = -1;}
            
                if (!checkType(&v8___Local_v8__Value_Type, value )){ status = -1;}
    
                        
                    intindex_C = PyInt_Check(index)? PyInt_AsLong(index):PyLong_AsLong(index);     
                
                   v8::Local<v8::Value>& value_C = *((v8___Local_v8__Value_*)value)->_Cobject;
    
                        if( 0 == status ){
                        self->_Cobject->SetEmbedderData(index_C, value_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Context__GetAlignedPointerFromEmbedderData(v8___Context* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* index = NULL;
        
        static char *kwlist[] = { "index", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &index);
            if ( 0 == status ){
                    
                    
                if(!PyInt_Check(index)){ status = -1;}
            
                        
                    intindex_C = PyInt_Check(index)? PyInt_AsLong(index):PyLong_AsLong(index);     
                
                        if( 0 == status ){
                        self->_Cobject->GetAlignedPointerFromEmbedderData(index_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Context__SetAlignedPointerInEmbedderData(v8___Context* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* index = NULL;
            PyObject* value = NULL;
        
        static char *kwlist[] = { "index""value", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OO", kwlist, &index,&value);
            if ( 0 == status  && value){
                    
                    
                if(!PyInt_Check(index)){ status = -1;}
            
                        
                    intindex_C = PyInt_Check(index)? PyInt_AsLong(index):PyLong_AsLong(index);     
                
                         
                
                        if( 0 == status ){
                        self->_Cobject->SetAlignedPointerInEmbedderData(index_C, value_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Context__AllowCodeGenerationFromStrings(v8___Context* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* allow = NULL;
        
        static char *kwlist[] = { "allow", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &allow);
            if ( 0 == status ){
                    
                    
                if(!PyBool_Check(allow)){ status = -1;}
            
                        
                    
                bool  allow_C = (PyInt_Check(allow)? PyInt_AsLong(allow):PyLongAsLong(allow))!=0     
                
                        if( 0 == status ){
                        self->_Cobject->AllowCodeGenerationFromStrings(allow_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Context__IsCodeGenerationFromStringsAllowed(v8___Context* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->IsCodeGenerationFromStringsAllowed();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Context__SetErrorMessageForCodeGenerationFromStrings(v8___Context* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* message = NULL;
        
        static char *kwlist[] = { "message", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &message);
            if ( 0 == status  && message){
                    
                    
                if (!checkType(&v8___Local_v8__String_Type, message )){ status = -1;}
    
                        
                   v8::Local<v8::String>& message_C = *((v8___Local_v8__String_*)message)->_Cobject;
    
                        if( 0 == status ){
                        self->_Cobject->SetErrorMessageForCodeGenerationFromStrings(message_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        

static void
v8___CpuProfiler_dealloc(v8___CpuProfiler* self)
{
    if(!self) return;
    if (!self->_is_c_reference){
        delete self->_Cobject;
    }
    self->_Cobject = NULL;
    self->_owner = NULL;
    self->_is_c_reference = false;
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject *
v8___CpuProfiler_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
    v8___CpuProfiler *self;

    self = (v8___CpuProfiler *)type->tp_alloc(type, 0);
    if (self != NULL) {
        self->_Cobject = NULL;
        self->_owner = NULL;
    }

    return (PyObject *)self;
}       

static int
v8___CpuProfiler_init(v8___CpuProfiler *self, PyObject *args, PyObject *kwds)
{
    int status = -1;
    if(!self) return status;
    self->_owner = (PyObject*)self;
    self->_Cobject = new v8___CpuProfiler();
    status = self->get_Cobject(self)?0:-1; 
    if (status != 0){
       self->_Cobject = NULL;
       status = 0;
    }
    return status;
}



static void
v8___Data_dealloc(v8___Data* self)
{
    if(!self) return;
    if (!self->_is_c_reference){
        delete self->_Cobject;
    }
    self->_Cobject = NULL;
    self->_owner = NULL;
    self->_is_c_reference = false;
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject *
v8___Data_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
    v8___Data *self;

    self = (v8___Data *)type->tp_alloc(type, 0);
    if (self != NULL) {
        self->_Cobject = NULL;
        self->_owner = NULL;
    }

    return (PyObject *)self;
}       

static int
v8___Data_init(v8___Data *self, PyObject *args, PyObject *kwds)
{
    int status = -1;
    if(!self) return status;
    self->_owner = (PyObject*)self;
    
    {
        PyObject * tmp = NULL;
        (void)tmp;
         
        static char *kwlist[] = { "Anon_1", NULL};
        
        PyObject* Anon_1 = NULL;
        
            
        if ( 0 != status ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &Anon_1);
            if ( 0 == status  && Anon_1){
                
                
                if(status == 0){
                    
                   v8::Data const& Anon_1_C = *((v8___Data*)Anon_1)->_Cobject;
    
                    self->_Cobject = new v8::Data(Anon_1_C);
                    
                        
                }
            }
        }
    }
    if (status != 0){
       self->_Cobject = NULL;
       status = 0;
    }
    return status;
}



static void
v8___Date_dealloc(v8___Date* self)
{
    if(!self) return;
    if (!self->_is_c_reference){
        delete self->_Cobject;
    }
    self->_Cobject = NULL;
    self->_owner = NULL;
    self->_is_c_reference = false;
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject *
v8___Date_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
    v8___Date *self;

    self = (v8___Date *)type->tp_alloc(type, 0);
    if (self != NULL) {
        self->_Cobject = NULL;
        self->_owner = NULL;
    }

    return (PyObject *)self;
}       

static int
v8___Date_init(v8___Date *self, PyObject *args, PyObject *kwds)
{
    int status = -1;
    if(!self) return status;
    self->_owner = (PyObject*)self;
    
    {
        PyObject * tmp = NULL;
        (void)tmp;
         
        static char *kwlist[] = { "Anon_1", NULL};
        
        PyObject* Anon_1 = NULL;
        
            
        if ( 0 != status ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &Anon_1);
            if ( 0 == status  && Anon_1){
                
                
                if(status == 0){
                    
                   v8::Date const& Anon_1_C = *((v8___Date*)Anon_1)->_Cobject;
    
                    self->_Cobject = new v8::Date(Anon_1_C);
                    
                        
                }
            }
        }
    }
    if (status != 0){
       self->_Cobject = NULL;
       status = 0;
    }
    return status;
}


static PyObject*
v8___Date__New(PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* isolate = NULL;
            PyObject* time = NULL;
        
        static char *kwlist[] = { "isolate""time", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OO", kwlist, &isolate,&time);
            if ( 0 == status  && isolate){
                    
                    
                if (!checkType(&v8___IsolateType, isolate )){ status = -1;}
    
                if(!PyFloat_Check(time)){ status = -1;}
            
                        
                   v8::Isolate * isolate_C = ((v8___Isolate*)isolate)->_Cobject;
    
                    
                double  time_C = PyFloat_AsDouble(time);     
                
                        if( 0 == status ){
                       v8::Local<v8::Value> result = v8::Date::New(isolate_C, time_C);
                       result_py = 
                        PyObject_CallObject((PyObject *) & v8___Local_v8__Value_Type, NULL);
                        if(result_py){
                            delete ((v8___Local_v8__Value_*) result_py)->_Cobject ;
                            ((v8___Local_v8__Value_*) result_py)->_Cobject = new v8::Local<v8::Value>(result);
                        };
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    {
        
            PyObject* context = NULL;
            PyObject* time = NULL;
        
        static char *kwlist[] = { "context""time", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OO", kwlist, &context,&time);
            if ( 0 == status  && context){
                    
                    
                if (!checkType(&v8___Local_v8__Context_Type, context )){ status = -1;}
    
                if(!PyFloat_Check(time)){ status = -1;}
            
                        
                   v8::Local<v8::Context>& context_C = *((v8___Local_v8__Context_*)context)->_Cobject;
    
                    
                double  time_C = PyFloat_AsDouble(time);     
                
                        if( 0 == status ){
                       v8::Local<v8::Value> result = v8::Date::New(context_C, time_C);
                       result_py = 
                        PyObject_CallObject((PyObject *) & v8___Local_v8__Value_Type, NULL);
                        if(result_py){
                            delete ((v8___Local_v8__Value_*) result_py)->_Cobject ;
                            ((v8___Local_v8__Value_*) result_py)->_Cobject = new v8::Local<v8::Value>(result);
                        };
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Date__ValueOf(v8___Date* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->ValueOf();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Date__Cast(PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* obj = NULL;
        
        static char *kwlist[] = { "obj", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &obj);
            if ( 0 == status  && obj){
                    
                    
                if (!checkType(&v8___ValueType, obj )){ status = -1;}
    
                        
                   v8::Value * obj_C = ((v8___Value*)obj)->_Cobject;
    
                        if( 0 == status ){
                       v8::Date * result = v8::Date::Cast(obj_C);
                       result_py = 
                       PyObject_CallObject((PyObject *) & v8___DateType, NULL);
                       if(result_py){
                           delete ((v8___Date*) result_py)->_Cobject ;
                           ((v8___Date*) result_py)->_Cobject = result;
                       };
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Date__DateTimeConfigurationChangeNotification(PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* isolate = NULL;
        
        static char *kwlist[] = { "isolate", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &isolate);
            if ( 0 == status  && isolate){
                    
                    
                if (!checkType(&v8___IsolateType, isolate )){ status = -1;}
    
                        
                   v8::Isolate * isolate_C = ((v8___Isolate*)isolate)->_Cobject;
    
                        if( 0 == status ){
                        v8::Date::DateTimeConfigurationChangeNotification(isolate_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        

static void
v8___External_dealloc(v8___External* self)
{
    if(!self) return;
    if (!self->_is_c_reference){
        delete self->_Cobject;
    }
    self->_Cobject = NULL;
    self->_owner = NULL;
    self->_is_c_reference = false;
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject *
v8___External_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
    v8___External *self;

    self = (v8___External *)type->tp_alloc(type, 0);
    if (self != NULL) {
        self->_Cobject = NULL;
        self->_owner = NULL;
    }

    return (PyObject *)self;
}       

static int
v8___External_init(v8___External *self, PyObject *args, PyObject *kwds)
{
    int status = -1;
    if(!self) return status;
    self->_owner = (PyObject*)self;
    
    {
        PyObject * tmp = NULL;
        (void)tmp;
         
        static char *kwlist[] = { "Anon_1", NULL};
        
        PyObject* Anon_1 = NULL;
        
            
        if ( 0 != status ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &Anon_1);
            if ( 0 == status  && Anon_1){
                
                
                if(status == 0){
                    
                   v8::External const& Anon_1_C = *((v8___External*)Anon_1)->_Cobject;
    
                    self->_Cobject = new v8::External(Anon_1_C);
                    
                        
                }
            }
        }
    }
    if (status != 0){
       self->_Cobject = NULL;
       status = 0;
    }
    return status;
}


static PyObject*
v8___External__New(PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* isolate = NULL;
            PyObject* value = NULL;
        
        static char *kwlist[] = { "isolate""value", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OO", kwlist, &isolate,&value);
            if ( 0 == status  && isolate && value){
                    
                    
                if (!checkType(&v8___IsolateType, isolate )){ status = -1;}
    
                        
                   v8::Isolate * isolate_C = ((v8___Isolate*)isolate)->_Cobject;
    
                         
                
                        if( 0 == status ){
                       v8::Local<v8::External> result = v8::External::New(isolate_C, value_C);
                       result_py = 
                        PyObject_CallObject((PyObject *) & v8___Local_v8__External_Type, NULL);
                        if(result_py){
                            delete ((v8___Local_v8__External_*) result_py)->_Cobject ;
                            ((v8___Local_v8__External_*) result_py)->_Cobject = new v8::Local<v8::External>(result);
                        };
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___External__Cast(PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* obj = NULL;
        
        static char *kwlist[] = { "obj", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &obj);
            if ( 0 == status  && obj){
                    
                    
                if (!checkType(&v8___ValueType, obj )){ status = -1;}
    
                        
                   v8::Value * obj_C = ((v8___Value*)obj)->_Cobject;
    
                        if( 0 == status ){
                       v8::External * result = v8::External::Cast(obj_C);
                       result_py = 
                       PyObject_CallObject((PyObject *) & v8___ExternalType, NULL);
                       if(result_py){
                           delete ((v8___External*) result_py)->_Cobject ;
                           ((v8___External*) result_py)->_Cobject = result;
                       };
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___External__Value(v8___External* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->Value();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        

static void
v8___Function_dealloc(v8___Function* self)
{
    if(!self) return;
    if (!self->_is_c_reference){
        delete self->_Cobject;
    }
    self->_Cobject = NULL;
    self->_owner = NULL;
    self->_is_c_reference = false;
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject *
v8___Function_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
    v8___Function *self;

    self = (v8___Function *)type->tp_alloc(type, 0);
    if (self != NULL) {
        self->_Cobject = NULL;
        self->_owner = NULL;
    }

    return (PyObject *)self;
}       

static int
v8___Function_init(v8___Function *self, PyObject *args, PyObject *kwds)
{
    int status = -1;
    if(!self) return status;
    self->_owner = (PyObject*)self;
    
    {
        PyObject * tmp = NULL;
        (void)tmp;
         
        static char *kwlist[] = { "Anon_1", NULL};
        
        PyObject* Anon_1 = NULL;
        
            
        if ( 0 != status ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &Anon_1);
            if ( 0 == status  && Anon_1){
                
                
                if(status == 0){
                    
                   v8::Function const& Anon_1_C = *((v8___Function*)Anon_1)->_Cobject;
    
                    self->_Cobject = new v8::Function(Anon_1_C);
                    
                        
                }
            }
        }
    }
    if (status != 0){
       self->_Cobject = NULL;
       status = 0;
    }
    return status;
}


static PyObject*
v8___Function__New(PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* context = NULL;
            PyObject* callback = NULL;
            PyObject* data = NULL;
            PyObject* length = NULL;
        
        static char *kwlist[] = { "context""callback""data""length", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OOOO", kwlist, &context,&callback,&data,&length);
            if ( 0 == status  && context && callback && data){
                    
                    
                if (!checkType(&v8___Local_v8__Context_Type, context )){ status = -1;}
    
        if(!(callback && (PyFunction_Check( callback) || callback->tp_call) ) ){ status = -1;}
    
                if (!checkType(&v8___Local_v8__Value_Type, data )){ status = -1;}
    
                if(!PyInt_Check(length)){ status = -1;}
            
                        
                   v8::Local<v8::Context>& context_C = *((v8___Local_v8__Context_*)context)->_Cobject;
    v8___FunctionCallback_CL * wrapperCB = new v8___FunctionCallback_CL( callback) ;
            callback_C = wrapperCB->get_C_callback();       
            //TODO: FIX MEMORY LEAK!
    
                   v8::Local<v8::Value>& data_C = *((v8___Local_v8__Value_*)data)->_Cobject;
    
                    intlength_C = PyInt_Check(length)? PyInt_AsLong(length):PyLong_AsLong(length);     
                
                        if( 0 == status ){
                       v8::MaybeLocal<v8::Function> result = v8::Function::New(context_C, callback_C, data_C, length_C);
                       result_py = 
                        PyObject_CallObject((PyObject *) & v8___MaybeLocal_v8__Function_Type, NULL);
                        if(result_py){
                            delete ((v8___MaybeLocal_v8__Function_*) result_py)->_Cobject ;
                            ((v8___MaybeLocal_v8__Function_*) result_py)->_Cobject = new v8::MaybeLocal<v8::Function>(result);
                        };
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    {
        
            PyObject* isolate = NULL;
            PyObject* callback = NULL;
            PyObject* data = NULL;
            PyObject* length = NULL;
        
        static char *kwlist[] = { "isolate""callback""data""length", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OOOO", kwlist, &isolate,&callback,&data,&length);
            if ( 0 == status  && isolate && callback && data){
                    
                    
                if (!checkType(&v8___IsolateType, isolate )){ status = -1;}
    
        if(!(callback && (PyFunction_Check( callback) || callback->tp_call) ) ){ status = -1;}
    
                if (!checkType(&v8___Local_v8__Value_Type, data )){ status = -1;}
    
                if(!PyInt_Check(length)){ status = -1;}
            
                        
                   v8::Isolate * isolate_C = ((v8___Isolate*)isolate)->_Cobject;
    v8___FunctionCallback_CL * wrapperCB = new v8___FunctionCallback_CL( callback) ;
            callback_C = wrapperCB->get_C_callback();       
            //TODO: FIX MEMORY LEAK!
    
                   v8::Local<v8::Value>& data_C = *((v8___Local_v8__Value_*)data)->_Cobject;
    
                    intlength_C = PyInt_Check(length)? PyInt_AsLong(length):PyLong_AsLong(length);     
                
                        if( 0 == status ){
                       v8::MaybeLocal<v8::Function> result = v8::Function::New(isolate_C, callback_C, data_C, length_C);
                       result_py = 
                        PyObject_CallObject((PyObject *) & v8___MaybeLocal_v8__Function_Type, NULL);
                        if(result_py){
                            delete ((v8___MaybeLocal_v8__Function_*) result_py)->_Cobject ;
                            ((v8___MaybeLocal_v8__Function_*) result_py)->_Cobject = new v8::MaybeLocal<v8::Function>(result);
                        };
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Function__NewInstance(v8___Function* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* argc = NULL;
            PyObject* argv = NULL;
        
        static char *kwlist[] = { "argc""argv", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OO", kwlist, &argc,&argv);
            if ( 0 == status  && argv){
                    
                    
                if(!PyInt_Check(argc)){ status = -1;}
            
                if (!checkType(&v8___Local_v8__Value_Type, argv )){ status = -1;}
    
                        
                    intargc_C = PyInt_Check(argc)? PyInt_AsLong(argc):PyLong_AsLong(argc);     
                
                   v8::Local<v8::Value> * argv_C = ((v8___Local_v8__Value_*)argv)->_Cobject;
    
                        if( 0 == status ){
                        self->_Cobject->NewInstance(argc_C, argv_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    {
        
            PyObject* context = NULL;
            PyObject* argc = NULL;
            PyObject* argv = NULL;
        
        static char *kwlist[] = { "context""argc""argv", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OO", kwlist, &context,&argc,&argv);
            if ( 0 == status  && context && argv){
                    
                    
                if (!checkType(&v8___Local_v8__Context_Type, context )){ status = -1;}
    
                if(!PyInt_Check(argc)){ status = -1;}
            
                if (!checkType(&v8___Local_v8__Value_Type, argv )){ status = -1;}
    
                        
                   v8::Local<v8::Context>& context_C = *((v8___Local_v8__Context_*)context)->_Cobject;
    
                    intargc_C = PyInt_Check(argc)? PyInt_AsLong(argc):PyLong_AsLong(argc);     
                
                   v8::Local<v8::Value> * argv_C = ((v8___Local_v8__Value_*)argv)->_Cobject;
    
                        if( 0 == status ){
                        self->_Cobject->NewInstance(context_C, argc_C, argv_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OO", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->NewInstance();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    {
        
            PyObject* context = NULL;
        
        static char *kwlist[] = { "context", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OO", kwlist, &context);
            if ( 0 == status  && context){
                    
                    
                if (!checkType(&v8___Local_v8__Context_Type, context )){ status = -1;}
    
                        
                   v8::Local<v8::Context>& context_C = *((v8___Local_v8__Context_*)context)->_Cobject;
    
                        if( 0 == status ){
                        self->_Cobject->NewInstance(context_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Function__Call(v8___Function* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* recv = NULL;
            PyObject* argc = NULL;
            PyObject* argv = NULL;
        
        static char *kwlist[] = { "recv""argc""argv", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OOO", kwlist, &recv,&argc,&argv);
            if ( 0 == status  && recv && argv){
                    
                    
                if (!checkType(&v8___Local_v8__Value_Type, recv )){ status = -1;}
    
                if(!PyInt_Check(argc)){ status = -1;}
            
                if (!checkType(&v8___Local_v8__Value_Type, argv )){ status = -1;}
    
                        
                   v8::Local<v8::Value>& recv_C = *((v8___Local_v8__Value_*)recv)->_Cobject;
    
                    intargc_C = PyInt_Check(argc)? PyInt_AsLong(argc):PyLong_AsLong(argc);     
                
                   v8::Local<v8::Value> * argv_C = ((v8___Local_v8__Value_*)argv)->_Cobject;
    
                        if( 0 == status ){
                        self->_Cobject->Call(recv_C, argc_C, argv_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    {
        
            PyObject* context = NULL;
            PyObject* recv = NULL;
            PyObject* argc = NULL;
            PyObject* argv = NULL;
        
        static char *kwlist[] = { "context""recv""argc""argv", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OOO", kwlist, &context,&recv,&argc,&argv);
            if ( 0 == status  && context && recv && argv){
                    
                    
                if (!checkType(&v8___Local_v8__Context_Type, context )){ status = -1;}
    
                if (!checkType(&v8___Local_v8__Value_Type, recv )){ status = -1;}
    
                if(!PyInt_Check(argc)){ status = -1;}
            
                if (!checkType(&v8___Local_v8__Value_Type, argv )){ status = -1;}
    
                        
                   v8::Local<v8::Context>& context_C = *((v8___Local_v8__Context_*)context)->_Cobject;
    
                   v8::Local<v8::Value>& recv_C = *((v8___Local_v8__Value_*)recv)->_Cobject;
    
                    intargc_C = PyInt_Check(argc)? PyInt_AsLong(argc):PyLong_AsLong(argc);     
                
                   v8::Local<v8::Value> * argv_C = ((v8___Local_v8__Value_*)argv)->_Cobject;
    
                        if( 0 == status ){
                        self->_Cobject->Call(context_C, recv_C, argc_C, argv_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Function__SetName(v8___Function* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* name = NULL;
        
        static char *kwlist[] = { "name", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &name);
            if ( 0 == status  && name){
                    
                    
                if (!checkType(&v8___Local_v8__String_Type, name )){ status = -1;}
    
                        
                   v8::Local<v8::String>& name_C = *((v8___Local_v8__String_*)name)->_Cobject;
    
                        if( 0 == status ){
                        self->_Cobject->SetName(name_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Function__GetName(v8___Function* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->GetName();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Function__GetInferredName(v8___Function* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->GetInferredName();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Function__GetDisplayName(v8___Function* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->GetDisplayName();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Function__GetScriptLineNumber(v8___Function* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->GetScriptLineNumber();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Function__GetScriptColumnNumber(v8___Function* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->GetScriptColumnNumber();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Function__IsBuiltin(v8___Function* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->IsBuiltin();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Function__ScriptId(v8___Function* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->ScriptId();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Function__GetBoundFunction(v8___Function* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->GetBoundFunction();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Function__GetScriptOrigin(v8___Function* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->GetScriptOrigin();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Function__Cast(PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* obj = NULL;
        
        static char *kwlist[] = { "obj", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &obj);
            if ( 0 == status  && obj){
                    
                    
                if (!checkType(&v8___ValueType, obj )){ status = -1;}
    
                        
                   v8::Value * obj_C = ((v8___Value*)obj)->_Cobject;
    
                        if( 0 == status ){
                       v8::Function * result = v8::Function::Cast(obj_C);
                       result_py = 
                       PyObject_CallObject((PyObject *) & v8___FunctionType, NULL);
                       if(result_py){
                           delete ((v8___Function*) result_py)->_Cobject ;
                           ((v8___Function*) result_py)->_Cobject = result;
                       };
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        

static void
v8___FunctionTemplate_dealloc(v8___FunctionTemplate* self)
{
    if(!self) return;
    if (!self->_is_c_reference){
        delete self->_Cobject;
    }
    self->_Cobject = NULL;
    self->_owner = NULL;
    self->_is_c_reference = false;
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject *
v8___FunctionTemplate_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
    v8___FunctionTemplate *self;

    self = (v8___FunctionTemplate *)type->tp_alloc(type, 0);
    if (self != NULL) {
        self->_Cobject = NULL;
        self->_owner = NULL;
    }

    return (PyObject *)self;
}       

static int
v8___FunctionTemplate_init(v8___FunctionTemplate *self, PyObject *args, PyObject *kwds)
{
    int status = -1;
    if(!self) return status;
    self->_owner = (PyObject*)self;
    
    {
        PyObject * tmp = NULL;
        (void)tmp;
         
        static char *kwlist[] = { "Anon_1", NULL};
        
        PyObject* Anon_1 = NULL;
        
            
        if ( 0 != status ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &Anon_1);
            if ( 0 == status  && Anon_1){
                
                
                if(status == 0){
                    
                   v8::FunctionTemplate const& Anon_1_C = *((v8___FunctionTemplate*)Anon_1)->_Cobject;
    
                    self->_Cobject = new v8::FunctionTemplate(Anon_1_C);
                    
                        
                }
            }
        }
    }
    if (status != 0){
       self->_Cobject = NULL;
       status = 0;
    }
    return status;
}


static PyObject*
v8___FunctionTemplate__New(PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* isolate = NULL;
            PyObject* callback = NULL;
            PyObject* data = NULL;
            PyObject* signature = NULL;
            PyObject* length = NULL;
        
        static char *kwlist[] = { "isolate""callback""data""signature""length", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OOOOO", kwlist, &isolate,&callback,&data,&signature,&length);
            if ( 0 == status  && isolate && callback && data && signature){
                    
                    
                if (!checkType(&v8___IsolateType, isolate )){ status = -1;}
    
        if(!(callback && (PyFunction_Check( callback) || callback->tp_call) ) ){ status = -1;}
    
                if (!checkType(&v8___Local_v8__Value_Type, data )){ status = -1;}
    
                if (!checkType(&v8___Local_v8__Signature_Type, signature )){ status = -1;}
    
                if(!PyInt_Check(length)){ status = -1;}
            
                        
                   v8::Isolate * isolate_C = ((v8___Isolate*)isolate)->_Cobject;
    v8___FunctionCallback_CL * wrapperCB = new v8___FunctionCallback_CL( callback) ;
            callback_C = wrapperCB->get_C_callback();       
            //TODO: FIX MEMORY LEAK!
    
                   v8::Local<v8::Value>& data_C = *((v8___Local_v8__Value_*)data)->_Cobject;
    
                   v8::Local<v8::Signature>& signature_C = *((v8___Local_v8__Signature_*)signature)->_Cobject;
    
                    intlength_C = PyInt_Check(length)? PyInt_AsLong(length):PyLong_AsLong(length);     
                
                        if( 0 == status ){
                       v8::Local<v8::FunctionTemplate> result = v8::FunctionTemplate::New(isolate_C, callback_C, data_C, signature_C, length_C);
                       result_py = 
                        PyObject_CallObject((PyObject *) & v8___Local_v8__FunctionTemplate_Type, NULL);
                        if(result_py){
                            delete ((v8___Local_v8__FunctionTemplate_*) result_py)->_Cobject ;
                            ((v8___Local_v8__FunctionTemplate_*) result_py)->_Cobject = new v8::Local<v8::FunctionTemplate>(result);
                        };
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___FunctionTemplate__GetFunction(v8___FunctionTemplate* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->GetFunction();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    {
        
            PyObject* context = NULL;
        
        static char *kwlist[] = { "context", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist, &context);
            if ( 0 == status  && context){
                    
                    
                if (!checkType(&v8___Local_v8__Context_Type, context )){ status = -1;}
    
                        
                   v8::Local<v8::Context>& context_C = *((v8___Local_v8__Context_*)context)->_Cobject;
    
                        if( 0 == status ){
                        self->_Cobject->GetFunction(context_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___FunctionTemplate__SetCallHandler(v8___FunctionTemplate* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* callback = NULL;
            PyObject* data = NULL;
        
        static char *kwlist[] = { "callback""data", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OO", kwlist, &callback,&data);
            if ( 0 == status  && callback && data){
                    
                    
        if(!(callback && (PyFunction_Check( callback) || callback->tp_call) ) ){ status = -1;}
    
                if (!checkType(&v8___Local_v8__Value_Type, data )){ status = -1;}
    
                        v8___FunctionCallback_CL * wrapperCB = new v8___FunctionCallback_CL( callback) ;
            callback_C = wrapperCB->get_C_callback();       
            //TODO: FIX MEMORY LEAK!
    
                   v8::Local<v8::Value>& data_C = *((v8___Local_v8__Value_*)data)->_Cobject;
    
                        if( 0 == status ){
                        self->_Cobject->SetCallHandler(callback_C, data_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___FunctionTemplate__SetLength(v8___FunctionTemplate* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* length = NULL;
        
        static char *kwlist[] = { "length", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &length);
            if ( 0 == status ){
                    
                    
                if(!PyInt_Check(length)){ status = -1;}
            
                        
                    intlength_C = PyInt_Check(length)? PyInt_AsLong(length):PyLong_AsLong(length);     
                
                        if( 0 == status ){
                        self->_Cobject->SetLength(length_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___FunctionTemplate__InstanceTemplate(v8___FunctionTemplate* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->InstanceTemplate();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___FunctionTemplate__Inherit(v8___FunctionTemplate* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* parent = NULL;
        
        static char *kwlist[] = { "parent", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &parent);
            if ( 0 == status  && parent){
                    
                    
                if (!checkType(&v8___Local_v8__FunctionTemplate_Type, parent )){ status = -1;}
    
                        
                   v8::Local<v8::FunctionTemplate>& parent_C = *((v8___Local_v8__FunctionTemplate_*)parent)->_Cobject;
    
                        if( 0 == status ){
                        self->_Cobject->Inherit(parent_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___FunctionTemplate__PrototypeTemplate(v8___FunctionTemplate* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->PrototypeTemplate();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___FunctionTemplate__SetClassName(v8___FunctionTemplate* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* name = NULL;
        
        static char *kwlist[] = { "name", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &name);
            if ( 0 == status  && name){
                    
                    
                if (!checkType(&v8___Local_v8__String_Type, name )){ status = -1;}
    
                        
                   v8::Local<v8::String>& name_C = *((v8___Local_v8__String_*)name)->_Cobject;
    
                        if( 0 == status ){
                        self->_Cobject->SetClassName(name_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___FunctionTemplate__SetAcceptAnyReceiver(v8___FunctionTemplate* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* value = NULL;
        
        static char *kwlist[] = { "value", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &value);
            if ( 0 == status ){
                    
                    
                if(!PyBool_Check(value)){ status = -1;}
            
                        
                    
                bool  value_C = (PyInt_Check(value)? PyInt_AsLong(value):PyLongAsLong(value))!=0     
                
                        if( 0 == status ){
                        self->_Cobject->SetAcceptAnyReceiver(value_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___FunctionTemplate__SetHiddenPrototype(v8___FunctionTemplate* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* value = NULL;
        
        static char *kwlist[] = { "value", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &value);
            if ( 0 == status ){
                    
                    
                if(!PyBool_Check(value)){ status = -1;}
            
                        
                    
                bool  value_C = (PyInt_Check(value)? PyInt_AsLong(value):PyLongAsLong(value))!=0     
                
                        if( 0 == status ){
                        self->_Cobject->SetHiddenPrototype(value_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___FunctionTemplate__ReadOnlyPrototype(v8___FunctionTemplate* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->ReadOnlyPrototype();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___FunctionTemplate__RemovePrototype(v8___FunctionTemplate* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->RemovePrototype();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___FunctionTemplate__HasInstance(v8___FunctionTemplate* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* object = NULL;
        
        static char *kwlist[] = { "object", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &object);
            if ( 0 == status  && object){
                    
                    
                if (!checkType(&v8___Local_v8__Value_Type, object )){ status = -1;}
    
                        
                   v8::Local<v8::Value>& object_C = *((v8___Local_v8__Value_*)object)->_Cobject;
    
                        if( 0 == status ){
                        self->_Cobject->HasInstance(object_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        

static void
v8___HeapProfiler_dealloc(v8___HeapProfiler* self)
{
    if(!self) return;
    if (!self->_is_c_reference){
        delete self->_Cobject;
    }
    self->_Cobject = NULL;
    self->_owner = NULL;
    self->_is_c_reference = false;
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject *
v8___HeapProfiler_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
    v8___HeapProfiler *self;

    self = (v8___HeapProfiler *)type->tp_alloc(type, 0);
    if (self != NULL) {
        self->_Cobject = NULL;
        self->_owner = NULL;
    }

    return (PyObject *)self;
}       

static int
v8___HeapProfiler_init(v8___HeapProfiler *self, PyObject *args, PyObject *kwds)
{
    int status = -1;
    if(!self) return status;
    self->_owner = (PyObject*)self;
    self->_Cobject = new v8___HeapProfiler();
    status = self->get_Cobject(self)?0:-1; 
    if (status != 0){
       self->_Cobject = NULL;
       status = 0;
    }
    return status;
}



static void
v8___ImplementationUtilities_dealloc(v8___ImplementationUtilities* self)
{
    if(!self) return;
    if (!self->_is_c_reference){
        delete self->_Cobject;
    }
    self->_Cobject = NULL;
    self->_owner = NULL;
    self->_is_c_reference = false;
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject *
v8___ImplementationUtilities_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
    v8___ImplementationUtilities *self;

    self = (v8___ImplementationUtilities *)type->tp_alloc(type, 0);
    if (self != NULL) {
        self->_Cobject = NULL;
        self->_owner = NULL;
    }

    return (PyObject *)self;
}       

static int
v8___ImplementationUtilities_init(v8___ImplementationUtilities *self, PyObject *args, PyObject *kwds)
{
    int status = -1;
    if(!self) return status;
    self->_owner = (PyObject*)self;
    self->_Cobject = new v8___ImplementationUtilities();
    status = self->get_Cobject(self)?0:-1; 
    if (status != 0){
       self->_Cobject = NULL;
       status = 0;
    }
    return status;
}



static void
v8___Int32_dealloc(v8___Int32* self)
{
    if(!self) return;
    if (!self->_is_c_reference){
        delete self->_Cobject;
    }
    self->_Cobject = NULL;
    self->_owner = NULL;
    self->_is_c_reference = false;
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject *
v8___Int32_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
    v8___Int32 *self;

    self = (v8___Int32 *)type->tp_alloc(type, 0);
    if (self != NULL) {
        self->_Cobject = NULL;
        self->_owner = NULL;
    }

    return (PyObject *)self;
}       

static int
v8___Int32_init(v8___Int32 *self, PyObject *args, PyObject *kwds)
{
    int status = -1;
    if(!self) return status;
    self->_owner = (PyObject*)self;
    
    {
        PyObject * tmp = NULL;
        (void)tmp;
         
        static char *kwlist[] = { "Anon_1", NULL};
        
        PyObject* Anon_1 = NULL;
        
            
        if ( 0 != status ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &Anon_1);
            if ( 0 == status  && Anon_1){
                
                
                if(status == 0){
                    
                   v8::Int32 const& Anon_1_C = *((v8___Int32*)Anon_1)->_Cobject;
    
                    self->_Cobject = new v8::Int32(Anon_1_C);
                    
                        
                }
            }
        }
    }
    if (status != 0){
       self->_Cobject = NULL;
       status = 0;
    }
    return status;
}


static PyObject*
v8___Int32__Value(v8___Int32* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->Value();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Int32__Cast(PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* obj = NULL;
        
        static char *kwlist[] = { "obj", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &obj);
            if ( 0 == status  && obj){
                    
                    
                if (!checkType(&v8___ValueType, obj )){ status = -1;}
    
                        
                   v8::Value * obj_C = ((v8___Value*)obj)->_Cobject;
    
                        if( 0 == status ){
                       v8::Int32 * result = v8::Int32::Cast(obj_C);
                       result_py = 
                       PyObject_CallObject((PyObject *) & v8___Int32Type, NULL);
                       if(result_py){
                           delete ((v8___Int32*) result_py)->_Cobject ;
                           ((v8___Int32*) result_py)->_Cobject = result;
                       };
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        

static void
v8___Integer_dealloc(v8___Integer* self)
{
    if(!self) return;
    if (!self->_is_c_reference){
        delete self->_Cobject;
    }
    self->_Cobject = NULL;
    self->_owner = NULL;
    self->_is_c_reference = false;
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject *
v8___Integer_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
    v8___Integer *self;

    self = (v8___Integer *)type->tp_alloc(type, 0);
    if (self != NULL) {
        self->_Cobject = NULL;
        self->_owner = NULL;
    }

    return (PyObject *)self;
}       

static int
v8___Integer_init(v8___Integer *self, PyObject *args, PyObject *kwds)
{
    int status = -1;
    if(!self) return status;
    self->_owner = (PyObject*)self;
    
    {
        PyObject * tmp = NULL;
        (void)tmp;
         
        static char *kwlist[] = { "Anon_1", NULL};
        
        PyObject* Anon_1 = NULL;
        
            
        if ( 0 != status ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &Anon_1);
            if ( 0 == status  && Anon_1){
                
                
                if(status == 0){
                    
                   v8::Integer const& Anon_1_C = *((v8___Integer*)Anon_1)->_Cobject;
    
                    self->_Cobject = new v8::Integer(Anon_1_C);
                    
                        
                }
            }
        }
    }
    if (status != 0){
       self->_Cobject = NULL;
       status = 0;
    }
    return status;
}


static PyObject*
v8___Integer__New(PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* isolate = NULL;
            PyObject* value = NULL;
        
        static char *kwlist[] = { "isolate""value", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OO", kwlist, &isolate,&value);
            if ( 0 == status  && isolate){
                    
                    
                if (!checkType(&v8___IsolateType, isolate )){ status = -1;}
    
                if(!PyInt_Check(value)){ status = -1;}
            
                        
                   v8::Isolate * isolate_C = ((v8___Isolate*)isolate)->_Cobject;
    
                    intvalue_C = PyInt_Check(value)? PyInt_AsLong(value):PyLong_AsLong(value);     
                
                        if( 0 == status ){
                       v8::Local<v8::Integer> result = v8::Integer::New(isolate_C, value_C);
                       result_py = 
                        PyObject_CallObject((PyObject *) & v8___Local_v8__Integer_Type, NULL);
                        if(result_py){
                            delete ((v8___Local_v8__Integer_*) result_py)->_Cobject ;
                            ((v8___Local_v8__Integer_*) result_py)->_Cobject = new v8::Local<v8::Integer>(result);
                        };
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Integer__NewFromUnsigned(PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* isolate = NULL;
            PyObject* value = NULL;
        
        static char *kwlist[] = { "isolate""value", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OO", kwlist, &isolate,&value);
            if ( 0 == status  && isolate){
                    
                    
                if (!checkType(&v8___IsolateType, isolate )){ status = -1;}
    
                if(!PyInt_Check(value)){ status = -1;}
            
                        
                   v8::Isolate * isolate_C = ((v8___Isolate*)isolate)->_Cobject;
    
                    unsigned intvalue_C = PyInt_Check(value)? PyInt_AsLong(value):PyLong_AsLong(value);     
                
                        if( 0 == status ){
                       v8::Local<v8::Integer> result = v8::Integer::NewFromUnsigned(isolate_C, value_C);
                       result_py = 
                        PyObject_CallObject((PyObject *) & v8___Local_v8__Integer_Type, NULL);
                        if(result_py){
                            delete ((v8___Local_v8__Integer_*) result_py)->_Cobject ;
                            ((v8___Local_v8__Integer_*) result_py)->_Cobject = new v8::Local<v8::Integer>(result);
                        };
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Integer__Value(v8___Integer* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->Value();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Integer__Cast(PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* obj = NULL;
        
        static char *kwlist[] = { "obj", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &obj);
            if ( 0 == status  && obj){
                    
                    
                if (!checkType(&v8___ValueType, obj )){ status = -1;}
    
                        
                   v8::Value * obj_C = ((v8___Value*)obj)->_Cobject;
    
                        if( 0 == status ){
                       v8::Integer * result = v8::Integer::Cast(obj_C);
                       result_py = 
                       PyObject_CallObject((PyObject *) & v8___IntegerType, NULL);
                       if(result_py){
                           delete ((v8___Integer*) result_py)->_Cobject ;
                           ((v8___Integer*) result_py)->_Cobject = result;
                       };
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        

static void
v8___Isolate_dealloc(v8___Isolate* self)
{
    if(!self) return;
    if (!self->_is_c_reference){
        delete self->_Cobject;
    }
    self->_Cobject = NULL;
    self->_owner = NULL;
    self->_is_c_reference = false;
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject *
v8___Isolate_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
    v8___Isolate *self;

    self = (v8___Isolate *)type->tp_alloc(type, 0);
    if (self != NULL) {
        self->_Cobject = NULL;
        self->_owner = NULL;
    }

    return (PyObject *)self;
}       

static int
v8___Isolate_init(v8___Isolate *self, PyObject *args, PyObject *kwds)
{
    int status = -1;
    if(!self) return status;
    self->_owner = (PyObject*)self;
    
    if (status != 0){
       self->_Cobject = NULL;
       status = 0;
    }
    return status;
}


static PyObject*
v8___Isolate__New(PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* params = NULL;
        
        static char *kwlist[] = { "params", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &params);
            if ( 0 == status  && params){
                    
                    
                if (!checkType(&v8___CreateParamsType, params )){ status = -1;}
    
                        
                   v8::CreateParams const& params_C = *((v8___CreateParams*)params)->_Cobject;
    
                        if( 0 == status ){
                       v8::Isolate * result = v8::Isolate::New(params_C);
                       result_py = 
                       PyObject_CallObject((PyObject *) & v8___IsolateType, NULL);
                       if(result_py){
                           delete ((v8___Isolate*) result_py)->_Cobject ;
                           ((v8___Isolate*) result_py)->_Cobject = result;
                       };
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                       v8::Isolate * result = v8::Isolate::New();
                       result_py = 
                       PyObject_CallObject((PyObject *) & v8___IsolateType, NULL);
                       if(result_py){
                           delete ((v8___Isolate*) result_py)->_Cobject ;
                           ((v8___Isolate*) result_py)->_Cobject = result;
                       };
                    
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Isolate__GetCurrent(PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                       v8::Isolate * result = v8::Isolate::GetCurrent();
                       result_py = 
                       PyObject_CallObject((PyObject *) & v8___IsolateType, NULL);
                       if(result_py){
                           delete ((v8___Isolate*) result_py)->_Cobject ;
                           ((v8___Isolate*) result_py)->_Cobject = result;
                       };
                    
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Isolate__Enter(v8___Isolate* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->Enter();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Isolate__Exit(v8___Isolate* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->Exit();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Isolate__Dispose(v8___Isolate* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->Dispose();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Isolate__SetData(v8___Isolate* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* slot = NULL;
            PyObject* data = NULL;
        
        static char *kwlist[] = { "slot""data", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OO", kwlist, &slot,&data);
            if ( 0 == status  && data){
                    
                    
                if(!PyInt_Check(slot)){ status = -1;}
            
                        
                    unsigned intslot_C = PyInt_Check(slot)? PyInt_AsLong(slot):PyLong_AsLong(slot);     
                
                         
                
                        if( 0 == status ){
                        self->_Cobject->SetData(slot_C, data_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Isolate__GetData(v8___Isolate* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* slot = NULL;
        
        static char *kwlist[] = { "slot", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &slot);
            if ( 0 == status ){
                    
                    
                if(!PyInt_Check(slot)){ status = -1;}
            
                        
                    unsigned intslot_C = PyInt_Check(slot)? PyInt_AsLong(slot):PyLong_AsLong(slot);     
                
                        if( 0 == status ){
                        self->_Cobject->GetData(slot_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Isolate__GetNumberOfDataSlots(PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                       unsigned int result = v8::Isolate::GetNumberOfDataSlots();
                       result_py = ;
                    
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Isolate__GetHeapStatistics(v8___Isolate* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* heap_statistics = NULL;
        
        static char *kwlist[] = { "heap_statistics", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &heap_statistics);
            if ( 0 == status  && heap_statistics){
                    
                    
                if (!checkType(&v8___HeapStatisticsType, heap_statistics )){ status = -1;}
    
                        
                   v8::HeapStatistics * heap_statistics_C = ((v8___HeapStatistics*)heap_statistics)->_Cobject;
    
                        if( 0 == status ){
                        self->_Cobject->GetHeapStatistics(heap_statistics_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Isolate__NumberOfHeapSpaces(v8___Isolate* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->NumberOfHeapSpaces();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Isolate__GetHeapSpaceStatistics(v8___Isolate* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* space_statistics = NULL;
            PyObject* index = NULL;
        
        static char *kwlist[] = { "space_statistics""index", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OO", kwlist, &space_statistics,&index);
            if ( 0 == status  && space_statistics){
                    
                    
                if (!checkType(&v8___HeapSpaceStatisticsType, space_statistics )){ status = -1;}
    
            if (!PyLong_Check(index )){ status = -1; }
                        
                   v8::HeapSpaceStatistics * space_statistics_C = ((v8___HeapSpaceStatistics*)space_statistics)->_Cobject;
    
                    long unsigned intindex_C = PyInt_Check(index)? PyInt_AsLong(index):PyLong_AsLong(index);
                 
                
                        if( 0 == status ){
                        self->_Cobject->GetHeapSpaceStatistics(space_statistics_C, index_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Isolate__NumberOfTrackedHeapObjectTypes(v8___Isolate* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->NumberOfTrackedHeapObjectTypes();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Isolate__GetHeapObjectStatisticsAtLastGC(v8___Isolate* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* object_statistics = NULL;
            PyObject* type_index = NULL;
        
        static char *kwlist[] = { "object_statistics""type_index", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OO", kwlist, &object_statistics,&type_index);
            if ( 0 == status  && object_statistics){
                    
                    
                if (!checkType(&v8___HeapObjectStatisticsType, object_statistics )){ status = -1;}
    
            if (!PyLong_Check(type_index )){ status = -1; }
                        
                   v8::HeapObjectStatistics * object_statistics_C = ((v8___HeapObjectStatistics*)object_statistics)->_Cobject;
    
                    long unsigned inttype_index_C = PyInt_Check(type_index)? PyInt_AsLong(type_index):PyLong_AsLong(type_index);
                 
                
                        if( 0 == status ){
                        self->_Cobject->GetHeapObjectStatisticsAtLastGC(object_statistics_C, type_index_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Isolate__GetStackSample(v8___Isolate* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* state = NULL;
            PyObject* frames = NULL;
            PyObject* frames_limit = NULL;
            PyObject* sample_info = NULL;
        
        static char *kwlist[] = { "state""frames""frames_limit""sample_info", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OOOO", kwlist, &state,&frames,&frames_limit,&sample_info);
            if ( 0 == status  && state && frames && sample_info){
                    
                    
                if (!checkType(&v8___RegisterStateType, state )){ status = -1;}
    
            if (!PyLong_Check(frames_limit )){ status = -1; }
                if (!checkType(&v8___SampleInfoType, sample_info )){ status = -1;}
    
                        
                   v8::RegisterState const& state_C = *((v8___RegisterState*)state)->_Cobject;
    
                         
                
                    long unsigned intframes_limit_C = PyInt_Check(frames_limit)? PyInt_AsLong(frames_limit):PyLong_AsLong(frames_limit);
                 
                
                   v8::SampleInfo * sample_info_C = ((v8___SampleInfo*)sample_info)->_Cobject;
    
                        if( 0 == status ){
                        self->_Cobject->GetStackSample(state_C, frames_C, frames_limit_C, sample_info_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Isolate__AdjustAmountOfExternalAllocatedMemory(v8___Isolate* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* change_in_bytes = NULL;
        
        static char *kwlist[] = { "change_in_bytes", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &change_in_bytes);
            if ( 0 == status ){
                    
                    
            if (!PyLong_Check(change_in_bytes )){ status = -1; }
                        
                    long intchange_in_bytes_C = PyInt_Check(change_in_bytes)? PyInt_AsLong(change_in_bytes):PyLong_AsLong(change_in_bytes);     
                
                        if( 0 == status ){
                        self->_Cobject->AdjustAmountOfExternalAllocatedMemory(change_in_bytes_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Isolate__GetHeapProfiler(v8___Isolate* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->GetHeapProfiler();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Isolate__GetCpuProfiler(v8___Isolate* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->GetCpuProfiler();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Isolate__InContext(v8___Isolate* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->InContext();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Isolate__GetCurrentContext(v8___Isolate* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->GetCurrentContext();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Isolate__GetCallingContext(v8___Isolate* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->GetCallingContext();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Isolate__GetEnteredContext(v8___Isolate* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->GetEnteredContext();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Isolate__ThrowException(v8___Isolate* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* exception = NULL;
        
        static char *kwlist[] = { "exception", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &exception);
            if ( 0 == status  && exception){
                    
                    
                if (!checkType(&v8___Local_v8__Value_Type, exception )){ status = -1;}
    
                        
                   v8::Local<v8::Value>& exception_C = *((v8___Local_v8__Value_*)exception)->_Cobject;
    
                        if( 0 == status ){
                        self->_Cobject->ThrowException(exception_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Isolate__AddGCPrologueCallback(v8___Isolate* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* callback = NULL;
            PyObject* gc_type_filter = NULL;
        
        static char *kwlist[] = { "callback""gc_type_filter", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OO", kwlist, &callback,&gc_type_filter);
            if ( 0 == status  && callback && gc_type_filter){
                    
                    
        if(!(callback && (PyFunction_Check( callback) || callback->tp_call) ) ){ status = -1;}
    
    
    
    
  
                        v8___Isolate___GCPrologueCallback_CL * wrapperCB = new v8___Isolate___GCPrologueCallback_CL( callback) ;
            callback_C = wrapperCB->get_C_callback();       
            //TODO: FIX MEMORY LEAK!
    
    
    
    
  
                        if( 0 == status ){
                        self->_Cobject->AddGCPrologueCallback(callback_C, gc_type_filter_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Isolate__RemoveGCPrologueCallback(v8___Isolate* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* callback = NULL;
        
        static char *kwlist[] = { "callback", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &callback);
            if ( 0 == status  && callback){
                    
                    
        if(!(callback && (PyFunction_Check( callback) || callback->tp_call) ) ){ status = -1;}
    
                        v8___Isolate___GCPrologueCallback_CL * wrapperCB = new v8___Isolate___GCPrologueCallback_CL( callback) ;
            callback_C = wrapperCB->get_C_callback();       
            //TODO: FIX MEMORY LEAK!
    
                        if( 0 == status ){
                        self->_Cobject->RemoveGCPrologueCallback(callback_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Isolate__AddGCEpilogueCallback(v8___Isolate* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* callback = NULL;
            PyObject* gc_type_filter = NULL;
        
        static char *kwlist[] = { "callback""gc_type_filter", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OO", kwlist, &callback,&gc_type_filter);
            if ( 0 == status  && callback && gc_type_filter){
                    
                    
        if(!(callback && (PyFunction_Check( callback) || callback->tp_call) ) ){ status = -1;}
    
    
    
    
  
                        v8___Isolate___GCPrologueCallback_CL * wrapperCB = new v8___Isolate___GCPrologueCallback_CL( callback) ;
            callback_C = wrapperCB->get_C_callback();       
            //TODO: FIX MEMORY LEAK!
    
    
    
    
  
                        if( 0 == status ){
                        self->_Cobject->AddGCEpilogueCallback(callback_C, gc_type_filter_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Isolate__RemoveGCEpilogueCallback(v8___Isolate* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* callback = NULL;
        
        static char *kwlist[] = { "callback", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &callback);
            if ( 0 == status  && callback){
                    
                    
        if(!(callback && (PyFunction_Check( callback) || callback->tp_call) ) ){ status = -1;}
    
                        v8___Isolate___GCPrologueCallback_CL * wrapperCB = new v8___Isolate___GCPrologueCallback_CL( callback) ;
            callback_C = wrapperCB->get_C_callback();       
            //TODO: FIX MEMORY LEAK!
    
                        if( 0 == status ){
                        self->_Cobject->RemoveGCEpilogueCallback(callback_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Isolate__TerminateExecution(v8___Isolate* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->TerminateExecution();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Isolate__IsExecutionTerminating(v8___Isolate* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->IsExecutionTerminating();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Isolate__CancelTerminateExecution(v8___Isolate* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->CancelTerminateExecution();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Isolate__RequestInterrupt(v8___Isolate* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* callback = NULL;
            PyObject* data = NULL;
        
        static char *kwlist[] = { "callback""data", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OO", kwlist, &callback,&data);
            if ( 0 == status  && callback && data){
                    
                    
        if(!(callback && (PyFunction_Check( callback) || callback->tp_call) ) ){ status = -1;}
    
                        v8___InterruptCallback_CL * wrapperCB = new v8___InterruptCallback_CL( callback) ;
            callback_C = wrapperCB->get_C_callback();       
            //TODO: FIX MEMORY LEAK!
    
                         
                
                        if( 0 == status ){
                        self->_Cobject->RequestInterrupt(callback_C, data_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Isolate__RequestGarbageCollectionForTesting(v8___Isolate* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* type = NULL;
        
        static char *kwlist[] = { "type", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &type);
            if ( 0 == status  && type){
                    
                    
    
    
  
                        
    
    
  
                        if( 0 == status ){
                        self->_Cobject->RequestGarbageCollectionForTesting(type_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Isolate__SetEventLogger(v8___Isolate* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* that = NULL;
        
        static char *kwlist[] = { "that", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &that);
            if ( 0 == status  && that){
                    
                    
        if(!(that && (PyFunction_Check( that) || that->tp_call) ) ){ status = -1;}
    
                        v8___LogEventCallback_CL * wrapperCB = new v8___LogEventCallback_CL( that) ;
            that_C = wrapperCB->get_C_callback();       
            //TODO: FIX MEMORY LEAK!
    
                        if( 0 == status ){
                        self->_Cobject->SetEventLogger(that_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Isolate__AddCallCompletedCallback(v8___Isolate* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* callback = NULL;
        
        static char *kwlist[] = { "callback", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &callback);
            if ( 0 == status  && callback){
                    
                    
        if(!(callback && (PyFunction_Check( callback) || callback->tp_call) ) ){ status = -1;}
    
                        v8___CallCompletedCallback_CL * wrapperCB = new v8___CallCompletedCallback_CL( callback) ;
            callback_C = wrapperCB->get_C_callback();       
            //TODO: FIX MEMORY LEAK!
    
                        if( 0 == status ){
                        self->_Cobject->AddCallCompletedCallback(callback_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Isolate__RemoveCallCompletedCallback(v8___Isolate* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* callback = NULL;
        
        static char *kwlist[] = { "callback", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &callback);
            if ( 0 == status  && callback){
                    
                    
        if(!(callback && (PyFunction_Check( callback) || callback->tp_call) ) ){ status = -1;}
    
                        v8___CallCompletedCallback_CL * wrapperCB = new v8___CallCompletedCallback_CL( callback) ;
            callback_C = wrapperCB->get_C_callback();       
            //TODO: FIX MEMORY LEAK!
    
                        if( 0 == status ){
                        self->_Cobject->RemoveCallCompletedCallback(callback_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Isolate__SetPromiseRejectCallback(v8___Isolate* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* callback = NULL;
        
        static char *kwlist[] = { "callback", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &callback);
            if ( 0 == status  && callback){
                    
                    
        if(!(callback && (PyFunction_Check( callback) || callback->tp_call) ) ){ status = -1;}
    
                        v8___PromiseRejectCallback_CL * wrapperCB = new v8___PromiseRejectCallback_CL( callback) ;
            callback_C = wrapperCB->get_C_callback();       
            //TODO: FIX MEMORY LEAK!
    
                        if( 0 == status ){
                        self->_Cobject->SetPromiseRejectCallback(callback_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Isolate__RunMicrotasks(v8___Isolate* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->RunMicrotasks();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Isolate__EnqueueMicrotask(v8___Isolate* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* microtask = NULL;
        
        static char *kwlist[] = { "microtask", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &microtask);
            if ( 0 == status  && microtask){
                    
                    
                if (!checkType(&v8___Local_v8__Function_Type, microtask )){ status = -1;}
    
                        
                   v8::Local<v8::Function>& microtask_C = *((v8___Local_v8__Function_*)microtask)->_Cobject;
    
                        if( 0 == status ){
                        self->_Cobject->EnqueueMicrotask(microtask_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    {
        
            PyObject* microtask = NULL;
            PyObject* data = NULL;
        
        static char *kwlist[] = { "microtask""data", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &microtask,&data);
            if ( 0 == status  && microtask && data){
                    
                    
        if(!(microtask && (PyFunction_Check( microtask) || microtask->tp_call) ) ){ status = -1;}
    
                        v8___MicrotaskCallback_CL * wrapperCB = new v8___MicrotaskCallback_CL( microtask) ;
            microtask_C = wrapperCB->get_C_callback();       
            //TODO: FIX MEMORY LEAK!
    
                         
                
                        if( 0 == status ){
                        self->_Cobject->EnqueueMicrotask(microtask_C, data_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Isolate__SetAutorunMicrotasks(v8___Isolate* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* autorun = NULL;
        
        static char *kwlist[] = { "autorun", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &autorun);
            if ( 0 == status ){
                    
                    
                if(!PyBool_Check(autorun)){ status = -1;}
            
                        
                    
                bool  autorun_C = (PyInt_Check(autorun)? PyInt_AsLong(autorun):PyLongAsLong(autorun))!=0     
                
                        if( 0 == status ){
                        self->_Cobject->SetAutorunMicrotasks(autorun_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Isolate__WillAutorunMicrotasks(v8___Isolate* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->WillAutorunMicrotasks();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Isolate__SetUseCounterCallback(v8___Isolate* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* callback = NULL;
        
        static char *kwlist[] = { "callback", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &callback);
            if ( 0 == status  && callback){
                    
                    
        if(!(callback && (PyFunction_Check( callback) || callback->tp_call) ) ){ status = -1;}
    
                        v8___Isolate___UseCounterCallback_CL * wrapperCB = new v8___Isolate___UseCounterCallback_CL( callback) ;
            callback_C = wrapperCB->get_C_callback();       
            //TODO: FIX MEMORY LEAK!
    
                        if( 0 == status ){
                        self->_Cobject->SetUseCounterCallback(callback_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Isolate__SetCounterFunction(v8___Isolate* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* Anon_1 = NULL;
        
        static char *kwlist[] = { "Anon", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &Anon__844);
            if ( 0 == status  && Anon_1){
                    
                    
        if(!(Anon_1 && (PyFunction_Check( Anon_1) || Anon_1->tp_call) ) ){ status = -1;}
    
                        v8___CounterLookupCallback_CL * wrapperCB = new v8___CounterLookupCallback_CL( Anon_1) ;
            Anon_1_C = wrapperCB->get_C_callback();       
            //TODO: FIX MEMORY LEAK!
    
                        if( 0 == status ){
                        self->_Cobject->SetCounterFunction(Anon_1_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Isolate__SetCreateHistogramFunction(v8___Isolate* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* Anon_1 = NULL;
        
        static char *kwlist[] = { "Anon", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &Anon__845);
            if ( 0 == status  && Anon_1){
                    
                    
        if(!(Anon_1 && (PyFunction_Check( Anon_1) || Anon_1->tp_call) ) ){ status = -1;}
    
                        v8___CreateHistogramCallback_CL * wrapperCB = new v8___CreateHistogramCallback_CL( Anon_1) ;
            Anon_1_C = wrapperCB->get_C_callback();       
            //TODO: FIX MEMORY LEAK!
    
                        if( 0 == status ){
                        self->_Cobject->SetCreateHistogramFunction(Anon_1_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Isolate__SetAddHistogramSampleFunction(v8___Isolate* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* Anon_1 = NULL;
        
        static char *kwlist[] = { "Anon", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &Anon__846);
            if ( 0 == status  && Anon_1){
                    
                    
        if(!(Anon_1 && (PyFunction_Check( Anon_1) || Anon_1->tp_call) ) ){ status = -1;}
    
                        v8___AddHistogramSampleCallback_CL * wrapperCB = new v8___AddHistogramSampleCallback_CL( Anon_1) ;
            Anon_1_C = wrapperCB->get_C_callback();       
            //TODO: FIX MEMORY LEAK!
    
                        if( 0 == status ){
                        self->_Cobject->SetAddHistogramSampleFunction(Anon_1_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Isolate__IdleNotificationDeadline(v8___Isolate* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* deadline_in_seconds = NULL;
        
        static char *kwlist[] = { "deadline_in_seconds", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &deadline_in_seconds);
            if ( 0 == status ){
                    
                    
                if(!PyFloat_Check(deadline_in_seconds)){ status = -1;}
            
                        
                    
                double  deadline_in_seconds_C = PyFloat_AsDouble(deadline_in_seconds);     
                
                        if( 0 == status ){
                        self->_Cobject->IdleNotificationDeadline(deadline_in_seconds_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Isolate__IdleNotification(v8___Isolate* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* idle_time_in_ms = NULL;
        
        static char *kwlist[] = { "idle_time_in_ms", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &idle_time_in_ms);
            if ( 0 == status ){
                    
                    
                if(!PyInt_Check(idle_time_in_ms)){ status = -1;}
            
                        
                    intidle_time_in_ms_C = PyInt_Check(idle_time_in_ms)? PyInt_AsLong(idle_time_in_ms):PyLong_AsLong(idle_time_in_ms);     
                
                        if( 0 == status ){
                        self->_Cobject->IdleNotification(idle_time_in_ms_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Isolate__LowMemoryNotification(v8___Isolate* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->LowMemoryNotification();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Isolate__ContextDisposedNotification(v8___Isolate* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* dependant_context = NULL;
        
        static char *kwlist[] = { "dependant_context", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &dependant_context);
            if ( 0 == status ){
                    
                    
                if(!PyBool_Check(dependant_context)){ status = -1;}
            
                        
                    
                bool  dependant_context_C = (PyInt_Check(dependant_context)? PyInt_AsLong(dependant_context):PyLongAsLong(dependant_context))!=0     
                
                        if( 0 == status ){
                        self->_Cobject->ContextDisposedNotification(dependant_context_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Isolate__SetJitCodeEventHandler(v8___Isolate* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* options = NULL;
            PyObject* event_handler = NULL;
        
        static char *kwlist[] = { "options""event_handler", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OO", kwlist, &options,&event_handler);
            if ( 0 == status  && options && event_handler){
                    
                    
    
    
  
        if(!(event_handler && (PyFunction_Check( event_handler) || event_handler->tp_call) ) ){ status = -1;}
    
                        
    
    
  v8___JitCodeEventHandler_CL * wrapperCB = new v8___JitCodeEventHandler_CL( event_handler) ;
            event_handler_C = wrapperCB->get_C_callback();       
            //TODO: FIX MEMORY LEAK!
    
                        if( 0 == status ){
                        self->_Cobject->SetJitCodeEventHandler(options_C, event_handler_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Isolate__SetStackLimit(v8___Isolate* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* stack_limit = NULL;
        
        static char *kwlist[] = { "stack_limit", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &stack_limit);
            if ( 0 == status ){
                    
                    
            if (!PyLong_Check(stack_limit )){ status = -1; }
                        
                    long unsigned intstack_limit_C = PyInt_Check(stack_limit)? PyInt_AsLong(stack_limit):PyLong_AsLong(stack_limit);
                 
                
                        if( 0 == status ){
                        self->_Cobject->SetStackLimit(stack_limit_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Isolate__GetCodeRange(v8___Isolate* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* start = NULL;
            PyObject* length_in_bytes = NULL;
        
        static char *kwlist[] = { "start""length_in_bytes", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OO", kwlist, &start,&length_in_bytes);
            if ( 0 == status  && start && length_in_bytes){
                    
                    
            if (!PyLong_Check(length_in_bytes )){ status = -1; }
                        
                         
                
                    long unsigned intlength_in_bytes_C = PyInt_Check(length_in_bytes)? PyInt_AsLong(length_in_bytes):PyLong_AsLong(length_in_bytes);
                 
                
                        if( 0 == status ){
                        self->_Cobject->GetCodeRange(start_C, length_in_bytes_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Isolate__SetFatalErrorHandler(v8___Isolate* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* that = NULL;
        
        static char *kwlist[] = { "that", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &that);
            if ( 0 == status  && that){
                    
                    
        if(!(that && (PyFunction_Check( that) || that->tp_call) ) ){ status = -1;}
    
                        v8___FatalErrorCallback_CL * wrapperCB = new v8___FatalErrorCallback_CL( that) ;
            that_C = wrapperCB->get_C_callback();       
            //TODO: FIX MEMORY LEAK!
    
                        if( 0 == status ){
                        self->_Cobject->SetFatalErrorHandler(that_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Isolate__SetAllowCodeGenerationFromStringsCallback(v8___Isolate* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* callback = NULL;
        
        static char *kwlist[] = { "callback", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &callback);
            if ( 0 == status  && callback){
                    
                    
        if(!(callback && (PyFunction_Check( callback) || callback->tp_call) ) ){ status = -1;}
    
                        v8___AllowCodeGenerationFromStringsCallback_CL * wrapperCB = new v8___AllowCodeGenerationFromStringsCallback_CL( callback) ;
            callback_C = wrapperCB->get_C_callback();       
            //TODO: FIX MEMORY LEAK!
    
                        if( 0 == status ){
                        self->_Cobject->SetAllowCodeGenerationFromStringsCallback(callback_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Isolate__IsDead(v8___Isolate* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->IsDead();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Isolate__AddMessageListener(v8___Isolate* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* that = NULL;
            PyObject* data = NULL;
        
        static char *kwlist[] = { "that""data", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OO", kwlist, &that,&data);
            if ( 0 == status  && that && data){
                    
                    
        if(!(that && (PyFunction_Check( that) || that->tp_call) ) ){ status = -1;}
    
                if (!checkType(&v8___Local_v8__Value_Type, data )){ status = -1;}
    
                        v8___MessageCallback_CL * wrapperCB = new v8___MessageCallback_CL( that) ;
            that_C = wrapperCB->get_C_callback();       
            //TODO: FIX MEMORY LEAK!
    
                   v8::Local<v8::Value>& data_C = *((v8___Local_v8__Value_*)data)->_Cobject;
    
                        if( 0 == status ){
                        self->_Cobject->AddMessageListener(that_C, data_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Isolate__RemoveMessageListeners(v8___Isolate* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* that = NULL;
        
        static char *kwlist[] = { "that", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &that);
            if ( 0 == status  && that){
                    
                    
        if(!(that && (PyFunction_Check( that) || that->tp_call) ) ){ status = -1;}
    
                        v8___MessageCallback_CL * wrapperCB = new v8___MessageCallback_CL( that) ;
            that_C = wrapperCB->get_C_callback();       
            //TODO: FIX MEMORY LEAK!
    
                        if( 0 == status ){
                        self->_Cobject->RemoveMessageListeners(that_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Isolate__SetFailedAccessCheckCallbackFunction(v8___Isolate* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* Anon_1 = NULL;
        
        static char *kwlist[] = { "Anon", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &Anon__859);
            if ( 0 == status  && Anon_1){
                    
                    
        if(!(Anon_1 && (PyFunction_Check( Anon_1) || Anon_1->tp_call) ) ){ status = -1;}
    
                        v8___FailedAccessCheckCallback_CL * wrapperCB = new v8___FailedAccessCheckCallback_CL( Anon_1) ;
            Anon_1_C = wrapperCB->get_C_callback();       
            //TODO: FIX MEMORY LEAK!
    
                        if( 0 == status ){
                        self->_Cobject->SetFailedAccessCheckCallbackFunction(Anon_1_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Isolate__SetCaptureStackTraceForUncaughtExceptions(v8___Isolate* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* capture = NULL;
            PyObject* frame_limit = NULL;
            PyObject* options = NULL;
        
        static char *kwlist[] = { "capture""frame_limit""options", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OOO", kwlist, &capture,&frame_limit,&options);
            if ( 0 == status  && options){
                    
                    
                if(!PyBool_Check(capture)){ status = -1;}
            
                if(!PyInt_Check(frame_limit)){ status = -1;}
            
    
    
    
    
    
    
    
    
    
    
    
  
                        
                    
                bool  capture_C = (PyInt_Check(capture)? PyInt_AsLong(capture):PyLongAsLong(capture))!=0     
                
                    intframe_limit_C = PyInt_Check(frame_limit)? PyInt_AsLong(frame_limit):PyLong_AsLong(frame_limit);     
                
    
    
    
    
    
    
    
    
    
    
    
  
                        if( 0 == status ){
                        self->_Cobject->SetCaptureStackTraceForUncaughtExceptions(capture_C, frame_limit_C, options_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Isolate__AddMemoryAllocationCallback(v8___Isolate* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* callback = NULL;
            PyObject* space = NULL;
            PyObject* action = NULL;
        
        static char *kwlist[] = { "callback""space""action", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OOO", kwlist, &callback,&space,&action);
            if ( 0 == status  && callback && space && action){
                    
                    
        if(!(callback && (PyFunction_Check( callback) || callback->tp_call) ) ){ status = -1;}
    
    
    
    
    
    
    
  
    
    
    
  
                        v8___MemoryAllocationCallback_CL * wrapperCB = new v8___MemoryAllocationCallback_CL( callback) ;
            callback_C = wrapperCB->get_C_callback();       
            //TODO: FIX MEMORY LEAK!
    
    
    
    
    
    
    
  
    
    
    
  
                        if( 0 == status ){
                        self->_Cobject->AddMemoryAllocationCallback(callback_C, space_C, action_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Isolate__RemoveMemoryAllocationCallback(v8___Isolate* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* callback = NULL;
        
        static char *kwlist[] = { "callback", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &callback);
            if ( 0 == status  && callback){
                    
                    
        if(!(callback && (PyFunction_Check( callback) || callback->tp_call) ) ){ status = -1;}
    
                        v8___MemoryAllocationCallback_CL * wrapperCB = new v8___MemoryAllocationCallback_CL( callback) ;
            callback_C = wrapperCB->get_C_callback();       
            //TODO: FIX MEMORY LEAK!
    
                        if( 0 == status ){
                        self->_Cobject->RemoveMemoryAllocationCallback(callback_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Isolate__VisitExternalResources(v8___Isolate* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* visitor = NULL;
        
        static char *kwlist[] = { "visitor", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &visitor);
            if ( 0 == status  && visitor){
                    
                    
                if (!checkType(&v8___ExternalResourceVisitorType, visitor )){ status = -1;}
    
                        
                   v8::ExternalResourceVisitor * visitor_C = ((v8___ExternalResourceVisitor*)visitor)->_Cobject;
    
                        if( 0 == status ){
                        self->_Cobject->VisitExternalResources(visitor_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Isolate__VisitHandlesWithClassIds(v8___Isolate* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* visitor = NULL;
        
        static char *kwlist[] = { "visitor", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &visitor);
            if ( 0 == status  && visitor){
                    
                    
                if (!checkType(&v8___PersistentHandleVisitorType, visitor )){ status = -1;}
    
                        
                   v8::PersistentHandleVisitor * visitor_C = ((v8___PersistentHandleVisitor*)visitor)->_Cobject;
    
                        if( 0 == status ){
                        self->_Cobject->VisitHandlesWithClassIds(visitor_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Isolate__VisitHandlesForPartialDependence(v8___Isolate* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* visitor = NULL;
        
        static char *kwlist[] = { "visitor", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &visitor);
            if ( 0 == status  && visitor){
                    
                    
                if (!checkType(&v8___PersistentHandleVisitorType, visitor )){ status = -1;}
    
                        
                   v8::PersistentHandleVisitor * visitor_C = ((v8___PersistentHandleVisitor*)visitor)->_Cobject;
    
                        if( 0 == status ){
                        self->_Cobject->VisitHandlesForPartialDependence(visitor_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        

static void
v8___Maybe_int__dealloc(v8___Maybe_int_* self)
{
    if(!self) return;
    if (!self->_is_c_reference){
        delete self->_Cobject;
    }
    self->_Cobject = NULL;
    self->_owner = NULL;
    self->_is_c_reference = false;
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject *
v8___Maybe_int__new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
    v8___Maybe_int_ *self;

    self = (v8___Maybe_int_ *)type->tp_alloc(type, 0);
    if (self != NULL) {
        self->_Cobject = NULL;
        self->_owner = NULL;
    }

    return (PyObject *)self;
}       

static int
v8___Maybe_int__init(v8___Maybe_int_ *self, PyObject *args, PyObject *kwds)
{
    int status = -1;
    if(!self) return status;
    self->_owner = (PyObject*)self;
    self->_Cobject = new v8___Maybe_int_();
    status = self->get_Cobject(self)?0:-1; 
    if (status != 0){
       self->_Cobject = NULL;
       status = 0;
    }
    return status;
}



static void
v8___Maybe_bool__dealloc(v8___Maybe_bool_* self)
{
    if(!self) return;
    if (!self->_is_c_reference){
        delete self->_Cobject;
    }
    self->_Cobject = NULL;
    self->_owner = NULL;
    self->_is_c_reference = false;
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject *
v8___Maybe_bool__new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
    v8___Maybe_bool_ *self;

    self = (v8___Maybe_bool_ *)type->tp_alloc(type, 0);
    if (self != NULL) {
        self->_Cobject = NULL;
        self->_owner = NULL;
    }

    return (PyObject *)self;
}       

static int
v8___Maybe_bool__init(v8___Maybe_bool_ *self, PyObject *args, PyObject *kwds)
{
    int status = -1;
    if(!self) return status;
    self->_owner = (PyObject*)self;
    self->_Cobject = new v8___Maybe_bool_();
    status = self->get_Cobject(self)?0:-1; 
    if (status != 0){
       self->_Cobject = NULL;
       status = 0;
    }
    return status;
}



static void
v8___Maybe_double__dealloc(v8___Maybe_double_* self)
{
    if(!self) return;
    if (!self->_is_c_reference){
        delete self->_Cobject;
    }
    self->_Cobject = NULL;
    self->_owner = NULL;
    self->_is_c_reference = false;
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject *
v8___Maybe_double__new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
    v8___Maybe_double_ *self;

    self = (v8___Maybe_double_ *)type->tp_alloc(type, 0);
    if (self != NULL) {
        self->_Cobject = NULL;
        self->_owner = NULL;
    }

    return (PyObject *)self;
}       

static int
v8___Maybe_double__init(v8___Maybe_double_ *self, PyObject *args, PyObject *kwds)
{
    int status = -1;
    if(!self) return status;
    self->_owner = (PyObject*)self;
    self->_Cobject = new v8___Maybe_double_();
    status = self->get_Cobject(self)?0:-1; 
    if (status != 0){
       self->_Cobject = NULL;
       status = 0;
    }
    return status;
}



static void
v8___Maybe_long__dealloc(v8___Maybe_long_* self)
{
    if(!self) return;
    if (!self->_is_c_reference){
        delete self->_Cobject;
    }
    self->_Cobject = NULL;
    self->_owner = NULL;
    self->_is_c_reference = false;
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject *
v8___Maybe_long__new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
    v8___Maybe_long_ *self;

    self = (v8___Maybe_long_ *)type->tp_alloc(type, 0);
    if (self != NULL) {
        self->_Cobject = NULL;
        self->_owner = NULL;
    }

    return (PyObject *)self;
}       

static int
v8___Maybe_long__init(v8___Maybe_long_ *self, PyObject *args, PyObject *kwds)
{
    int status = -1;
    if(!self) return status;
    self->_owner = (PyObject*)self;
    self->_Cobject = new v8___Maybe_long_();
    status = self->get_Cobject(self)?0:-1; 
    if (status != 0){
       self->_Cobject = NULL;
       status = 0;
    }
    return status;
}



static void
v8___Maybe_unsigned_int__dealloc(v8___Maybe_unsigned_int_* self)
{
    if(!self) return;
    if (!self->_is_c_reference){
        delete self->_Cobject;
    }
    self->_Cobject = NULL;
    self->_owner = NULL;
    self->_is_c_reference = false;
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject *
v8___Maybe_unsigned_int__new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
    v8___Maybe_unsigned_int_ *self;

    self = (v8___Maybe_unsigned_int_ *)type->tp_alloc(type, 0);
    if (self != NULL) {
        self->_Cobject = NULL;
        self->_owner = NULL;
    }

    return (PyObject *)self;
}       

static int
v8___Maybe_unsigned_int__init(v8___Maybe_unsigned_int_ *self, PyObject *args, PyObject *kwds)
{
    int status = -1;
    if(!self) return status;
    self->_owner = (PyObject*)self;
    self->_Cobject = new v8___Maybe_unsigned_int_();
    status = self->get_Cobject(self)?0:-1; 
    if (status != 0){
       self->_Cobject = NULL;
       status = 0;
    }
    return status;
}



static void
v8___Maybe_v8__PropertyAttribute__dealloc(v8___Maybe_v8__PropertyAttribute_* self)
{
    if(!self) return;
    if (!self->_is_c_reference){
        delete self->_Cobject;
    }
    self->_Cobject = NULL;
    self->_owner = NULL;
    self->_is_c_reference = false;
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject *
v8___Maybe_v8__PropertyAttribute__new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
    v8___Maybe_v8__PropertyAttribute_ *self;

    self = (v8___Maybe_v8__PropertyAttribute_ *)type->tp_alloc(type, 0);
    if (self != NULL) {
        self->_Cobject = NULL;
        self->_owner = NULL;
    }

    return (PyObject *)self;
}       

static int
v8___Maybe_v8__PropertyAttribute__init(v8___Maybe_v8__PropertyAttribute_ *self, PyObject *args, PyObject *kwds)
{
    int status = -1;
    if(!self) return status;
    self->_owner = (PyObject*)self;
    self->_Cobject = new v8___Maybe_v8__PropertyAttribute_();
    status = self->get_Cobject(self)?0:-1; 
    if (status != 0){
       self->_Cobject = NULL;
       status = 0;
    }
    return status;
}



static void
v8___Name_dealloc(v8___Name* self)
{
    if(!self) return;
    if (!self->_is_c_reference){
        delete self->_Cobject;
    }
    self->_Cobject = NULL;
    self->_owner = NULL;
    self->_is_c_reference = false;
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject *
v8___Name_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
    v8___Name *self;

    self = (v8___Name *)type->tp_alloc(type, 0);
    if (self != NULL) {
        self->_Cobject = NULL;
        self->_owner = NULL;
    }

    return (PyObject *)self;
}       

static int
v8___Name_init(v8___Name *self, PyObject *args, PyObject *kwds)
{
    int status = -1;
    if(!self) return status;
    self->_owner = (PyObject*)self;
    
    {
        PyObject * tmp = NULL;
        (void)tmp;
         
        static char *kwlist[] = { "Anon_1", NULL};
        
        PyObject* Anon_1 = NULL;
        
            
        if ( 0 != status ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &Anon_1);
            if ( 0 == status  && Anon_1){
                
                
                if(status == 0){
                    
                   v8::Name const& Anon_1_C = *((v8___Name*)Anon_1)->_Cobject;
    
                    self->_Cobject = new v8::Name(Anon_1_C);
                    
                        
                }
            }
        }
    }
    if (status != 0){
       self->_Cobject = NULL;
       status = 0;
    }
    return status;
}


static PyObject*
v8___Name__GetIdentityHash(v8___Name* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->GetIdentityHash();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Name__Cast(PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* obj = NULL;
        
        static char *kwlist[] = { "obj", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &obj);
            if ( 0 == status  && obj){
                    
                    
                if (!checkType(&v8___ValueType, obj )){ status = -1;}
    
                        
                   v8::Value * obj_C = ((v8___Value*)obj)->_Cobject;
    
                        if( 0 == status ){
                       v8::Name * result = v8::Name::Cast(obj_C);
                       result_py = 
                       PyObject_CallObject((PyObject *) & v8___NameType, NULL);
                       if(result_py){
                           delete ((v8___Name*) result_py)->_Cobject ;
                           ((v8___Name*) result_py)->_Cobject = result;
                       };
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        

static void
v8___Number_dealloc(v8___Number* self)
{
    if(!self) return;
    if (!self->_is_c_reference){
        delete self->_Cobject;
    }
    self->_Cobject = NULL;
    self->_owner = NULL;
    self->_is_c_reference = false;
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject *
v8___Number_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
    v8___Number *self;

    self = (v8___Number *)type->tp_alloc(type, 0);
    if (self != NULL) {
        self->_Cobject = NULL;
        self->_owner = NULL;
    }

    return (PyObject *)self;
}       

static int
v8___Number_init(v8___Number *self, PyObject *args, PyObject *kwds)
{
    int status = -1;
    if(!self) return status;
    self->_owner = (PyObject*)self;
    
    {
        PyObject * tmp = NULL;
        (void)tmp;
         
        static char *kwlist[] = { "Anon_1", NULL};
        
        PyObject* Anon_1 = NULL;
        
            
        if ( 0 != status ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &Anon_1);
            if ( 0 == status  && Anon_1){
                
                
                if(status == 0){
                    
                   v8::Number const& Anon_1_C = *((v8___Number*)Anon_1)->_Cobject;
    
                    self->_Cobject = new v8::Number(Anon_1_C);
                    
                        
                }
            }
        }
    }
    if (status != 0){
       self->_Cobject = NULL;
       status = 0;
    }
    return status;
}


static PyObject*
v8___Number__Value(v8___Number* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->Value();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Number__New(PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* isolate = NULL;
            PyObject* value = NULL;
        
        static char *kwlist[] = { "isolate""value", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OO", kwlist, &isolate,&value);
            if ( 0 == status  && isolate){
                    
                    
                if (!checkType(&v8___IsolateType, isolate )){ status = -1;}
    
                if(!PyFloat_Check(value)){ status = -1;}
            
                        
                   v8::Isolate * isolate_C = ((v8___Isolate*)isolate)->_Cobject;
    
                    
                double  value_C = PyFloat_AsDouble(value);     
                
                        if( 0 == status ){
                       v8::Local<v8::Number> result = v8::Number::New(isolate_C, value_C);
                       result_py = 
                        PyObject_CallObject((PyObject *) & v8___Local_v8__Number_Type, NULL);
                        if(result_py){
                            delete ((v8___Local_v8__Number_*) result_py)->_Cobject ;
                            ((v8___Local_v8__Number_*) result_py)->_Cobject = new v8::Local<v8::Number>(result);
                        };
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Number__Cast(PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* obj = NULL;
        
        static char *kwlist[] = { "obj", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &obj);
            if ( 0 == status  && obj){
                    
                    
                if (!checkType(&v8___ValueType, obj )){ status = -1;}
    
                        
                   v8::Value * obj_C = ((v8___Value*)obj)->_Cobject;
    
                        if( 0 == status ){
                       v8::Number * result = v8::Number::Cast(obj_C);
                       result_py = 
                       PyObject_CallObject((PyObject *) & v8___NumberType, NULL);
                       if(result_py){
                           delete ((v8___Number*) result_py)->_Cobject ;
                           ((v8___Number*) result_py)->_Cobject = result;
                       };
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        

static void
v8___NumberObject_dealloc(v8___NumberObject* self)
{
    if(!self) return;
    if (!self->_is_c_reference){
        delete self->_Cobject;
    }
    self->_Cobject = NULL;
    self->_owner = NULL;
    self->_is_c_reference = false;
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject *
v8___NumberObject_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
    v8___NumberObject *self;

    self = (v8___NumberObject *)type->tp_alloc(type, 0);
    if (self != NULL) {
        self->_Cobject = NULL;
        self->_owner = NULL;
    }

    return (PyObject *)self;
}       

static int
v8___NumberObject_init(v8___NumberObject *self, PyObject *args, PyObject *kwds)
{
    int status = -1;
    if(!self) return status;
    self->_owner = (PyObject*)self;
    
    {
        PyObject * tmp = NULL;
        (void)tmp;
         
        static char *kwlist[] = { "Anon_1", NULL};
        
        PyObject* Anon_1 = NULL;
        
            
        if ( 0 != status ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &Anon_1);
            if ( 0 == status  && Anon_1){
                
                
                if(status == 0){
                    
                   v8::NumberObject const& Anon_1_C = *((v8___NumberObject*)Anon_1)->_Cobject;
    
                    self->_Cobject = new v8::NumberObject(Anon_1_C);
                    
                        
                }
            }
        }
    }
    if (status != 0){
       self->_Cobject = NULL;
       status = 0;
    }
    return status;
}


static PyObject*
v8___NumberObject__New(PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* isolate = NULL;
            PyObject* value = NULL;
        
        static char *kwlist[] = { "isolate""value", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OO", kwlist, &isolate,&value);
            if ( 0 == status  && isolate){
                    
                    
                if (!checkType(&v8___IsolateType, isolate )){ status = -1;}
    
                if(!PyFloat_Check(value)){ status = -1;}
            
                        
                   v8::Isolate * isolate_C = ((v8___Isolate*)isolate)->_Cobject;
    
                    
                double  value_C = PyFloat_AsDouble(value);     
                
                        if( 0 == status ){
                       v8::Local<v8::Value> result = v8::NumberObject::New(isolate_C, value_C);
                       result_py = 
                        PyObject_CallObject((PyObject *) & v8___Local_v8__Value_Type, NULL);
                        if(result_py){
                            delete ((v8___Local_v8__Value_*) result_py)->_Cobject ;
                            ((v8___Local_v8__Value_*) result_py)->_Cobject = new v8::Local<v8::Value>(result);
                        };
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___NumberObject__ValueOf(v8___NumberObject* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->ValueOf();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___NumberObject__Cast(PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* obj = NULL;
        
        static char *kwlist[] = { "obj", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &obj);
            if ( 0 == status  && obj){
                    
                    
                if (!checkType(&v8___ValueType, obj )){ status = -1;}
    
                        
                   v8::Value * obj_C = ((v8___Value*)obj)->_Cobject;
    
                        if( 0 == status ){
                       v8::NumberObject * result = v8::NumberObject::Cast(obj_C);
                       result_py = 
                       PyObject_CallObject((PyObject *) & v8___NumberObjectType, NULL);
                       if(result_py){
                           delete ((v8___NumberObject*) result_py)->_Cobject ;
                           ((v8___NumberObject*) result_py)->_Cobject = result;
                       };
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        

static void
v8___Object_dealloc(v8___Object* self)
{
    if(!self) return;
    if (!self->_is_c_reference){
        delete self->_Cobject;
    }
    self->_Cobject = NULL;
    self->_owner = NULL;
    self->_is_c_reference = false;
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject *
v8___Object_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
    v8___Object *self;

    self = (v8___Object *)type->tp_alloc(type, 0);
    if (self != NULL) {
        self->_Cobject = NULL;
        self->_owner = NULL;
    }

    return (PyObject *)self;
}       

static int
v8___Object_init(v8___Object *self, PyObject *args, PyObject *kwds)
{
    int status = -1;
    if(!self) return status;
    self->_owner = (PyObject*)self;
    
    {
        PyObject * tmp = NULL;
        (void)tmp;
         
        static char *kwlist[] = { "Anon_1", NULL};
        
        PyObject* Anon_1 = NULL;
        
            
        if ( 0 != status ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &Anon_1);
            if ( 0 == status  && Anon_1){
                
                
                if(status == 0){
                    
                   v8::Object const& Anon_1_C = *((v8___Object*)Anon_1)->_Cobject;
    
                    self->_Cobject = new v8::Object(Anon_1_C);
                    
                        
                }
            }
        }
    }
    if (status != 0){
       self->_Cobject = NULL;
       status = 0;
    }
    return status;
}


static PyObject*
v8___Object__Set(v8___Object* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* key = NULL;
            PyObject* value = NULL;
        
        static char *kwlist[] = { "key""value", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OO", kwlist, &key,&value);
            if ( 0 == status  && key && value){
                    
                    
                if (!checkType(&v8___Local_v8__Value_Type, key )){ status = -1;}
    
                if (!checkType(&v8___Local_v8__Value_Type, value )){ status = -1;}
    
                        
                   v8::Local<v8::Value>& key_C = *((v8___Local_v8__Value_*)key)->_Cobject;
    
                   v8::Local<v8::Value>& value_C = *((v8___Local_v8__Value_*)value)->_Cobject;
    
                        if( 0 == status ){
                        self->_Cobject->Set(key_C, value_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    {
        
            PyObject* context = NULL;
            PyObject* key = NULL;
            PyObject* value = NULL;
        
        static char *kwlist[] = { "context""key""value", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OO", kwlist, &context,&key,&value);
            if ( 0 == status  && context && key && value){
                    
                    
                if (!checkType(&v8___Local_v8__Context_Type, context )){ status = -1;}
    
                if (!checkType(&v8___Local_v8__Value_Type, key )){ status = -1;}
    
                if (!checkType(&v8___Local_v8__Value_Type, value )){ status = -1;}
    
                        
                   v8::Local<v8::Context>& context_C = *((v8___Local_v8__Context_*)context)->_Cobject;
    
                   v8::Local<v8::Value>& key_C = *((v8___Local_v8__Value_*)key)->_Cobject;
    
                   v8::Local<v8::Value>& value_C = *((v8___Local_v8__Value_*)value)->_Cobject;
    
                        if( 0 == status ){
                        self->_Cobject->Set(context_C, key_C, value_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    {
        
            PyObject* index = NULL;
            PyObject* value = NULL;
        
        static char *kwlist[] = { "index""value", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OO", kwlist, &index,&value);
            if ( 0 == status  && value){
                    
                    
                if(!PyInt_Check(index)){ status = -1;}
            
                if (!checkType(&v8___Local_v8__Value_Type, value )){ status = -1;}
    
                        
                    unsigned intindex_C = PyInt_Check(index)? PyInt_AsLong(index):PyLong_AsLong(index);     
                
                   v8::Local<v8::Value>& value_C = *((v8___Local_v8__Value_*)value)->_Cobject;
    
                        if( 0 == status ){
                        self->_Cobject->Set(index_C, value_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    {
        
            PyObject* context = NULL;
            PyObject* index = NULL;
            PyObject* value = NULL;
        
        static char *kwlist[] = { "context""index""value", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OO", kwlist, &context,&index,&value);
            if ( 0 == status  && context && value){
                    
                    
                if (!checkType(&v8___Local_v8__Context_Type, context )){ status = -1;}
    
                if(!PyInt_Check(index)){ status = -1;}
            
                if (!checkType(&v8___Local_v8__Value_Type, value )){ status = -1;}
    
                        
                   v8::Local<v8::Context>& context_C = *((v8___Local_v8__Context_*)context)->_Cobject;
    
                    unsigned intindex_C = PyInt_Check(index)? PyInt_AsLong(index):PyLong_AsLong(index);     
                
                   v8::Local<v8::Value>& value_C = *((v8___Local_v8__Value_*)value)->_Cobject;
    
                        if( 0 == status ){
                        self->_Cobject->Set(context_C, index_C, value_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Object__CreateDataProperty(v8___Object* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* context = NULL;
            PyObject* key = NULL;
            PyObject* value = NULL;
        
        static char *kwlist[] = { "context""key""value", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OOO", kwlist, &context,&key,&value);
            if ( 0 == status  && context && key && value){
                    
                    
                if (!checkType(&v8___Local_v8__Context_Type, context )){ status = -1;}
    
                if (!checkType(&v8___Local_v8__Name_Type, key )){ status = -1;}
    
                if (!checkType(&v8___Local_v8__Value_Type, value )){ status = -1;}
    
                        
                   v8::Local<v8::Context>& context_C = *((v8___Local_v8__Context_*)context)->_Cobject;
    
                   v8::Local<v8::Name>& key_C = *((v8___Local_v8__Name_*)key)->_Cobject;
    
                   v8::Local<v8::Value>& value_C = *((v8___Local_v8__Value_*)value)->_Cobject;
    
                        if( 0 == status ){
                        self->_Cobject->CreateDataProperty(context_C, key_C, value_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    {
        
            PyObject* context = NULL;
            PyObject* index = NULL;
            PyObject* value = NULL;
        
        static char *kwlist[] = { "context""index""value", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OOO", kwlist, &context,&index,&value);
            if ( 0 == status  && context && value){
                    
                    
                if (!checkType(&v8___Local_v8__Context_Type, context )){ status = -1;}
    
                if(!PyInt_Check(index)){ status = -1;}
            
                if (!checkType(&v8___Local_v8__Value_Type, value )){ status = -1;}
    
                        
                   v8::Local<v8::Context>& context_C = *((v8___Local_v8__Context_*)context)->_Cobject;
    
                    unsigned intindex_C = PyInt_Check(index)? PyInt_AsLong(index):PyLong_AsLong(index);     
                
                   v8::Local<v8::Value>& value_C = *((v8___Local_v8__Value_*)value)->_Cobject;
    
                        if( 0 == status ){
                        self->_Cobject->CreateDataProperty(context_C, index_C, value_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Object__DefineOwnProperty(v8___Object* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* context = NULL;
            PyObject* key = NULL;
            PyObject* value = NULL;
            PyObject* attributes = NULL;
        
        static char *kwlist[] = { "context""key""value""attributes", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OOOO", kwlist, &context,&key,&value,&attributes);
            if ( 0 == status  && context && key && value && attributes){
                    
                    
                if (!checkType(&v8___Local_v8__Context_Type, context )){ status = -1;}
    
                if (!checkType(&v8___Local_v8__Name_Type, key )){ status = -1;}
    
                if (!checkType(&v8___Local_v8__Value_Type, value )){ status = -1;}
    
    
    
    
    
  
                        
                   v8::Local<v8::Context>& context_C = *((v8___Local_v8__Context_*)context)->_Cobject;
    
                   v8::Local<v8::Name>& key_C = *((v8___Local_v8__Name_*)key)->_Cobject;
    
                   v8::Local<v8::Value>& value_C = *((v8___Local_v8__Value_*)value)->_Cobject;
    
    
    
    
    
  
                        if( 0 == status ){
                        self->_Cobject->DefineOwnProperty(context_C, key_C, value_C, attributes_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Object__ForceSet(v8___Object* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* key = NULL;
            PyObject* value = NULL;
            PyObject* attribs = NULL;
        
        static char *kwlist[] = { "key""value""attribs", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OOO", kwlist, &key,&value,&attribs);
            if ( 0 == status  && key && value && attribs){
                    
                    
                if (!checkType(&v8___Local_v8__Value_Type, key )){ status = -1;}
    
                if (!checkType(&v8___Local_v8__Value_Type, value )){ status = -1;}
    
    
    
    
    
  
                        
                   v8::Local<v8::Value>& key_C = *((v8___Local_v8__Value_*)key)->_Cobject;
    
                   v8::Local<v8::Value>& value_C = *((v8___Local_v8__Value_*)value)->_Cobject;
    
    
    
    
    
  
                        if( 0 == status ){
                        self->_Cobject->ForceSet(key_C, value_C, attribs_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    {
        
            PyObject* context = NULL;
            PyObject* key = NULL;
            PyObject* value = NULL;
            PyObject* attribs = NULL;
        
        static char *kwlist[] = { "context""key""value""attribs", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OOO", kwlist, &context,&key,&value,&attribs);
            if ( 0 == status  && context && key && value && attribs){
                    
                    
                if (!checkType(&v8___Local_v8__Context_Type, context )){ status = -1;}
    
                if (!checkType(&v8___Local_v8__Value_Type, key )){ status = -1;}
    
                if (!checkType(&v8___Local_v8__Value_Type, value )){ status = -1;}
    
    
    
    
    
  
                        
                   v8::Local<v8::Context>& context_C = *((v8___Local_v8__Context_*)context)->_Cobject;
    
                   v8::Local<v8::Value>& key_C = *((v8___Local_v8__Value_*)key)->_Cobject;
    
                   v8::Local<v8::Value>& value_C = *((v8___Local_v8__Value_*)value)->_Cobject;
    
    
    
    
    
  
                        if( 0 == status ){
                        self->_Cobject->ForceSet(context_C, key_C, value_C, attribs_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Object__Get(v8___Object* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* key = NULL;
        
        static char *kwlist[] = { "key", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &key);
            if ( 0 == status  && key){
                    
                    
                if (!checkType(&v8___Local_v8__Value_Type, key )){ status = -1;}
    
                        
                   v8::Local<v8::Value>& key_C = *((v8___Local_v8__Value_*)key)->_Cobject;
    
                        if( 0 == status ){
                        self->_Cobject->Get(key_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    {
        
            PyObject* context = NULL;
            PyObject* key = NULL;
        
        static char *kwlist[] = { "context""key", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &context,&key);
            if ( 0 == status  && context && key){
                    
                    
                if (!checkType(&v8___Local_v8__Context_Type, context )){ status = -1;}
    
                if (!checkType(&v8___Local_v8__Value_Type, key )){ status = -1;}
    
                        
                   v8::Local<v8::Context>& context_C = *((v8___Local_v8__Context_*)context)->_Cobject;
    
                   v8::Local<v8::Value>& key_C = *((v8___Local_v8__Value_*)key)->_Cobject;
    
                        if( 0 == status ){
                        self->_Cobject->Get(context_C, key_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    {
        
            PyObject* index = NULL;
        
        static char *kwlist[] = { "index", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &index);
            if ( 0 == status ){
                    
                    
                if(!PyInt_Check(index)){ status = -1;}
            
                        
                    unsigned intindex_C = PyInt_Check(index)? PyInt_AsLong(index):PyLong_AsLong(index);     
                
                        if( 0 == status ){
                        self->_Cobject->Get(index_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    {
        
            PyObject* context = NULL;
            PyObject* index = NULL;
        
        static char *kwlist[] = { "context""index", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &context,&index);
            if ( 0 == status  && context){
                    
                    
                if (!checkType(&v8___Local_v8__Context_Type, context )){ status = -1;}
    
                if(!PyInt_Check(index)){ status = -1;}
            
                        
                   v8::Local<v8::Context>& context_C = *((v8___Local_v8__Context_*)context)->_Cobject;
    
                    unsigned intindex_C = PyInt_Check(index)? PyInt_AsLong(index):PyLong_AsLong(index);     
                
                        if( 0 == status ){
                        self->_Cobject->Get(context_C, index_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Object__GetPropertyAttributes(v8___Object* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* key = NULL;
        
        static char *kwlist[] = { "key", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &key);
            if ( 0 == status  && key){
                    
                    
                if (!checkType(&v8___Local_v8__Value_Type, key )){ status = -1;}
    
                        
                   v8::Local<v8::Value>& key_C = *((v8___Local_v8__Value_*)key)->_Cobject;
    
                        if( 0 == status ){
                        self->_Cobject->GetPropertyAttributes(key_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    {
        
            PyObject* context = NULL;
            PyObject* key = NULL;
        
        static char *kwlist[] = { "context""key", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &context,&key);
            if ( 0 == status  && context && key){
                    
                    
                if (!checkType(&v8___Local_v8__Context_Type, context )){ status = -1;}
    
                if (!checkType(&v8___Local_v8__Value_Type, key )){ status = -1;}
    
                        
                   v8::Local<v8::Context>& context_C = *((v8___Local_v8__Context_*)context)->_Cobject;
    
                   v8::Local<v8::Value>& key_C = *((v8___Local_v8__Value_*)key)->_Cobject;
    
                        if( 0 == status ){
                        self->_Cobject->GetPropertyAttributes(context_C, key_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Object__GetOwnPropertyDescriptor(v8___Object* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* key = NULL;
        
        static char *kwlist[] = { "key", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &key);
            if ( 0 == status  && key){
                    
                    
                if (!checkType(&v8___Local_v8__String_Type, key )){ status = -1;}
    
                        
                   v8::Local<v8::String>& key_C = *((v8___Local_v8__String_*)key)->_Cobject;
    
                        if( 0 == status ){
                        self->_Cobject->GetOwnPropertyDescriptor(key_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    {
        
            PyObject* context = NULL;
            PyObject* key = NULL;
        
        static char *kwlist[] = { "context""key", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &context,&key);
            if ( 0 == status  && context && key){
                    
                    
                if (!checkType(&v8___Local_v8__Context_Type, context )){ status = -1;}
    
                if (!checkType(&v8___Local_v8__String_Type, key )){ status = -1;}
    
                        
                   v8::Local<v8::Context>& context_C = *((v8___Local_v8__Context_*)context)->_Cobject;
    
                   v8::Local<v8::String>& key_C = *((v8___Local_v8__String_*)key)->_Cobject;
    
                        if( 0 == status ){
                        self->_Cobject->GetOwnPropertyDescriptor(context_C, key_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Object__Has(v8___Object* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* key = NULL;
        
        static char *kwlist[] = { "key", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &key);
            if ( 0 == status  && key){
                    
                    
                if (!checkType(&v8___Local_v8__Value_Type, key )){ status = -1;}
    
                        
                   v8::Local<v8::Value>& key_C = *((v8___Local_v8__Value_*)key)->_Cobject;
    
                        if( 0 == status ){
                        self->_Cobject->Has(key_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    {
        
            PyObject* context = NULL;
            PyObject* key = NULL;
        
        static char *kwlist[] = { "context""key", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &context,&key);
            if ( 0 == status  && context && key){
                    
                    
                if (!checkType(&v8___Local_v8__Context_Type, context )){ status = -1;}
    
                if (!checkType(&v8___Local_v8__Value_Type, key )){ status = -1;}
    
                        
                   v8::Local<v8::Context>& context_C = *((v8___Local_v8__Context_*)context)->_Cobject;
    
                   v8::Local<v8::Value>& key_C = *((v8___Local_v8__Value_*)key)->_Cobject;
    
                        if( 0 == status ){
                        self->_Cobject->Has(context_C, key_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    {
        
            PyObject* index = NULL;
        
        static char *kwlist[] = { "index", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &index);
            if ( 0 == status ){
                    
                    
                if(!PyInt_Check(index)){ status = -1;}
            
                        
                    unsigned intindex_C = PyInt_Check(index)? PyInt_AsLong(index):PyLong_AsLong(index);     
                
                        if( 0 == status ){
                        self->_Cobject->Has(index_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    {
        
            PyObject* context = NULL;
            PyObject* index = NULL;
        
        static char *kwlist[] = { "context""index", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &context,&index);
            if ( 0 == status  && context){
                    
                    
                if (!checkType(&v8___Local_v8__Context_Type, context )){ status = -1;}
    
                if(!PyInt_Check(index)){ status = -1;}
            
                        
                   v8::Local<v8::Context>& context_C = *((v8___Local_v8__Context_*)context)->_Cobject;
    
                    unsigned intindex_C = PyInt_Check(index)? PyInt_AsLong(index):PyLong_AsLong(index);     
                
                        if( 0 == status ){
                        self->_Cobject->Has(context_C, index_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Object__Delete(v8___Object* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* key = NULL;
        
        static char *kwlist[] = { "key", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &key);
            if ( 0 == status  && key){
                    
                    
                if (!checkType(&v8___Local_v8__Value_Type, key )){ status = -1;}
    
                        
                   v8::Local<v8::Value>& key_C = *((v8___Local_v8__Value_*)key)->_Cobject;
    
                        if( 0 == status ){
                        self->_Cobject->Delete(key_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    {
        
            PyObject* context = NULL;
            PyObject* key = NULL;
        
        static char *kwlist[] = { "context""key", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &context,&key);
            if ( 0 == status  && context && key){
                    
                    
                if (!checkType(&v8___Local_v8__Context_Type, context )){ status = -1;}
    
                if (!checkType(&v8___Local_v8__Value_Type, key )){ status = -1;}
    
                        
                   v8::Local<v8::Context>& context_C = *((v8___Local_v8__Context_*)context)->_Cobject;
    
                   v8::Local<v8::Value>& key_C = *((v8___Local_v8__Value_*)key)->_Cobject;
    
                        if( 0 == status ){
                        self->_Cobject->Delete(context_C, key_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    {
        
            PyObject* index = NULL;
        
        static char *kwlist[] = { "index", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &index);
            if ( 0 == status ){
                    
                    
                if(!PyInt_Check(index)){ status = -1;}
            
                        
                    unsigned intindex_C = PyInt_Check(index)? PyInt_AsLong(index):PyLong_AsLong(index);     
                
                        if( 0 == status ){
                        self->_Cobject->Delete(index_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    {
        
            PyObject* context = NULL;
            PyObject* index = NULL;
        
        static char *kwlist[] = { "context""index", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &context,&index);
            if ( 0 == status  && context){
                    
                    
                if (!checkType(&v8___Local_v8__Context_Type, context )){ status = -1;}
    
                if(!PyInt_Check(index)){ status = -1;}
            
                        
                   v8::Local<v8::Context>& context_C = *((v8___Local_v8__Context_*)context)->_Cobject;
    
                    unsigned intindex_C = PyInt_Check(index)? PyInt_AsLong(index):PyLong_AsLong(index);     
                
                        if( 0 == status ){
                        self->_Cobject->Delete(context_C, index_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Object__SetAccessor(v8___Object* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* name = NULL;
            PyObject* getter = NULL;
            PyObject* setter = NULL;
            PyObject* data = NULL;
            PyObject* settings = NULL;
            PyObject* attribute = NULL;
        
        static char *kwlist[] = { "name""getter""setter""data""settings""attribute", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OOOOOO", kwlist, &name,&getter,&setter,&data,&settings,&attribute);
            if ( 0 == status  && name && getter && setter && data && settings && attribute){
                    
                    
                if (!checkType(&v8___Local_v8__String_Type, name )){ status = -1;}
    
        if(!(getter && (PyFunction_Check( getter) || getter->tp_call) ) ){ status = -1;}
    
        if(!(setter && (PyFunction_Check( setter) || setter->tp_call) ) ){ status = -1;}
    
                if (!checkType(&v8___Local_v8__Value_Type, data )){ status = -1;}
    
    
    
    
    
  
    
    
    
    
  
                        
                   v8::Local<v8::String>& name_C = *((v8___Local_v8__String_*)name)->_Cobject;
    v8___AccessorGetterCallback_CL * wrapperCB = new v8___AccessorGetterCallback_CL( getter) ;
            getter_C = wrapperCB->get_C_callback();       
            //TODO: FIX MEMORY LEAK!
    v8___AccessorSetterCallback_CL * wrapperCB = new v8___AccessorSetterCallback_CL( setter) ;
            setter_C = wrapperCB->get_C_callback();       
            //TODO: FIX MEMORY LEAK!
    
                   v8::Local<v8::Value>& data_C = *((v8___Local_v8__Value_*)data)->_Cobject;
    
    
    
    
    
  
    
    
    
    
  
                        if( 0 == status ){
                        self->_Cobject->SetAccessor(name_C, getter_C, setter_C, data_C, settings_C, attribute_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    {
        
            PyObject* name = NULL;
            PyObject* getter = NULL;
            PyObject* setter = NULL;
            PyObject* data = NULL;
            PyObject* settings = NULL;
            PyObject* attribute = NULL;
        
        static char *kwlist[] = { "name""getter""setter""data""settings""attribute", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OOOOOO", kwlist, &name,&getter,&setter,&data,&settings,&attribute);
            if ( 0 == status  && name && getter && setter && data && settings && attribute){
                    
                    
                if (!checkType(&v8___Local_v8__Name_Type, name )){ status = -1;}
    
        if(!(getter && (PyFunction_Check( getter) || getter->tp_call) ) ){ status = -1;}
    
        if(!(setter && (PyFunction_Check( setter) || setter->tp_call) ) ){ status = -1;}
    
                if (!checkType(&v8___Local_v8__Value_Type, data )){ status = -1;}
    
    
    
    
    
  
    
    
    
    
  
                        
                   v8::Local<v8::Name>& name_C = *((v8___Local_v8__Name_*)name)->_Cobject;
    v8___AccessorNameGetterCallback_CL * wrapperCB = new v8___AccessorNameGetterCallback_CL( getter) ;
            getter_C = wrapperCB->get_C_callback();       
            //TODO: FIX MEMORY LEAK!
    v8___AccessorNameSetterCallback_CL * wrapperCB = new v8___AccessorNameSetterCallback_CL( setter) ;
            setter_C = wrapperCB->get_C_callback();       
            //TODO: FIX MEMORY LEAK!
    
                   v8::Local<v8::Value>& data_C = *((v8___Local_v8__Value_*)data)->_Cobject;
    
    
    
    
    
  
    
    
    
    
  
                        if( 0 == status ){
                        self->_Cobject->SetAccessor(name_C, getter_C, setter_C, data_C, settings_C, attribute_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    {
        
            PyObject* context = NULL;
            PyObject* name = NULL;
            PyObject* getter = NULL;
            PyObject* setter = NULL;
            PyObject* data = NULL;
            PyObject* settings = NULL;
            PyObject* attribute = NULL;
        
        static char *kwlist[] = { "context""name""getter""setter""data""settings""attribute", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OOOOOO", kwlist, &context,&name,&getter,&setter,&data,&settings,&attribute);
            if ( 0 == status  && context && name && getter && setter && data && settings && attribute){
                    
                    
                if (!checkType(&v8___Local_v8__Context_Type, context )){ status = -1;}
    
                if (!checkType(&v8___Local_v8__Name_Type, name )){ status = -1;}
    
        if(!(getter && (PyFunction_Check( getter) || getter->tp_call) ) ){ status = -1;}
    
        if(!(setter && (PyFunction_Check( setter) || setter->tp_call) ) ){ status = -1;}
    
                if (!checkType(&v8___MaybeLocal_v8__Value_Type, data )){ status = -1;}
    
    
    
    
    
  
    
    
    
    
  
                        
                   v8::Local<v8::Context>& context_C = *((v8___Local_v8__Context_*)context)->_Cobject;
    
                   v8::Local<v8::Name>& name_C = *((v8___Local_v8__Name_*)name)->_Cobject;
    v8___AccessorNameGetterCallback_CL * wrapperCB = new v8___AccessorNameGetterCallback_CL( getter) ;
            getter_C = wrapperCB->get_C_callback();       
            //TODO: FIX MEMORY LEAK!
    v8___AccessorNameSetterCallback_CL * wrapperCB = new v8___AccessorNameSetterCallback_CL( setter) ;
            setter_C = wrapperCB->get_C_callback();       
            //TODO: FIX MEMORY LEAK!
    
                   v8::MaybeLocal<v8::Value>& data_C = *((v8___MaybeLocal_v8__Value_*)data)->_Cobject;
    
    
    
    
    
  
    
    
    
    
  
                        if( 0 == status ){
                        self->_Cobject->SetAccessor(context_C, name_C, getter_C, setter_C, data_C, settings_C, attribute_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Object__SetAccessorProperty(v8___Object* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* name = NULL;
            PyObject* getter = NULL;
            PyObject* setter = NULL;
            PyObject* attribute = NULL;
            PyObject* settings = NULL;
        
        static char *kwlist[] = { "name""getter""setter""attribute""settings", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OOOOO", kwlist, &name,&getter,&setter,&attribute,&settings);
            if ( 0 == status  && name && getter && setter && attribute && settings){
                    
                    
                if (!checkType(&v8___Local_v8__Name_Type, name )){ status = -1;}
    
                if (!checkType(&v8___Local_v8__Function_Type, getter )){ status = -1;}
    
                if (!checkType(&v8___Local_v8__Function_Type, setter )){ status = -1;}
    
    
    
    
    
  
    
    
    
    
  
                        
                   v8::Local<v8::Name>& name_C = *((v8___Local_v8__Name_*)name)->_Cobject;
    
                   v8::Local<v8::Function>& getter_C = *((v8___Local_v8__Function_*)getter)->_Cobject;
    
                   v8::Local<v8::Function>& setter_C = *((v8___Local_v8__Function_*)setter)->_Cobject;
    
    
    
    
    
  
    
    
    
    
  
                        if( 0 == status ){
                        self->_Cobject->SetAccessorProperty(name_C, getter_C, setter_C, attribute_C, settings_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Object__GetPropertyNames(v8___Object* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->GetPropertyNames();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    {
        
            PyObject* context = NULL;
        
        static char *kwlist[] = { "context", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist, &context);
            if ( 0 == status  && context){
                    
                    
                if (!checkType(&v8___Local_v8__Context_Type, context )){ status = -1;}
    
                        
                   v8::Local<v8::Context>& context_C = *((v8___Local_v8__Context_*)context)->_Cobject;
    
                        if( 0 == status ){
                        self->_Cobject->GetPropertyNames(context_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Object__GetOwnPropertyNames(v8___Object* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->GetOwnPropertyNames();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    {
        
            PyObject* context = NULL;
        
        static char *kwlist[] = { "context", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist, &context);
            if ( 0 == status  && context){
                    
                    
                if (!checkType(&v8___Local_v8__Context_Type, context )){ status = -1;}
    
                        
                   v8::Local<v8::Context>& context_C = *((v8___Local_v8__Context_*)context)->_Cobject;
    
                        if( 0 == status ){
                        self->_Cobject->GetOwnPropertyNames(context_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Object__GetPrototype(v8___Object* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->GetPrototype();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Object__SetPrototype(v8___Object* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* prototype = NULL;
        
        static char *kwlist[] = { "prototype", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &prototype);
            if ( 0 == status  && prototype){
                    
                    
                if (!checkType(&v8___Local_v8__Value_Type, prototype )){ status = -1;}
    
                        
                   v8::Local<v8::Value>& prototype_C = *((v8___Local_v8__Value_*)prototype)->_Cobject;
    
                        if( 0 == status ){
                        self->_Cobject->SetPrototype(prototype_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    {
        
            PyObject* context = NULL;
            PyObject* prototype = NULL;
        
        static char *kwlist[] = { "context""prototype", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &context,&prototype);
            if ( 0 == status  && context && prototype){
                    
                    
                if (!checkType(&v8___Local_v8__Context_Type, context )){ status = -1;}
    
                if (!checkType(&v8___Local_v8__Value_Type, prototype )){ status = -1;}
    
                        
                   v8::Local<v8::Context>& context_C = *((v8___Local_v8__Context_*)context)->_Cobject;
    
                   v8::Local<v8::Value>& prototype_C = *((v8___Local_v8__Value_*)prototype)->_Cobject;
    
                        if( 0 == status ){
                        self->_Cobject->SetPrototype(context_C, prototype_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Object__FindInstanceInPrototypeChain(v8___Object* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* tmpl = NULL;
        
        static char *kwlist[] = { "tmpl", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &tmpl);
            if ( 0 == status  && tmpl){
                    
                    
                if (!checkType(&v8___Local_v8__FunctionTemplate_Type, tmpl )){ status = -1;}
    
                        
                   v8::Local<v8::FunctionTemplate>& tmpl_C = *((v8___Local_v8__FunctionTemplate_*)tmpl)->_Cobject;
    
                        if( 0 == status ){
                        self->_Cobject->FindInstanceInPrototypeChain(tmpl_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Object__ObjectProtoToString(v8___Object* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->ObjectProtoToString();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    {
        
            PyObject* context = NULL;
        
        static char *kwlist[] = { "context", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist, &context);
            if ( 0 == status  && context){
                    
                    
                if (!checkType(&v8___Local_v8__Context_Type, context )){ status = -1;}
    
                        
                   v8::Local<v8::Context>& context_C = *((v8___Local_v8__Context_*)context)->_Cobject;
    
                        if( 0 == status ){
                        self->_Cobject->ObjectProtoToString(context_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Object__GetConstructorName(v8___Object* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->GetConstructorName();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Object__InternalFieldCount(v8___Object* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->InternalFieldCount();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    {
        
            PyObject* object = NULL;
        
        static char *kwlist[] = { "object", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist, &object);
            if ( 0 == status  && object){
                    
                    
                if (!checkType(&v8___PersistentBase_v8__Object_Type, object )){ status = -1;}
    
                        
                   v8::PersistentBase<v8::Object> const& object_C = *((v8___PersistentBase_v8__Object_*)object)->_Cobject;
    
                        if( 0 == status ){
                       int result = v8::Object::InternalFieldCount(object_C);
                       result_py = Unknown_type_;
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Object__GetInternalField(v8___Object* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* index = NULL;
        
        static char *kwlist[] = { "index", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &index);
            if ( 0 == status ){
                    
                    
                if(!PyInt_Check(index)){ status = -1;}
            
                        
                    intindex_C = PyInt_Check(index)? PyInt_AsLong(index):PyLong_AsLong(index);     
                
                        if( 0 == status ){
                        self->_Cobject->GetInternalField(index_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Object__SetInternalField(v8___Object* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* index = NULL;
            PyObject* value = NULL;
        
        static char *kwlist[] = { "index""value", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OO", kwlist, &index,&value);
            if ( 0 == status  && value){
                    
                    
                if(!PyInt_Check(index)){ status = -1;}
            
                if (!checkType(&v8___Local_v8__Value_Type, value )){ status = -1;}
    
                        
                    intindex_C = PyInt_Check(index)? PyInt_AsLong(index):PyLong_AsLong(index);     
                
                   v8::Local<v8::Value>& value_C = *((v8___Local_v8__Value_*)value)->_Cobject;
    
                        if( 0 == status ){
                        self->_Cobject->SetInternalField(index_C, value_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Object__GetAlignedPointerFromInternalField(v8___Object* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* index = NULL;
        
        static char *kwlist[] = { "index", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &index);
            if ( 0 == status ){
                    
                    
                if(!PyInt_Check(index)){ status = -1;}
            
                        
                    intindex_C = PyInt_Check(index)? PyInt_AsLong(index):PyLong_AsLong(index);     
                
                        if( 0 == status ){
                        self->_Cobject->GetAlignedPointerFromInternalField(index_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    {
        
            PyObject* object = NULL;
            PyObject* index = NULL;
        
        static char *kwlist[] = { "object""index", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &object,&index);
            if ( 0 == status  && object){
                    
                    
                if (!checkType(&v8___PersistentBase_v8__Object_Type, object )){ status = -1;}
    
                if(!PyInt_Check(index)){ status = -1;}
            
                        
                   v8::PersistentBase<v8::Object> const& object_C = *((v8___PersistentBase_v8__Object_*)object)->_Cobject;
    
                    intindex_C = PyInt_Check(index)? PyInt_AsLong(index):PyLong_AsLong(index);     
                
                        if( 0 == status ){
                       void * result = v8::Object::GetAlignedPointerFromInternalField(object_C, index_C);
                       result_py = Unknown_type_;
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Object__SetAlignedPointerInInternalField(v8___Object* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* index = NULL;
            PyObject* value = NULL;
        
        static char *kwlist[] = { "index""value", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OO", kwlist, &index,&value);
            if ( 0 == status  && value){
                    
                    
                if(!PyInt_Check(index)){ status = -1;}
            
                        
                    intindex_C = PyInt_Check(index)? PyInt_AsLong(index):PyLong_AsLong(index);     
                
                         
                
                        if( 0 == status ){
                        self->_Cobject->SetAlignedPointerInInternalField(index_C, value_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Object__HasOwnProperty(v8___Object* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* key = NULL;
        
        static char *kwlist[] = { "key", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &key);
            if ( 0 == status  && key){
                    
                    
                if (!checkType(&v8___Local_v8__String_Type, key )){ status = -1;}
    
                        
                   v8::Local<v8::String>& key_C = *((v8___Local_v8__String_*)key)->_Cobject;
    
                        if( 0 == status ){
                        self->_Cobject->HasOwnProperty(key_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    {
        
            PyObject* context = NULL;
            PyObject* key = NULL;
        
        static char *kwlist[] = { "context""key", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &context,&key);
            if ( 0 == status  && context && key){
                    
                    
                if (!checkType(&v8___Local_v8__Context_Type, context )){ status = -1;}
    
                if (!checkType(&v8___Local_v8__Name_Type, key )){ status = -1;}
    
                        
                   v8::Local<v8::Context>& context_C = *((v8___Local_v8__Context_*)context)->_Cobject;
    
                   v8::Local<v8::Name>& key_C = *((v8___Local_v8__Name_*)key)->_Cobject;
    
                        if( 0 == status ){
                        self->_Cobject->HasOwnProperty(context_C, key_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Object__HasRealNamedProperty(v8___Object* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* key = NULL;
        
        static char *kwlist[] = { "key", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &key);
            if ( 0 == status  && key){
                    
                    
                if (!checkType(&v8___Local_v8__String_Type, key )){ status = -1;}
    
                        
                   v8::Local<v8::String>& key_C = *((v8___Local_v8__String_*)key)->_Cobject;
    
                        if( 0 == status ){
                        self->_Cobject->HasRealNamedProperty(key_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    {
        
            PyObject* context = NULL;
            PyObject* key = NULL;
        
        static char *kwlist[] = { "context""key", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &context,&key);
            if ( 0 == status  && context && key){
                    
                    
                if (!checkType(&v8___Local_v8__Context_Type, context )){ status = -1;}
    
                if (!checkType(&v8___Local_v8__Name_Type, key )){ status = -1;}
    
                        
                   v8::Local<v8::Context>& context_C = *((v8___Local_v8__Context_*)context)->_Cobject;
    
                   v8::Local<v8::Name>& key_C = *((v8___Local_v8__Name_*)key)->_Cobject;
    
                        if( 0 == status ){
                        self->_Cobject->HasRealNamedProperty(context_C, key_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Object__HasRealIndexedProperty(v8___Object* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* index = NULL;
        
        static char *kwlist[] = { "index", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &index);
            if ( 0 == status ){
                    
                    
                if(!PyInt_Check(index)){ status = -1;}
            
                        
                    unsigned intindex_C = PyInt_Check(index)? PyInt_AsLong(index):PyLong_AsLong(index);     
                
                        if( 0 == status ){
                        self->_Cobject->HasRealIndexedProperty(index_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    {
        
            PyObject* context = NULL;
            PyObject* index = NULL;
        
        static char *kwlist[] = { "context""index", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &context,&index);
            if ( 0 == status  && context){
                    
                    
                if (!checkType(&v8___Local_v8__Context_Type, context )){ status = -1;}
    
                if(!PyInt_Check(index)){ status = -1;}
            
                        
                   v8::Local<v8::Context>& context_C = *((v8___Local_v8__Context_*)context)->_Cobject;
    
                    unsigned intindex_C = PyInt_Check(index)? PyInt_AsLong(index):PyLong_AsLong(index);     
                
                        if( 0 == status ){
                        self->_Cobject->HasRealIndexedProperty(context_C, index_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Object__HasRealNamedCallbackProperty(v8___Object* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* key = NULL;
        
        static char *kwlist[] = { "key", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &key);
            if ( 0 == status  && key){
                    
                    
                if (!checkType(&v8___Local_v8__String_Type, key )){ status = -1;}
    
                        
                   v8::Local<v8::String>& key_C = *((v8___Local_v8__String_*)key)->_Cobject;
    
                        if( 0 == status ){
                        self->_Cobject->HasRealNamedCallbackProperty(key_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    {
        
            PyObject* context = NULL;
            PyObject* key = NULL;
        
        static char *kwlist[] = { "context""key", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &context,&key);
            if ( 0 == status  && context && key){
                    
                    
                if (!checkType(&v8___Local_v8__Context_Type, context )){ status = -1;}
    
                if (!checkType(&v8___Local_v8__Name_Type, key )){ status = -1;}
    
                        
                   v8::Local<v8::Context>& context_C = *((v8___Local_v8__Context_*)context)->_Cobject;
    
                   v8::Local<v8::Name>& key_C = *((v8___Local_v8__Name_*)key)->_Cobject;
    
                        if( 0 == status ){
                        self->_Cobject->HasRealNamedCallbackProperty(context_C, key_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Object__GetRealNamedPropertyInPrototypeChain(v8___Object* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* key = NULL;
        
        static char *kwlist[] = { "key", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &key);
            if ( 0 == status  && key){
                    
                    
                if (!checkType(&v8___Local_v8__String_Type, key )){ status = -1;}
    
                        
                   v8::Local<v8::String>& key_C = *((v8___Local_v8__String_*)key)->_Cobject;
    
                        if( 0 == status ){
                        self->_Cobject->GetRealNamedPropertyInPrototypeChain(key_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    {
        
            PyObject* context = NULL;
            PyObject* key = NULL;
        
        static char *kwlist[] = { "context""key", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &context,&key);
            if ( 0 == status  && context && key){
                    
                    
                if (!checkType(&v8___Local_v8__Context_Type, context )){ status = -1;}
    
                if (!checkType(&v8___Local_v8__Name_Type, key )){ status = -1;}
    
                        
                   v8::Local<v8::Context>& context_C = *((v8___Local_v8__Context_*)context)->_Cobject;
    
                   v8::Local<v8::Name>& key_C = *((v8___Local_v8__Name_*)key)->_Cobject;
    
                        if( 0 == status ){
                        self->_Cobject->GetRealNamedPropertyInPrototypeChain(context_C, key_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Object__GetRealNamedPropertyAttributesInPrototypeChain(v8___Object* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* key = NULL;
        
        static char *kwlist[] = { "key", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &key);
            if ( 0 == status  && key){
                    
                    
                if (!checkType(&v8___Local_v8__String_Type, key )){ status = -1;}
    
                        
                   v8::Local<v8::String>& key_C = *((v8___Local_v8__String_*)key)->_Cobject;
    
                        if( 0 == status ){
                        self->_Cobject->GetRealNamedPropertyAttributesInPrototypeChain(key_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    {
        
            PyObject* context = NULL;
            PyObject* key = NULL;
        
        static char *kwlist[] = { "context""key", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &context,&key);
            if ( 0 == status  && context && key){
                    
                    
                if (!checkType(&v8___Local_v8__Context_Type, context )){ status = -1;}
    
                if (!checkType(&v8___Local_v8__Name_Type, key )){ status = -1;}
    
                        
                   v8::Local<v8::Context>& context_C = *((v8___Local_v8__Context_*)context)->_Cobject;
    
                   v8::Local<v8::Name>& key_C = *((v8___Local_v8__Name_*)key)->_Cobject;
    
                        if( 0 == status ){
                        self->_Cobject->GetRealNamedPropertyAttributesInPrototypeChain(context_C, key_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Object__GetRealNamedProperty(v8___Object* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* key = NULL;
        
        static char *kwlist[] = { "key", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &key);
            if ( 0 == status  && key){
                    
                    
                if (!checkType(&v8___Local_v8__String_Type, key )){ status = -1;}
    
                        
                   v8::Local<v8::String>& key_C = *((v8___Local_v8__String_*)key)->_Cobject;
    
                        if( 0 == status ){
                        self->_Cobject->GetRealNamedProperty(key_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    {
        
            PyObject* context = NULL;
            PyObject* key = NULL;
        
        static char *kwlist[] = { "context""key", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &context,&key);
            if ( 0 == status  && context && key){
                    
                    
                if (!checkType(&v8___Local_v8__Context_Type, context )){ status = -1;}
    
                if (!checkType(&v8___Local_v8__Name_Type, key )){ status = -1;}
    
                        
                   v8::Local<v8::Context>& context_C = *((v8___Local_v8__Context_*)context)->_Cobject;
    
                   v8::Local<v8::Name>& key_C = *((v8___Local_v8__Name_*)key)->_Cobject;
    
                        if( 0 == status ){
                        self->_Cobject->GetRealNamedProperty(context_C, key_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Object__GetRealNamedPropertyAttributes(v8___Object* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* key = NULL;
        
        static char *kwlist[] = { "key", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &key);
            if ( 0 == status  && key){
                    
                    
                if (!checkType(&v8___Local_v8__String_Type, key )){ status = -1;}
    
                        
                   v8::Local<v8::String>& key_C = *((v8___Local_v8__String_*)key)->_Cobject;
    
                        if( 0 == status ){
                        self->_Cobject->GetRealNamedPropertyAttributes(key_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    {
        
            PyObject* context = NULL;
            PyObject* key = NULL;
        
        static char *kwlist[] = { "context""key", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &context,&key);
            if ( 0 == status  && context && key){
                    
                    
                if (!checkType(&v8___Local_v8__Context_Type, context )){ status = -1;}
    
                if (!checkType(&v8___Local_v8__Name_Type, key )){ status = -1;}
    
                        
                   v8::Local<v8::Context>& context_C = *((v8___Local_v8__Context_*)context)->_Cobject;
    
                   v8::Local<v8::Name>& key_C = *((v8___Local_v8__Name_*)key)->_Cobject;
    
                        if( 0 == status ){
                        self->_Cobject->GetRealNamedPropertyAttributes(context_C, key_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Object__HasNamedLookupInterceptor(v8___Object* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->HasNamedLookupInterceptor();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Object__HasIndexedLookupInterceptor(v8___Object* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->HasIndexedLookupInterceptor();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Object__TurnOnAccessCheck(v8___Object* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->TurnOnAccessCheck();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Object__GetIdentityHash(v8___Object* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->GetIdentityHash();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Object__SetHiddenValue(v8___Object* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* key = NULL;
            PyObject* value = NULL;
        
        static char *kwlist[] = { "key""value", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OO", kwlist, &key,&value);
            if ( 0 == status  && key && value){
                    
                    
                if (!checkType(&v8___Local_v8__String_Type, key )){ status = -1;}
    
                if (!checkType(&v8___Local_v8__Value_Type, value )){ status = -1;}
    
                        
                   v8::Local<v8::String>& key_C = *((v8___Local_v8__String_*)key)->_Cobject;
    
                   v8::Local<v8::Value>& value_C = *((v8___Local_v8__Value_*)value)->_Cobject;
    
                        if( 0 == status ){
                        self->_Cobject->SetHiddenValue(key_C, value_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Object__GetHiddenValue(v8___Object* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* key = NULL;
        
        static char *kwlist[] = { "key", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &key);
            if ( 0 == status  && key){
                    
                    
                if (!checkType(&v8___Local_v8__String_Type, key )){ status = -1;}
    
                        
                   v8::Local<v8::String>& key_C = *((v8___Local_v8__String_*)key)->_Cobject;
    
                        if( 0 == status ){
                        self->_Cobject->GetHiddenValue(key_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Object__DeleteHiddenValue(v8___Object* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* key = NULL;
        
        static char *kwlist[] = { "key", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &key);
            if ( 0 == status  && key){
                    
                    
                if (!checkType(&v8___Local_v8__String_Type, key )){ status = -1;}
    
                        
                   v8::Local<v8::String>& key_C = *((v8___Local_v8__String_*)key)->_Cobject;
    
                        if( 0 == status ){
                        self->_Cobject->DeleteHiddenValue(key_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Object__Clone(v8___Object* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->Clone();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Object__CreationContext(v8___Object* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->CreationContext();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Object__IsCallable(v8___Object* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->IsCallable();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Object__CallAsFunction(v8___Object* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* recv = NULL;
            PyObject* argc = NULL;
            PyObject* argv = NULL;
        
        static char *kwlist[] = { "recv""argc""argv", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OOO", kwlist, &recv,&argc,&argv);
            if ( 0 == status  && recv && argv){
                    
                    
                if (!checkType(&v8___Local_v8__Value_Type, recv )){ status = -1;}
    
                if(!PyInt_Check(argc)){ status = -1;}
            
                if (!checkType(&v8___Local_v8__Value_Type, argv )){ status = -1;}
    
                        
                   v8::Local<v8::Value>& recv_C = *((v8___Local_v8__Value_*)recv)->_Cobject;
    
                    intargc_C = PyInt_Check(argc)? PyInt_AsLong(argc):PyLong_AsLong(argc);     
                
                   v8::Local<v8::Value> * argv_C = ((v8___Local_v8__Value_*)argv)->_Cobject;
    
                        if( 0 == status ){
                        self->_Cobject->CallAsFunction(recv_C, argc_C, argv_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    {
        
            PyObject* context = NULL;
            PyObject* recv = NULL;
            PyObject* argc = NULL;
            PyObject* argv = NULL;
        
        static char *kwlist[] = { "context""recv""argc""argv", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OOO", kwlist, &context,&recv,&argc,&argv);
            if ( 0 == status  && context && recv && argv){
                    
                    
                if (!checkType(&v8___Local_v8__Context_Type, context )){ status = -1;}
    
                if (!checkType(&v8___Local_v8__Value_Type, recv )){ status = -1;}
    
                if(!PyInt_Check(argc)){ status = -1;}
            
                if (!checkType(&v8___Local_v8__Value_Type, argv )){ status = -1;}
    
                        
                   v8::Local<v8::Context>& context_C = *((v8___Local_v8__Context_*)context)->_Cobject;
    
                   v8::Local<v8::Value>& recv_C = *((v8___Local_v8__Value_*)recv)->_Cobject;
    
                    intargc_C = PyInt_Check(argc)? PyInt_AsLong(argc):PyLong_AsLong(argc);     
                
                   v8::Local<v8::Value> * argv_C = ((v8___Local_v8__Value_*)argv)->_Cobject;
    
                        if( 0 == status ){
                        self->_Cobject->CallAsFunction(context_C, recv_C, argc_C, argv_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Object__CallAsConstructor(v8___Object* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* argc = NULL;
            PyObject* argv = NULL;
        
        static char *kwlist[] = { "argc""argv", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OO", kwlist, &argc,&argv);
            if ( 0 == status  && argv){
                    
                    
                if(!PyInt_Check(argc)){ status = -1;}
            
                if (!checkType(&v8___Local_v8__Value_Type, argv )){ status = -1;}
    
                        
                    intargc_C = PyInt_Check(argc)? PyInt_AsLong(argc):PyLong_AsLong(argc);     
                
                   v8::Local<v8::Value> * argv_C = ((v8___Local_v8__Value_*)argv)->_Cobject;
    
                        if( 0 == status ){
                        self->_Cobject->CallAsConstructor(argc_C, argv_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    {
        
            PyObject* context = NULL;
            PyObject* argc = NULL;
            PyObject* argv = NULL;
        
        static char *kwlist[] = { "context""argc""argv", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OO", kwlist, &context,&argc,&argv);
            if ( 0 == status  && context && argv){
                    
                    
                if (!checkType(&v8___Local_v8__Context_Type, context )){ status = -1;}
    
                if(!PyInt_Check(argc)){ status = -1;}
            
                if (!checkType(&v8___Local_v8__Value_Type, argv )){ status = -1;}
    
                        
                   v8::Local<v8::Context>& context_C = *((v8___Local_v8__Context_*)context)->_Cobject;
    
                    intargc_C = PyInt_Check(argc)? PyInt_AsLong(argc):PyLong_AsLong(argc);     
                
                   v8::Local<v8::Value> * argv_C = ((v8___Local_v8__Value_*)argv)->_Cobject;
    
                        if( 0 == status ){
                        self->_Cobject->CallAsConstructor(context_C, argc_C, argv_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Object__GetIsolate(v8___Object* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->GetIsolate();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Object__New(PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* isolate = NULL;
        
        static char *kwlist[] = { "isolate", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &isolate);
            if ( 0 == status  && isolate){
                    
                    
                if (!checkType(&v8___IsolateType, isolate )){ status = -1;}
    
                        
                   v8::Isolate * isolate_C = ((v8___Isolate*)isolate)->_Cobject;
    
                        if( 0 == status ){
                       v8::Local<v8::Object> result = v8::Object::New(isolate_C);
                       result_py = 
                        PyObject_CallObject((PyObject *) & v8___Local_v8__Object_Type, NULL);
                        if(result_py){
                            delete ((v8___Local_v8__Object_*) result_py)->_Cobject ;
                            ((v8___Local_v8__Object_*) result_py)->_Cobject = new v8::Local<v8::Object>(result);
                        };
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Object__Cast(PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* obj = NULL;
        
        static char *kwlist[] = { "obj", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &obj);
            if ( 0 == status  && obj){
                    
                    
                if (!checkType(&v8___ValueType, obj )){ status = -1;}
    
                        
                   v8::Value * obj_C = ((v8___Value*)obj)->_Cobject;
    
                        if( 0 == status ){
                       v8::Object * result = v8::Object::Cast(obj_C);
                       result_py = 
                       PyObject_CallObject((PyObject *) & v8___ObjectType, NULL);
                       if(result_py){
                           delete ((v8___Object*) result_py)->_Cobject ;
                           ((v8___Object*) result_py)->_Cobject = result;
                       };
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        

static void
v8___ObjectOperationDescriptor_dealloc(v8___ObjectOperationDescriptor* self)
{
    if(!self) return;
    if (!self->_is_c_reference){
        delete self->_Cobject;
    }
    self->_Cobject = NULL;
    self->_owner = NULL;
    self->_is_c_reference = false;
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject *
v8___ObjectOperationDescriptor_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
    v8___ObjectOperationDescriptor *self;

    self = (v8___ObjectOperationDescriptor *)type->tp_alloc(type, 0);
    if (self != NULL) {
        self->_Cobject = NULL;
        self->_owner = NULL;
    }

    return (PyObject *)self;
}       

static int
v8___ObjectOperationDescriptor_init(v8___ObjectOperationDescriptor *self, PyObject *args, PyObject *kwds)
{
    int status = -1;
    if(!self) return status;
    self->_owner = (PyObject*)self;
    self->_Cobject = new v8___ObjectOperationDescriptor();
    status = self->get_Cobject(self)?0:-1; 
    if (status != 0){
       self->_Cobject = NULL;
       status = 0;
    }
    return status;
}



static void
v8___ObjectTemplate_dealloc(v8___ObjectTemplate* self)
{
    if(!self) return;
    if (!self->_is_c_reference){
        delete self->_Cobject;
    }
    self->_Cobject = NULL;
    self->_owner = NULL;
    self->_is_c_reference = false;
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject *
v8___ObjectTemplate_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
    v8___ObjectTemplate *self;

    self = (v8___ObjectTemplate *)type->tp_alloc(type, 0);
    if (self != NULL) {
        self->_Cobject = NULL;
        self->_owner = NULL;
    }

    return (PyObject *)self;
}       

static int
v8___ObjectTemplate_init(v8___ObjectTemplate *self, PyObject *args, PyObject *kwds)
{
    int status = -1;
    if(!self) return status;
    self->_owner = (PyObject*)self;
    
    {
        PyObject * tmp = NULL;
        (void)tmp;
         
        static char *kwlist[] = { "Anon_1", NULL};
        
        PyObject* Anon_1 = NULL;
        
            
        if ( 0 != status ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &Anon_1);
            if ( 0 == status  && Anon_1){
                
                
                if(status == 0){
                    
                   v8::ObjectTemplate const& Anon_1_C = *((v8___ObjectTemplate*)Anon_1)->_Cobject;
    
                    self->_Cobject = new v8::ObjectTemplate(Anon_1_C);
                    
                        
                }
            }
        }
    }
    if (status != 0){
       self->_Cobject = NULL;
       status = 0;
    }
    return status;
}


static PyObject*
v8___ObjectTemplate__New(PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* isolate = NULL;
            PyObject* constructor = NULL;
        
        static char *kwlist[] = { "isolate""constructor", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OO", kwlist, &isolate,&constructor);
            if ( 0 == status  && isolate && constructor){
                    
                    
                if (!checkType(&v8___IsolateType, isolate )){ status = -1;}
    
                if (!checkType(&v8___Local_v8__FunctionTemplate_Type, constructor )){ status = -1;}
    
                        
                   v8::Isolate * isolate_C = ((v8___Isolate*)isolate)->_Cobject;
    
                   v8::Local<v8::FunctionTemplate>& constructor_C = *((v8___Local_v8__FunctionTemplate_*)constructor)->_Cobject;
    
                        if( 0 == status ){
                       v8::Local<v8::ObjectTemplate> result = v8::ObjectTemplate::New(isolate_C, constructor_C);
                       result_py = 
                        PyObject_CallObject((PyObject *) & v8___Local_v8__ObjectTemplate_Type, NULL);
                        if(result_py){
                            delete ((v8___Local_v8__ObjectTemplate_*) result_py)->_Cobject ;
                            ((v8___Local_v8__ObjectTemplate_*) result_py)->_Cobject = new v8::Local<v8::ObjectTemplate>(result);
                        };
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OO", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                       v8::Local<v8::ObjectTemplate> result = v8::ObjectTemplate::New();
                       result_py = 
                        PyObject_CallObject((PyObject *) & v8___Local_v8__ObjectTemplate_Type, NULL);
                        if(result_py){
                            delete ((v8___Local_v8__ObjectTemplate_*) result_py)->_Cobject ;
                            ((v8___Local_v8__ObjectTemplate_*) result_py)->_Cobject = new v8::Local<v8::ObjectTemplate>(result);
                        };
                    
                     
             }
        }
    }
    

    {
        
            PyObject* isolate = NULL;
            PyObject* constructor = NULL;
        
        static char *kwlist[] = { "isolate""constructor", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OO", kwlist, &isolate,&constructor);
            if ( 0 == status  && isolate && constructor){
                    
                    
                if (!checkType(&v8internal___IsolateType, isolate )){ status = -1;}
    
                if (!checkType(&v8___Local_v8__FunctionTemplate_Type, constructor )){ status = -1;}
    
                        
                   v8::internal::Isolate * isolate_C = ((v8internal___Isolate*)isolate)->_Cobject;
    
                   v8::Local<v8::FunctionTemplate>& constructor_C = *((v8___Local_v8__FunctionTemplate_*)constructor)->_Cobject;
    
                        if( 0 == status ){
                       v8::Local<v8::ObjectTemplate> result = v8::ObjectTemplate::New(isolate_C, constructor_C);
                       result_py = 
                        PyObject_CallObject((PyObject *) & v8___Local_v8__ObjectTemplate_Type, NULL);
                        if(result_py){
                            delete ((v8___Local_v8__ObjectTemplate_*) result_py)->_Cobject ;
                            ((v8___Local_v8__ObjectTemplate_*) result_py)->_Cobject = new v8::Local<v8::ObjectTemplate>(result);
                        };
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___ObjectTemplate__NewInstance(v8___ObjectTemplate* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->NewInstance();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    {
        
            PyObject* context = NULL;
        
        static char *kwlist[] = { "context", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist, &context);
            if ( 0 == status  && context){
                    
                    
                if (!checkType(&v8___Local_v8__Context_Type, context )){ status = -1;}
    
                        
                   v8::Local<v8::Context>& context_C = *((v8___Local_v8__Context_*)context)->_Cobject;
    
                        if( 0 == status ){
                        self->_Cobject->NewInstance(context_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___ObjectTemplate__SetAccessor(v8___ObjectTemplate* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* name = NULL;
            PyObject* getter = NULL;
            PyObject* setter = NULL;
            PyObject* data = NULL;
            PyObject* settings = NULL;
            PyObject* attribute = NULL;
            PyObject* signature = NULL;
        
        static char *kwlist[] = { "name""getter""setter""data""settings""attribute""signature", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OOOOOOO", kwlist, &name,&getter,&setter,&data,&settings,&attribute,&signature);
            if ( 0 == status  && name && getter && setter && data && settings && attribute && signature){
                    
                    
                if (!checkType(&v8___Local_v8__String_Type, name )){ status = -1;}
    
        if(!(getter && (PyFunction_Check( getter) || getter->tp_call) ) ){ status = -1;}
    
        if(!(setter && (PyFunction_Check( setter) || setter->tp_call) ) ){ status = -1;}
    
                if (!checkType(&v8___Local_v8__Value_Type, data )){ status = -1;}
    
    
    
    
    
  
    
    
    
    
  
                if (!checkType(&v8___Local_v8__AccessorSignature_Type, signature )){ status = -1;}
    
                        
                   v8::Local<v8::String>& name_C = *((v8___Local_v8__String_*)name)->_Cobject;
    v8___AccessorGetterCallback_CL * wrapperCB = new v8___AccessorGetterCallback_CL( getter) ;
            getter_C = wrapperCB->get_C_callback();       
            //TODO: FIX MEMORY LEAK!
    v8___AccessorSetterCallback_CL * wrapperCB = new v8___AccessorSetterCallback_CL( setter) ;
            setter_C = wrapperCB->get_C_callback();       
            //TODO: FIX MEMORY LEAK!
    
                   v8::Local<v8::Value>& data_C = *((v8___Local_v8__Value_*)data)->_Cobject;
    
    
    
    
    
  
    
    
    
    
  
                   v8::Local<v8::AccessorSignature>& signature_C = *((v8___Local_v8__AccessorSignature_*)signature)->_Cobject;
    
                        if( 0 == status ){
                        self->_Cobject->SetAccessor(name_C, getter_C, setter_C, data_C, settings_C, attribute_C, signature_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    {
        
            PyObject* name = NULL;
            PyObject* getter = NULL;
            PyObject* setter = NULL;
            PyObject* data = NULL;
            PyObject* settings = NULL;
            PyObject* attribute = NULL;
            PyObject* signature = NULL;
        
        static char *kwlist[] = { "name""getter""setter""data""settings""attribute""signature", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OOOOOOO", kwlist, &name,&getter,&setter,&data,&settings,&attribute,&signature);
            if ( 0 == status  && name && getter && setter && data && settings && attribute && signature){
                    
                    
                if (!checkType(&v8___Local_v8__Name_Type, name )){ status = -1;}
    
        if(!(getter && (PyFunction_Check( getter) || getter->tp_call) ) ){ status = -1;}
    
        if(!(setter && (PyFunction_Check( setter) || setter->tp_call) ) ){ status = -1;}
    
                if (!checkType(&v8___Local_v8__Value_Type, data )){ status = -1;}
    
    
    
    
    
  
    
    
    
    
  
                if (!checkType(&v8___Local_v8__AccessorSignature_Type, signature )){ status = -1;}
    
                        
                   v8::Local<v8::Name>& name_C = *((v8___Local_v8__Name_*)name)->_Cobject;
    v8___AccessorNameGetterCallback_CL * wrapperCB = new v8___AccessorNameGetterCallback_CL( getter) ;
            getter_C = wrapperCB->get_C_callback();       
            //TODO: FIX MEMORY LEAK!
    v8___AccessorNameSetterCallback_CL * wrapperCB = new v8___AccessorNameSetterCallback_CL( setter) ;
            setter_C = wrapperCB->get_C_callback();       
            //TODO: FIX MEMORY LEAK!
    
                   v8::Local<v8::Value>& data_C = *((v8___Local_v8__Value_*)data)->_Cobject;
    
    
    
    
    
  
    
    
    
    
  
                   v8::Local<v8::AccessorSignature>& signature_C = *((v8___Local_v8__AccessorSignature_*)signature)->_Cobject;
    
                        if( 0 == status ){
                        self->_Cobject->SetAccessor(name_C, getter_C, setter_C, data_C, settings_C, attribute_C, signature_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___ObjectTemplate__SetNamedPropertyHandler(v8___ObjectTemplate* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* getter = NULL;
            PyObject* setter = NULL;
            PyObject* query = NULL;
            PyObject* deleter = NULL;
            PyObject* enumerator = NULL;
            PyObject* data = NULL;
        
        static char *kwlist[] = { "getter""setter""query""deleter""enumerator""data", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OOOOOO", kwlist, &getter,&setter,&query,&deleter,&enumerator,&data);
            if ( 0 == status  && getter && setter && query && deleter && enumerator && data){
                    
                    
        if(!(getter && (PyFunction_Check( getter) || getter->tp_call) ) ){ status = -1;}
    
        if(!(setter && (PyFunction_Check( setter) || setter->tp_call) ) ){ status = -1;}
    
        if(!(query && (PyFunction_Check( query) || query->tp_call) ) ){ status = -1;}
    
        if(!(deleter && (PyFunction_Check( deleter) || deleter->tp_call) ) ){ status = -1;}
    
        if(!(enumerator && (PyFunction_Check( enumerator) || enumerator->tp_call) ) ){ status = -1;}
    
                if (!checkType(&v8___Local_v8__Value_Type, data )){ status = -1;}
    
                        v8___NamedPropertyGetterCallback_CL * wrapperCB = new v8___NamedPropertyGetterCallback_CL( getter) ;
            getter_C = wrapperCB->get_C_callback();       
            //TODO: FIX MEMORY LEAK!
    v8___NamedPropertySetterCallback_CL * wrapperCB = new v8___NamedPropertySetterCallback_CL( setter) ;
            setter_C = wrapperCB->get_C_callback();       
            //TODO: FIX MEMORY LEAK!
    v8___NamedPropertyQueryCallback_CL * wrapperCB = new v8___NamedPropertyQueryCallback_CL( query) ;
            query_C = wrapperCB->get_C_callback();       
            //TODO: FIX MEMORY LEAK!
    v8___NamedPropertyDeleterCallback_CL * wrapperCB = new v8___NamedPropertyDeleterCallback_CL( deleter) ;
            deleter_C = wrapperCB->get_C_callback();       
            //TODO: FIX MEMORY LEAK!
    v8___NamedPropertyEnumeratorCallback_CL * wrapperCB = new v8___NamedPropertyEnumeratorCallback_CL( enumerator) ;
            enumerator_C = wrapperCB->get_C_callback();       
            //TODO: FIX MEMORY LEAK!
    
                   v8::Local<v8::Value>& data_C = *((v8___Local_v8__Value_*)data)->_Cobject;
    
                        if( 0 == status ){
                        self->_Cobject->SetNamedPropertyHandler(getter_C, setter_C, query_C, deleter_C, enumerator_C, data_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___ObjectTemplate__SetHandler(v8___ObjectTemplate* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* configuration = NULL;
        
        static char *kwlist[] = { "configuration", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &configuration);
            if ( 0 == status  && configuration){
                    
                    
                if (!checkType(&v8___NamedPropertyHandlerConfigurationType, configuration )){ status = -1;}
    
                        
                   v8::NamedPropertyHandlerConfiguration const& configuration_C = *((v8___NamedPropertyHandlerConfiguration*)configuration)->_Cobject;
    
                        if( 0 == status ){
                        self->_Cobject->SetHandler(configuration_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    {
        
            PyObject* configuration = NULL;
        
        static char *kwlist[] = { "configuration", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &configuration);
            if ( 0 == status  && configuration){
                    
                    
                if (!checkType(&v8___IndexedPropertyHandlerConfigurationType, configuration )){ status = -1;}
    
                        
                   v8::IndexedPropertyHandlerConfiguration const& configuration_C = *((v8___IndexedPropertyHandlerConfiguration*)configuration)->_Cobject;
    
                        if( 0 == status ){
                        self->_Cobject->SetHandler(configuration_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___ObjectTemplate__SetIndexedPropertyHandler(v8___ObjectTemplate* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* getter = NULL;
            PyObject* setter = NULL;
            PyObject* query = NULL;
            PyObject* deleter = NULL;
            PyObject* enumerator = NULL;
            PyObject* data = NULL;
        
        static char *kwlist[] = { "getter""setter""query""deleter""enumerator""data", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OOOOOO", kwlist, &getter,&setter,&query,&deleter,&enumerator,&data);
            if ( 0 == status  && getter && setter && query && deleter && enumerator && data){
                    
                    
        if(!(getter && (PyFunction_Check( getter) || getter->tp_call) ) ){ status = -1;}
    
        if(!(setter && (PyFunction_Check( setter) || setter->tp_call) ) ){ status = -1;}
    
        if(!(query && (PyFunction_Check( query) || query->tp_call) ) ){ status = -1;}
    
        if(!(deleter && (PyFunction_Check( deleter) || deleter->tp_call) ) ){ status = -1;}
    
        if(!(enumerator && (PyFunction_Check( enumerator) || enumerator->tp_call) ) ){ status = -1;}
    
                if (!checkType(&v8___Local_v8__Value_Type, data )){ status = -1;}
    
                        v8___IndexedPropertyGetterCallback_CL * wrapperCB = new v8___IndexedPropertyGetterCallback_CL( getter) ;
            getter_C = wrapperCB->get_C_callback();       
            //TODO: FIX MEMORY LEAK!
    v8___IndexedPropertySetterCallback_CL * wrapperCB = new v8___IndexedPropertySetterCallback_CL( setter) ;
            setter_C = wrapperCB->get_C_callback();       
            //TODO: FIX MEMORY LEAK!
    v8___IndexedPropertyQueryCallback_CL * wrapperCB = new v8___IndexedPropertyQueryCallback_CL( query) ;
            query_C = wrapperCB->get_C_callback();       
            //TODO: FIX MEMORY LEAK!
    v8___IndexedPropertyDeleterCallback_CL * wrapperCB = new v8___IndexedPropertyDeleterCallback_CL( deleter) ;
            deleter_C = wrapperCB->get_C_callback();       
            //TODO: FIX MEMORY LEAK!
    v8___IndexedPropertyEnumeratorCallback_CL * wrapperCB = new v8___IndexedPropertyEnumeratorCallback_CL( enumerator) ;
            enumerator_C = wrapperCB->get_C_callback();       
            //TODO: FIX MEMORY LEAK!
    
                   v8::Local<v8::Value>& data_C = *((v8___Local_v8__Value_*)data)->_Cobject;
    
                        if( 0 == status ){
                        self->_Cobject->SetIndexedPropertyHandler(getter_C, setter_C, query_C, deleter_C, enumerator_C, data_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___ObjectTemplate__SetCallAsFunctionHandler(v8___ObjectTemplate* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* callback = NULL;
            PyObject* data = NULL;
        
        static char *kwlist[] = { "callback""data", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OO", kwlist, &callback,&data);
            if ( 0 == status  && callback && data){
                    
                    
        if(!(callback && (PyFunction_Check( callback) || callback->tp_call) ) ){ status = -1;}
    
                if (!checkType(&v8___Local_v8__Value_Type, data )){ status = -1;}
    
                        v8___FunctionCallback_CL * wrapperCB = new v8___FunctionCallback_CL( callback) ;
            callback_C = wrapperCB->get_C_callback();       
            //TODO: FIX MEMORY LEAK!
    
                   v8::Local<v8::Value>& data_C = *((v8___Local_v8__Value_*)data)->_Cobject;
    
                        if( 0 == status ){
                        self->_Cobject->SetCallAsFunctionHandler(callback_C, data_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___ObjectTemplate__MarkAsUndetectable(v8___ObjectTemplate* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->MarkAsUndetectable();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___ObjectTemplate__SetAccessCheckCallbacks(v8___ObjectTemplate* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* named_handler = NULL;
            PyObject* indexed_handler = NULL;
            PyObject* data = NULL;
            PyObject* turned_on_by_default = NULL;
        
        static char *kwlist[] = { "named_handler""indexed_handler""data""turned_on_by_default", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OOOO", kwlist, &named_handler,&indexed_handler,&data,&turned_on_by_default);
            if ( 0 == status  && named_handler && indexed_handler && data){
                    
                    
        if(!(named_handler && (PyFunction_Check( named_handler) || named_handler->tp_call) ) ){ status = -1;}
    
        if(!(indexed_handler && (PyFunction_Check( indexed_handler) || indexed_handler->tp_call) ) ){ status = -1;}
    
                if (!checkType(&v8___Local_v8__Value_Type, data )){ status = -1;}
    
                if(!PyBool_Check(turned_on_by_default)){ status = -1;}
            
                        v8___NamedSecurityCallback_CL * wrapperCB = new v8___NamedSecurityCallback_CL( named_handler) ;
            named_handler_C = wrapperCB->get_C_callback();       
            //TODO: FIX MEMORY LEAK!
    v8___IndexedSecurityCallback_CL * wrapperCB = new v8___IndexedSecurityCallback_CL( indexed_handler) ;
            indexed_handler_C = wrapperCB->get_C_callback();       
            //TODO: FIX MEMORY LEAK!
    
                   v8::Local<v8::Value>& data_C = *((v8___Local_v8__Value_*)data)->_Cobject;
    
                    
                bool  turned_on_by_default_C = (PyInt_Check(turned_on_by_default)? PyInt_AsLong(turned_on_by_default):PyLongAsLong(turned_on_by_default))!=0     
                
                        if( 0 == status ){
                        self->_Cobject->SetAccessCheckCallbacks(named_handler_C, indexed_handler_C, data_C, turned_on_by_default_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___ObjectTemplate__InternalFieldCount(v8___ObjectTemplate* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->InternalFieldCount();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___ObjectTemplate__SetInternalFieldCount(v8___ObjectTemplate* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* value = NULL;
        
        static char *kwlist[] = { "value", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &value);
            if ( 0 == status ){
                    
                    
                if(!PyInt_Check(value)){ status = -1;}
            
                        
                    intvalue_C = PyInt_Check(value)? PyInt_AsLong(value):PyLong_AsLong(value);     
                
                        if( 0 == status ){
                        self->_Cobject->SetInternalFieldCount(value_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        

static void
v8___Platform_dealloc(v8___Platform* self)
{
    if(!self) return;
    if (!self->_is_c_reference){
        delete self->_Cobject;
    }
    self->_Cobject = NULL;
    self->_owner = NULL;
    self->_is_c_reference = false;
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject *
v8___Platform_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
    v8___Platform *self;

    self = (v8___Platform *)type->tp_alloc(type, 0);
    if (self != NULL) {
        self->_Cobject = NULL;
        self->_owner = NULL;
    }

    return (PyObject *)self;
}       

static int
v8___Platform_init(v8___Platform *self, PyObject *args, PyObject *kwds)
{
    int status = -1;
    if(!self) return status;
    self->_owner = (PyObject*)self;
    self->_Cobject = new v8___Platform();
    status = self->get_Cobject(self)?0:-1; 
    if (status != 0){
       self->_Cobject = NULL;
       status = 0;
    }
    return status;
}



static void
v8___Primitive_dealloc(v8___Primitive* self)
{
    if(!self) return;
    if (!self->_is_c_reference){
        delete self->_Cobject;
    }
    self->_Cobject = NULL;
    self->_owner = NULL;
    self->_is_c_reference = false;
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject *
v8___Primitive_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
    v8___Primitive *self;

    self = (v8___Primitive *)type->tp_alloc(type, 0);
    if (self != NULL) {
        self->_Cobject = NULL;
        self->_owner = NULL;
    }

    return (PyObject *)self;
}       

static int
v8___Primitive_init(v8___Primitive *self, PyObject *args, PyObject *kwds)
{
    int status = -1;
    if(!self) return status;
    self->_owner = (PyObject*)self;
    
    {
        PyObject * tmp = NULL;
        (void)tmp;
         
        static char *kwlist[] = { "Anon_1", NULL};
        
        PyObject* Anon_1 = NULL;
        
            
        if ( 0 != status ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &Anon_1);
            if ( 0 == status  && Anon_1){
                
                
                if(status == 0){
                    
                   v8::Primitive const& Anon_1_C = *((v8___Primitive*)Anon_1)->_Cobject;
    
                    self->_Cobject = new v8::Primitive(Anon_1_C);
                    
                        
                }
            }
        }
    }
    if (status != 0){
       self->_Cobject = NULL;
       status = 0;
    }
    return status;
}



static void
v8___Promise_dealloc(v8___Promise* self)
{
    if(!self) return;
    if (!self->_is_c_reference){
        delete self->_Cobject;
    }
    self->_Cobject = NULL;
    self->_owner = NULL;
    self->_is_c_reference = false;
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject *
v8___Promise_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
    v8___Promise *self;

    self = (v8___Promise *)type->tp_alloc(type, 0);
    if (self != NULL) {
        self->_Cobject = NULL;
        self->_owner = NULL;
    }

    return (PyObject *)self;
}       

static int
v8___Promise_init(v8___Promise *self, PyObject *args, PyObject *kwds)
{
    int status = -1;
    if(!self) return status;
    self->_owner = (PyObject*)self;
    
    {
        PyObject * tmp = NULL;
        (void)tmp;
         
        static char *kwlist[] = { "Anon_1", NULL};
        
        PyObject* Anon_1 = NULL;
        
            
        if ( 0 != status ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &Anon_1);
            if ( 0 == status  && Anon_1){
                
                
                if(status == 0){
                    
                   v8::Promise const& Anon_1_C = *((v8___Promise*)Anon_1)->_Cobject;
    
                    self->_Cobject = new v8::Promise(Anon_1_C);
                    
                        
                }
            }
        }
    }
    if (status != 0){
       self->_Cobject = NULL;
       status = 0;
    }
    return status;
}


static PyObject*
v8___Promise__Chain(v8___Promise* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* handler = NULL;
        
        static char *kwlist[] = { "handler", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &handler);
            if ( 0 == status  && handler){
                    
                    
                if (!checkType(&v8___Local_v8__Function_Type, handler )){ status = -1;}
    
                        
                   v8::Local<v8::Function>& handler_C = *((v8___Local_v8__Function_*)handler)->_Cobject;
    
                        if( 0 == status ){
                        self->_Cobject->Chain(handler_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    {
        
            PyObject* context = NULL;
            PyObject* handler = NULL;
        
        static char *kwlist[] = { "context""handler", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &context,&handler);
            if ( 0 == status  && context && handler){
                    
                    
                if (!checkType(&v8___Local_v8__Context_Type, context )){ status = -1;}
    
                if (!checkType(&v8___Local_v8__Function_Type, handler )){ status = -1;}
    
                        
                   v8::Local<v8::Context>& context_C = *((v8___Local_v8__Context_*)context)->_Cobject;
    
                   v8::Local<v8::Function>& handler_C = *((v8___Local_v8__Function_*)handler)->_Cobject;
    
                        if( 0 == status ){
                        self->_Cobject->Chain(context_C, handler_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Promise__Catch(v8___Promise* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* handler = NULL;
        
        static char *kwlist[] = { "handler", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &handler);
            if ( 0 == status  && handler){
                    
                    
                if (!checkType(&v8___Local_v8__Function_Type, handler )){ status = -1;}
    
                        
                   v8::Local<v8::Function>& handler_C = *((v8___Local_v8__Function_*)handler)->_Cobject;
    
                        if( 0 == status ){
                        self->_Cobject->Catch(handler_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    {
        
            PyObject* context = NULL;
            PyObject* handler = NULL;
        
        static char *kwlist[] = { "context""handler", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &context,&handler);
            if ( 0 == status  && context && handler){
                    
                    
                if (!checkType(&v8___Local_v8__Context_Type, context )){ status = -1;}
    
                if (!checkType(&v8___Local_v8__Function_Type, handler )){ status = -1;}
    
                        
                   v8::Local<v8::Context>& context_C = *((v8___Local_v8__Context_*)context)->_Cobject;
    
                   v8::Local<v8::Function>& handler_C = *((v8___Local_v8__Function_*)handler)->_Cobject;
    
                        if( 0 == status ){
                        self->_Cobject->Catch(context_C, handler_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Promise__Then(v8___Promise* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* handler = NULL;
        
        static char *kwlist[] = { "handler", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &handler);
            if ( 0 == status  && handler){
                    
                    
                if (!checkType(&v8___Local_v8__Function_Type, handler )){ status = -1;}
    
                        
                   v8::Local<v8::Function>& handler_C = *((v8___Local_v8__Function_*)handler)->_Cobject;
    
                        if( 0 == status ){
                        self->_Cobject->Then(handler_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    {
        
            PyObject* context = NULL;
            PyObject* handler = NULL;
        
        static char *kwlist[] = { "context""handler", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &context,&handler);
            if ( 0 == status  && context && handler){
                    
                    
                if (!checkType(&v8___Local_v8__Context_Type, context )){ status = -1;}
    
                if (!checkType(&v8___Local_v8__Function_Type, handler )){ status = -1;}
    
                        
                   v8::Local<v8::Context>& context_C = *((v8___Local_v8__Context_*)context)->_Cobject;
    
                   v8::Local<v8::Function>& handler_C = *((v8___Local_v8__Function_*)handler)->_Cobject;
    
                        if( 0 == status ){
                        self->_Cobject->Then(context_C, handler_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Promise__HasHandler(v8___Promise* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->HasHandler();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Promise__Cast(PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* obj = NULL;
        
        static char *kwlist[] = { "obj", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &obj);
            if ( 0 == status  && obj){
                    
                    
                if (!checkType(&v8___ValueType, obj )){ status = -1;}
    
                        
                   v8::Value * obj_C = ((v8___Value*)obj)->_Cobject;
    
                        if( 0 == status ){
                       v8::Promise * result = v8::Promise::Cast(obj_C);
                       result_py = 
                       PyObject_CallObject((PyObject *) & v8___PromiseType, NULL);
                       if(result_py){
                           delete ((v8___Promise*) result_py)->_Cobject ;
                           ((v8___Promise*) result_py)->_Cobject = result;
                       };
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        

static void
v8___RawOperationDescriptor_dealloc(v8___RawOperationDescriptor* self)
{
    if(!self) return;
    if (!self->_is_c_reference){
        delete self->_Cobject;
    }
    self->_Cobject = NULL;
    self->_owner = NULL;
    self->_is_c_reference = false;
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject *
v8___RawOperationDescriptor_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
    v8___RawOperationDescriptor *self;

    self = (v8___RawOperationDescriptor *)type->tp_alloc(type, 0);
    if (self != NULL) {
        self->_Cobject = NULL;
        self->_owner = NULL;
    }

    return (PyObject *)self;
}       

static int
v8___RawOperationDescriptor_init(v8___RawOperationDescriptor *self, PyObject *args, PyObject *kwds)
{
    int status = -1;
    if(!self) return status;
    self->_owner = (PyObject*)self;
    self->_Cobject = new v8___RawOperationDescriptor();
    status = self->get_Cobject(self)?0:-1; 
    if (status != 0){
       self->_Cobject = NULL;
       status = 0;
    }
    return status;
}



static void
v8___Script_dealloc(v8___Script* self)
{
    if(!self) return;
    if (!self->_is_c_reference){
        delete self->_Cobject;
    }
    self->_Cobject = NULL;
    self->_owner = NULL;
    self->_is_c_reference = false;
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject *
v8___Script_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
    v8___Script *self;

    self = (v8___Script *)type->tp_alloc(type, 0);
    if (self != NULL) {
        self->_Cobject = NULL;
        self->_owner = NULL;
    }

    return (PyObject *)self;
}       

static int
v8___Script_init(v8___Script *self, PyObject *args, PyObject *kwds)
{
    int status = -1;
    if(!self) return status;
    self->_owner = (PyObject*)self;
    
    {
        PyObject * tmp = NULL;
        (void)tmp;
         
        static char *kwlist[] = {  NULL};
        
            
        if ( 0 != status ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist, );
            if ( 0 == status ){
                
                
                if(status == 0){
                    
                    self->_Cobject = new v8::Script();
                    
                        
                }
            }
        }
    }
    {
        PyObject * tmp = NULL;
        (void)tmp;
         
        static char *kwlist[] = { "Anon_1", NULL};
        
        PyObject* Anon_1 = NULL;
        
            
        if ( 0 != status ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &Anon_1);
            if ( 0 == status  && Anon_1){
                
                
                if(status == 0){
                    
                   v8::Script const& Anon_1_C = *((v8___Script*)Anon_1)->_Cobject;
    
                    self->_Cobject = new v8::Script(Anon_1_C);
                    
                        
                }
            }
        }
    }
    if (status != 0){
       self->_Cobject = NULL;
       status = 0;
    }
    return status;
}


static PyObject*
v8___Script__Compile(PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* source = NULL;
            PyObject* origin = NULL;
        
        static char *kwlist[] = { "source""origin", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OO", kwlist, &source,&origin);
            if ( 0 == status  && source && origin){
                    
                    
                if (!checkType(&v8___Local_v8__String_Type, source )){ status = -1;}
    
                if (!checkType(&v8___ScriptOriginType, origin )){ status = -1;}
    
                        
                   v8::Local<v8::String>& source_C = *((v8___Local_v8__String_*)source)->_Cobject;
    
                   v8::ScriptOrigin * origin_C = ((v8___ScriptOrigin*)origin)->_Cobject;
    
                        if( 0 == status ){
                       v8::Local<v8::Script> result = v8::Script::Compile(source_C, origin_C);
                       result_py = 
                        PyObject_CallObject((PyObject *) & v8___Local_v8__Script_Type, NULL);
                        if(result_py){
                            delete ((v8___Local_v8__Script_*) result_py)->_Cobject ;
                            ((v8___Local_v8__Script_*) result_py)->_Cobject = new v8::Local<v8::Script>(result);
                        };
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    {
        
            PyObject* context = NULL;
            PyObject* source = NULL;
            PyObject* origin = NULL;
        
        static char *kwlist[] = { "context""source""origin", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OO", kwlist, &context,&source,&origin);
            if ( 0 == status  && context && source && origin){
                    
                    
                if (!checkType(&v8___Local_v8__Context_Type, context )){ status = -1;}
    
                if (!checkType(&v8___Local_v8__String_Type, source )){ status = -1;}
    
                if (!checkType(&v8___ScriptOriginType, origin )){ status = -1;}
    
                        
                   v8::Local<v8::Context>& context_C = *((v8___Local_v8__Context_*)context)->_Cobject;
    
                   v8::Local<v8::String>& source_C = *((v8___Local_v8__String_*)source)->_Cobject;
    
                   v8::ScriptOrigin * origin_C = ((v8___ScriptOrigin*)origin)->_Cobject;
    
                        if( 0 == status ){
                       v8::Local<v8::Script> result = v8::Script::Compile(context_C, source_C, origin_C);
                       result_py = 
                        PyObject_CallObject((PyObject *) & v8___Local_v8__Script_Type, NULL);
                        if(result_py){
                            delete ((v8___Local_v8__Script_*) result_py)->_Cobject ;
                            ((v8___Local_v8__Script_*) result_py)->_Cobject = new v8::Local<v8::Script>(result);
                        };
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    {
        
            PyObject* source = NULL;
            PyObject* file_name = NULL;
        
        static char *kwlist[] = { "source""file_name", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OO", kwlist, &source,&file_name);
            if ( 0 == status  && source && file_name){
                    
                    
                if (!checkType(&v8___Local_v8__String_Type, source )){ status = -1;}
    
                if (!checkType(&v8___Local_v8__String_Type, file_name )){ status = -1;}
    
                        
                   v8::Local<v8::String>& source_C = *((v8___Local_v8__String_*)source)->_Cobject;
    
                   v8::Local<v8::String>& file_name_C = *((v8___Local_v8__String_*)file_name)->_Cobject;
    
                        if( 0 == status ){
                       v8::Local<v8::Script> result = v8::Script::Compile(source_C, file_name_C);
                       result_py = 
                        PyObject_CallObject((PyObject *) & v8___Local_v8__Script_Type, NULL);
                        if(result_py){
                            delete ((v8___Local_v8__Script_*) result_py)->_Cobject ;
                            ((v8___Local_v8__Script_*) result_py)->_Cobject = new v8::Local<v8::Script>(result);
                        };
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Script__Run(v8___Script* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->Run();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    {
        
            PyObject* context = NULL;
        
        static char *kwlist[] = { "context", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist, &context);
            if ( 0 == status  && context){
                    
                    
                if (!checkType(&v8___Local_v8__Context_Type, context )){ status = -1;}
    
                        
                   v8::Local<v8::Context>& context_C = *((v8___Local_v8__Context_*)context)->_Cobject;
    
                        if( 0 == status ){
                        self->_Cobject->Run(context_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Script__GetUnboundScript(v8___Script* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->GetUnboundScript();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Script__GetId(v8___Script* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->GetId();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        

static void
v8___SharedArrayBuffer_dealloc(v8___SharedArrayBuffer* self)
{
    if(!self) return;
    if (!self->_is_c_reference){
        delete self->_Cobject;
    }
    self->_Cobject = NULL;
    self->_owner = NULL;
    self->_is_c_reference = false;
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject *
v8___SharedArrayBuffer_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
    v8___SharedArrayBuffer *self;

    self = (v8___SharedArrayBuffer *)type->tp_alloc(type, 0);
    if (self != NULL) {
        self->_Cobject = NULL;
        self->_owner = NULL;
    }

    return (PyObject *)self;
}       

static int
v8___SharedArrayBuffer_init(v8___SharedArrayBuffer *self, PyObject *args, PyObject *kwds)
{
    int status = -1;
    if(!self) return status;
    self->_owner = (PyObject*)self;
    
    {
        PyObject * tmp = NULL;
        (void)tmp;
         
        static char *kwlist[] = { "Anon_1", NULL};
        
        PyObject* Anon_1 = NULL;
        
            
        if ( 0 != status ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &Anon_1);
            if ( 0 == status  && Anon_1){
                
                
                if(status == 0){
                    
                   v8::SharedArrayBuffer const& Anon_1_C = *((v8___SharedArrayBuffer*)Anon_1)->_Cobject;
    
                    self->_Cobject = new v8::SharedArrayBuffer(Anon_1_C);
                    
                        
                }
            }
        }
    }
    if (status != 0){
       self->_Cobject = NULL;
       status = 0;
    }
    return status;
}


static PyObject*
v8___SharedArrayBuffer__ByteLength(v8___SharedArrayBuffer* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->ByteLength();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___SharedArrayBuffer__New(PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* isolate = NULL;
            PyObject* byte_length = NULL;
        
        static char *kwlist[] = { "isolate""byte_length", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OO", kwlist, &isolate,&byte_length);
            if ( 0 == status  && isolate){
                    
                    
                if (!checkType(&v8___IsolateType, isolate )){ status = -1;}
    
            if (!PyLong_Check(byte_length )){ status = -1; }
                        
                   v8::Isolate * isolate_C = ((v8___Isolate*)isolate)->_Cobject;
    
                    long unsigned intbyte_length_C = PyInt_Check(byte_length)? PyInt_AsLong(byte_length):PyLong_AsLong(byte_length);
                 
                
                        if( 0 == status ){
                       v8::Local<v8::SharedArrayBuffer> result = v8::SharedArrayBuffer::New(isolate_C, byte_length_C);
                       result_py = 
                        PyObject_CallObject((PyObject *) & v8___Local_v8__SharedArrayBuffer_Type, NULL);
                        if(result_py){
                            delete ((v8___Local_v8__SharedArrayBuffer_*) result_py)->_Cobject ;
                            ((v8___Local_v8__SharedArrayBuffer_*) result_py)->_Cobject = new v8::Local<v8::SharedArrayBuffer>(result);
                        };
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    {
        
            PyObject* isolate = NULL;
            PyObject* data = NULL;
            PyObject* byte_length = NULL;
            PyObject* mode = NULL;
        
        static char *kwlist[] = { "isolate""data""byte_length""mode", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OO", kwlist, &isolate,&data,&byte_length,&mode);
            if ( 0 == status  && isolate && data && mode){
                    
                    
                if (!checkType(&v8___IsolateType, isolate )){ status = -1;}
    
            if (!PyLong_Check(byte_length )){ status = -1; }
    
    
  
                        
                   v8::Isolate * isolate_C = ((v8___Isolate*)isolate)->_Cobject;
    
                         
                
                    long unsigned intbyte_length_C = PyInt_Check(byte_length)? PyInt_AsLong(byte_length):PyLong_AsLong(byte_length);
                 
                
    
    
  
                        if( 0 == status ){
                       v8::Local<v8::SharedArrayBuffer> result = v8::SharedArrayBuffer::New(isolate_C, data_C, byte_length_C, mode_C);
                       result_py = 
                        PyObject_CallObject((PyObject *) & v8___Local_v8__SharedArrayBuffer_Type, NULL);
                        if(result_py){
                            delete ((v8___Local_v8__SharedArrayBuffer_*) result_py)->_Cobject ;
                            ((v8___Local_v8__SharedArrayBuffer_*) result_py)->_Cobject = new v8::Local<v8::SharedArrayBuffer>(result);
                        };
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___SharedArrayBuffer__IsExternal(v8___SharedArrayBuffer* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->IsExternal();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___SharedArrayBuffer__Externalize(v8___SharedArrayBuffer* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->Externalize();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___SharedArrayBuffer__GetContents(v8___SharedArrayBuffer* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->GetContents();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___SharedArrayBuffer__Cast(PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* obj = NULL;
        
        static char *kwlist[] = { "obj", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &obj);
            if ( 0 == status  && obj){
                    
                    
                if (!checkType(&v8___ValueType, obj )){ status = -1;}
    
                        
                   v8::Value * obj_C = ((v8___Value*)obj)->_Cobject;
    
                        if( 0 == status ){
                       v8::SharedArrayBuffer * result = v8::SharedArrayBuffer::Cast(obj_C);
                       result_py = 
                       PyObject_CallObject((PyObject *) & v8___SharedArrayBufferType, NULL);
                       if(result_py){
                           delete ((v8___SharedArrayBuffer*) result_py)->_Cobject ;
                           ((v8___SharedArrayBuffer*) result_py)->_Cobject = result;
                       };
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        

static void
v8___Signature_dealloc(v8___Signature* self)
{
    if(!self) return;
    if (!self->_is_c_reference){
        delete self->_Cobject;
    }
    self->_Cobject = NULL;
    self->_owner = NULL;
    self->_is_c_reference = false;
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject *
v8___Signature_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
    v8___Signature *self;

    self = (v8___Signature *)type->tp_alloc(type, 0);
    if (self != NULL) {
        self->_Cobject = NULL;
        self->_owner = NULL;
    }

    return (PyObject *)self;
}       

static int
v8___Signature_init(v8___Signature *self, PyObject *args, PyObject *kwds)
{
    int status = -1;
    if(!self) return status;
    self->_owner = (PyObject*)self;
    
    {
        PyObject * tmp = NULL;
        (void)tmp;
         
        static char *kwlist[] = { "Anon_1", NULL};
        
        PyObject* Anon_1 = NULL;
        
            
        if ( 0 != status ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &Anon_1);
            if ( 0 == status  && Anon_1){
                
                
                if(status == 0){
                    
                   v8::Signature const& Anon_1_C = *((v8___Signature*)Anon_1)->_Cobject;
    
                    self->_Cobject = new v8::Signature(Anon_1_C);
                    
                        
                }
            }
        }
    }
    if (status != 0){
       self->_Cobject = NULL;
       status = 0;
    }
    return status;
}


static PyObject*
v8___Signature__New(PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* isolate = NULL;
            PyObject* receiver = NULL;
        
        static char *kwlist[] = { "isolate""receiver", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OO", kwlist, &isolate,&receiver);
            if ( 0 == status  && isolate && receiver){
                    
                    
                if (!checkType(&v8___IsolateType, isolate )){ status = -1;}
    
                if (!checkType(&v8___Local_v8__FunctionTemplate_Type, receiver )){ status = -1;}
    
                        
                   v8::Isolate * isolate_C = ((v8___Isolate*)isolate)->_Cobject;
    
                   v8::Local<v8::FunctionTemplate>& receiver_C = *((v8___Local_v8__FunctionTemplate_*)receiver)->_Cobject;
    
                        if( 0 == status ){
                       v8::Local<v8::Signature> result = v8::Signature::New(isolate_C, receiver_C);
                       result_py = 
                        PyObject_CallObject((PyObject *) & v8___Local_v8__Signature_Type, NULL);
                        if(result_py){
                            delete ((v8___Local_v8__Signature_*) result_py)->_Cobject ;
                            ((v8___Local_v8__Signature_*) result_py)->_Cobject = new v8::Local<v8::Signature>(result);
                        };
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        

static void
v8___StartupData_dealloc(v8___StartupData* self)
{
    if(!self) return;
    if (!self->_is_c_reference){
        delete self->_Cobject;
    }
    self->_Cobject = NULL;
    self->_owner = NULL;
    self->_is_c_reference = false;
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject *
v8___StartupData_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
    v8___StartupData *self;

    self = (v8___StartupData *)type->tp_alloc(type, 0);
    if (self != NULL) {
        self->_Cobject = NULL;
        self->_owner = NULL;
    }

    return (PyObject *)self;
}       

static int
v8___StartupData_init(v8___StartupData *self, PyObject *args, PyObject *kwds)
{
    int status = -1;
    if(!self) return status;
    self->_owner = (PyObject*)self;
    
    {
        PyObject * tmp = NULL;
        (void)tmp;
         
        static char *kwlist[] = {  NULL};
        
            
        if ( 0 != status ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist, );
            if ( 0 == status ){
                
                
                if(status == 0){
                    
                    self->_Cobject = new v8::StartupData();
                    
                        
                }
            }
        }
    }
    {
        PyObject * tmp = NULL;
        (void)tmp;
         
        static char *kwlist[] = { "Anon_1", NULL};
        
        PyObject* Anon_1 = NULL;
        
            
        if ( 0 != status ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &Anon_1);
            if ( 0 == status  && Anon_1){
                
                
                if(status == 0){
                    
                   v8::StartupData const& Anon_1_C = *((v8___StartupData*)Anon_1)->_Cobject;
    
                    self->_Cobject = new v8::StartupData(Anon_1_C);
                    
                        
                }
            }
        }
    }
    if (status != 0){
       self->_Cobject = NULL;
       status = 0;
    }
    return status;
}



static void
v8___StackFrame_dealloc(v8___StackFrame* self)
{
    if(!self) return;
    if (!self->_is_c_reference){
        delete self->_Cobject;
    }
    self->_Cobject = NULL;
    self->_owner = NULL;
    self->_is_c_reference = false;
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject *
v8___StackFrame_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
    v8___StackFrame *self;

    self = (v8___StackFrame *)type->tp_alloc(type, 0);
    if (self != NULL) {
        self->_Cobject = NULL;
        self->_owner = NULL;
    }

    return (PyObject *)self;
}       

static int
v8___StackFrame_init(v8___StackFrame *self, PyObject *args, PyObject *kwds)
{
    int status = -1;
    if(!self) return status;
    self->_owner = (PyObject*)self;
    
    {
        PyObject * tmp = NULL;
        (void)tmp;
         
        static char *kwlist[] = {  NULL};
        
            
        if ( 0 != status ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist, );
            if ( 0 == status ){
                
                
                if(status == 0){
                    
                    self->_Cobject = new v8::StackFrame();
                    
                        
                }
            }
        }
    }
    {
        PyObject * tmp = NULL;
        (void)tmp;
         
        static char *kwlist[] = { "Anon_1", NULL};
        
        PyObject* Anon_1 = NULL;
        
            
        if ( 0 != status ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &Anon_1);
            if ( 0 == status  && Anon_1){
                
                
                if(status == 0){
                    
                   v8::StackFrame const& Anon_1_C = *((v8___StackFrame*)Anon_1)->_Cobject;
    
                    self->_Cobject = new v8::StackFrame(Anon_1_C);
                    
                        
                }
            }
        }
    }
    if (status != 0){
       self->_Cobject = NULL;
       status = 0;
    }
    return status;
}


static PyObject*
v8___StackFrame__GetLineNumber(v8___StackFrame* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->GetLineNumber();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___StackFrame__GetColumn(v8___StackFrame* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->GetColumn();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___StackFrame__GetScriptId(v8___StackFrame* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->GetScriptId();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___StackFrame__GetScriptName(v8___StackFrame* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->GetScriptName();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___StackFrame__GetScriptNameOrSourceURL(v8___StackFrame* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->GetScriptNameOrSourceURL();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___StackFrame__GetFunctionName(v8___StackFrame* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->GetFunctionName();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___StackFrame__IsEval(v8___StackFrame* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->IsEval();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___StackFrame__IsConstructor(v8___StackFrame* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->IsConstructor();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        

static void
v8___StackTrace_dealloc(v8___StackTrace* self)
{
    if(!self) return;
    if (!self->_is_c_reference){
        delete self->_Cobject;
    }
    self->_Cobject = NULL;
    self->_owner = NULL;
    self->_is_c_reference = false;
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject *
v8___StackTrace_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
    v8___StackTrace *self;

    self = (v8___StackTrace *)type->tp_alloc(type, 0);
    if (self != NULL) {
        self->_Cobject = NULL;
        self->_owner = NULL;
    }

    return (PyObject *)self;
}       

static int
v8___StackTrace_init(v8___StackTrace *self, PyObject *args, PyObject *kwds)
{
    int status = -1;
    if(!self) return status;
    self->_owner = (PyObject*)self;
    
    {
        PyObject * tmp = NULL;
        (void)tmp;
         
        static char *kwlist[] = {  NULL};
        
            
        if ( 0 != status ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist, );
            if ( 0 == status ){
                
                
                if(status == 0){
                    
                    self->_Cobject = new v8::StackTrace();
                    
                        
                }
            }
        }
    }
    {
        PyObject * tmp = NULL;
        (void)tmp;
         
        static char *kwlist[] = { "Anon_1", NULL};
        
        PyObject* Anon_1 = NULL;
        
            
        if ( 0 != status ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &Anon_1);
            if ( 0 == status  && Anon_1){
                
                
                if(status == 0){
                    
                   v8::StackTrace const& Anon_1_C = *((v8___StackTrace*)Anon_1)->_Cobject;
    
                    self->_Cobject = new v8::StackTrace(Anon_1_C);
                    
                        
                }
            }
        }
    }
    if (status != 0){
       self->_Cobject = NULL;
       status = 0;
    }
    return status;
}


static PyObject*
v8___StackTrace__GetFrame(v8___StackTrace* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* index = NULL;
        
        static char *kwlist[] = { "index", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &index);
            if ( 0 == status ){
                    
                    
                if(!PyInt_Check(index)){ status = -1;}
            
                        
                    unsigned intindex_C = PyInt_Check(index)? PyInt_AsLong(index):PyLong_AsLong(index);     
                
                        if( 0 == status ){
                        self->_Cobject->GetFrame(index_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___StackTrace__GetFrameCount(v8___StackTrace* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->GetFrameCount();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___StackTrace__AsArray(v8___StackTrace* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->AsArray();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___StackTrace__CurrentStackTrace(PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* isolate = NULL;
            PyObject* frame_limit = NULL;
            PyObject* options = NULL;
        
        static char *kwlist[] = { "isolate""frame_limit""options", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OOO", kwlist, &isolate,&frame_limit,&options);
            if ( 0 == status  && isolate && options){
                    
                    
                if (!checkType(&v8___IsolateType, isolate )){ status = -1;}
    
                if(!PyInt_Check(frame_limit)){ status = -1;}
            
    
    
    
    
    
    
    
    
    
    
    
  
                        
                   v8::Isolate * isolate_C = ((v8___Isolate*)isolate)->_Cobject;
    
                    intframe_limit_C = PyInt_Check(frame_limit)? PyInt_AsLong(frame_limit):PyLong_AsLong(frame_limit);     
                
    
    
    
    
    
    
    
    
    
    
    
  
                        if( 0 == status ){
                       v8::Local<v8::StackTrace> result = v8::StackTrace::CurrentStackTrace(isolate_C, frame_limit_C, options_C);
                       result_py = 
                        PyObject_CallObject((PyObject *) & v8___Local_v8__StackTrace_Type, NULL);
                        if(result_py){
                            delete ((v8___Local_v8__StackTrace_*) result_py)->_Cobject ;
                            ((v8___Local_v8__StackTrace_*) result_py)->_Cobject = new v8::Local<v8::StackTrace>(result);
                        };
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        

static void
v8___String_dealloc(v8___String* self)
{
    if(!self) return;
    if (!self->_is_c_reference){
        delete self->_Cobject;
    }
    self->_Cobject = NULL;
    self->_owner = NULL;
    self->_is_c_reference = false;
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject *
v8___String_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
    v8___String *self;

    self = (v8___String *)type->tp_alloc(type, 0);
    if (self != NULL) {
        self->_Cobject = NULL;
        self->_owner = NULL;
    }

    return (PyObject *)self;
}       

static int
v8___String_init(v8___String *self, PyObject *args, PyObject *kwds)
{
    int status = -1;
    if(!self) return status;
    self->_owner = (PyObject*)self;
    
    {
        PyObject * tmp = NULL;
        (void)tmp;
         
        static char *kwlist[] = { "Anon_1", NULL};
        
        PyObject* Anon_1 = NULL;
        
            
        if ( 0 != status ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &Anon_1);
            if ( 0 == status  && Anon_1){
                
                
                if(status == 0){
                    
                   v8::String const& Anon_1_C = *((v8___String*)Anon_1)->_Cobject;
    
                    self->_Cobject = new v8::String(Anon_1_C);
                    
                        
                }
            }
        }
    }
    if (status != 0){
       self->_Cobject = NULL;
       status = 0;
    }
    return status;
}


static PyObject*
v8___String__Length(v8___String* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->Length();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___String__Utf8Length(v8___String* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->Utf8Length();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___String__IsOneByte(v8___String* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->IsOneByte();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___String__ContainsOnlyOneByte(v8___String* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->ContainsOnlyOneByte();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___String__Write(v8___String* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* buffer = NULL;
            PyObject* start = NULL;
            PyObject* length = NULL;
            PyObject* options = NULL;
        
        static char *kwlist[] = { "buffer""start""length""options", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OOOO", kwlist, &buffer,&start,&length,&options);
            if ( 0 == status  && buffer){
                    
                    
                if(!PyInt_Check(buffer)){ status = -1;}
            
                if(!PyInt_Check(start)){ status = -1;}
            
                if(!PyInt_Check(length)){ status = -1;}
            
                if(!PyInt_Check(options)){ status = -1;}
            
                        
                    short unsigned intbuffer_C = PyInt_Check(buffer)? PyInt_AsLong(buffer):PyLong_AsLong(buffer);     
                
                    intstart_C = PyInt_Check(start)? PyInt_AsLong(start):PyLong_AsLong(start);     
                
                    intlength_C = PyInt_Check(length)? PyInt_AsLong(length):PyLong_AsLong(length);     
                
                    intoptions_C = PyInt_Check(options)? PyInt_AsLong(options):PyLong_AsLong(options);     
                
                        if( 0 == status ){
                        self->_Cobject->Write(buffer_C, start_C, length_C, options_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___String__WriteOneByte(v8___String* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* buffer = NULL;
            PyObject* start = NULL;
            PyObject* length = NULL;
            PyObject* options = NULL;
        
        static char *kwlist[] = { "buffer""start""length""options", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OOOO", kwlist, &buffer,&start,&length,&options);
            if ( 0 == status  && buffer){
                    
                    
                if(!PyInt_Check(buffer)){ status = -1;}
            
                if(!PyInt_Check(start)){ status = -1;}
            
                if(!PyInt_Check(length)){ status = -1;}
            
                if(!PyInt_Check(options)){ status = -1;}
            
                        
                    unsigned charbuffer_C = PyInt_Check(buffer)? PyInt_AsLong(buffer):PyLong_AsLong(buffer);     
                
                    intstart_C = PyInt_Check(start)? PyInt_AsLong(start):PyLong_AsLong(start);     
                
                    intlength_C = PyInt_Check(length)? PyInt_AsLong(length):PyLong_AsLong(length);     
                
                    intoptions_C = PyInt_Check(options)? PyInt_AsLong(options):PyLong_AsLong(options);     
                
                        if( 0 == status ){
                        self->_Cobject->WriteOneByte(buffer_C, start_C, length_C, options_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___String__WriteUtf8(v8___String* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* buffer = NULL;
            PyObject* length = NULL;
            PyObject* nchars_ref = NULL;
            PyObject* options = NULL;
        
        static char *kwlist[] = { "buffer""length""nchars_ref""options", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OOOO", kwlist, &buffer,&length,&nchars_ref,&options);
            if ( 0 == status  && buffer && nchars_ref){
                    
                    
                if(!PyInt_Check(buffer)){ status = -1;}
            
                if(!PyInt_Check(length)){ status = -1;}
            
                if(!PyInt_Check(nchars_ref)){ status = -1;}
            
                if(!PyInt_Check(options)){ status = -1;}
            
                        
                    charbuffer_C = PyInt_Check(buffer)? PyInt_AsLong(buffer):PyLong_AsLong(buffer);     
                
                    intlength_C = PyInt_Check(length)? PyInt_AsLong(length):PyLong_AsLong(length);     
                
                    intnchars_ref_C = PyInt_Check(nchars_ref)? PyInt_AsLong(nchars_ref):PyLong_AsLong(nchars_ref);     
                
                    intoptions_C = PyInt_Check(options)? PyInt_AsLong(options):PyLong_AsLong(options);     
                
                        if( 0 == status ){
                        self->_Cobject->WriteUtf8(buffer_C, length_C, nchars_ref_C, options_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___String__Empty(PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* isolate = NULL;
        
        static char *kwlist[] = { "isolate", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &isolate);
            if ( 0 == status  && isolate){
                    
                    
                if (!checkType(&v8___IsolateType, isolate )){ status = -1;}
    
                        
                   v8::Isolate * isolate_C = ((v8___Isolate*)isolate)->_Cobject;
    
                        if( 0 == status ){
                       v8::Local<v8::String> result = v8::String::Empty(isolate_C);
                       result_py = 
                        PyObject_CallObject((PyObject *) & v8___Local_v8__String_Type, NULL);
                        if(result_py){
                            delete ((v8___Local_v8__String_*) result_py)->_Cobject ;
                            ((v8___Local_v8__String_*) result_py)->_Cobject = new v8::Local<v8::String>(result);
                        };
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___String__IsExternal(v8___String* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->IsExternal();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___String__IsExternalOneByte(v8___String* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->IsExternalOneByte();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___String__GetExternalStringResourceBase(v8___String* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* encoding_out = NULL;
        
        static char *kwlist[] = { "encoding_out", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &encoding_out);
            if ( 0 == status  && encoding_out){
                    
                    
    
    
    
  
                        
    
    
    
  
                        if( 0 == status ){
                        self->_Cobject->GetExternalStringResourceBase(encoding_out_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___String__GetExternalStringResource(v8___String* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->GetExternalStringResource();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___String__GetExternalOneByteStringResource(v8___String* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->GetExternalOneByteStringResource();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___String__Cast(PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* obj = NULL;
        
        static char *kwlist[] = { "obj", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &obj);
            if ( 0 == status  && obj){
                    
                    
                if (!checkType(&v8___ValueType, obj )){ status = -1;}
    
                        
                   v8::Value * obj_C = ((v8___Value*)obj)->_Cobject;
    
                        if( 0 == status ){
                       v8::String * result = v8::String::Cast(obj_C);
                       result_py = 
                       PyObject_CallObject((PyObject *) & v8___StringType, NULL);
                       if(result_py){
                           delete ((v8___String*) result_py)->_Cobject ;
                           ((v8___String*) result_py)->_Cobject = result;
                       };
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___String__NewFromUtf8(PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* isolate = NULL;
            PyObject* data = NULL;
            PyObject* type = NULL;
            PyObject* length = NULL;
        
        static char *kwlist[] = { "isolate""data""type""length", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OOOO", kwlist, &isolate,&data,&type,&length);
            if ( 0 == status  && isolate && data && type){
                    
                    
                if (!checkType(&v8___IsolateType, isolate )){ status = -1;}
    
                if(!PyInt_Check(data)){ status = -1;}
            
    
    
  
                if(!PyInt_Check(length)){ status = -1;}
            
                        
                   v8::Isolate * isolate_C = ((v8___Isolate*)isolate)->_Cobject;
    
                    chardata_C = PyInt_Check(data)? PyInt_AsLong(data):PyLong_AsLong(data);     
                
    
    
  
                    intlength_C = PyInt_Check(length)? PyInt_AsLong(length):PyLong_AsLong(length);     
                
                        if( 0 == status ){
                       v8::Local<v8::String> result = v8::String::NewFromUtf8(isolate_C, data_C, type_C, length_C);
                       result_py = 
                        PyObject_CallObject((PyObject *) & v8___Local_v8__String_Type, NULL);
                        if(result_py){
                            delete ((v8___Local_v8__String_*) result_py)->_Cobject ;
                            ((v8___Local_v8__String_*) result_py)->_Cobject = new v8::Local<v8::String>(result);
                        };
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    {
        
            PyObject* isolate = NULL;
            PyObject* data = NULL;
            PyObject* type = NULL;
            PyObject* length = NULL;
        
        static char *kwlist[] = { "isolate""data""type""length", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OOOO", kwlist, &isolate,&data,&type,&length);
            if ( 0 == status  && isolate && data && type){
                    
                    
                if (!checkType(&v8___IsolateType, isolate )){ status = -1;}
    
                if(!PyInt_Check(data)){ status = -1;}
            
    
    
  
                if(!PyInt_Check(length)){ status = -1;}
            
                        
                   v8::Isolate * isolate_C = ((v8___Isolate*)isolate)->_Cobject;
    
                    chardata_C = PyInt_Check(data)? PyInt_AsLong(data):PyLong_AsLong(data);     
                
    
    
  
                    intlength_C = PyInt_Check(length)? PyInt_AsLong(length):PyLong_AsLong(length);     
                
                        if( 0 == status ){
                       v8::Local<v8::String> result = v8::String::NewFromUtf8(isolate_C, data_C, type_C, length_C);
                       result_py = 
                        PyObject_CallObject((PyObject *) & v8___Local_v8__String_Type, NULL);
                        if(result_py){
                            delete ((v8___Local_v8__String_*) result_py)->_Cobject ;
                            ((v8___Local_v8__String_*) result_py)->_Cobject = new v8::Local<v8::String>(result);
                        };
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___String__NewFromOneByte(PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* isolate = NULL;
            PyObject* data = NULL;
            PyObject* type = NULL;
            PyObject* length = NULL;
        
        static char *kwlist[] = { "isolate""data""type""length", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OOOO", kwlist, &isolate,&data,&type,&length);
            if ( 0 == status  && isolate && data && type){
                    
                    
                if (!checkType(&v8___IsolateType, isolate )){ status = -1;}
    
                if(!PyInt_Check(data)){ status = -1;}
            
    
    
  
                if(!PyInt_Check(length)){ status = -1;}
            
                        
                   v8::Isolate * isolate_C = ((v8___Isolate*)isolate)->_Cobject;
    
                    unsigned chardata_C = PyInt_Check(data)? PyInt_AsLong(data):PyLong_AsLong(data);     
                
    
    
  
                    intlength_C = PyInt_Check(length)? PyInt_AsLong(length):PyLong_AsLong(length);     
                
                        if( 0 == status ){
                       v8::Local<v8::String> result = v8::String::NewFromOneByte(isolate_C, data_C, type_C, length_C);
                       result_py = 
                        PyObject_CallObject((PyObject *) & v8___Local_v8__String_Type, NULL);
                        if(result_py){
                            delete ((v8___Local_v8__String_*) result_py)->_Cobject ;
                            ((v8___Local_v8__String_*) result_py)->_Cobject = new v8::Local<v8::String>(result);
                        };
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    {
        
            PyObject* isolate = NULL;
            PyObject* data = NULL;
            PyObject* type = NULL;
            PyObject* length = NULL;
        
        static char *kwlist[] = { "isolate""data""type""length", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OOOO", kwlist, &isolate,&data,&type,&length);
            if ( 0 == status  && isolate && data && type){
                    
                    
                if (!checkType(&v8___IsolateType, isolate )){ status = -1;}
    
                if(!PyInt_Check(data)){ status = -1;}
            
    
    
  
                if(!PyInt_Check(length)){ status = -1;}
            
                        
                   v8::Isolate * isolate_C = ((v8___Isolate*)isolate)->_Cobject;
    
                    unsigned chardata_C = PyInt_Check(data)? PyInt_AsLong(data):PyLong_AsLong(data);     
                
    
    
  
                    intlength_C = PyInt_Check(length)? PyInt_AsLong(length):PyLong_AsLong(length);     
                
                        if( 0 == status ){
                       v8::Local<v8::String> result = v8::String::NewFromOneByte(isolate_C, data_C, type_C, length_C);
                       result_py = 
                        PyObject_CallObject((PyObject *) & v8___Local_v8__String_Type, NULL);
                        if(result_py){
                            delete ((v8___Local_v8__String_*) result_py)->_Cobject ;
                            ((v8___Local_v8__String_*) result_py)->_Cobject = new v8::Local<v8::String>(result);
                        };
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___String__NewFromTwoByte(PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* isolate = NULL;
            PyObject* data = NULL;
            PyObject* type = NULL;
            PyObject* length = NULL;
        
        static char *kwlist[] = { "isolate""data""type""length", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OOOO", kwlist, &isolate,&data,&type,&length);
            if ( 0 == status  && isolate && data && type){
                    
                    
                if (!checkType(&v8___IsolateType, isolate )){ status = -1;}
    
                if(!PyInt_Check(data)){ status = -1;}
            
    
    
  
                if(!PyInt_Check(length)){ status = -1;}
            
                        
                   v8::Isolate * isolate_C = ((v8___Isolate*)isolate)->_Cobject;
    
                    short unsigned intdata_C = PyInt_Check(data)? PyInt_AsLong(data):PyLong_AsLong(data);     
                
    
    
  
                    intlength_C = PyInt_Check(length)? PyInt_AsLong(length):PyLong_AsLong(length);     
                
                        if( 0 == status ){
                       v8::Local<v8::String> result = v8::String::NewFromTwoByte(isolate_C, data_C, type_C, length_C);
                       result_py = 
                        PyObject_CallObject((PyObject *) & v8___Local_v8__String_Type, NULL);
                        if(result_py){
                            delete ((v8___Local_v8__String_*) result_py)->_Cobject ;
                            ((v8___Local_v8__String_*) result_py)->_Cobject = new v8::Local<v8::String>(result);
                        };
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    {
        
            PyObject* isolate = NULL;
            PyObject* data = NULL;
            PyObject* type = NULL;
            PyObject* length = NULL;
        
        static char *kwlist[] = { "isolate""data""type""length", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OOOO", kwlist, &isolate,&data,&type,&length);
            if ( 0 == status  && isolate && data && type){
                    
                    
                if (!checkType(&v8___IsolateType, isolate )){ status = -1;}
    
                if(!PyInt_Check(data)){ status = -1;}
            
    
    
  
                if(!PyInt_Check(length)){ status = -1;}
            
                        
                   v8::Isolate * isolate_C = ((v8___Isolate*)isolate)->_Cobject;
    
                    short unsigned intdata_C = PyInt_Check(data)? PyInt_AsLong(data):PyLong_AsLong(data);     
                
    
    
  
                    intlength_C = PyInt_Check(length)? PyInt_AsLong(length):PyLong_AsLong(length);     
                
                        if( 0 == status ){
                       v8::Local<v8::String> result = v8::String::NewFromTwoByte(isolate_C, data_C, type_C, length_C);
                       result_py = 
                        PyObject_CallObject((PyObject *) & v8___Local_v8__String_Type, NULL);
                        if(result_py){
                            delete ((v8___Local_v8__String_*) result_py)->_Cobject ;
                            ((v8___Local_v8__String_*) result_py)->_Cobject = new v8::Local<v8::String>(result);
                        };
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___String__Concat(PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* left = NULL;
            PyObject* right = NULL;
        
        static char *kwlist[] = { "left""right", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OO", kwlist, &left,&right);
            if ( 0 == status  && left && right){
                    
                    
                if (!checkType(&v8___Local_v8__String_Type, left )){ status = -1;}
    
                if (!checkType(&v8___Local_v8__String_Type, right )){ status = -1;}
    
                        
                   v8::Local<v8::String>& left_C = *((v8___Local_v8__String_*)left)->_Cobject;
    
                   v8::Local<v8::String>& right_C = *((v8___Local_v8__String_*)right)->_Cobject;
    
                        if( 0 == status ){
                       v8::Local<v8::String> result = v8::String::Concat(left_C, right_C);
                       result_py = 
                        PyObject_CallObject((PyObject *) & v8___Local_v8__String_Type, NULL);
                        if(result_py){
                            delete ((v8___Local_v8__String_*) result_py)->_Cobject ;
                            ((v8___Local_v8__String_*) result_py)->_Cobject = new v8::Local<v8::String>(result);
                        };
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___String__NewExternal(PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* isolate = NULL;
            PyObject* resource = NULL;
        
        static char *kwlist[] = { "isolate""resource", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OO", kwlist, &isolate,&resource);
            if ( 0 == status  && isolate && resource){
                    
                    
                if (!checkType(&v8___IsolateType, isolate )){ status = -1;}
    
                if (!checkType(&v8___ExternalStringResourceType, resource )){ status = -1;}
    
                        
                   v8::Isolate * isolate_C = ((v8___Isolate*)isolate)->_Cobject;
    
                   v8::ExternalStringResource * resource_C = ((v8___ExternalStringResource*)resource)->_Cobject;
    
                        if( 0 == status ){
                       v8::Local<v8::String> result = v8::String::NewExternal(isolate_C, resource_C);
                       result_py = 
                        PyObject_CallObject((PyObject *) & v8___Local_v8__String_Type, NULL);
                        if(result_py){
                            delete ((v8___Local_v8__String_*) result_py)->_Cobject ;
                            ((v8___Local_v8__String_*) result_py)->_Cobject = new v8::Local<v8::String>(result);
                        };
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    {
        
            PyObject* isolate = NULL;
            PyObject* resource = NULL;
        
        static char *kwlist[] = { "isolate""resource", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OO", kwlist, &isolate,&resource);
            if ( 0 == status  && isolate && resource){
                    
                    
                if (!checkType(&v8___IsolateType, isolate )){ status = -1;}
    
                if (!checkType(&v8___ExternalOneByteStringResourceType, resource )){ status = -1;}
    
                        
                   v8::Isolate * isolate_C = ((v8___Isolate*)isolate)->_Cobject;
    
                   v8::ExternalOneByteStringResource * resource_C = ((v8___ExternalOneByteStringResource*)resource)->_Cobject;
    
                        if( 0 == status ){
                       v8::Local<v8::String> result = v8::String::NewExternal(isolate_C, resource_C);
                       result_py = 
                        PyObject_CallObject((PyObject *) & v8___Local_v8__String_Type, NULL);
                        if(result_py){
                            delete ((v8___Local_v8__String_*) result_py)->_Cobject ;
                            ((v8___Local_v8__String_*) result_py)->_Cobject = new v8::Local<v8::String>(result);
                        };
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___String__NewExternalTwoByte(PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* isolate = NULL;
            PyObject* resource = NULL;
        
        static char *kwlist[] = { "isolate""resource", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OO", kwlist, &isolate,&resource);
            if ( 0 == status  && isolate && resource){
                    
                    
                if (!checkType(&v8___IsolateType, isolate )){ status = -1;}
    
                if (!checkType(&v8___ExternalStringResourceType, resource )){ status = -1;}
    
                        
                   v8::Isolate * isolate_C = ((v8___Isolate*)isolate)->_Cobject;
    
                   v8::ExternalStringResource * resource_C = ((v8___ExternalStringResource*)resource)->_Cobject;
    
                        if( 0 == status ){
                       v8::MaybeLocal<v8::String> result = v8::String::NewExternalTwoByte(isolate_C, resource_C);
                       result_py = 
                        PyObject_CallObject((PyObject *) & v8___MaybeLocal_v8__String_Type, NULL);
                        if(result_py){
                            delete ((v8___MaybeLocal_v8__String_*) result_py)->_Cobject ;
                            ((v8___MaybeLocal_v8__String_*) result_py)->_Cobject = new v8::MaybeLocal<v8::String>(result);
                        };
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___String__MakeExternal(v8___String* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* resource = NULL;
        
        static char *kwlist[] = { "resource", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &resource);
            if ( 0 == status  && resource){
                    
                    
                if (!checkType(&v8___ExternalStringResourceType, resource )){ status = -1;}
    
                        
                   v8::ExternalStringResource * resource_C = ((v8___ExternalStringResource*)resource)->_Cobject;
    
                        if( 0 == status ){
                        self->_Cobject->MakeExternal(resource_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    {
        
            PyObject* resource = NULL;
        
        static char *kwlist[] = { "resource", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &resource);
            if ( 0 == status  && resource){
                    
                    
                if (!checkType(&v8___ExternalOneByteStringResourceType, resource )){ status = -1;}
    
                        
                   v8::ExternalOneByteStringResource * resource_C = ((v8___ExternalOneByteStringResource*)resource)->_Cobject;
    
                        if( 0 == status ){
                        self->_Cobject->MakeExternal(resource_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___String__NewExternalOneByte(PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* isolate = NULL;
            PyObject* resource = NULL;
        
        static char *kwlist[] = { "isolate""resource", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OO", kwlist, &isolate,&resource);
            if ( 0 == status  && isolate && resource){
                    
                    
                if (!checkType(&v8___IsolateType, isolate )){ status = -1;}
    
                if (!checkType(&v8___ExternalOneByteStringResourceType, resource )){ status = -1;}
    
                        
                   v8::Isolate * isolate_C = ((v8___Isolate*)isolate)->_Cobject;
    
                   v8::ExternalOneByteStringResource * resource_C = ((v8___ExternalOneByteStringResource*)resource)->_Cobject;
    
                        if( 0 == status ){
                       v8::MaybeLocal<v8::String> result = v8::String::NewExternalOneByte(isolate_C, resource_C);
                       result_py = 
                        PyObject_CallObject((PyObject *) & v8___MaybeLocal_v8__String_Type, NULL);
                        if(result_py){
                            delete ((v8___MaybeLocal_v8__String_*) result_py)->_Cobject ;
                            ((v8___MaybeLocal_v8__String_*) result_py)->_Cobject = new v8::MaybeLocal<v8::String>(result);
                        };
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___String__CanMakeExternal(v8___String* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->CanMakeExternal();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        

static void
v8___StringObject_dealloc(v8___StringObject* self)
{
    if(!self) return;
    if (!self->_is_c_reference){
        delete self->_Cobject;
    }
    self->_Cobject = NULL;
    self->_owner = NULL;
    self->_is_c_reference = false;
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject *
v8___StringObject_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
    v8___StringObject *self;

    self = (v8___StringObject *)type->tp_alloc(type, 0);
    if (self != NULL) {
        self->_Cobject = NULL;
        self->_owner = NULL;
    }

    return (PyObject *)self;
}       

static int
v8___StringObject_init(v8___StringObject *self, PyObject *args, PyObject *kwds)
{
    int status = -1;
    if(!self) return status;
    self->_owner = (PyObject*)self;
    
    {
        PyObject * tmp = NULL;
        (void)tmp;
         
        static char *kwlist[] = { "Anon_1", NULL};
        
        PyObject* Anon_1 = NULL;
        
            
        if ( 0 != status ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &Anon_1);
            if ( 0 == status  && Anon_1){
                
                
                if(status == 0){
                    
                   v8::StringObject const& Anon_1_C = *((v8___StringObject*)Anon_1)->_Cobject;
    
                    self->_Cobject = new v8::StringObject(Anon_1_C);
                    
                        
                }
            }
        }
    }
    if (status != 0){
       self->_Cobject = NULL;
       status = 0;
    }
    return status;
}


static PyObject*
v8___StringObject__New(PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* value = NULL;
        
        static char *kwlist[] = { "value", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &value);
            if ( 0 == status  && value){
                    
                    
                if (!checkType(&v8___Local_v8__String_Type, value )){ status = -1;}
    
                        
                   v8::Local<v8::String>& value_C = *((v8___Local_v8__String_*)value)->_Cobject;
    
                        if( 0 == status ){
                       v8::Local<v8::Value> result = v8::StringObject::New(value_C);
                       result_py = 
                        PyObject_CallObject((PyObject *) & v8___Local_v8__Value_Type, NULL);
                        if(result_py){
                            delete ((v8___Local_v8__Value_*) result_py)->_Cobject ;
                            ((v8___Local_v8__Value_*) result_py)->_Cobject = new v8::Local<v8::Value>(result);
                        };
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___StringObject__ValueOf(v8___StringObject* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->ValueOf();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___StringObject__Cast(PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* obj = NULL;
        
        static char *kwlist[] = { "obj", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &obj);
            if ( 0 == status  && obj){
                    
                    
                if (!checkType(&v8___ValueType, obj )){ status = -1;}
    
                        
                   v8::Value * obj_C = ((v8___Value*)obj)->_Cobject;
    
                        if( 0 == status ){
                       v8::StringObject * result = v8::StringObject::Cast(obj_C);
                       result_py = 
                       PyObject_CallObject((PyObject *) & v8___StringObjectType, NULL);
                       if(result_py){
                           delete ((v8___StringObject*) result_py)->_Cobject ;
                           ((v8___StringObject*) result_py)->_Cobject = result;
                       };
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        

static void
v8___Symbol_dealloc(v8___Symbol* self)
{
    if(!self) return;
    if (!self->_is_c_reference){
        delete self->_Cobject;
    }
    self->_Cobject = NULL;
    self->_owner = NULL;
    self->_is_c_reference = false;
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject *
v8___Symbol_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
    v8___Symbol *self;

    self = (v8___Symbol *)type->tp_alloc(type, 0);
    if (self != NULL) {
        self->_Cobject = NULL;
        self->_owner = NULL;
    }

    return (PyObject *)self;
}       

static int
v8___Symbol_init(v8___Symbol *self, PyObject *args, PyObject *kwds)
{
    int status = -1;
    if(!self) return status;
    self->_owner = (PyObject*)self;
    
    {
        PyObject * tmp = NULL;
        (void)tmp;
         
        static char *kwlist[] = { "Anon_1", NULL};
        
        PyObject* Anon_1 = NULL;
        
            
        if ( 0 != status ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &Anon_1);
            if ( 0 == status  && Anon_1){
                
                
                if(status == 0){
                    
                   v8::Symbol const& Anon_1_C = *((v8___Symbol*)Anon_1)->_Cobject;
    
                    self->_Cobject = new v8::Symbol(Anon_1_C);
                    
                        
                }
            }
        }
    }
    if (status != 0){
       self->_Cobject = NULL;
       status = 0;
    }
    return status;
}


static PyObject*
v8___Symbol__Name(v8___Symbol* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->Name();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Symbol__New(PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* isolate = NULL;
            PyObject* name = NULL;
        
        static char *kwlist[] = { "isolate""name", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OO", kwlist, &isolate,&name);
            if ( 0 == status  && isolate && name){
                    
                    
                if (!checkType(&v8___IsolateType, isolate )){ status = -1;}
    
                if (!checkType(&v8___Local_v8__String_Type, name )){ status = -1;}
    
                        
                   v8::Isolate * isolate_C = ((v8___Isolate*)isolate)->_Cobject;
    
                   v8::Local<v8::String>& name_C = *((v8___Local_v8__String_*)name)->_Cobject;
    
                        if( 0 == status ){
                       v8::Local<v8::Symbol> result = v8::Symbol::New(isolate_C, name_C);
                       result_py = 
                        PyObject_CallObject((PyObject *) & v8___Local_v8__Symbol_Type, NULL);
                        if(result_py){
                            delete ((v8___Local_v8__Symbol_*) result_py)->_Cobject ;
                            ((v8___Local_v8__Symbol_*) result_py)->_Cobject = new v8::Local<v8::Symbol>(result);
                        };
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Symbol__For(PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* isolate = NULL;
            PyObject* name = NULL;
        
        static char *kwlist[] = { "isolate""name", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OO", kwlist, &isolate,&name);
            if ( 0 == status  && isolate && name){
                    
                    
                if (!checkType(&v8___IsolateType, isolate )){ status = -1;}
    
                if (!checkType(&v8___Local_v8__String_Type, name )){ status = -1;}
    
                        
                   v8::Isolate * isolate_C = ((v8___Isolate*)isolate)->_Cobject;
    
                   v8::Local<v8::String>& name_C = *((v8___Local_v8__String_*)name)->_Cobject;
    
                        if( 0 == status ){
                       v8::Local<v8::Symbol> result = v8::Symbol::For(isolate_C, name_C);
                       result_py = 
                        PyObject_CallObject((PyObject *) & v8___Local_v8__Symbol_Type, NULL);
                        if(result_py){
                            delete ((v8___Local_v8__Symbol_*) result_py)->_Cobject ;
                            ((v8___Local_v8__Symbol_*) result_py)->_Cobject = new v8::Local<v8::Symbol>(result);
                        };
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Symbol__ForApi(PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* isolate = NULL;
            PyObject* name = NULL;
        
        static char *kwlist[] = { "isolate""name", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OO", kwlist, &isolate,&name);
            if ( 0 == status  && isolate && name){
                    
                    
                if (!checkType(&v8___IsolateType, isolate )){ status = -1;}
    
                if (!checkType(&v8___Local_v8__String_Type, name )){ status = -1;}
    
                        
                   v8::Isolate * isolate_C = ((v8___Isolate*)isolate)->_Cobject;
    
                   v8::Local<v8::String>& name_C = *((v8___Local_v8__String_*)name)->_Cobject;
    
                        if( 0 == status ){
                       v8::Local<v8::Symbol> result = v8::Symbol::ForApi(isolate_C, name_C);
                       result_py = 
                        PyObject_CallObject((PyObject *) & v8___Local_v8__Symbol_Type, NULL);
                        if(result_py){
                            delete ((v8___Local_v8__Symbol_*) result_py)->_Cobject ;
                            ((v8___Local_v8__Symbol_*) result_py)->_Cobject = new v8::Local<v8::Symbol>(result);
                        };
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Symbol__GetIterator(PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* isolate = NULL;
        
        static char *kwlist[] = { "isolate", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &isolate);
            if ( 0 == status  && isolate){
                    
                    
                if (!checkType(&v8___IsolateType, isolate )){ status = -1;}
    
                        
                   v8::Isolate * isolate_C = ((v8___Isolate*)isolate)->_Cobject;
    
                        if( 0 == status ){
                       v8::Local<v8::Symbol> result = v8::Symbol::GetIterator(isolate_C);
                       result_py = 
                        PyObject_CallObject((PyObject *) & v8___Local_v8__Symbol_Type, NULL);
                        if(result_py){
                            delete ((v8___Local_v8__Symbol_*) result_py)->_Cobject ;
                            ((v8___Local_v8__Symbol_*) result_py)->_Cobject = new v8::Local<v8::Symbol>(result);
                        };
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Symbol__GetUnscopables(PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* isolate = NULL;
        
        static char *kwlist[] = { "isolate", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &isolate);
            if ( 0 == status  && isolate){
                    
                    
                if (!checkType(&v8___IsolateType, isolate )){ status = -1;}
    
                        
                   v8::Isolate * isolate_C = ((v8___Isolate*)isolate)->_Cobject;
    
                        if( 0 == status ){
                       v8::Local<v8::Symbol> result = v8::Symbol::GetUnscopables(isolate_C);
                       result_py = 
                        PyObject_CallObject((PyObject *) & v8___Local_v8__Symbol_Type, NULL);
                        if(result_py){
                            delete ((v8___Local_v8__Symbol_*) result_py)->_Cobject ;
                            ((v8___Local_v8__Symbol_*) result_py)->_Cobject = new v8::Local<v8::Symbol>(result);
                        };
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Symbol__GetToStringTag(PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* isolate = NULL;
        
        static char *kwlist[] = { "isolate", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &isolate);
            if ( 0 == status  && isolate){
                    
                    
                if (!checkType(&v8___IsolateType, isolate )){ status = -1;}
    
                        
                   v8::Isolate * isolate_C = ((v8___Isolate*)isolate)->_Cobject;
    
                        if( 0 == status ){
                       v8::Local<v8::Symbol> result = v8::Symbol::GetToStringTag(isolate_C);
                       result_py = 
                        PyObject_CallObject((PyObject *) & v8___Local_v8__Symbol_Type, NULL);
                        if(result_py){
                            delete ((v8___Local_v8__Symbol_*) result_py)->_Cobject ;
                            ((v8___Local_v8__Symbol_*) result_py)->_Cobject = new v8::Local<v8::Symbol>(result);
                        };
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Symbol__Cast(PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* obj = NULL;
        
        static char *kwlist[] = { "obj", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &obj);
            if ( 0 == status  && obj){
                    
                    
                if (!checkType(&v8___ValueType, obj )){ status = -1;}
    
                        
                   v8::Value * obj_C = ((v8___Value*)obj)->_Cobject;
    
                        if( 0 == status ){
                       v8::Symbol * result = v8::Symbol::Cast(obj_C);
                       result_py = 
                       PyObject_CallObject((PyObject *) & v8___SymbolType, NULL);
                       if(result_py){
                           delete ((v8___Symbol*) result_py)->_Cobject ;
                           ((v8___Symbol*) result_py)->_Cobject = result;
                       };
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        

static void
v8___SymbolObject_dealloc(v8___SymbolObject* self)
{
    if(!self) return;
    if (!self->_is_c_reference){
        delete self->_Cobject;
    }
    self->_Cobject = NULL;
    self->_owner = NULL;
    self->_is_c_reference = false;
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject *
v8___SymbolObject_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
    v8___SymbolObject *self;

    self = (v8___SymbolObject *)type->tp_alloc(type, 0);
    if (self != NULL) {
        self->_Cobject = NULL;
        self->_owner = NULL;
    }

    return (PyObject *)self;
}       

static int
v8___SymbolObject_init(v8___SymbolObject *self, PyObject *args, PyObject *kwds)
{
    int status = -1;
    if(!self) return status;
    self->_owner = (PyObject*)self;
    
    {
        PyObject * tmp = NULL;
        (void)tmp;
         
        static char *kwlist[] = { "Anon_1", NULL};
        
        PyObject* Anon_1 = NULL;
        
            
        if ( 0 != status ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &Anon_1);
            if ( 0 == status  && Anon_1){
                
                
                if(status == 0){
                    
                   v8::SymbolObject const& Anon_1_C = *((v8___SymbolObject*)Anon_1)->_Cobject;
    
                    self->_Cobject = new v8::SymbolObject(Anon_1_C);
                    
                        
                }
            }
        }
    }
    if (status != 0){
       self->_Cobject = NULL;
       status = 0;
    }
    return status;
}


static PyObject*
v8___SymbolObject__New(PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* isolate = NULL;
            PyObject* value = NULL;
        
        static char *kwlist[] = { "isolate""value", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OO", kwlist, &isolate,&value);
            if ( 0 == status  && isolate && value){
                    
                    
                if (!checkType(&v8___IsolateType, isolate )){ status = -1;}
    
                if (!checkType(&v8___Local_v8__Symbol_Type, value )){ status = -1;}
    
                        
                   v8::Isolate * isolate_C = ((v8___Isolate*)isolate)->_Cobject;
    
                   v8::Local<v8::Symbol>& value_C = *((v8___Local_v8__Symbol_*)value)->_Cobject;
    
                        if( 0 == status ){
                       v8::Local<v8::Value> result = v8::SymbolObject::New(isolate_C, value_C);
                       result_py = 
                        PyObject_CallObject((PyObject *) & v8___Local_v8__Value_Type, NULL);
                        if(result_py){
                            delete ((v8___Local_v8__Value_*) result_py)->_Cobject ;
                            ((v8___Local_v8__Value_*) result_py)->_Cobject = new v8::Local<v8::Value>(result);
                        };
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___SymbolObject__ValueOf(v8___SymbolObject* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->ValueOf();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___SymbolObject__Cast(PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* obj = NULL;
        
        static char *kwlist[] = { "obj", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &obj);
            if ( 0 == status  && obj){
                    
                    
                if (!checkType(&v8___ValueType, obj )){ status = -1;}
    
                        
                   v8::Value * obj_C = ((v8___Value*)obj)->_Cobject;
    
                        if( 0 == status ){
                       v8::SymbolObject * result = v8::SymbolObject::Cast(obj_C);
                       result_py = 
                       PyObject_CallObject((PyObject *) & v8___SymbolObjectType, NULL);
                       if(result_py){
                           delete ((v8___SymbolObject*) result_py)->_Cobject ;
                           ((v8___SymbolObject*) result_py)->_Cobject = result;
                       };
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        

static void
v8___Uint32_dealloc(v8___Uint32* self)
{
    if(!self) return;
    if (!self->_is_c_reference){
        delete self->_Cobject;
    }
    self->_Cobject = NULL;
    self->_owner = NULL;
    self->_is_c_reference = false;
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject *
v8___Uint32_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
    v8___Uint32 *self;

    self = (v8___Uint32 *)type->tp_alloc(type, 0);
    if (self != NULL) {
        self->_Cobject = NULL;
        self->_owner = NULL;
    }

    return (PyObject *)self;
}       

static int
v8___Uint32_init(v8___Uint32 *self, PyObject *args, PyObject *kwds)
{
    int status = -1;
    if(!self) return status;
    self->_owner = (PyObject*)self;
    
    {
        PyObject * tmp = NULL;
        (void)tmp;
         
        static char *kwlist[] = { "Anon_1", NULL};
        
        PyObject* Anon_1 = NULL;
        
            
        if ( 0 != status ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &Anon_1);
            if ( 0 == status  && Anon_1){
                
                
                if(status == 0){
                    
                   v8::Uint32 const& Anon_1_C = *((v8___Uint32*)Anon_1)->_Cobject;
    
                    self->_Cobject = new v8::Uint32(Anon_1_C);
                    
                        
                }
            }
        }
    }
    if (status != 0){
       self->_Cobject = NULL;
       status = 0;
    }
    return status;
}


static PyObject*
v8___Uint32__Value(v8___Uint32* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->Value();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Uint32__Cast(PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* obj = NULL;
        
        static char *kwlist[] = { "obj", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &obj);
            if ( 0 == status  && obj){
                    
                    
                if (!checkType(&v8___ValueType, obj )){ status = -1;}
    
                        
                   v8::Value * obj_C = ((v8___Value*)obj)->_Cobject;
    
                        if( 0 == status ){
                       v8::Uint32 * result = v8::Uint32::Cast(obj_C);
                       result_py = 
                       PyObject_CallObject((PyObject *) & v8___Uint32Type, NULL);
                       if(result_py){
                           delete ((v8___Uint32*) result_py)->_Cobject ;
                           ((v8___Uint32*) result_py)->_Cobject = result;
                       };
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        

static void
v8___Utils_dealloc(v8___Utils* self)
{
    if(!self) return;
    if (!self->_is_c_reference){
        delete self->_Cobject;
    }
    self->_Cobject = NULL;
    self->_owner = NULL;
    self->_is_c_reference = false;
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject *
v8___Utils_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
    v8___Utils *self;

    self = (v8___Utils *)type->tp_alloc(type, 0);
    if (self != NULL) {
        self->_Cobject = NULL;
        self->_owner = NULL;
    }

    return (PyObject *)self;
}       

static int
v8___Utils_init(v8___Utils *self, PyObject *args, PyObject *kwds)
{
    int status = -1;
    if(!self) return status;
    self->_owner = (PyObject*)self;
    self->_Cobject = new v8___Utils();
    status = self->get_Cobject(self)?0:-1; 
    if (status != 0){
       self->_Cobject = NULL;
       status = 0;
    }
    return status;
}



static void
v8___Value_dealloc(v8___Value* self)
{
    if(!self) return;
    if (!self->_is_c_reference){
        delete self->_Cobject;
    }
    self->_Cobject = NULL;
    self->_owner = NULL;
    self->_is_c_reference = false;
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject *
v8___Value_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
    v8___Value *self;

    self = (v8___Value *)type->tp_alloc(type, 0);
    if (self != NULL) {
        self->_Cobject = NULL;
        self->_owner = NULL;
    }

    return (PyObject *)self;
}       

static int
v8___Value_init(v8___Value *self, PyObject *args, PyObject *kwds)
{
    int status = -1;
    if(!self) return status;
    self->_owner = (PyObject*)self;
    
    {
        PyObject * tmp = NULL;
        (void)tmp;
         
        static char *kwlist[] = { "Anon_1", NULL};
        
        PyObject* Anon_1 = NULL;
        
            
        if ( 0 != status ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &Anon_1);
            if ( 0 == status  && Anon_1){
                
                
                if(status == 0){
                    
                   v8::Value const& Anon_1_C = *((v8___Value*)Anon_1)->_Cobject;
    
                    self->_Cobject = new v8::Value(Anon_1_C);
                    
                        
                }
            }
        }
    }
    if (status != 0){
       self->_Cobject = NULL;
       status = 0;
    }
    return status;
}


static PyObject*
v8___Value__IsUndefined(v8___Value* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->IsUndefined();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Value__IsNull(v8___Value* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->IsNull();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Value__IsTrue(v8___Value* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->IsTrue();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Value__IsFalse(v8___Value* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->IsFalse();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Value__IsName(v8___Value* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->IsName();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Value__IsString(v8___Value* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->IsString();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Value__IsSymbol(v8___Value* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->IsSymbol();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Value__IsFunction(v8___Value* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->IsFunction();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Value__IsArray(v8___Value* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->IsArray();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Value__IsObject(v8___Value* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->IsObject();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Value__IsBoolean(v8___Value* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->IsBoolean();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Value__IsNumber(v8___Value* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->IsNumber();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Value__IsExternal(v8___Value* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->IsExternal();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Value__IsInt32(v8___Value* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->IsInt32();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Value__IsUint32(v8___Value* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->IsUint32();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Value__IsDate(v8___Value* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->IsDate();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Value__IsArgumentsObject(v8___Value* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->IsArgumentsObject();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Value__IsBooleanObject(v8___Value* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->IsBooleanObject();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Value__IsNumberObject(v8___Value* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->IsNumberObject();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Value__IsStringObject(v8___Value* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->IsStringObject();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Value__IsSymbolObject(v8___Value* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->IsSymbolObject();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Value__IsNativeError(v8___Value* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->IsNativeError();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Value__IsRegExp(v8___Value* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->IsRegExp();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Value__IsGeneratorFunction(v8___Value* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->IsGeneratorFunction();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Value__IsGeneratorObject(v8___Value* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->IsGeneratorObject();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Value__IsPromise(v8___Value* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->IsPromise();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Value__IsMap(v8___Value* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->IsMap();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Value__IsSet(v8___Value* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->IsSet();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Value__IsMapIterator(v8___Value* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->IsMapIterator();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Value__IsSetIterator(v8___Value* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->IsSetIterator();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Value__IsWeakMap(v8___Value* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->IsWeakMap();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Value__IsWeakSet(v8___Value* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->IsWeakSet();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Value__IsArrayBuffer(v8___Value* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->IsArrayBuffer();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Value__IsArrayBufferView(v8___Value* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->IsArrayBufferView();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Value__IsTypedArray(v8___Value* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->IsTypedArray();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Value__IsUint8Array(v8___Value* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->IsUint8Array();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Value__IsUint8ClampedArray(v8___Value* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->IsUint8ClampedArray();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Value__IsInt8Array(v8___Value* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->IsInt8Array();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Value__IsUint16Array(v8___Value* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->IsUint16Array();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Value__IsInt16Array(v8___Value* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->IsInt16Array();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Value__IsUint32Array(v8___Value* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->IsUint32Array();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Value__IsInt32Array(v8___Value* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->IsInt32Array();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Value__IsFloat32Array(v8___Value* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->IsFloat32Array();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Value__IsFloat64Array(v8___Value* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->IsFloat64Array();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Value__IsFloat32x4(v8___Value* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->IsFloat32x4();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Value__IsDataView(v8___Value* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->IsDataView();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Value__IsSharedArrayBuffer(v8___Value* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->IsSharedArrayBuffer();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Value__ToBoolean(v8___Value* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* context = NULL;
        
        static char *kwlist[] = { "context", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &context);
            if ( 0 == status  && context){
                    
                    
                if (!checkType(&v8___Local_v8__Context_Type, context )){ status = -1;}
    
                        
                   v8::Local<v8::Context>& context_C = *((v8___Local_v8__Context_*)context)->_Cobject;
    
                        if( 0 == status ){
                        self->_Cobject->ToBoolean(context_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    {
        
            PyObject* isolate = NULL;
        
        static char *kwlist[] = { "isolate", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &isolate);
            if ( 0 == status  && isolate){
                    
                    
                if (!checkType(&v8___IsolateType, isolate )){ status = -1;}
    
                        
                   v8::Isolate * isolate_C = ((v8___Isolate*)isolate)->_Cobject;
    
                        if( 0 == status ){
                        self->_Cobject->ToBoolean(isolate_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->ToBoolean();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Value__ToNumber(v8___Value* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* context = NULL;
        
        static char *kwlist[] = { "context", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &context);
            if ( 0 == status  && context){
                    
                    
                if (!checkType(&v8___Local_v8__Context_Type, context )){ status = -1;}
    
                        
                   v8::Local<v8::Context>& context_C = *((v8___Local_v8__Context_*)context)->_Cobject;
    
                        if( 0 == status ){
                        self->_Cobject->ToNumber(context_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    {
        
            PyObject* isolate = NULL;
        
        static char *kwlist[] = { "isolate", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &isolate);
            if ( 0 == status  && isolate){
                    
                    
                if (!checkType(&v8___IsolateType, isolate )){ status = -1;}
    
                        
                   v8::Isolate * isolate_C = ((v8___Isolate*)isolate)->_Cobject;
    
                        if( 0 == status ){
                        self->_Cobject->ToNumber(isolate_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->ToNumber();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Value__ToString(v8___Value* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* context = NULL;
        
        static char *kwlist[] = { "context", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &context);
            if ( 0 == status  && context){
                    
                    
                if (!checkType(&v8___Local_v8__Context_Type, context )){ status = -1;}
    
                        
                   v8::Local<v8::Context>& context_C = *((v8___Local_v8__Context_*)context)->_Cobject;
    
                        if( 0 == status ){
                        self->_Cobject->ToString(context_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    {
        
            PyObject* isolate = NULL;
        
        static char *kwlist[] = { "isolate", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &isolate);
            if ( 0 == status  && isolate){
                    
                    
                if (!checkType(&v8___IsolateType, isolate )){ status = -1;}
    
                        
                   v8::Isolate * isolate_C = ((v8___Isolate*)isolate)->_Cobject;
    
                        if( 0 == status ){
                        self->_Cobject->ToString(isolate_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->ToString();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Value__ToDetailString(v8___Value* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* context = NULL;
        
        static char *kwlist[] = { "context", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &context);
            if ( 0 == status  && context){
                    
                    
                if (!checkType(&v8___Local_v8__Context_Type, context )){ status = -1;}
    
                        
                   v8::Local<v8::Context>& context_C = *((v8___Local_v8__Context_*)context)->_Cobject;
    
                        if( 0 == status ){
                        self->_Cobject->ToDetailString(context_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    {
        
            PyObject* isolate = NULL;
        
        static char *kwlist[] = { "isolate", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &isolate);
            if ( 0 == status  && isolate){
                    
                    
                if (!checkType(&v8___IsolateType, isolate )){ status = -1;}
    
                        
                   v8::Isolate * isolate_C = ((v8___Isolate*)isolate)->_Cobject;
    
                        if( 0 == status ){
                        self->_Cobject->ToDetailString(isolate_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->ToDetailString();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Value__ToObject(v8___Value* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* context = NULL;
        
        static char *kwlist[] = { "context", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &context);
            if ( 0 == status  && context){
                    
                    
                if (!checkType(&v8___Local_v8__Context_Type, context )){ status = -1;}
    
                        
                   v8::Local<v8::Context>& context_C = *((v8___Local_v8__Context_*)context)->_Cobject;
    
                        if( 0 == status ){
                        self->_Cobject->ToObject(context_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    {
        
            PyObject* isolate = NULL;
        
        static char *kwlist[] = { "isolate", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &isolate);
            if ( 0 == status  && isolate){
                    
                    
                if (!checkType(&v8___IsolateType, isolate )){ status = -1;}
    
                        
                   v8::Isolate * isolate_C = ((v8___Isolate*)isolate)->_Cobject;
    
                        if( 0 == status ){
                        self->_Cobject->ToObject(isolate_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->ToObject();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Value__ToInteger(v8___Value* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* context = NULL;
        
        static char *kwlist[] = { "context", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &context);
            if ( 0 == status  && context){
                    
                    
                if (!checkType(&v8___Local_v8__Context_Type, context )){ status = -1;}
    
                        
                   v8::Local<v8::Context>& context_C = *((v8___Local_v8__Context_*)context)->_Cobject;
    
                        if( 0 == status ){
                        self->_Cobject->ToInteger(context_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    {
        
            PyObject* isolate = NULL;
        
        static char *kwlist[] = { "isolate", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &isolate);
            if ( 0 == status  && isolate){
                    
                    
                if (!checkType(&v8___IsolateType, isolate )){ status = -1;}
    
                        
                   v8::Isolate * isolate_C = ((v8___Isolate*)isolate)->_Cobject;
    
                        if( 0 == status ){
                        self->_Cobject->ToInteger(isolate_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->ToInteger();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Value__ToUint32(v8___Value* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* context = NULL;
        
        static char *kwlist[] = { "context", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &context);
            if ( 0 == status  && context){
                    
                    
                if (!checkType(&v8___Local_v8__Context_Type, context )){ status = -1;}
    
                        
                   v8::Local<v8::Context>& context_C = *((v8___Local_v8__Context_*)context)->_Cobject;
    
                        if( 0 == status ){
                        self->_Cobject->ToUint32(context_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    {
        
            PyObject* isolate = NULL;
        
        static char *kwlist[] = { "isolate", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &isolate);
            if ( 0 == status  && isolate){
                    
                    
                if (!checkType(&v8___IsolateType, isolate )){ status = -1;}
    
                        
                   v8::Isolate * isolate_C = ((v8___Isolate*)isolate)->_Cobject;
    
                        if( 0 == status ){
                        self->_Cobject->ToUint32(isolate_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->ToUint32();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Value__ToInt32(v8___Value* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* context = NULL;
        
        static char *kwlist[] = { "context", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &context);
            if ( 0 == status  && context){
                    
                    
                if (!checkType(&v8___Local_v8__Context_Type, context )){ status = -1;}
    
                        
                   v8::Local<v8::Context>& context_C = *((v8___Local_v8__Context_*)context)->_Cobject;
    
                        if( 0 == status ){
                        self->_Cobject->ToInt32(context_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    {
        
            PyObject* isolate = NULL;
        
        static char *kwlist[] = { "isolate", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &isolate);
            if ( 0 == status  && isolate){
                    
                    
                if (!checkType(&v8___IsolateType, isolate )){ status = -1;}
    
                        
                   v8::Isolate * isolate_C = ((v8___Isolate*)isolate)->_Cobject;
    
                        if( 0 == status ){
                        self->_Cobject->ToInt32(isolate_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->ToInt32();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Value__ToArrayIndex(v8___Value* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->ToArrayIndex();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    {
        
            PyObject* context = NULL;
        
        static char *kwlist[] = { "context", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist, &context);
            if ( 0 == status  && context){
                    
                    
                if (!checkType(&v8___Local_v8__Context_Type, context )){ status = -1;}
    
                        
                   v8::Local<v8::Context>& context_C = *((v8___Local_v8__Context_*)context)->_Cobject;
    
                        if( 0 == status ){
                        self->_Cobject->ToArrayIndex(context_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Value__BooleanValue(v8___Value* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* context = NULL;
        
        static char *kwlist[] = { "context", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &context);
            if ( 0 == status  && context){
                    
                    
                if (!checkType(&v8___Local_v8__Context_Type, context )){ status = -1;}
    
                        
                   v8::Local<v8::Context>& context_C = *((v8___Local_v8__Context_*)context)->_Cobject;
    
                        if( 0 == status ){
                        self->_Cobject->BooleanValue(context_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->BooleanValue();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Value__NumberValue(v8___Value* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* context = NULL;
        
        static char *kwlist[] = { "context", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &context);
            if ( 0 == status  && context){
                    
                    
                if (!checkType(&v8___Local_v8__Context_Type, context )){ status = -1;}
    
                        
                   v8::Local<v8::Context>& context_C = *((v8___Local_v8__Context_*)context)->_Cobject;
    
                        if( 0 == status ){
                        self->_Cobject->NumberValue(context_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->NumberValue();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Value__IntegerValue(v8___Value* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* context = NULL;
        
        static char *kwlist[] = { "context", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &context);
            if ( 0 == status  && context){
                    
                    
                if (!checkType(&v8___Local_v8__Context_Type, context )){ status = -1;}
    
                        
                   v8::Local<v8::Context>& context_C = *((v8___Local_v8__Context_*)context)->_Cobject;
    
                        if( 0 == status ){
                        self->_Cobject->IntegerValue(context_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->IntegerValue();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Value__Uint32Value(v8___Value* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* context = NULL;
        
        static char *kwlist[] = { "context", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &context);
            if ( 0 == status  && context){
                    
                    
                if (!checkType(&v8___Local_v8__Context_Type, context )){ status = -1;}
    
                        
                   v8::Local<v8::Context>& context_C = *((v8___Local_v8__Context_*)context)->_Cobject;
    
                        if( 0 == status ){
                        self->_Cobject->Uint32Value(context_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->Uint32Value();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Value__Int32Value(v8___Value* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* context = NULL;
        
        static char *kwlist[] = { "context", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &context);
            if ( 0 == status  && context){
                    
                    
                if (!checkType(&v8___Local_v8__Context_Type, context )){ status = -1;}
    
                        
                   v8::Local<v8::Context>& context_C = *((v8___Local_v8__Context_*)context)->_Cobject;
    
                        if( 0 == status ){
                        self->_Cobject->Int32Value(context_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->Int32Value();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Value__Equals(v8___Value* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* that = NULL;
        
        static char *kwlist[] = { "that", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &that);
            if ( 0 == status  && that){
                    
                    
                if (!checkType(&v8___Local_v8__Value_Type, that )){ status = -1;}
    
                        
                   v8::Local<v8::Value>& that_C = *((v8___Local_v8__Value_*)that)->_Cobject;
    
                        if( 0 == status ){
                        self->_Cobject->Equals(that_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    {
        
            PyObject* context = NULL;
            PyObject* that = NULL;
        
        static char *kwlist[] = { "context""that", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &context,&that);
            if ( 0 == status  && context && that){
                    
                    
                if (!checkType(&v8___Local_v8__Context_Type, context )){ status = -1;}
    
                if (!checkType(&v8___Local_v8__Value_Type, that )){ status = -1;}
    
                        
                   v8::Local<v8::Context>& context_C = *((v8___Local_v8__Context_*)context)->_Cobject;
    
                   v8::Local<v8::Value>& that_C = *((v8___Local_v8__Value_*)that)->_Cobject;
    
                        if( 0 == status ){
                        self->_Cobject->Equals(context_C, that_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Value__StrictEquals(v8___Value* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* that = NULL;
        
        static char *kwlist[] = { "that", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &that);
            if ( 0 == status  && that){
                    
                    
                if (!checkType(&v8___Local_v8__Value_Type, that )){ status = -1;}
    
                        
                   v8::Local<v8::Value>& that_C = *((v8___Local_v8__Value_*)that)->_Cobject;
    
                        if( 0 == status ){
                        self->_Cobject->StrictEquals(that_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Value__SameValue(v8___Value* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* that = NULL;
        
        static char *kwlist[] = { "that", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &that);
            if ( 0 == status  && that){
                    
                    
                if (!checkType(&v8___Local_v8__Value_Type, that )){ status = -1;}
    
                        
                   v8::Local<v8::Value>& that_C = *((v8___Local_v8__Value_*)that)->_Cobject;
    
                        if( 0 == status ){
                        self->_Cobject->SameValue(that_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        

static void
v8___Local_v8__Primitive__dealloc(v8___Local_v8__Primitive_* self)
{
    if(!self) return;
    if (!self->_is_c_reference){
        delete self->_Cobject;
    }
    self->_Cobject = NULL;
    self->_owner = NULL;
    self->_is_c_reference = false;
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject *
v8___Local_v8__Primitive__new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
    v8___Local_v8__Primitive_ *self;

    self = (v8___Local_v8__Primitive_ *)type->tp_alloc(type, 0);
    if (self != NULL) {
        self->_Cobject = NULL;
        self->_owner = NULL;
    }

    return (PyObject *)self;
}       

static int
v8___Local_v8__Primitive__init(v8___Local_v8__Primitive_ *self, PyObject *args, PyObject *kwds)
{
    int status = -1;
    if(!self) return status;
    self->_owner = (PyObject*)self;
    
    {
        PyObject * tmp = NULL;
        (void)tmp;
         
        static char *kwlist[] = {  NULL};
        
            
        if ( 0 != status ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist, );
            if ( 0 == status ){
                
                
                if(status == 0){
                    
                    self->_Cobject = new v8::Local();
                    
                        
                }
            }
        }
    }
    {
        PyObject * tmp = NULL;
        (void)tmp;
         
        static char *kwlist[] = { "that", NULL};
        
        PyObject* that = NULL;
        
            
        if ( 0 != status ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &that);
            if ( 0 == status  && that){
                
                
                if(status == 0){
                    
                   v8::Local<v8::Primitive>& that_C = *((v8___Local_v8__Primitive_*)that)->_Cobject;
    
                    self->_Cobject = new v8::Local(that_C);
                    
                        
                }
            }
        }
    }
    {
        PyObject * tmp = NULL;
        (void)tmp;
         
        static char *kwlist[] = { "Anon_1", NULL};
        
        PyObject* Anon_1 = NULL;
        
            
        if ( 0 != status ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &Anon_1);
            if ( 0 == status  && Anon_1){
                
                
                if(status == 0){
                    
                   v8::Local<v8::Primitive> const& Anon_1_C = *((v8___Local_v8__Primitive_*)Anon_1)->_Cobject;
    
                    self->_Cobject = new v8::Local(Anon_1_C);
                    
                        
                }
            }
        }
    }
    if (status != 0){
       self->_Cobject = NULL;
       status = 0;
    }
    return status;
}


static PyObject*
v8___Local_v8__Primitive___IsEmpty(v8___Local_v8__Primitive_* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->IsEmpty();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Local_v8__Primitive___Clear(v8___Local_v8__Primitive_* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->Clear();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Local_v8__Primitive___New(PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* isolate = NULL;
            PyObject* that = NULL;
        
        static char *kwlist[] = { "isolate""that", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OO", kwlist, &isolate,&that);
            if ( 0 == status  && isolate && that){
                    
                    
                if (!checkType(&v8___IsolateType, isolate )){ status = -1;}
    
                if (!checkType(&v8___Local_v8__Primitive_Type, that )){ status = -1;}
    
                        
                   v8::Isolate * isolate_C = ((v8___Isolate*)isolate)->_Cobject;
    
                   v8::Local<v8::Primitive>& that_C = *((v8___Local_v8__Primitive_*)that)->_Cobject;
    
                        if( 0 == status ){
                       v8::Local<v8::Primitive> result = v8::Local<v8::Primitive>::New(isolate_C, that_C);
                       result_py = 
                        PyObject_CallObject((PyObject *) & v8___Local_v8__Primitive_Type, NULL);
                        if(result_py){
                            delete ((v8___Local_v8__Primitive_*) result_py)->_Cobject ;
                            ((v8___Local_v8__Primitive_*) result_py)->_Cobject = new v8::Local<v8::Primitive>(result);
                        };
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    {
        
            PyObject* isolate = NULL;
            PyObject* that = NULL;
        
        static char *kwlist[] = { "isolate""that", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OO", kwlist, &isolate,&that);
            if ( 0 == status  && isolate && that){
                    
                    
                if (!checkType(&v8___IsolateType, isolate )){ status = -1;}
    
                if (!checkType(&v8___PersistentBase_v8__Primitive_Type, that )){ status = -1;}
    
                        
                   v8::Isolate * isolate_C = ((v8___Isolate*)isolate)->_Cobject;
    
                   v8::PersistentBase<v8::Primitive> const& that_C = *((v8___PersistentBase_v8__Primitive_*)that)->_Cobject;
    
                        if( 0 == status ){
                       v8::Local<v8::Primitive> result = v8::Local<v8::Primitive>::New(isolate_C, that_C);
                       result_py = 
                        PyObject_CallObject((PyObject *) & v8___Local_v8__Primitive_Type, NULL);
                        if(result_py){
                            delete ((v8___Local_v8__Primitive_*) result_py)->_Cobject ;
                            ((v8___Local_v8__Primitive_*) result_py)->_Cobject = new v8::Local<v8::Primitive>(result);
                        };
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    {
        
            PyObject* isolate = NULL;
            PyObject* that = NULL;
        
        static char *kwlist[] = { "isolate""that", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OO", kwlist, &isolate,&that);
            if ( 0 == status  && isolate && that){
                    
                    
                if (!checkType(&v8___IsolateType, isolate )){ status = -1;}
    
                if (!checkType(&v8___PrimitiveType, that )){ status = -1;}
    
                        
                   v8::Isolate * isolate_C = ((v8___Isolate*)isolate)->_Cobject;
    
                   v8::Primitive * that_C = ((v8___Primitive*)that)->_Cobject;
    
                        if( 0 == status ){
                       v8::Local<v8::Primitive> result = v8::Local<v8::Primitive>::New(isolate_C, that_C);
                       result_py = 
                        PyObject_CallObject((PyObject *) & v8___Local_v8__Primitive_Type, NULL);
                        if(result_py){
                            delete ((v8___Local_v8__Primitive_*) result_py)->_Cobject ;
                            ((v8___Local_v8__Primitive_*) result_py)->_Cobject = new v8::Local<v8::Primitive>(result);
                        };
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        

static void
v8___Local_v8__Boolean__dealloc(v8___Local_v8__Boolean_* self)
{
    if(!self) return;
    if (!self->_is_c_reference){
        delete self->_Cobject;
    }
    self->_Cobject = NULL;
    self->_owner = NULL;
    self->_is_c_reference = false;
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject *
v8___Local_v8__Boolean__new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
    v8___Local_v8__Boolean_ *self;

    self = (v8___Local_v8__Boolean_ *)type->tp_alloc(type, 0);
    if (self != NULL) {
        self->_Cobject = NULL;
        self->_owner = NULL;
    }

    return (PyObject *)self;
}       

static int
v8___Local_v8__Boolean__init(v8___Local_v8__Boolean_ *self, PyObject *args, PyObject *kwds)
{
    int status = -1;
    if(!self) return status;
    self->_owner = (PyObject*)self;
    
    {
        PyObject * tmp = NULL;
        (void)tmp;
         
        static char *kwlist[] = {  NULL};
        
            
        if ( 0 != status ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist, );
            if ( 0 == status ){
                
                
                if(status == 0){
                    
                    self->_Cobject = new v8::Local();
                    
                        
                }
            }
        }
    }
    {
        PyObject * tmp = NULL;
        (void)tmp;
         
        static char *kwlist[] = { "that", NULL};
        
        PyObject* that = NULL;
        
            
        if ( 0 != status ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &that);
            if ( 0 == status  && that){
                
                
                if(status == 0){
                    
                   v8::Local<v8::Boolean>& that_C = *((v8___Local_v8__Boolean_*)that)->_Cobject;
    
                    self->_Cobject = new v8::Local(that_C);
                    
                        
                }
            }
        }
    }
    {
        PyObject * tmp = NULL;
        (void)tmp;
         
        static char *kwlist[] = { "Anon_1", NULL};
        
        PyObject* Anon_1 = NULL;
        
            
        if ( 0 != status ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &Anon_1);
            if ( 0 == status  && Anon_1){
                
                
                if(status == 0){
                    
                   v8::Local<v8::Boolean> const& Anon_1_C = *((v8___Local_v8__Boolean_*)Anon_1)->_Cobject;
    
                    self->_Cobject = new v8::Local(Anon_1_C);
                    
                        
                }
            }
        }
    }
    if (status != 0){
       self->_Cobject = NULL;
       status = 0;
    }
    return status;
}


static PyObject*
v8___Local_v8__Boolean___IsEmpty(v8___Local_v8__Boolean_* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->IsEmpty();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Local_v8__Boolean___Clear(v8___Local_v8__Boolean_* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->Clear();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Local_v8__Boolean___New(PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* isolate = NULL;
            PyObject* that = NULL;
        
        static char *kwlist[] = { "isolate""that", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OO", kwlist, &isolate,&that);
            if ( 0 == status  && isolate && that){
                    
                    
                if (!checkType(&v8___IsolateType, isolate )){ status = -1;}
    
                if (!checkType(&v8___Local_v8__Boolean_Type, that )){ status = -1;}
    
                        
                   v8::Isolate * isolate_C = ((v8___Isolate*)isolate)->_Cobject;
    
                   v8::Local<v8::Boolean>& that_C = *((v8___Local_v8__Boolean_*)that)->_Cobject;
    
                        if( 0 == status ){
                       v8::Local<v8::Boolean> result = v8::Local<v8::Boolean>::New(isolate_C, that_C);
                       result_py = 
                        PyObject_CallObject((PyObject *) & v8___Local_v8__Boolean_Type, NULL);
                        if(result_py){
                            delete ((v8___Local_v8__Boolean_*) result_py)->_Cobject ;
                            ((v8___Local_v8__Boolean_*) result_py)->_Cobject = new v8::Local<v8::Boolean>(result);
                        };
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    {
        
            PyObject* isolate = NULL;
            PyObject* that = NULL;
        
        static char *kwlist[] = { "isolate""that", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OO", kwlist, &isolate,&that);
            if ( 0 == status  && isolate && that){
                    
                    
                if (!checkType(&v8___IsolateType, isolate )){ status = -1;}
    
                if (!checkType(&v8___PersistentBase_v8__Boolean_Type, that )){ status = -1;}
    
                        
                   v8::Isolate * isolate_C = ((v8___Isolate*)isolate)->_Cobject;
    
                   v8::PersistentBase<v8::Boolean> const& that_C = *((v8___PersistentBase_v8__Boolean_*)that)->_Cobject;
    
                        if( 0 == status ){
                       v8::Local<v8::Boolean> result = v8::Local<v8::Boolean>::New(isolate_C, that_C);
                       result_py = 
                        PyObject_CallObject((PyObject *) & v8___Local_v8__Boolean_Type, NULL);
                        if(result_py){
                            delete ((v8___Local_v8__Boolean_*) result_py)->_Cobject ;
                            ((v8___Local_v8__Boolean_*) result_py)->_Cobject = new v8::Local<v8::Boolean>(result);
                        };
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    {
        
            PyObject* isolate = NULL;
            PyObject* that = NULL;
        
        static char *kwlist[] = { "isolate""that", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OO", kwlist, &isolate,&that);
            if ( 0 == status  && isolate && that){
                    
                    
                if (!checkType(&v8___IsolateType, isolate )){ status = -1;}
    
                if (!checkType(&v8___BooleanType, that )){ status = -1;}
    
                        
                   v8::Isolate * isolate_C = ((v8___Isolate*)isolate)->_Cobject;
    
                   v8::Boolean * that_C = ((v8___Boolean*)that)->_Cobject;
    
                        if( 0 == status ){
                       v8::Local<v8::Boolean> result = v8::Local<v8::Boolean>::New(isolate_C, that_C);
                       result_py = 
                        PyObject_CallObject((PyObject *) & v8___Local_v8__Boolean_Type, NULL);
                        if(result_py){
                            delete ((v8___Local_v8__Boolean_*) result_py)->_Cobject ;
                            ((v8___Local_v8__Boolean_*) result_py)->_Cobject = new v8::Local<v8::Boolean>(result);
                        };
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        

static void
v8___Local_v8__Value__dealloc(v8___Local_v8__Value_* self)
{
    if(!self) return;
    if (!self->_is_c_reference){
        delete self->_Cobject;
    }
    self->_Cobject = NULL;
    self->_owner = NULL;
    self->_is_c_reference = false;
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject *
v8___Local_v8__Value__new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
    v8___Local_v8__Value_ *self;

    self = (v8___Local_v8__Value_ *)type->tp_alloc(type, 0);
    if (self != NULL) {
        self->_Cobject = NULL;
        self->_owner = NULL;
    }

    return (PyObject *)self;
}       

static int
v8___Local_v8__Value__init(v8___Local_v8__Value_ *self, PyObject *args, PyObject *kwds)
{
    int status = -1;
    if(!self) return status;
    self->_owner = (PyObject*)self;
    
    {
        PyObject * tmp = NULL;
        (void)tmp;
         
        static char *kwlist[] = {  NULL};
        
            
        if ( 0 != status ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist, );
            if ( 0 == status ){
                
                
                if(status == 0){
                    
                    self->_Cobject = new v8::Local();
                    
                        
                }
            }
        }
    }
    {
        PyObject * tmp = NULL;
        (void)tmp;
         
        static char *kwlist[] = { "that", NULL};
        
        PyObject* that = NULL;
        
            
        if ( 0 != status ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &that);
            if ( 0 == status  && that){
                
                
                if(status == 0){
                    
                   v8::Local<v8::Value>& that_C = *((v8___Local_v8__Value_*)that)->_Cobject;
    
                    self->_Cobject = new v8::Local(that_C);
                    
                        
                }
            }
        }
    }
    {
        PyObject * tmp = NULL;
        (void)tmp;
         
        static char *kwlist[] = { "Anon_1", NULL};
        
        PyObject* Anon_1 = NULL;
        
            
        if ( 0 != status ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &Anon_1);
            if ( 0 == status  && Anon_1){
                
                
                if(status == 0){
                    
                   v8::Local<v8::Value> const& Anon_1_C = *((v8___Local_v8__Value_*)Anon_1)->_Cobject;
    
                    self->_Cobject = new v8::Local(Anon_1_C);
                    
                        
                }
            }
        }
    }
    if (status != 0){
       self->_Cobject = NULL;
       status = 0;
    }
    return status;
}


static PyObject*
v8___Local_v8__Value___IsEmpty(v8___Local_v8__Value_* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->IsEmpty();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Local_v8__Value___Clear(v8___Local_v8__Value_* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->Clear();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Local_v8__Value___New(PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* isolate = NULL;
            PyObject* that = NULL;
        
        static char *kwlist[] = { "isolate""that", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OO", kwlist, &isolate,&that);
            if ( 0 == status  && isolate && that){
                    
                    
                if (!checkType(&v8___IsolateType, isolate )){ status = -1;}
    
                if (!checkType(&v8___Local_v8__Value_Type, that )){ status = -1;}
    
                        
                   v8::Isolate * isolate_C = ((v8___Isolate*)isolate)->_Cobject;
    
                   v8::Local<v8::Value>& that_C = *((v8___Local_v8__Value_*)that)->_Cobject;
    
                        if( 0 == status ){
                       v8::Local<v8::Value> result = v8::Local<v8::Value>::New(isolate_C, that_C);
                       result_py = 
                        PyObject_CallObject((PyObject *) & v8___Local_v8__Value_Type, NULL);
                        if(result_py){
                            delete ((v8___Local_v8__Value_*) result_py)->_Cobject ;
                            ((v8___Local_v8__Value_*) result_py)->_Cobject = new v8::Local<v8::Value>(result);
                        };
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    {
        
            PyObject* isolate = NULL;
            PyObject* that = NULL;
        
        static char *kwlist[] = { "isolate""that", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OO", kwlist, &isolate,&that);
            if ( 0 == status  && isolate && that){
                    
                    
                if (!checkType(&v8___IsolateType, isolate )){ status = -1;}
    
                if (!checkType(&v8___PersistentBase_v8__Value_Type, that )){ status = -1;}
    
                        
                   v8::Isolate * isolate_C = ((v8___Isolate*)isolate)->_Cobject;
    
                   v8::PersistentBase<v8::Value> const& that_C = *((v8___PersistentBase_v8__Value_*)that)->_Cobject;
    
                        if( 0 == status ){
                       v8::Local<v8::Value> result = v8::Local<v8::Value>::New(isolate_C, that_C);
                       result_py = 
                        PyObject_CallObject((PyObject *) & v8___Local_v8__Value_Type, NULL);
                        if(result_py){
                            delete ((v8___Local_v8__Value_*) result_py)->_Cobject ;
                            ((v8___Local_v8__Value_*) result_py)->_Cobject = new v8::Local<v8::Value>(result);
                        };
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    {
        
            PyObject* isolate = NULL;
            PyObject* that = NULL;
        
        static char *kwlist[] = { "isolate""that", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OO", kwlist, &isolate,&that);
            if ( 0 == status  && isolate && that){
                    
                    
                if (!checkType(&v8___IsolateType, isolate )){ status = -1;}
    
                if (!checkType(&v8___ValueType, that )){ status = -1;}
    
                        
                   v8::Isolate * isolate_C = ((v8___Isolate*)isolate)->_Cobject;
    
                   v8::Value * that_C = ((v8___Value*)that)->_Cobject;
    
                        if( 0 == status ){
                       v8::Local<v8::Value> result = v8::Local<v8::Value>::New(isolate_C, that_C);
                       result_py = 
                        PyObject_CallObject((PyObject *) & v8___Local_v8__Value_Type, NULL);
                        if(result_py){
                            delete ((v8___Local_v8__Value_*) result_py)->_Cobject ;
                            ((v8___Local_v8__Value_*) result_py)->_Cobject = new v8::Local<v8::Value>(result);
                        };
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        

static void
v8___Local_v8__Integer__dealloc(v8___Local_v8__Integer_* self)
{
    if(!self) return;
    if (!self->_is_c_reference){
        delete self->_Cobject;
    }
    self->_Cobject = NULL;
    self->_owner = NULL;
    self->_is_c_reference = false;
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject *
v8___Local_v8__Integer__new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
    v8___Local_v8__Integer_ *self;

    self = (v8___Local_v8__Integer_ *)type->tp_alloc(type, 0);
    if (self != NULL) {
        self->_Cobject = NULL;
        self->_owner = NULL;
    }

    return (PyObject *)self;
}       

static int
v8___Local_v8__Integer__init(v8___Local_v8__Integer_ *self, PyObject *args, PyObject *kwds)
{
    int status = -1;
    if(!self) return status;
    self->_owner = (PyObject*)self;
    
    {
        PyObject * tmp = NULL;
        (void)tmp;
         
        static char *kwlist[] = {  NULL};
        
            
        if ( 0 != status ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist, );
            if ( 0 == status ){
                
                
                if(status == 0){
                    
                    self->_Cobject = new v8::Local();
                    
                        
                }
            }
        }
    }
    {
        PyObject * tmp = NULL;
        (void)tmp;
         
        static char *kwlist[] = { "that", NULL};
        
        PyObject* that = NULL;
        
            
        if ( 0 != status ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &that);
            if ( 0 == status  && that){
                
                
                if(status == 0){
                    
                   v8::Local<v8::Integer>& that_C = *((v8___Local_v8__Integer_*)that)->_Cobject;
    
                    self->_Cobject = new v8::Local(that_C);
                    
                        
                }
            }
        }
    }
    {
        PyObject * tmp = NULL;
        (void)tmp;
         
        static char *kwlist[] = { "Anon_1", NULL};
        
        PyObject* Anon_1 = NULL;
        
            
        if ( 0 != status ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &Anon_1);
            if ( 0 == status  && Anon_1){
                
                
                if(status == 0){
                    
                   v8::Local<v8::Integer> const& Anon_1_C = *((v8___Local_v8__Integer_*)Anon_1)->_Cobject;
    
                    self->_Cobject = new v8::Local(Anon_1_C);
                    
                        
                }
            }
        }
    }
    if (status != 0){
       self->_Cobject = NULL;
       status = 0;
    }
    return status;
}


static PyObject*
v8___Local_v8__Integer___IsEmpty(v8___Local_v8__Integer_* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->IsEmpty();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Local_v8__Integer___Clear(v8___Local_v8__Integer_* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->Clear();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Local_v8__Integer___New(PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* isolate = NULL;
            PyObject* that = NULL;
        
        static char *kwlist[] = { "isolate""that", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OO", kwlist, &isolate,&that);
            if ( 0 == status  && isolate && that){
                    
                    
                if (!checkType(&v8___IsolateType, isolate )){ status = -1;}
    
                if (!checkType(&v8___Local_v8__Integer_Type, that )){ status = -1;}
    
                        
                   v8::Isolate * isolate_C = ((v8___Isolate*)isolate)->_Cobject;
    
                   v8::Local<v8::Integer>& that_C = *((v8___Local_v8__Integer_*)that)->_Cobject;
    
                        if( 0 == status ){
                       v8::Local<v8::Integer> result = v8::Local<v8::Integer>::New(isolate_C, that_C);
                       result_py = 
                        PyObject_CallObject((PyObject *) & v8___Local_v8__Integer_Type, NULL);
                        if(result_py){
                            delete ((v8___Local_v8__Integer_*) result_py)->_Cobject ;
                            ((v8___Local_v8__Integer_*) result_py)->_Cobject = new v8::Local<v8::Integer>(result);
                        };
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    {
        
            PyObject* isolate = NULL;
            PyObject* that = NULL;
        
        static char *kwlist[] = { "isolate""that", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OO", kwlist, &isolate,&that);
            if ( 0 == status  && isolate && that){
                    
                    
                if (!checkType(&v8___IsolateType, isolate )){ status = -1;}
    
                if (!checkType(&v8___PersistentBase_v8__Integer_Type, that )){ status = -1;}
    
                        
                   v8::Isolate * isolate_C = ((v8___Isolate*)isolate)->_Cobject;
    
                   v8::PersistentBase<v8::Integer> const& that_C = *((v8___PersistentBase_v8__Integer_*)that)->_Cobject;
    
                        if( 0 == status ){
                       v8::Local<v8::Integer> result = v8::Local<v8::Integer>::New(isolate_C, that_C);
                       result_py = 
                        PyObject_CallObject((PyObject *) & v8___Local_v8__Integer_Type, NULL);
                        if(result_py){
                            delete ((v8___Local_v8__Integer_*) result_py)->_Cobject ;
                            ((v8___Local_v8__Integer_*) result_py)->_Cobject = new v8::Local<v8::Integer>(result);
                        };
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    {
        
            PyObject* isolate = NULL;
            PyObject* that = NULL;
        
        static char *kwlist[] = { "isolate""that", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OO", kwlist, &isolate,&that);
            if ( 0 == status  && isolate && that){
                    
                    
                if (!checkType(&v8___IsolateType, isolate )){ status = -1;}
    
                if (!checkType(&v8___IntegerType, that )){ status = -1;}
    
                        
                   v8::Isolate * isolate_C = ((v8___Isolate*)isolate)->_Cobject;
    
                   v8::Integer * that_C = ((v8___Integer*)that)->_Cobject;
    
                        if( 0 == status ){
                       v8::Local<v8::Integer> result = v8::Local<v8::Integer>::New(isolate_C, that_C);
                       result_py = 
                        PyObject_CallObject((PyObject *) & v8___Local_v8__Integer_Type, NULL);
                        if(result_py){
                            delete ((v8___Local_v8__Integer_*) result_py)->_Cobject ;
                            ((v8___Local_v8__Integer_*) result_py)->_Cobject = new v8::Local<v8::Integer>(result);
                        };
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        

static void
v8___Local_v8__Script__dealloc(v8___Local_v8__Script_* self)
{
    if(!self) return;
    if (!self->_is_c_reference){
        delete self->_Cobject;
    }
    self->_Cobject = NULL;
    self->_owner = NULL;
    self->_is_c_reference = false;
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject *
v8___Local_v8__Script__new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
    v8___Local_v8__Script_ *self;

    self = (v8___Local_v8__Script_ *)type->tp_alloc(type, 0);
    if (self != NULL) {
        self->_Cobject = NULL;
        self->_owner = NULL;
    }

    return (PyObject *)self;
}       

static int
v8___Local_v8__Script__init(v8___Local_v8__Script_ *self, PyObject *args, PyObject *kwds)
{
    int status = -1;
    if(!self) return status;
    self->_owner = (PyObject*)self;
    self->_Cobject = new v8___Local_v8__Script_();
    status = self->get_Cobject(self)?0:-1; 
    if (status != 0){
       self->_Cobject = NULL;
       status = 0;
    }
    return status;
}



static void
v8___Local_v8__String__dealloc(v8___Local_v8__String_* self)
{
    if(!self) return;
    if (!self->_is_c_reference){
        delete self->_Cobject;
    }
    self->_Cobject = NULL;
    self->_owner = NULL;
    self->_is_c_reference = false;
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject *
v8___Local_v8__String__new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
    v8___Local_v8__String_ *self;

    self = (v8___Local_v8__String_ *)type->tp_alloc(type, 0);
    if (self != NULL) {
        self->_Cobject = NULL;
        self->_owner = NULL;
    }

    return (PyObject *)self;
}       

static int
v8___Local_v8__String__init(v8___Local_v8__String_ *self, PyObject *args, PyObject *kwds)
{
    int status = -1;
    if(!self) return status;
    self->_owner = (PyObject*)self;
    
    {
        PyObject * tmp = NULL;
        (void)tmp;
         
        static char *kwlist[] = {  NULL};
        
            
        if ( 0 != status ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist, );
            if ( 0 == status ){
                
                
                if(status == 0){
                    
                    self->_Cobject = new v8::Local();
                    
                        
                }
            }
        }
    }
    {
        PyObject * tmp = NULL;
        (void)tmp;
         
        static char *kwlist[] = { "that", NULL};
        
        PyObject* that = NULL;
        
            
        if ( 0 != status ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &that);
            if ( 0 == status  && that){
                
                
                if(status == 0){
                    
                   v8::Local<v8::String>& that_C = *((v8___Local_v8__String_*)that)->_Cobject;
    
                    self->_Cobject = new v8::Local(that_C);
                    
                        
                }
            }
        }
    }
    {
        PyObject * tmp = NULL;
        (void)tmp;
         
        static char *kwlist[] = { "Anon_1", NULL};
        
        PyObject* Anon_1 = NULL;
        
            
        if ( 0 != status ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &Anon_1);
            if ( 0 == status  && Anon_1){
                
                
                if(status == 0){
                    
                   v8::Local<v8::String> const& Anon_1_C = *((v8___Local_v8__String_*)Anon_1)->_Cobject;
    
                    self->_Cobject = new v8::Local(Anon_1_C);
                    
                        
                }
            }
        }
    }
    if (status != 0){
       self->_Cobject = NULL;
       status = 0;
    }
    return status;
}


static PyObject*
v8___Local_v8__String___IsEmpty(v8___Local_v8__String_* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->IsEmpty();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Local_v8__String___Clear(v8___Local_v8__String_* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->Clear();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Local_v8__String___New(PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* isolate = NULL;
            PyObject* that = NULL;
        
        static char *kwlist[] = { "isolate""that", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OO", kwlist, &isolate,&that);
            if ( 0 == status  && isolate && that){
                    
                    
                if (!checkType(&v8___IsolateType, isolate )){ status = -1;}
    
                if (!checkType(&v8___Local_v8__String_Type, that )){ status = -1;}
    
                        
                   v8::Isolate * isolate_C = ((v8___Isolate*)isolate)->_Cobject;
    
                   v8::Local<v8::String>& that_C = *((v8___Local_v8__String_*)that)->_Cobject;
    
                        if( 0 == status ){
                       v8::Local<v8::String> result = v8::Local<v8::String>::New(isolate_C, that_C);
                       result_py = 
                        PyObject_CallObject((PyObject *) & v8___Local_v8__String_Type, NULL);
                        if(result_py){
                            delete ((v8___Local_v8__String_*) result_py)->_Cobject ;
                            ((v8___Local_v8__String_*) result_py)->_Cobject = new v8::Local<v8::String>(result);
                        };
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    {
        
            PyObject* isolate = NULL;
            PyObject* that = NULL;
        
        static char *kwlist[] = { "isolate""that", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OO", kwlist, &isolate,&that);
            if ( 0 == status  && isolate && that){
                    
                    
                if (!checkType(&v8___IsolateType, isolate )){ status = -1;}
    
                if (!checkType(&v8___PersistentBase_v8__String_Type, that )){ status = -1;}
    
                        
                   v8::Isolate * isolate_C = ((v8___Isolate*)isolate)->_Cobject;
    
                   v8::PersistentBase<v8::String> const& that_C = *((v8___PersistentBase_v8__String_*)that)->_Cobject;
    
                        if( 0 == status ){
                       v8::Local<v8::String> result = v8::Local<v8::String>::New(isolate_C, that_C);
                       result_py = 
                        PyObject_CallObject((PyObject *) & v8___Local_v8__String_Type, NULL);
                        if(result_py){
                            delete ((v8___Local_v8__String_*) result_py)->_Cobject ;
                            ((v8___Local_v8__String_*) result_py)->_Cobject = new v8::Local<v8::String>(result);
                        };
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    {
        
            PyObject* isolate = NULL;
            PyObject* that = NULL;
        
        static char *kwlist[] = { "isolate""that", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OO", kwlist, &isolate,&that);
            if ( 0 == status  && isolate && that){
                    
                    
                if (!checkType(&v8___IsolateType, isolate )){ status = -1;}
    
                if (!checkType(&v8___StringType, that )){ status = -1;}
    
                        
                   v8::Isolate * isolate_C = ((v8___Isolate*)isolate)->_Cobject;
    
                   v8::String * that_C = ((v8___String*)that)->_Cobject;
    
                        if( 0 == status ){
                       v8::Local<v8::String> result = v8::Local<v8::String>::New(isolate_C, that_C);
                       result_py = 
                        PyObject_CallObject((PyObject *) & v8___Local_v8__String_Type, NULL);
                        if(result_py){
                            delete ((v8___Local_v8__String_*) result_py)->_Cobject ;
                            ((v8___Local_v8__String_*) result_py)->_Cobject = new v8::Local<v8::String>(result);
                        };
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        

static void
v8___Local_v8__Context__dealloc(v8___Local_v8__Context_* self)
{
    if(!self) return;
    if (!self->_is_c_reference){
        delete self->_Cobject;
    }
    self->_Cobject = NULL;
    self->_owner = NULL;
    self->_is_c_reference = false;
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject *
v8___Local_v8__Context__new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
    v8___Local_v8__Context_ *self;

    self = (v8___Local_v8__Context_ *)type->tp_alloc(type, 0);
    if (self != NULL) {
        self->_Cobject = NULL;
        self->_owner = NULL;
    }

    return (PyObject *)self;
}       

static int
v8___Local_v8__Context__init(v8___Local_v8__Context_ *self, PyObject *args, PyObject *kwds)
{
    int status = -1;
    if(!self) return status;
    self->_owner = (PyObject*)self;
    
    {
        PyObject * tmp = NULL;
        (void)tmp;
         
        static char *kwlist[] = {  NULL};
        
            
        if ( 0 != status ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist, );
            if ( 0 == status ){
                
                
                if(status == 0){
                    
                    self->_Cobject = new v8::Local();
                    
                        
                }
            }
        }
    }
    {
        PyObject * tmp = NULL;
        (void)tmp;
         
        static char *kwlist[] = { "that", NULL};
        
        PyObject* that = NULL;
        
            
        if ( 0 != status ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &that);
            if ( 0 == status  && that){
                
                
                if(status == 0){
                    
                   v8::Local<v8::Context>& that_C = *((v8___Local_v8__Context_*)that)->_Cobject;
    
                    self->_Cobject = new v8::Local(that_C);
                    
                        
                }
            }
        }
    }
    {
        PyObject * tmp = NULL;
        (void)tmp;
         
        static char *kwlist[] = { "Anon_1", NULL};
        
        PyObject* Anon_1 = NULL;
        
            
        if ( 0 != status ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &Anon_1);
            if ( 0 == status  && Anon_1){
                
                
                if(status == 0){
                    
                   v8::Local<v8::Context> const& Anon_1_C = *((v8___Local_v8__Context_*)Anon_1)->_Cobject;
    
                    self->_Cobject = new v8::Local(Anon_1_C);
                    
                        
                }
            }
        }
    }
    if (status != 0){
       self->_Cobject = NULL;
       status = 0;
    }
    return status;
}


static PyObject*
v8___Local_v8__Context___IsEmpty(v8___Local_v8__Context_* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->IsEmpty();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Local_v8__Context___Clear(v8___Local_v8__Context_* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->Clear();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Local_v8__Context___New(PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* isolate = NULL;
            PyObject* that = NULL;
        
        static char *kwlist[] = { "isolate""that", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OO", kwlist, &isolate,&that);
            if ( 0 == status  && isolate && that){
                    
                    
                if (!checkType(&v8___IsolateType, isolate )){ status = -1;}
    
                if (!checkType(&v8___Local_v8__Context_Type, that )){ status = -1;}
    
                        
                   v8::Isolate * isolate_C = ((v8___Isolate*)isolate)->_Cobject;
    
                   v8::Local<v8::Context>& that_C = *((v8___Local_v8__Context_*)that)->_Cobject;
    
                        if( 0 == status ){
                       v8::Local<v8::Context> result = v8::Local<v8::Context>::New(isolate_C, that_C);
                       result_py = 
                        PyObject_CallObject((PyObject *) & v8___Local_v8__Context_Type, NULL);
                        if(result_py){
                            delete ((v8___Local_v8__Context_*) result_py)->_Cobject ;
                            ((v8___Local_v8__Context_*) result_py)->_Cobject = new v8::Local<v8::Context>(result);
                        };
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    {
        
            PyObject* isolate = NULL;
            PyObject* that = NULL;
        
        static char *kwlist[] = { "isolate""that", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OO", kwlist, &isolate,&that);
            if ( 0 == status  && isolate && that){
                    
                    
                if (!checkType(&v8___IsolateType, isolate )){ status = -1;}
    
                if (!checkType(&v8___PersistentBase_v8__Context_Type, that )){ status = -1;}
    
                        
                   v8::Isolate * isolate_C = ((v8___Isolate*)isolate)->_Cobject;
    
                   v8::PersistentBase<v8::Context> const& that_C = *((v8___PersistentBase_v8__Context_*)that)->_Cobject;
    
                        if( 0 == status ){
                       v8::Local<v8::Context> result = v8::Local<v8::Context>::New(isolate_C, that_C);
                       result_py = 
                        PyObject_CallObject((PyObject *) & v8___Local_v8__Context_Type, NULL);
                        if(result_py){
                            delete ((v8___Local_v8__Context_*) result_py)->_Cobject ;
                            ((v8___Local_v8__Context_*) result_py)->_Cobject = new v8::Local<v8::Context>(result);
                        };
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    {
        
            PyObject* isolate = NULL;
            PyObject* that = NULL;
        
        static char *kwlist[] = { "isolate""that", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OO", kwlist, &isolate,&that);
            if ( 0 == status  && isolate && that){
                    
                    
                if (!checkType(&v8___IsolateType, isolate )){ status = -1;}
    
                if (!checkType(&v8___ContextType, that )){ status = -1;}
    
                        
                   v8::Isolate * isolate_C = ((v8___Isolate*)isolate)->_Cobject;
    
                   v8::Context * that_C = ((v8___Context*)that)->_Cobject;
    
                        if( 0 == status ){
                       v8::Local<v8::Context> result = v8::Local<v8::Context>::New(isolate_C, that_C);
                       result_py = 
                        PyObject_CallObject((PyObject *) & v8___Local_v8__Context_Type, NULL);
                        if(result_py){
                            delete ((v8___Local_v8__Context_*) result_py)->_Cobject ;
                            ((v8___Local_v8__Context_*) result_py)->_Cobject = new v8::Local<v8::Context>(result);
                        };
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        

static void
v8___Local_v8__UnboundScript__dealloc(v8___Local_v8__UnboundScript_* self)
{
    if(!self) return;
    if (!self->_is_c_reference){
        delete self->_Cobject;
    }
    self->_Cobject = NULL;
    self->_owner = NULL;
    self->_is_c_reference = false;
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject *
v8___Local_v8__UnboundScript__new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
    v8___Local_v8__UnboundScript_ *self;

    self = (v8___Local_v8__UnboundScript_ *)type->tp_alloc(type, 0);
    if (self != NULL) {
        self->_Cobject = NULL;
        self->_owner = NULL;
    }

    return (PyObject *)self;
}       

static int
v8___Local_v8__UnboundScript__init(v8___Local_v8__UnboundScript_ *self, PyObject *args, PyObject *kwds)
{
    int status = -1;
    if(!self) return status;
    self->_owner = (PyObject*)self;
    
    {
        PyObject * tmp = NULL;
        (void)tmp;
         
        static char *kwlist[] = {  NULL};
        
            
        if ( 0 != status ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist, );
            if ( 0 == status ){
                
                
                if(status == 0){
                    
                    self->_Cobject = new v8::Local();
                    
                        
                }
            }
        }
    }
    {
        PyObject * tmp = NULL;
        (void)tmp;
         
        static char *kwlist[] = { "that", NULL};
        
        PyObject* that = NULL;
        
            
        if ( 0 != status ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &that);
            if ( 0 == status  && that){
                
                
                if(status == 0){
                    
                   v8::Local<v8::UnboundScript>& that_C = *((v8___Local_v8__UnboundScript_*)that)->_Cobject;
    
                    self->_Cobject = new v8::Local(that_C);
                    
                        
                }
            }
        }
    }
    {
        PyObject * tmp = NULL;
        (void)tmp;
         
        static char *kwlist[] = { "Anon_1", NULL};
        
        PyObject* Anon_1 = NULL;
        
            
        if ( 0 != status ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &Anon_1);
            if ( 0 == status  && Anon_1){
                
                
                if(status == 0){
                    
                   v8::Local<v8::UnboundScript> const& Anon_1_C = *((v8___Local_v8__UnboundScript_*)Anon_1)->_Cobject;
    
                    self->_Cobject = new v8::Local(Anon_1_C);
                    
                        
                }
            }
        }
    }
    if (status != 0){
       self->_Cobject = NULL;
       status = 0;
    }
    return status;
}


static PyObject*
v8___Local_v8__UnboundScript___IsEmpty(v8___Local_v8__UnboundScript_* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->IsEmpty();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Local_v8__UnboundScript___Clear(v8___Local_v8__UnboundScript_* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->Clear();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Local_v8__UnboundScript___New(PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* isolate = NULL;
            PyObject* that = NULL;
        
        static char *kwlist[] = { "isolate""that", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OO", kwlist, &isolate,&that);
            if ( 0 == status  && isolate && that){
                    
                    
                if (!checkType(&v8___IsolateType, isolate )){ status = -1;}
    
                if (!checkType(&v8___Local_v8__UnboundScript_Type, that )){ status = -1;}
    
                        
                   v8::Isolate * isolate_C = ((v8___Isolate*)isolate)->_Cobject;
    
                   v8::Local<v8::UnboundScript>& that_C = *((v8___Local_v8__UnboundScript_*)that)->_Cobject;
    
                        if( 0 == status ){
                       v8::Local<v8::UnboundScript> result = v8::Local<v8::UnboundScript>::New(isolate_C, that_C);
                       result_py = 
                        PyObject_CallObject((PyObject *) & v8___Local_v8__UnboundScript_Type, NULL);
                        if(result_py){
                            delete ((v8___Local_v8__UnboundScript_*) result_py)->_Cobject ;
                            ((v8___Local_v8__UnboundScript_*) result_py)->_Cobject = new v8::Local<v8::UnboundScript>(result);
                        };
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    {
        
            PyObject* isolate = NULL;
            PyObject* that = NULL;
        
        static char *kwlist[] = { "isolate""that", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OO", kwlist, &isolate,&that);
            if ( 0 == status  && isolate && that){
                    
                    
                if (!checkType(&v8___IsolateType, isolate )){ status = -1;}
    
                if (!checkType(&v8___PersistentBase_v8__UnboundScript_Type, that )){ status = -1;}
    
                        
                   v8::Isolate * isolate_C = ((v8___Isolate*)isolate)->_Cobject;
    
                   v8::PersistentBase<v8::UnboundScript> const& that_C = *((v8___PersistentBase_v8__UnboundScript_*)that)->_Cobject;
    
                        if( 0 == status ){
                       v8::Local<v8::UnboundScript> result = v8::Local<v8::UnboundScript>::New(isolate_C, that_C);
                       result_py = 
                        PyObject_CallObject((PyObject *) & v8___Local_v8__UnboundScript_Type, NULL);
                        if(result_py){
                            delete ((v8___Local_v8__UnboundScript_*) result_py)->_Cobject ;
                            ((v8___Local_v8__UnboundScript_*) result_py)->_Cobject = new v8::Local<v8::UnboundScript>(result);
                        };
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    {
        
            PyObject* isolate = NULL;
            PyObject* that = NULL;
        
        static char *kwlist[] = { "isolate""that", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OO", kwlist, &isolate,&that);
            if ( 0 == status  && isolate && that){
                    
                    
                if (!checkType(&v8___IsolateType, isolate )){ status = -1;}
    
                if (!checkType(&v8___UnboundScriptType, that )){ status = -1;}
    
                        
                   v8::Isolate * isolate_C = ((v8___Isolate*)isolate)->_Cobject;
    
                   v8::UnboundScript * that_C = ((v8___UnboundScript*)that)->_Cobject;
    
                        if( 0 == status ){
                       v8::Local<v8::UnboundScript> result = v8::Local<v8::UnboundScript>::New(isolate_C, that_C);
                       result_py = 
                        PyObject_CallObject((PyObject *) & v8___Local_v8__UnboundScript_Type, NULL);
                        if(result_py){
                            delete ((v8___Local_v8__UnboundScript_*) result_py)->_Cobject ;
                            ((v8___Local_v8__UnboundScript_*) result_py)->_Cobject = new v8::Local<v8::UnboundScript>(result);
                        };
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        

static void
v8___Local_v8__Function__dealloc(v8___Local_v8__Function_* self)
{
    if(!self) return;
    if (!self->_is_c_reference){
        delete self->_Cobject;
    }
    self->_Cobject = NULL;
    self->_owner = NULL;
    self->_is_c_reference = false;
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject *
v8___Local_v8__Function__new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
    v8___Local_v8__Function_ *self;

    self = (v8___Local_v8__Function_ *)type->tp_alloc(type, 0);
    if (self != NULL) {
        self->_Cobject = NULL;
        self->_owner = NULL;
    }

    return (PyObject *)self;
}       

static int
v8___Local_v8__Function__init(v8___Local_v8__Function_ *self, PyObject *args, PyObject *kwds)
{
    int status = -1;
    if(!self) return status;
    self->_owner = (PyObject*)self;
    
    {
        PyObject * tmp = NULL;
        (void)tmp;
         
        static char *kwlist[] = {  NULL};
        
            
        if ( 0 != status ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist, );
            if ( 0 == status ){
                
                
                if(status == 0){
                    
                    self->_Cobject = new v8::Local();
                    
                        
                }
            }
        }
    }
    {
        PyObject * tmp = NULL;
        (void)tmp;
         
        static char *kwlist[] = { "that", NULL};
        
        PyObject* that = NULL;
        
            
        if ( 0 != status ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &that);
            if ( 0 == status  && that){
                
                
                if(status == 0){
                    
                   v8::Local<v8::Function>& that_C = *((v8___Local_v8__Function_*)that)->_Cobject;
    
                    self->_Cobject = new v8::Local(that_C);
                    
                        
                }
            }
        }
    }
    {
        PyObject * tmp = NULL;
        (void)tmp;
         
        static char *kwlist[] = { "Anon_1", NULL};
        
        PyObject* Anon_1 = NULL;
        
            
        if ( 0 != status ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &Anon_1);
            if ( 0 == status  && Anon_1){
                
                
                if(status == 0){
                    
                   v8::Local<v8::Function> const& Anon_1_C = *((v8___Local_v8__Function_*)Anon_1)->_Cobject;
    
                    self->_Cobject = new v8::Local(Anon_1_C);
                    
                        
                }
            }
        }
    }
    if (status != 0){
       self->_Cobject = NULL;
       status = 0;
    }
    return status;
}


static PyObject*
v8___Local_v8__Function___IsEmpty(v8___Local_v8__Function_* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->IsEmpty();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Local_v8__Function___Clear(v8___Local_v8__Function_* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->Clear();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Local_v8__Function___New(PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* isolate = NULL;
            PyObject* that = NULL;
        
        static char *kwlist[] = { "isolate""that", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OO", kwlist, &isolate,&that);
            if ( 0 == status  && isolate && that){
                    
                    
                if (!checkType(&v8___IsolateType, isolate )){ status = -1;}
    
                if (!checkType(&v8___Local_v8__Function_Type, that )){ status = -1;}
    
                        
                   v8::Isolate * isolate_C = ((v8___Isolate*)isolate)->_Cobject;
    
                   v8::Local<v8::Function>& that_C = *((v8___Local_v8__Function_*)that)->_Cobject;
    
                        if( 0 == status ){
                       v8::Local<v8::Function> result = v8::Local<v8::Function>::New(isolate_C, that_C);
                       result_py = 
                        PyObject_CallObject((PyObject *) & v8___Local_v8__Function_Type, NULL);
                        if(result_py){
                            delete ((v8___Local_v8__Function_*) result_py)->_Cobject ;
                            ((v8___Local_v8__Function_*) result_py)->_Cobject = new v8::Local<v8::Function>(result);
                        };
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    {
        
            PyObject* isolate = NULL;
            PyObject* that = NULL;
        
        static char *kwlist[] = { "isolate""that", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OO", kwlist, &isolate,&that);
            if ( 0 == status  && isolate && that){
                    
                    
                if (!checkType(&v8___IsolateType, isolate )){ status = -1;}
    
                if (!checkType(&v8___PersistentBase_v8__Function_Type, that )){ status = -1;}
    
                        
                   v8::Isolate * isolate_C = ((v8___Isolate*)isolate)->_Cobject;
    
                   v8::PersistentBase<v8::Function> const& that_C = *((v8___PersistentBase_v8__Function_*)that)->_Cobject;
    
                        if( 0 == status ){
                       v8::Local<v8::Function> result = v8::Local<v8::Function>::New(isolate_C, that_C);
                       result_py = 
                        PyObject_CallObject((PyObject *) & v8___Local_v8__Function_Type, NULL);
                        if(result_py){
                            delete ((v8___Local_v8__Function_*) result_py)->_Cobject ;
                            ((v8___Local_v8__Function_*) result_py)->_Cobject = new v8::Local<v8::Function>(result);
                        };
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    {
        
            PyObject* isolate = NULL;
            PyObject* that = NULL;
        
        static char *kwlist[] = { "isolate""that", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OO", kwlist, &isolate,&that);
            if ( 0 == status  && isolate && that){
                    
                    
                if (!checkType(&v8___IsolateType, isolate )){ status = -1;}
    
                if (!checkType(&v8___FunctionType, that )){ status = -1;}
    
                        
                   v8::Isolate * isolate_C = ((v8___Isolate*)isolate)->_Cobject;
    
                   v8::Function * that_C = ((v8___Function*)that)->_Cobject;
    
                        if( 0 == status ){
                       v8::Local<v8::Function> result = v8::Local<v8::Function>::New(isolate_C, that_C);
                       result_py = 
                        PyObject_CallObject((PyObject *) & v8___Local_v8__Function_Type, NULL);
                        if(result_py){
                            delete ((v8___Local_v8__Function_*) result_py)->_Cobject ;
                            ((v8___Local_v8__Function_*) result_py)->_Cobject = new v8::Local<v8::Function>(result);
                        };
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        

static void
v8___Local_v8__Object__dealloc(v8___Local_v8__Object_* self)
{
    if(!self) return;
    if (!self->_is_c_reference){
        delete self->_Cobject;
    }
    self->_Cobject = NULL;
    self->_owner = NULL;
    self->_is_c_reference = false;
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject *
v8___Local_v8__Object__new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
    v8___Local_v8__Object_ *self;

    self = (v8___Local_v8__Object_ *)type->tp_alloc(type, 0);
    if (self != NULL) {
        self->_Cobject = NULL;
        self->_owner = NULL;
    }

    return (PyObject *)self;
}       

static int
v8___Local_v8__Object__init(v8___Local_v8__Object_ *self, PyObject *args, PyObject *kwds)
{
    int status = -1;
    if(!self) return status;
    self->_owner = (PyObject*)self;
    
    {
        PyObject * tmp = NULL;
        (void)tmp;
         
        static char *kwlist[] = {  NULL};
        
            
        if ( 0 != status ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist, );
            if ( 0 == status ){
                
                
                if(status == 0){
                    
                    self->_Cobject = new v8::Local();
                    
                        
                }
            }
        }
    }
    {
        PyObject * tmp = NULL;
        (void)tmp;
         
        static char *kwlist[] = { "that", NULL};
        
        PyObject* that = NULL;
        
            
        if ( 0 != status ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &that);
            if ( 0 == status  && that){
                
                
                if(status == 0){
                    
                   v8::Local<v8::Object>& that_C = *((v8___Local_v8__Object_*)that)->_Cobject;
    
                    self->_Cobject = new v8::Local(that_C);
                    
                        
                }
            }
        }
    }
    {
        PyObject * tmp = NULL;
        (void)tmp;
         
        static char *kwlist[] = { "Anon_1", NULL};
        
        PyObject* Anon_1 = NULL;
        
            
        if ( 0 != status ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &Anon_1);
            if ( 0 == status  && Anon_1){
                
                
                if(status == 0){
                    
                   v8::Local<v8::Object> const& Anon_1_C = *((v8___Local_v8__Object_*)Anon_1)->_Cobject;
    
                    self->_Cobject = new v8::Local(Anon_1_C);
                    
                        
                }
            }
        }
    }
    if (status != 0){
       self->_Cobject = NULL;
       status = 0;
    }
    return status;
}


static PyObject*
v8___Local_v8__Object___IsEmpty(v8___Local_v8__Object_* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->IsEmpty();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Local_v8__Object___Clear(v8___Local_v8__Object_* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->Clear();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Local_v8__Object___New(PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* isolate = NULL;
            PyObject* that = NULL;
        
        static char *kwlist[] = { "isolate""that", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OO", kwlist, &isolate,&that);
            if ( 0 == status  && isolate && that){
                    
                    
                if (!checkType(&v8___IsolateType, isolate )){ status = -1;}
    
                if (!checkType(&v8___Local_v8__Object_Type, that )){ status = -1;}
    
                        
                   v8::Isolate * isolate_C = ((v8___Isolate*)isolate)->_Cobject;
    
                   v8::Local<v8::Object>& that_C = *((v8___Local_v8__Object_*)that)->_Cobject;
    
                        if( 0 == status ){
                       v8::Local<v8::Object> result = v8::Local<v8::Object>::New(isolate_C, that_C);
                       result_py = 
                        PyObject_CallObject((PyObject *) & v8___Local_v8__Object_Type, NULL);
                        if(result_py){
                            delete ((v8___Local_v8__Object_*) result_py)->_Cobject ;
                            ((v8___Local_v8__Object_*) result_py)->_Cobject = new v8::Local<v8::Object>(result);
                        };
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    {
        
            PyObject* isolate = NULL;
            PyObject* that = NULL;
        
        static char *kwlist[] = { "isolate""that", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OO", kwlist, &isolate,&that);
            if ( 0 == status  && isolate && that){
                    
                    
                if (!checkType(&v8___IsolateType, isolate )){ status = -1;}
    
                if (!checkType(&v8___PersistentBase_v8__Object_Type, that )){ status = -1;}
    
                        
                   v8::Isolate * isolate_C = ((v8___Isolate*)isolate)->_Cobject;
    
                   v8::PersistentBase<v8::Object> const& that_C = *((v8___PersistentBase_v8__Object_*)that)->_Cobject;
    
                        if( 0 == status ){
                       v8::Local<v8::Object> result = v8::Local<v8::Object>::New(isolate_C, that_C);
                       result_py = 
                        PyObject_CallObject((PyObject *) & v8___Local_v8__Object_Type, NULL);
                        if(result_py){
                            delete ((v8___Local_v8__Object_*) result_py)->_Cobject ;
                            ((v8___Local_v8__Object_*) result_py)->_Cobject = new v8::Local<v8::Object>(result);
                        };
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    {
        
            PyObject* isolate = NULL;
            PyObject* that = NULL;
        
        static char *kwlist[] = { "isolate""that", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OO", kwlist, &isolate,&that);
            if ( 0 == status  && isolate && that){
                    
                    
                if (!checkType(&v8___IsolateType, isolate )){ status = -1;}
    
                if (!checkType(&v8___ObjectType, that )){ status = -1;}
    
                        
                   v8::Isolate * isolate_C = ((v8___Isolate*)isolate)->_Cobject;
    
                   v8::Object * that_C = ((v8___Object*)that)->_Cobject;
    
                        if( 0 == status ){
                       v8::Local<v8::Object> result = v8::Local<v8::Object>::New(isolate_C, that_C);
                       result_py = 
                        PyObject_CallObject((PyObject *) & v8___Local_v8__Object_Type, NULL);
                        if(result_py){
                            delete ((v8___Local_v8__Object_*) result_py)->_Cobject ;
                            ((v8___Local_v8__Object_*) result_py)->_Cobject = new v8::Local<v8::Object>(result);
                        };
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        

static void
v8___Local_v8__StackTrace__dealloc(v8___Local_v8__StackTrace_* self)
{
    if(!self) return;
    if (!self->_is_c_reference){
        delete self->_Cobject;
    }
    self->_Cobject = NULL;
    self->_owner = NULL;
    self->_is_c_reference = false;
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject *
v8___Local_v8__StackTrace__new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
    v8___Local_v8__StackTrace_ *self;

    self = (v8___Local_v8__StackTrace_ *)type->tp_alloc(type, 0);
    if (self != NULL) {
        self->_Cobject = NULL;
        self->_owner = NULL;
    }

    return (PyObject *)self;
}       

static int
v8___Local_v8__StackTrace__init(v8___Local_v8__StackTrace_ *self, PyObject *args, PyObject *kwds)
{
    int status = -1;
    if(!self) return status;
    self->_owner = (PyObject*)self;
    
    {
        PyObject * tmp = NULL;
        (void)tmp;
         
        static char *kwlist[] = {  NULL};
        
            
        if ( 0 != status ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist, );
            if ( 0 == status ){
                
                
                if(status == 0){
                    
                    self->_Cobject = new v8::Local();
                    
                        
                }
            }
        }
    }
    {
        PyObject * tmp = NULL;
        (void)tmp;
         
        static char *kwlist[] = { "that", NULL};
        
        PyObject* that = NULL;
        
            
        if ( 0 != status ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &that);
            if ( 0 == status  && that){
                
                
                if(status == 0){
                    
                   v8::Local<v8::StackTrace>& that_C = *((v8___Local_v8__StackTrace_*)that)->_Cobject;
    
                    self->_Cobject = new v8::Local(that_C);
                    
                        
                }
            }
        }
    }
    {
        PyObject * tmp = NULL;
        (void)tmp;
         
        static char *kwlist[] = { "Anon_1", NULL};
        
        PyObject* Anon_1 = NULL;
        
            
        if ( 0 != status ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &Anon_1);
            if ( 0 == status  && Anon_1){
                
                
                if(status == 0){
                    
                   v8::Local<v8::StackTrace> const& Anon_1_C = *((v8___Local_v8__StackTrace_*)Anon_1)->_Cobject;
    
                    self->_Cobject = new v8::Local(Anon_1_C);
                    
                        
                }
            }
        }
    }
    if (status != 0){
       self->_Cobject = NULL;
       status = 0;
    }
    return status;
}


static PyObject*
v8___Local_v8__StackTrace___IsEmpty(v8___Local_v8__StackTrace_* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->IsEmpty();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Local_v8__StackTrace___Clear(v8___Local_v8__StackTrace_* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->Clear();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Local_v8__StackTrace___New(PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* isolate = NULL;
            PyObject* that = NULL;
        
        static char *kwlist[] = { "isolate""that", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OO", kwlist, &isolate,&that);
            if ( 0 == status  && isolate && that){
                    
                    
                if (!checkType(&v8___IsolateType, isolate )){ status = -1;}
    
                if (!checkType(&v8___Local_v8__StackTrace_Type, that )){ status = -1;}
    
                        
                   v8::Isolate * isolate_C = ((v8___Isolate*)isolate)->_Cobject;
    
                   v8::Local<v8::StackTrace>& that_C = *((v8___Local_v8__StackTrace_*)that)->_Cobject;
    
                        if( 0 == status ){
                       v8::Local<v8::StackTrace> result = v8::Local<v8::StackTrace>::New(isolate_C, that_C);
                       result_py = 
                        PyObject_CallObject((PyObject *) & v8___Local_v8__StackTrace_Type, NULL);
                        if(result_py){
                            delete ((v8___Local_v8__StackTrace_*) result_py)->_Cobject ;
                            ((v8___Local_v8__StackTrace_*) result_py)->_Cobject = new v8::Local<v8::StackTrace>(result);
                        };
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    {
        
            PyObject* isolate = NULL;
            PyObject* that = NULL;
        
        static char *kwlist[] = { "isolate""that", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OO", kwlist, &isolate,&that);
            if ( 0 == status  && isolate && that){
                    
                    
                if (!checkType(&v8___IsolateType, isolate )){ status = -1;}
    
                if (!checkType(&v8___PersistentBase_v8__StackTrace_Type, that )){ status = -1;}
    
                        
                   v8::Isolate * isolate_C = ((v8___Isolate*)isolate)->_Cobject;
    
                   v8::PersistentBase<v8::StackTrace> const& that_C = *((v8___PersistentBase_v8__StackTrace_*)that)->_Cobject;
    
                        if( 0 == status ){
                       v8::Local<v8::StackTrace> result = v8::Local<v8::StackTrace>::New(isolate_C, that_C);
                       result_py = 
                        PyObject_CallObject((PyObject *) & v8___Local_v8__StackTrace_Type, NULL);
                        if(result_py){
                            delete ((v8___Local_v8__StackTrace_*) result_py)->_Cobject ;
                            ((v8___Local_v8__StackTrace_*) result_py)->_Cobject = new v8::Local<v8::StackTrace>(result);
                        };
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    {
        
            PyObject* isolate = NULL;
            PyObject* that = NULL;
        
        static char *kwlist[] = { "isolate""that", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OO", kwlist, &isolate,&that);
            if ( 0 == status  && isolate && that){
                    
                    
                if (!checkType(&v8___IsolateType, isolate )){ status = -1;}
    
                if (!checkType(&v8___StackTraceType, that )){ status = -1;}
    
                        
                   v8::Isolate * isolate_C = ((v8___Isolate*)isolate)->_Cobject;
    
                   v8::StackTrace * that_C = ((v8___StackTrace*)that)->_Cobject;
    
                        if( 0 == status ){
                       v8::Local<v8::StackTrace> result = v8::Local<v8::StackTrace>::New(isolate_C, that_C);
                       result_py = 
                        PyObject_CallObject((PyObject *) & v8___Local_v8__StackTrace_Type, NULL);
                        if(result_py){
                            delete ((v8___Local_v8__StackTrace_*) result_py)->_Cobject ;
                            ((v8___Local_v8__StackTrace_*) result_py)->_Cobject = new v8::Local<v8::StackTrace>(result);
                        };
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        

static void
v8___Local_v8__StackFrame__dealloc(v8___Local_v8__StackFrame_* self)
{
    if(!self) return;
    if (!self->_is_c_reference){
        delete self->_Cobject;
    }
    self->_Cobject = NULL;
    self->_owner = NULL;
    self->_is_c_reference = false;
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject *
v8___Local_v8__StackFrame__new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
    v8___Local_v8__StackFrame_ *self;

    self = (v8___Local_v8__StackFrame_ *)type->tp_alloc(type, 0);
    if (self != NULL) {
        self->_Cobject = NULL;
        self->_owner = NULL;
    }

    return (PyObject *)self;
}       

static int
v8___Local_v8__StackFrame__init(v8___Local_v8__StackFrame_ *self, PyObject *args, PyObject *kwds)
{
    int status = -1;
    if(!self) return status;
    self->_owner = (PyObject*)self;
    self->_Cobject = new v8___Local_v8__StackFrame_();
    status = self->get_Cobject(self)?0:-1; 
    if (status != 0){
       self->_Cobject = NULL;
       status = 0;
    }
    return status;
}



static void
v8___Local_v8__Array__dealloc(v8___Local_v8__Array_* self)
{
    if(!self) return;
    if (!self->_is_c_reference){
        delete self->_Cobject;
    }
    self->_Cobject = NULL;
    self->_owner = NULL;
    self->_is_c_reference = false;
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject *
v8___Local_v8__Array__new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
    v8___Local_v8__Array_ *self;

    self = (v8___Local_v8__Array_ *)type->tp_alloc(type, 0);
    if (self != NULL) {
        self->_Cobject = NULL;
        self->_owner = NULL;
    }

    return (PyObject *)self;
}       

static int
v8___Local_v8__Array__init(v8___Local_v8__Array_ *self, PyObject *args, PyObject *kwds)
{
    int status = -1;
    if(!self) return status;
    self->_owner = (PyObject*)self;
    self->_Cobject = new v8___Local_v8__Array_();
    status = self->get_Cobject(self)?0:-1; 
    if (status != 0){
       self->_Cobject = NULL;
       status = 0;
    }
    return status;
}



static void
v8___Local_v8__NativeWeakMap__dealloc(v8___Local_v8__NativeWeakMap_* self)
{
    if(!self) return;
    if (!self->_is_c_reference){
        delete self->_Cobject;
    }
    self->_Cobject = NULL;
    self->_owner = NULL;
    self->_is_c_reference = false;
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject *
v8___Local_v8__NativeWeakMap__new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
    v8___Local_v8__NativeWeakMap_ *self;

    self = (v8___Local_v8__NativeWeakMap_ *)type->tp_alloc(type, 0);
    if (self != NULL) {
        self->_Cobject = NULL;
        self->_owner = NULL;
    }

    return (PyObject *)self;
}       

static int
v8___Local_v8__NativeWeakMap__init(v8___Local_v8__NativeWeakMap_ *self, PyObject *args, PyObject *kwds)
{
    int status = -1;
    if(!self) return status;
    self->_owner = (PyObject*)self;
    self->_Cobject = new v8___Local_v8__NativeWeakMap_();
    status = self->get_Cobject(self)?0:-1; 
    if (status != 0){
       self->_Cobject = NULL;
       status = 0;
    }
    return status;
}



static void
v8___Local_v8__Number__dealloc(v8___Local_v8__Number_* self)
{
    if(!self) return;
    if (!self->_is_c_reference){
        delete self->_Cobject;
    }
    self->_Cobject = NULL;
    self->_owner = NULL;
    self->_is_c_reference = false;
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject *
v8___Local_v8__Number__new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
    v8___Local_v8__Number_ *self;

    self = (v8___Local_v8__Number_ *)type->tp_alloc(type, 0);
    if (self != NULL) {
        self->_Cobject = NULL;
        self->_owner = NULL;
    }

    return (PyObject *)self;
}       

static int
v8___Local_v8__Number__init(v8___Local_v8__Number_ *self, PyObject *args, PyObject *kwds)
{
    int status = -1;
    if(!self) return status;
    self->_owner = (PyObject*)self;
    
    {
        PyObject * tmp = NULL;
        (void)tmp;
         
        static char *kwlist[] = {  NULL};
        
            
        if ( 0 != status ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist, );
            if ( 0 == status ){
                
                
                if(status == 0){
                    
                    self->_Cobject = new v8::Local();
                    
                        
                }
            }
        }
    }
    {
        PyObject * tmp = NULL;
        (void)tmp;
         
        static char *kwlist[] = { "that", NULL};
        
        PyObject* that = NULL;
        
            
        if ( 0 != status ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &that);
            if ( 0 == status  && that){
                
                
                if(status == 0){
                    
                   v8::Local<v8::Number>& that_C = *((v8___Local_v8__Number_*)that)->_Cobject;
    
                    self->_Cobject = new v8::Local(that_C);
                    
                        
                }
            }
        }
    }
    {
        PyObject * tmp = NULL;
        (void)tmp;
         
        static char *kwlist[] = { "Anon_1", NULL};
        
        PyObject* Anon_1 = NULL;
        
            
        if ( 0 != status ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &Anon_1);
            if ( 0 == status  && Anon_1){
                
                
                if(status == 0){
                    
                   v8::Local<v8::Number> const& Anon_1_C = *((v8___Local_v8__Number_*)Anon_1)->_Cobject;
    
                    self->_Cobject = new v8::Local(Anon_1_C);
                    
                        
                }
            }
        }
    }
    if (status != 0){
       self->_Cobject = NULL;
       status = 0;
    }
    return status;
}


static PyObject*
v8___Local_v8__Number___IsEmpty(v8___Local_v8__Number_* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->IsEmpty();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Local_v8__Number___Clear(v8___Local_v8__Number_* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->Clear();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Local_v8__Number___New(PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* isolate = NULL;
            PyObject* that = NULL;
        
        static char *kwlist[] = { "isolate""that", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OO", kwlist, &isolate,&that);
            if ( 0 == status  && isolate && that){
                    
                    
                if (!checkType(&v8___IsolateType, isolate )){ status = -1;}
    
                if (!checkType(&v8___Local_v8__Number_Type, that )){ status = -1;}
    
                        
                   v8::Isolate * isolate_C = ((v8___Isolate*)isolate)->_Cobject;
    
                   v8::Local<v8::Number>& that_C = *((v8___Local_v8__Number_*)that)->_Cobject;
    
                        if( 0 == status ){
                       v8::Local<v8::Number> result = v8::Local<v8::Number>::New(isolate_C, that_C);
                       result_py = 
                        PyObject_CallObject((PyObject *) & v8___Local_v8__Number_Type, NULL);
                        if(result_py){
                            delete ((v8___Local_v8__Number_*) result_py)->_Cobject ;
                            ((v8___Local_v8__Number_*) result_py)->_Cobject = new v8::Local<v8::Number>(result);
                        };
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    {
        
            PyObject* isolate = NULL;
            PyObject* that = NULL;
        
        static char *kwlist[] = { "isolate""that", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OO", kwlist, &isolate,&that);
            if ( 0 == status  && isolate && that){
                    
                    
                if (!checkType(&v8___IsolateType, isolate )){ status = -1;}
    
                if (!checkType(&v8___PersistentBase_v8__Number_Type, that )){ status = -1;}
    
                        
                   v8::Isolate * isolate_C = ((v8___Isolate*)isolate)->_Cobject;
    
                   v8::PersistentBase<v8::Number> const& that_C = *((v8___PersistentBase_v8__Number_*)that)->_Cobject;
    
                        if( 0 == status ){
                       v8::Local<v8::Number> result = v8::Local<v8::Number>::New(isolate_C, that_C);
                       result_py = 
                        PyObject_CallObject((PyObject *) & v8___Local_v8__Number_Type, NULL);
                        if(result_py){
                            delete ((v8___Local_v8__Number_*) result_py)->_Cobject ;
                            ((v8___Local_v8__Number_*) result_py)->_Cobject = new v8::Local<v8::Number>(result);
                        };
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    {
        
            PyObject* isolate = NULL;
            PyObject* that = NULL;
        
        static char *kwlist[] = { "isolate""that", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OO", kwlist, &isolate,&that);
            if ( 0 == status  && isolate && that){
                    
                    
                if (!checkType(&v8___IsolateType, isolate )){ status = -1;}
    
                if (!checkType(&v8___NumberType, that )){ status = -1;}
    
                        
                   v8::Isolate * isolate_C = ((v8___Isolate*)isolate)->_Cobject;
    
                   v8::Number * that_C = ((v8___Number*)that)->_Cobject;
    
                        if( 0 == status ){
                       v8::Local<v8::Number> result = v8::Local<v8::Number>::New(isolate_C, that_C);
                       result_py = 
                        PyObject_CallObject((PyObject *) & v8___Local_v8__Number_Type, NULL);
                        if(result_py){
                            delete ((v8___Local_v8__Number_*) result_py)->_Cobject ;
                            ((v8___Local_v8__Number_*) result_py)->_Cobject = new v8::Local<v8::Number>(result);
                        };
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        

static void
v8___Local_v8__Uint32__dealloc(v8___Local_v8__Uint32_* self)
{
    if(!self) return;
    if (!self->_is_c_reference){
        delete self->_Cobject;
    }
    self->_Cobject = NULL;
    self->_owner = NULL;
    self->_is_c_reference = false;
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject *
v8___Local_v8__Uint32__new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
    v8___Local_v8__Uint32_ *self;

    self = (v8___Local_v8__Uint32_ *)type->tp_alloc(type, 0);
    if (self != NULL) {
        self->_Cobject = NULL;
        self->_owner = NULL;
    }

    return (PyObject *)self;
}       

static int
v8___Local_v8__Uint32__init(v8___Local_v8__Uint32_ *self, PyObject *args, PyObject *kwds)
{
    int status = -1;
    if(!self) return status;
    self->_owner = (PyObject*)self;
    
    {
        PyObject * tmp = NULL;
        (void)tmp;
         
        static char *kwlist[] = {  NULL};
        
            
        if ( 0 != status ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist, );
            if ( 0 == status ){
                
                
                if(status == 0){
                    
                    self->_Cobject = new v8::Local();
                    
                        
                }
            }
        }
    }
    {
        PyObject * tmp = NULL;
        (void)tmp;
         
        static char *kwlist[] = { "that", NULL};
        
        PyObject* that = NULL;
        
            
        if ( 0 != status ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &that);
            if ( 0 == status  && that){
                
                
                if(status == 0){
                    
                   v8::Local<v8::Uint32>& that_C = *((v8___Local_v8__Uint32_*)that)->_Cobject;
    
                    self->_Cobject = new v8::Local(that_C);
                    
                        
                }
            }
        }
    }
    {
        PyObject * tmp = NULL;
        (void)tmp;
         
        static char *kwlist[] = { "Anon_1", NULL};
        
        PyObject* Anon_1 = NULL;
        
            
        if ( 0 != status ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &Anon_1);
            if ( 0 == status  && Anon_1){
                
                
                if(status == 0){
                    
                   v8::Local<v8::Uint32> const& Anon_1_C = *((v8___Local_v8__Uint32_*)Anon_1)->_Cobject;
    
                    self->_Cobject = new v8::Local(Anon_1_C);
                    
                        
                }
            }
        }
    }
    if (status != 0){
       self->_Cobject = NULL;
       status = 0;
    }
    return status;
}


static PyObject*
v8___Local_v8__Uint32___IsEmpty(v8___Local_v8__Uint32_* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->IsEmpty();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Local_v8__Uint32___Clear(v8___Local_v8__Uint32_* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->Clear();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Local_v8__Uint32___New(PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* isolate = NULL;
            PyObject* that = NULL;
        
        static char *kwlist[] = { "isolate""that", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OO", kwlist, &isolate,&that);
            if ( 0 == status  && isolate && that){
                    
                    
                if (!checkType(&v8___IsolateType, isolate )){ status = -1;}
    
                if (!checkType(&v8___Local_v8__Uint32_Type, that )){ status = -1;}
    
                        
                   v8::Isolate * isolate_C = ((v8___Isolate*)isolate)->_Cobject;
    
                   v8::Local<v8::Uint32>& that_C = *((v8___Local_v8__Uint32_*)that)->_Cobject;
    
                        if( 0 == status ){
                       v8::Local<v8::Uint32> result = v8::Local<v8::Uint32>::New(isolate_C, that_C);
                       result_py = 
                        PyObject_CallObject((PyObject *) & v8___Local_v8__Uint32_Type, NULL);
                        if(result_py){
                            delete ((v8___Local_v8__Uint32_*) result_py)->_Cobject ;
                            ((v8___Local_v8__Uint32_*) result_py)->_Cobject = new v8::Local<v8::Uint32>(result);
                        };
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    {
        
            PyObject* isolate = NULL;
            PyObject* that = NULL;
        
        static char *kwlist[] = { "isolate""that", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OO", kwlist, &isolate,&that);
            if ( 0 == status  && isolate && that){
                    
                    
                if (!checkType(&v8___IsolateType, isolate )){ status = -1;}
    
                if (!checkType(&v8___PersistentBase_v8__Uint32_Type, that )){ status = -1;}
    
                        
                   v8::Isolate * isolate_C = ((v8___Isolate*)isolate)->_Cobject;
    
                   v8::PersistentBase<v8::Uint32> const& that_C = *((v8___PersistentBase_v8__Uint32_*)that)->_Cobject;
    
                        if( 0 == status ){
                       v8::Local<v8::Uint32> result = v8::Local<v8::Uint32>::New(isolate_C, that_C);
                       result_py = 
                        PyObject_CallObject((PyObject *) & v8___Local_v8__Uint32_Type, NULL);
                        if(result_py){
                            delete ((v8___Local_v8__Uint32_*) result_py)->_Cobject ;
                            ((v8___Local_v8__Uint32_*) result_py)->_Cobject = new v8::Local<v8::Uint32>(result);
                        };
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    {
        
            PyObject* isolate = NULL;
            PyObject* that = NULL;
        
        static char *kwlist[] = { "isolate""that", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OO", kwlist, &isolate,&that);
            if ( 0 == status  && isolate && that){
                    
                    
                if (!checkType(&v8___IsolateType, isolate )){ status = -1;}
    
                if (!checkType(&v8___Uint32Type, that )){ status = -1;}
    
                        
                   v8::Isolate * isolate_C = ((v8___Isolate*)isolate)->_Cobject;
    
                   v8::Uint32 * that_C = ((v8___Uint32*)that)->_Cobject;
    
                        if( 0 == status ){
                       v8::Local<v8::Uint32> result = v8::Local<v8::Uint32>::New(isolate_C, that_C);
                       result_py = 
                        PyObject_CallObject((PyObject *) & v8___Local_v8__Uint32_Type, NULL);
                        if(result_py){
                            delete ((v8___Local_v8__Uint32_*) result_py)->_Cobject ;
                            ((v8___Local_v8__Uint32_*) result_py)->_Cobject = new v8::Local<v8::Uint32>(result);
                        };
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        

static void
v8___Local_v8__Int32__dealloc(v8___Local_v8__Int32_* self)
{
    if(!self) return;
    if (!self->_is_c_reference){
        delete self->_Cobject;
    }
    self->_Cobject = NULL;
    self->_owner = NULL;
    self->_is_c_reference = false;
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject *
v8___Local_v8__Int32__new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
    v8___Local_v8__Int32_ *self;

    self = (v8___Local_v8__Int32_ *)type->tp_alloc(type, 0);
    if (self != NULL) {
        self->_Cobject = NULL;
        self->_owner = NULL;
    }

    return (PyObject *)self;
}       

static int
v8___Local_v8__Int32__init(v8___Local_v8__Int32_ *self, PyObject *args, PyObject *kwds)
{
    int status = -1;
    if(!self) return status;
    self->_owner = (PyObject*)self;
    
    {
        PyObject * tmp = NULL;
        (void)tmp;
         
        static char *kwlist[] = {  NULL};
        
            
        if ( 0 != status ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist, );
            if ( 0 == status ){
                
                
                if(status == 0){
                    
                    self->_Cobject = new v8::Local();
                    
                        
                }
            }
        }
    }
    {
        PyObject * tmp = NULL;
        (void)tmp;
         
        static char *kwlist[] = { "that", NULL};
        
        PyObject* that = NULL;
        
            
        if ( 0 != status ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &that);
            if ( 0 == status  && that){
                
                
                if(status == 0){
                    
                   v8::Local<v8::Int32>& that_C = *((v8___Local_v8__Int32_*)that)->_Cobject;
    
                    self->_Cobject = new v8::Local(that_C);
                    
                        
                }
            }
        }
    }
    {
        PyObject * tmp = NULL;
        (void)tmp;
         
        static char *kwlist[] = { "Anon_1", NULL};
        
        PyObject* Anon_1 = NULL;
        
            
        if ( 0 != status ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &Anon_1);
            if ( 0 == status  && Anon_1){
                
                
                if(status == 0){
                    
                   v8::Local<v8::Int32> const& Anon_1_C = *((v8___Local_v8__Int32_*)Anon_1)->_Cobject;
    
                    self->_Cobject = new v8::Local(Anon_1_C);
                    
                        
                }
            }
        }
    }
    if (status != 0){
       self->_Cobject = NULL;
       status = 0;
    }
    return status;
}


static PyObject*
v8___Local_v8__Int32___IsEmpty(v8___Local_v8__Int32_* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->IsEmpty();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Local_v8__Int32___Clear(v8___Local_v8__Int32_* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->Clear();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Local_v8__Int32___New(PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* isolate = NULL;
            PyObject* that = NULL;
        
        static char *kwlist[] = { "isolate""that", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OO", kwlist, &isolate,&that);
            if ( 0 == status  && isolate && that){
                    
                    
                if (!checkType(&v8___IsolateType, isolate )){ status = -1;}
    
                if (!checkType(&v8___Local_v8__Int32_Type, that )){ status = -1;}
    
                        
                   v8::Isolate * isolate_C = ((v8___Isolate*)isolate)->_Cobject;
    
                   v8::Local<v8::Int32>& that_C = *((v8___Local_v8__Int32_*)that)->_Cobject;
    
                        if( 0 == status ){
                       v8::Local<v8::Int32> result = v8::Local<v8::Int32>::New(isolate_C, that_C);
                       result_py = 
                        PyObject_CallObject((PyObject *) & v8___Local_v8__Int32_Type, NULL);
                        if(result_py){
                            delete ((v8___Local_v8__Int32_*) result_py)->_Cobject ;
                            ((v8___Local_v8__Int32_*) result_py)->_Cobject = new v8::Local<v8::Int32>(result);
                        };
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    {
        
            PyObject* isolate = NULL;
            PyObject* that = NULL;
        
        static char *kwlist[] = { "isolate""that", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OO", kwlist, &isolate,&that);
            if ( 0 == status  && isolate && that){
                    
                    
                if (!checkType(&v8___IsolateType, isolate )){ status = -1;}
    
                if (!checkType(&v8___PersistentBase_v8__Int32_Type, that )){ status = -1;}
    
                        
                   v8::Isolate * isolate_C = ((v8___Isolate*)isolate)->_Cobject;
    
                   v8::PersistentBase<v8::Int32> const& that_C = *((v8___PersistentBase_v8__Int32_*)that)->_Cobject;
    
                        if( 0 == status ){
                       v8::Local<v8::Int32> result = v8::Local<v8::Int32>::New(isolate_C, that_C);
                       result_py = 
                        PyObject_CallObject((PyObject *) & v8___Local_v8__Int32_Type, NULL);
                        if(result_py){
                            delete ((v8___Local_v8__Int32_*) result_py)->_Cobject ;
                            ((v8___Local_v8__Int32_*) result_py)->_Cobject = new v8::Local<v8::Int32>(result);
                        };
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    {
        
            PyObject* isolate = NULL;
            PyObject* that = NULL;
        
        static char *kwlist[] = { "isolate""that", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OO", kwlist, &isolate,&that);
            if ( 0 == status  && isolate && that){
                    
                    
                if (!checkType(&v8___IsolateType, isolate )){ status = -1;}
    
                if (!checkType(&v8___Int32Type, that )){ status = -1;}
    
                        
                   v8::Isolate * isolate_C = ((v8___Isolate*)isolate)->_Cobject;
    
                   v8::Int32 * that_C = ((v8___Int32*)that)->_Cobject;
    
                        if( 0 == status ){
                       v8::Local<v8::Int32> result = v8::Local<v8::Int32>::New(isolate_C, that_C);
                       result_py = 
                        PyObject_CallObject((PyObject *) & v8___Local_v8__Int32_Type, NULL);
                        if(result_py){
                            delete ((v8___Local_v8__Int32_*) result_py)->_Cobject ;
                            ((v8___Local_v8__Int32_*) result_py)->_Cobject = new v8::Local<v8::Int32>(result);
                        };
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        

static void
v8___Local_v8__Symbol__dealloc(v8___Local_v8__Symbol_* self)
{
    if(!self) return;
    if (!self->_is_c_reference){
        delete self->_Cobject;
    }
    self->_Cobject = NULL;
    self->_owner = NULL;
    self->_is_c_reference = false;
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject *
v8___Local_v8__Symbol__new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
    v8___Local_v8__Symbol_ *self;

    self = (v8___Local_v8__Symbol_ *)type->tp_alloc(type, 0);
    if (self != NULL) {
        self->_Cobject = NULL;
        self->_owner = NULL;
    }

    return (PyObject *)self;
}       

static int
v8___Local_v8__Symbol__init(v8___Local_v8__Symbol_ *self, PyObject *args, PyObject *kwds)
{
    int status = -1;
    if(!self) return status;
    self->_owner = (PyObject*)self;
    self->_Cobject = new v8___Local_v8__Symbol_();
    status = self->get_Cobject(self)?0:-1; 
    if (status != 0){
       self->_Cobject = NULL;
       status = 0;
    }
    return status;
}



static void
v8___Local_v8__Name__dealloc(v8___Local_v8__Name_* self)
{
    if(!self) return;
    if (!self->_is_c_reference){
        delete self->_Cobject;
    }
    self->_Cobject = NULL;
    self->_owner = NULL;
    self->_is_c_reference = false;
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject *
v8___Local_v8__Name__new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
    v8___Local_v8__Name_ *self;

    self = (v8___Local_v8__Name_ *)type->tp_alloc(type, 0);
    if (self != NULL) {
        self->_Cobject = NULL;
        self->_owner = NULL;
    }

    return (PyObject *)self;
}       

static int
v8___Local_v8__Name__init(v8___Local_v8__Name_ *self, PyObject *args, PyObject *kwds)
{
    int status = -1;
    if(!self) return status;
    self->_owner = (PyObject*)self;
    
    {
        PyObject * tmp = NULL;
        (void)tmp;
         
        static char *kwlist[] = {  NULL};
        
            
        if ( 0 != status ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist, );
            if ( 0 == status ){
                
                
                if(status == 0){
                    
                    self->_Cobject = new v8::Local();
                    
                        
                }
            }
        }
    }
    {
        PyObject * tmp = NULL;
        (void)tmp;
         
        static char *kwlist[] = { "that", NULL};
        
        PyObject* that = NULL;
        
            
        if ( 0 != status ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &that);
            if ( 0 == status  && that){
                
                
                if(status == 0){
                    
                   v8::Local<v8::String>& that_C = *((v8___Local_v8__String_*)that)->_Cobject;
    
                    self->_Cobject = new v8::Local(that_C);
                    
                        
                }
            }
        }
    }
    {
        PyObject * tmp = NULL;
        (void)tmp;
         
        static char *kwlist[] = { "that", NULL};
        
        PyObject* that = NULL;
        
            
        if ( 0 != status ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &that);
            if ( 0 == status  && that){
                
                
                if(status == 0){
                    
                   v8::Local<v8::Name>& that_C = *((v8___Local_v8__Name_*)that)->_Cobject;
    
                    self->_Cobject = new v8::Local(that_C);
                    
                        
                }
            }
        }
    }
    {
        PyObject * tmp = NULL;
        (void)tmp;
         
        static char *kwlist[] = { "Anon_1", NULL};
        
        PyObject* Anon_1 = NULL;
        
            
        if ( 0 != status ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &Anon_1);
            if ( 0 == status  && Anon_1){
                
                
                if(status == 0){
                    
                   v8::Local<v8::Name> const& Anon_1_C = *((v8___Local_v8__Name_*)Anon_1)->_Cobject;
    
                    self->_Cobject = new v8::Local(Anon_1_C);
                    
                        
                }
            }
        }
    }
    if (status != 0){
       self->_Cobject = NULL;
       status = 0;
    }
    return status;
}


static PyObject*
v8___Local_v8__Name___IsEmpty(v8___Local_v8__Name_* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->IsEmpty();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Local_v8__Name___Clear(v8___Local_v8__Name_* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->Clear();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Local_v8__Name___New(PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* isolate = NULL;
            PyObject* that = NULL;
        
        static char *kwlist[] = { "isolate""that", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OO", kwlist, &isolate,&that);
            if ( 0 == status  && isolate && that){
                    
                    
                if (!checkType(&v8___IsolateType, isolate )){ status = -1;}
    
                if (!checkType(&v8___Local_v8__Name_Type, that )){ status = -1;}
    
                        
                   v8::Isolate * isolate_C = ((v8___Isolate*)isolate)->_Cobject;
    
                   v8::Local<v8::Name>& that_C = *((v8___Local_v8__Name_*)that)->_Cobject;
    
                        if( 0 == status ){
                       v8::Local<v8::Name> result = v8::Local<v8::Name>::New(isolate_C, that_C);
                       result_py = 
                        PyObject_CallObject((PyObject *) & v8___Local_v8__Name_Type, NULL);
                        if(result_py){
                            delete ((v8___Local_v8__Name_*) result_py)->_Cobject ;
                            ((v8___Local_v8__Name_*) result_py)->_Cobject = new v8::Local<v8::Name>(result);
                        };
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    {
        
            PyObject* isolate = NULL;
            PyObject* that = NULL;
        
        static char *kwlist[] = { "isolate""that", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OO", kwlist, &isolate,&that);
            if ( 0 == status  && isolate && that){
                    
                    
                if (!checkType(&v8___IsolateType, isolate )){ status = -1;}
    
                if (!checkType(&v8___PersistentBase_v8__Name_Type, that )){ status = -1;}
    
                        
                   v8::Isolate * isolate_C = ((v8___Isolate*)isolate)->_Cobject;
    
                   v8::PersistentBase<v8::Name> const& that_C = *((v8___PersistentBase_v8__Name_*)that)->_Cobject;
    
                        if( 0 == status ){
                       v8::Local<v8::Name> result = v8::Local<v8::Name>::New(isolate_C, that_C);
                       result_py = 
                        PyObject_CallObject((PyObject *) & v8___Local_v8__Name_Type, NULL);
                        if(result_py){
                            delete ((v8___Local_v8__Name_*) result_py)->_Cobject ;
                            ((v8___Local_v8__Name_*) result_py)->_Cobject = new v8::Local<v8::Name>(result);
                        };
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    {
        
            PyObject* isolate = NULL;
            PyObject* that = NULL;
        
        static char *kwlist[] = { "isolate""that", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OO", kwlist, &isolate,&that);
            if ( 0 == status  && isolate && that){
                    
                    
                if (!checkType(&v8___IsolateType, isolate )){ status = -1;}
    
                if (!checkType(&v8___NameType, that )){ status = -1;}
    
                        
                   v8::Isolate * isolate_C = ((v8___Isolate*)isolate)->_Cobject;
    
                   v8::Name * that_C = ((v8___Name*)that)->_Cobject;
    
                        if( 0 == status ){
                       v8::Local<v8::Name> result = v8::Local<v8::Name>::New(isolate_C, that_C);
                       result_py = 
                        PyObject_CallObject((PyObject *) & v8___Local_v8__Name_Type, NULL);
                        if(result_py){
                            delete ((v8___Local_v8__Name_*) result_py)->_Cobject ;
                            ((v8___Local_v8__Name_*) result_py)->_Cobject = new v8::Local<v8::Name>(result);
                        };
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        

static void
v8___Local_v8__FunctionTemplate__dealloc(v8___Local_v8__FunctionTemplate_* self)
{
    if(!self) return;
    if (!self->_is_c_reference){
        delete self->_Cobject;
    }
    self->_Cobject = NULL;
    self->_owner = NULL;
    self->_is_c_reference = false;
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject *
v8___Local_v8__FunctionTemplate__new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
    v8___Local_v8__FunctionTemplate_ *self;

    self = (v8___Local_v8__FunctionTemplate_ *)type->tp_alloc(type, 0);
    if (self != NULL) {
        self->_Cobject = NULL;
        self->_owner = NULL;
    }

    return (PyObject *)self;
}       

static int
v8___Local_v8__FunctionTemplate__init(v8___Local_v8__FunctionTemplate_ *self, PyObject *args, PyObject *kwds)
{
    int status = -1;
    if(!self) return status;
    self->_owner = (PyObject*)self;
    
    {
        PyObject * tmp = NULL;
        (void)tmp;
         
        static char *kwlist[] = {  NULL};
        
            
        if ( 0 != status ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist, );
            if ( 0 == status ){
                
                
                if(status == 0){
                    
                    self->_Cobject = new v8::Local();
                    
                        
                }
            }
        }
    }
    {
        PyObject * tmp = NULL;
        (void)tmp;
         
        static char *kwlist[] = { "that", NULL};
        
        PyObject* that = NULL;
        
            
        if ( 0 != status ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &that);
            if ( 0 == status  && that){
                
                
                if(status == 0){
                    
                   v8::Local<v8::FunctionTemplate>& that_C = *((v8___Local_v8__FunctionTemplate_*)that)->_Cobject;
    
                    self->_Cobject = new v8::Local(that_C);
                    
                        
                }
            }
        }
    }
    {
        PyObject * tmp = NULL;
        (void)tmp;
         
        static char *kwlist[] = { "Anon_1", NULL};
        
        PyObject* Anon_1 = NULL;
        
            
        if ( 0 != status ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &Anon_1);
            if ( 0 == status  && Anon_1){
                
                
                if(status == 0){
                    
                   v8::Local<v8::FunctionTemplate> const& Anon_1_C = *((v8___Local_v8__FunctionTemplate_*)Anon_1)->_Cobject;
    
                    self->_Cobject = new v8::Local(Anon_1_C);
                    
                        
                }
            }
        }
    }
    if (status != 0){
       self->_Cobject = NULL;
       status = 0;
    }
    return status;
}


static PyObject*
v8___Local_v8__FunctionTemplate___IsEmpty(v8___Local_v8__FunctionTemplate_* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->IsEmpty();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Local_v8__FunctionTemplate___Clear(v8___Local_v8__FunctionTemplate_* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->Clear();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Local_v8__FunctionTemplate___New(PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* isolate = NULL;
            PyObject* that = NULL;
        
        static char *kwlist[] = { "isolate""that", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OO", kwlist, &isolate,&that);
            if ( 0 == status  && isolate && that){
                    
                    
                if (!checkType(&v8___IsolateType, isolate )){ status = -1;}
    
                if (!checkType(&v8___Local_v8__FunctionTemplate_Type, that )){ status = -1;}
    
                        
                   v8::Isolate * isolate_C = ((v8___Isolate*)isolate)->_Cobject;
    
                   v8::Local<v8::FunctionTemplate>& that_C = *((v8___Local_v8__FunctionTemplate_*)that)->_Cobject;
    
                        if( 0 == status ){
                       v8::Local<v8::FunctionTemplate> result = v8::Local<v8::FunctionTemplate>::New(isolate_C, that_C);
                       result_py = 
                        PyObject_CallObject((PyObject *) & v8___Local_v8__FunctionTemplate_Type, NULL);
                        if(result_py){
                            delete ((v8___Local_v8__FunctionTemplate_*) result_py)->_Cobject ;
                            ((v8___Local_v8__FunctionTemplate_*) result_py)->_Cobject = new v8::Local<v8::FunctionTemplate>(result);
                        };
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    {
        
            PyObject* isolate = NULL;
            PyObject* that = NULL;
        
        static char *kwlist[] = { "isolate""that", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OO", kwlist, &isolate,&that);
            if ( 0 == status  && isolate && that){
                    
                    
                if (!checkType(&v8___IsolateType, isolate )){ status = -1;}
    
                if (!checkType(&v8___PersistentBase_v8__FunctionTemplate_Type, that )){ status = -1;}
    
                        
                   v8::Isolate * isolate_C = ((v8___Isolate*)isolate)->_Cobject;
    
                   v8::PersistentBase<v8::FunctionTemplate> const& that_C = *((v8___PersistentBase_v8__FunctionTemplate_*)that)->_Cobject;
    
                        if( 0 == status ){
                       v8::Local<v8::FunctionTemplate> result = v8::Local<v8::FunctionTemplate>::New(isolate_C, that_C);
                       result_py = 
                        PyObject_CallObject((PyObject *) & v8___Local_v8__FunctionTemplate_Type, NULL);
                        if(result_py){
                            delete ((v8___Local_v8__FunctionTemplate_*) result_py)->_Cobject ;
                            ((v8___Local_v8__FunctionTemplate_*) result_py)->_Cobject = new v8::Local<v8::FunctionTemplate>(result);
                        };
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    {
        
            PyObject* isolate = NULL;
            PyObject* that = NULL;
        
        static char *kwlist[] = { "isolate""that", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OO", kwlist, &isolate,&that);
            if ( 0 == status  && isolate && that){
                    
                    
                if (!checkType(&v8___IsolateType, isolate )){ status = -1;}
    
                if (!checkType(&v8___FunctionTemplateType, that )){ status = -1;}
    
                        
                   v8::Isolate * isolate_C = ((v8___Isolate*)isolate)->_Cobject;
    
                   v8::FunctionTemplate * that_C = ((v8___FunctionTemplate*)that)->_Cobject;
    
                        if( 0 == status ){
                       v8::Local<v8::FunctionTemplate> result = v8::Local<v8::FunctionTemplate>::New(isolate_C, that_C);
                       result_py = 
                        PyObject_CallObject((PyObject *) & v8___Local_v8__FunctionTemplate_Type, NULL);
                        if(result_py){
                            delete ((v8___Local_v8__FunctionTemplate_*) result_py)->_Cobject ;
                            ((v8___Local_v8__FunctionTemplate_*) result_py)->_Cobject = new v8::Local<v8::FunctionTemplate>(result);
                        };
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        

static void
v8___Local_v8__Map__dealloc(v8___Local_v8__Map_* self)
{
    if(!self) return;
    if (!self->_is_c_reference){
        delete self->_Cobject;
    }
    self->_Cobject = NULL;
    self->_owner = NULL;
    self->_is_c_reference = false;
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject *
v8___Local_v8__Map__new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
    v8___Local_v8__Map_ *self;

    self = (v8___Local_v8__Map_ *)type->tp_alloc(type, 0);
    if (self != NULL) {
        self->_Cobject = NULL;
        self->_owner = NULL;
    }

    return (PyObject *)self;
}       

static int
v8___Local_v8__Map__init(v8___Local_v8__Map_ *self, PyObject *args, PyObject *kwds)
{
    int status = -1;
    if(!self) return status;
    self->_owner = (PyObject*)self;
    self->_Cobject = new v8___Local_v8__Map_();
    status = self->get_Cobject(self)?0:-1; 
    if (status != 0){
       self->_Cobject = NULL;
       status = 0;
    }
    return status;
}



static void
v8___Local_v8__Set__dealloc(v8___Local_v8__Set_* self)
{
    if(!self) return;
    if (!self->_is_c_reference){
        delete self->_Cobject;
    }
    self->_Cobject = NULL;
    self->_owner = NULL;
    self->_is_c_reference = false;
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject *
v8___Local_v8__Set__new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
    v8___Local_v8__Set_ *self;

    self = (v8___Local_v8__Set_ *)type->tp_alloc(type, 0);
    if (self != NULL) {
        self->_Cobject = NULL;
        self->_owner = NULL;
    }

    return (PyObject *)self;
}       

static int
v8___Local_v8__Set__init(v8___Local_v8__Set_ *self, PyObject *args, PyObject *kwds)
{
    int status = -1;
    if(!self) return status;
    self->_owner = (PyObject*)self;
    self->_Cobject = new v8___Local_v8__Set_();
    status = self->get_Cobject(self)?0:-1; 
    if (status != 0){
       self->_Cobject = NULL;
       status = 0;
    }
    return status;
}



static void
v8___Local_v8__Promise__Resolver__dealloc(v8___Local_v8__Promise__Resolver_* self)
{
    if(!self) return;
    if (!self->_is_c_reference){
        delete self->_Cobject;
    }
    self->_Cobject = NULL;
    self->_owner = NULL;
    self->_is_c_reference = false;
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject *
v8___Local_v8__Promise__Resolver__new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
    v8___Local_v8__Promise__Resolver_ *self;

    self = (v8___Local_v8__Promise__Resolver_ *)type->tp_alloc(type, 0);
    if (self != NULL) {
        self->_Cobject = NULL;
        self->_owner = NULL;
    }

    return (PyObject *)self;
}       

static int
v8___Local_v8__Promise__Resolver__init(v8___Local_v8__Promise__Resolver_ *self, PyObject *args, PyObject *kwds)
{
    int status = -1;
    if(!self) return status;
    self->_owner = (PyObject*)self;
    self->_Cobject = new v8___Local_v8__Promise__Resolver_();
    status = self->get_Cobject(self)?0:-1; 
    if (status != 0){
       self->_Cobject = NULL;
       status = 0;
    }
    return status;
}



static void
v8___Local_v8__Promise__dealloc(v8___Local_v8__Promise_* self)
{
    if(!self) return;
    if (!self->_is_c_reference){
        delete self->_Cobject;
    }
    self->_Cobject = NULL;
    self->_owner = NULL;
    self->_is_c_reference = false;
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject *
v8___Local_v8__Promise__new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
    v8___Local_v8__Promise_ *self;

    self = (v8___Local_v8__Promise_ *)type->tp_alloc(type, 0);
    if (self != NULL) {
        self->_Cobject = NULL;
        self->_owner = NULL;
    }

    return (PyObject *)self;
}       

static int
v8___Local_v8__Promise__init(v8___Local_v8__Promise_ *self, PyObject *args, PyObject *kwds)
{
    int status = -1;
    if(!self) return status;
    self->_owner = (PyObject*)self;
    
    {
        PyObject * tmp = NULL;
        (void)tmp;
         
        static char *kwlist[] = {  NULL};
        
            
        if ( 0 != status ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist, );
            if ( 0 == status ){
                
                
                if(status == 0){
                    
                    self->_Cobject = new v8::Local();
                    
                        
                }
            }
        }
    }
    {
        PyObject * tmp = NULL;
        (void)tmp;
         
        static char *kwlist[] = { "that", NULL};
        
        PyObject* that = NULL;
        
            
        if ( 0 != status ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &that);
            if ( 0 == status  && that){
                
                
                if(status == 0){
                    
                   v8::Local<v8::Promise>& that_C = *((v8___Local_v8__Promise_*)that)->_Cobject;
    
                    self->_Cobject = new v8::Local(that_C);
                    
                        
                }
            }
        }
    }
    {
        PyObject * tmp = NULL;
        (void)tmp;
         
        static char *kwlist[] = { "Anon_1", NULL};
        
        PyObject* Anon_1 = NULL;
        
            
        if ( 0 != status ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &Anon_1);
            if ( 0 == status  && Anon_1){
                
                
                if(status == 0){
                    
                   v8::Local<v8::Promise> const& Anon_1_C = *((v8___Local_v8__Promise_*)Anon_1)->_Cobject;
    
                    self->_Cobject = new v8::Local(Anon_1_C);
                    
                        
                }
            }
        }
    }
    if (status != 0){
       self->_Cobject = NULL;
       status = 0;
    }
    return status;
}


static PyObject*
v8___Local_v8__Promise___IsEmpty(v8___Local_v8__Promise_* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->IsEmpty();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Local_v8__Promise___Clear(v8___Local_v8__Promise_* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->Clear();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Local_v8__Promise___New(PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* isolate = NULL;
            PyObject* that = NULL;
        
        static char *kwlist[] = { "isolate""that", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OO", kwlist, &isolate,&that);
            if ( 0 == status  && isolate && that){
                    
                    
                if (!checkType(&v8___IsolateType, isolate )){ status = -1;}
    
                if (!checkType(&v8___Local_v8__Promise_Type, that )){ status = -1;}
    
                        
                   v8::Isolate * isolate_C = ((v8___Isolate*)isolate)->_Cobject;
    
                   v8::Local<v8::Promise>& that_C = *((v8___Local_v8__Promise_*)that)->_Cobject;
    
                        if( 0 == status ){
                       v8::Local<v8::Promise> result = v8::Local<v8::Promise>::New(isolate_C, that_C);
                       result_py = 
                        PyObject_CallObject((PyObject *) & v8___Local_v8__Promise_Type, NULL);
                        if(result_py){
                            delete ((v8___Local_v8__Promise_*) result_py)->_Cobject ;
                            ((v8___Local_v8__Promise_*) result_py)->_Cobject = new v8::Local<v8::Promise>(result);
                        };
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    {
        
            PyObject* isolate = NULL;
            PyObject* that = NULL;
        
        static char *kwlist[] = { "isolate""that", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OO", kwlist, &isolate,&that);
            if ( 0 == status  && isolate && that){
                    
                    
                if (!checkType(&v8___IsolateType, isolate )){ status = -1;}
    
                if (!checkType(&v8___PersistentBase_v8__Promise_Type, that )){ status = -1;}
    
                        
                   v8::Isolate * isolate_C = ((v8___Isolate*)isolate)->_Cobject;
    
                   v8::PersistentBase<v8::Promise> const& that_C = *((v8___PersistentBase_v8__Promise_*)that)->_Cobject;
    
                        if( 0 == status ){
                       v8::Local<v8::Promise> result = v8::Local<v8::Promise>::New(isolate_C, that_C);
                       result_py = 
                        PyObject_CallObject((PyObject *) & v8___Local_v8__Promise_Type, NULL);
                        if(result_py){
                            delete ((v8___Local_v8__Promise_*) result_py)->_Cobject ;
                            ((v8___Local_v8__Promise_*) result_py)->_Cobject = new v8::Local<v8::Promise>(result);
                        };
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    {
        
            PyObject* isolate = NULL;
            PyObject* that = NULL;
        
        static char *kwlist[] = { "isolate""that", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OO", kwlist, &isolate,&that);
            if ( 0 == status  && isolate && that){
                    
                    
                if (!checkType(&v8___IsolateType, isolate )){ status = -1;}
    
                if (!checkType(&v8___PromiseType, that )){ status = -1;}
    
                        
                   v8::Isolate * isolate_C = ((v8___Isolate*)isolate)->_Cobject;
    
                   v8::Promise * that_C = ((v8___Promise*)that)->_Cobject;
    
                        if( 0 == status ){
                       v8::Local<v8::Promise> result = v8::Local<v8::Promise>::New(isolate_C, that_C);
                       result_py = 
                        PyObject_CallObject((PyObject *) & v8___Local_v8__Promise_Type, NULL);
                        if(result_py){
                            delete ((v8___Local_v8__Promise_*) result_py)->_Cobject ;
                            ((v8___Local_v8__Promise_*) result_py)->_Cobject = new v8::Local<v8::Promise>(result);
                        };
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        

static void
v8___Local_v8__ArrayBuffer__dealloc(v8___Local_v8__ArrayBuffer_* self)
{
    if(!self) return;
    if (!self->_is_c_reference){
        delete self->_Cobject;
    }
    self->_Cobject = NULL;
    self->_owner = NULL;
    self->_is_c_reference = false;
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject *
v8___Local_v8__ArrayBuffer__new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
    v8___Local_v8__ArrayBuffer_ *self;

    self = (v8___Local_v8__ArrayBuffer_ *)type->tp_alloc(type, 0);
    if (self != NULL) {
        self->_Cobject = NULL;
        self->_owner = NULL;
    }

    return (PyObject *)self;
}       

static int
v8___Local_v8__ArrayBuffer__init(v8___Local_v8__ArrayBuffer_ *self, PyObject *args, PyObject *kwds)
{
    int status = -1;
    if(!self) return status;
    self->_owner = (PyObject*)self;
    self->_Cobject = new v8___Local_v8__ArrayBuffer_();
    status = self->get_Cobject(self)?0:-1; 
    if (status != 0){
       self->_Cobject = NULL;
       status = 0;
    }
    return status;
}



static void
v8___Local_v8__Uint8Array__dealloc(v8___Local_v8__Uint8Array_* self)
{
    if(!self) return;
    if (!self->_is_c_reference){
        delete self->_Cobject;
    }
    self->_Cobject = NULL;
    self->_owner = NULL;
    self->_is_c_reference = false;
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject *
v8___Local_v8__Uint8Array__new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
    v8___Local_v8__Uint8Array_ *self;

    self = (v8___Local_v8__Uint8Array_ *)type->tp_alloc(type, 0);
    if (self != NULL) {
        self->_Cobject = NULL;
        self->_owner = NULL;
    }

    return (PyObject *)self;
}       

static int
v8___Local_v8__Uint8Array__init(v8___Local_v8__Uint8Array_ *self, PyObject *args, PyObject *kwds)
{
    int status = -1;
    if(!self) return status;
    self->_owner = (PyObject*)self;
    self->_Cobject = new v8___Local_v8__Uint8Array_();
    status = self->get_Cobject(self)?0:-1; 
    if (status != 0){
       self->_Cobject = NULL;
       status = 0;
    }
    return status;
}



static void
v8___Local_v8__SharedArrayBuffer__dealloc(v8___Local_v8__SharedArrayBuffer_* self)
{
    if(!self) return;
    if (!self->_is_c_reference){
        delete self->_Cobject;
    }
    self->_Cobject = NULL;
    self->_owner = NULL;
    self->_is_c_reference = false;
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject *
v8___Local_v8__SharedArrayBuffer__new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
    v8___Local_v8__SharedArrayBuffer_ *self;

    self = (v8___Local_v8__SharedArrayBuffer_ *)type->tp_alloc(type, 0);
    if (self != NULL) {
        self->_Cobject = NULL;
        self->_owner = NULL;
    }

    return (PyObject *)self;
}       

static int
v8___Local_v8__SharedArrayBuffer__init(v8___Local_v8__SharedArrayBuffer_ *self, PyObject *args, PyObject *kwds)
{
    int status = -1;
    if(!self) return status;
    self->_owner = (PyObject*)self;
    self->_Cobject = new v8___Local_v8__SharedArrayBuffer_();
    status = self->get_Cobject(self)?0:-1; 
    if (status != 0){
       self->_Cobject = NULL;
       status = 0;
    }
    return status;
}



static void
v8___Local_v8__Uint8ClampedArray__dealloc(v8___Local_v8__Uint8ClampedArray_* self)
{
    if(!self) return;
    if (!self->_is_c_reference){
        delete self->_Cobject;
    }
    self->_Cobject = NULL;
    self->_owner = NULL;
    self->_is_c_reference = false;
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject *
v8___Local_v8__Uint8ClampedArray__new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
    v8___Local_v8__Uint8ClampedArray_ *self;

    self = (v8___Local_v8__Uint8ClampedArray_ *)type->tp_alloc(type, 0);
    if (self != NULL) {
        self->_Cobject = NULL;
        self->_owner = NULL;
    }

    return (PyObject *)self;
}       

static int
v8___Local_v8__Uint8ClampedArray__init(v8___Local_v8__Uint8ClampedArray_ *self, PyObject *args, PyObject *kwds)
{
    int status = -1;
    if(!self) return status;
    self->_owner = (PyObject*)self;
    self->_Cobject = new v8___Local_v8__Uint8ClampedArray_();
    status = self->get_Cobject(self)?0:-1; 
    if (status != 0){
       self->_Cobject = NULL;
       status = 0;
    }
    return status;
}



static void
v8___Local_v8__Int8Array__dealloc(v8___Local_v8__Int8Array_* self)
{
    if(!self) return;
    if (!self->_is_c_reference){
        delete self->_Cobject;
    }
    self->_Cobject = NULL;
    self->_owner = NULL;
    self->_is_c_reference = false;
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject *
v8___Local_v8__Int8Array__new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
    v8___Local_v8__Int8Array_ *self;

    self = (v8___Local_v8__Int8Array_ *)type->tp_alloc(type, 0);
    if (self != NULL) {
        self->_Cobject = NULL;
        self->_owner = NULL;
    }

    return (PyObject *)self;
}       

static int
v8___Local_v8__Int8Array__init(v8___Local_v8__Int8Array_ *self, PyObject *args, PyObject *kwds)
{
    int status = -1;
    if(!self) return status;
    self->_owner = (PyObject*)self;
    self->_Cobject = new v8___Local_v8__Int8Array_();
    status = self->get_Cobject(self)?0:-1; 
    if (status != 0){
       self->_Cobject = NULL;
       status = 0;
    }
    return status;
}



static void
v8___Local_v8__Uint16Array__dealloc(v8___Local_v8__Uint16Array_* self)
{
    if(!self) return;
    if (!self->_is_c_reference){
        delete self->_Cobject;
    }
    self->_Cobject = NULL;
    self->_owner = NULL;
    self->_is_c_reference = false;
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject *
v8___Local_v8__Uint16Array__new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
    v8___Local_v8__Uint16Array_ *self;

    self = (v8___Local_v8__Uint16Array_ *)type->tp_alloc(type, 0);
    if (self != NULL) {
        self->_Cobject = NULL;
        self->_owner = NULL;
    }

    return (PyObject *)self;
}       

static int
v8___Local_v8__Uint16Array__init(v8___Local_v8__Uint16Array_ *self, PyObject *args, PyObject *kwds)
{
    int status = -1;
    if(!self) return status;
    self->_owner = (PyObject*)self;
    self->_Cobject = new v8___Local_v8__Uint16Array_();
    status = self->get_Cobject(self)?0:-1; 
    if (status != 0){
       self->_Cobject = NULL;
       status = 0;
    }
    return status;
}



static void
v8___Local_v8__Int16Array__dealloc(v8___Local_v8__Int16Array_* self)
{
    if(!self) return;
    if (!self->_is_c_reference){
        delete self->_Cobject;
    }
    self->_Cobject = NULL;
    self->_owner = NULL;
    self->_is_c_reference = false;
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject *
v8___Local_v8__Int16Array__new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
    v8___Local_v8__Int16Array_ *self;

    self = (v8___Local_v8__Int16Array_ *)type->tp_alloc(type, 0);
    if (self != NULL) {
        self->_Cobject = NULL;
        self->_owner = NULL;
    }

    return (PyObject *)self;
}       

static int
v8___Local_v8__Int16Array__init(v8___Local_v8__Int16Array_ *self, PyObject *args, PyObject *kwds)
{
    int status = -1;
    if(!self) return status;
    self->_owner = (PyObject*)self;
    self->_Cobject = new v8___Local_v8__Int16Array_();
    status = self->get_Cobject(self)?0:-1; 
    if (status != 0){
       self->_Cobject = NULL;
       status = 0;
    }
    return status;
}



static void
v8___Local_v8__Uint32Array__dealloc(v8___Local_v8__Uint32Array_* self)
{
    if(!self) return;
    if (!self->_is_c_reference){
        delete self->_Cobject;
    }
    self->_Cobject = NULL;
    self->_owner = NULL;
    self->_is_c_reference = false;
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject *
v8___Local_v8__Uint32Array__new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
    v8___Local_v8__Uint32Array_ *self;

    self = (v8___Local_v8__Uint32Array_ *)type->tp_alloc(type, 0);
    if (self != NULL) {
        self->_Cobject = NULL;
        self->_owner = NULL;
    }

    return (PyObject *)self;
}       

static int
v8___Local_v8__Uint32Array__init(v8___Local_v8__Uint32Array_ *self, PyObject *args, PyObject *kwds)
{
    int status = -1;
    if(!self) return status;
    self->_owner = (PyObject*)self;
    self->_Cobject = new v8___Local_v8__Uint32Array_();
    status = self->get_Cobject(self)?0:-1; 
    if (status != 0){
       self->_Cobject = NULL;
       status = 0;
    }
    return status;
}



static void
v8___Local_v8__Int32Array__dealloc(v8___Local_v8__Int32Array_* self)
{
    if(!self) return;
    if (!self->_is_c_reference){
        delete self->_Cobject;
    }
    self->_Cobject = NULL;
    self->_owner = NULL;
    self->_is_c_reference = false;
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject *
v8___Local_v8__Int32Array__new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
    v8___Local_v8__Int32Array_ *self;

    self = (v8___Local_v8__Int32Array_ *)type->tp_alloc(type, 0);
    if (self != NULL) {
        self->_Cobject = NULL;
        self->_owner = NULL;
    }

    return (PyObject *)self;
}       

static int
v8___Local_v8__Int32Array__init(v8___Local_v8__Int32Array_ *self, PyObject *args, PyObject *kwds)
{
    int status = -1;
    if(!self) return status;
    self->_owner = (PyObject*)self;
    self->_Cobject = new v8___Local_v8__Int32Array_();
    status = self->get_Cobject(self)?0:-1; 
    if (status != 0){
       self->_Cobject = NULL;
       status = 0;
    }
    return status;
}



static void
v8___Local_v8__Float32Array__dealloc(v8___Local_v8__Float32Array_* self)
{
    if(!self) return;
    if (!self->_is_c_reference){
        delete self->_Cobject;
    }
    self->_Cobject = NULL;
    self->_owner = NULL;
    self->_is_c_reference = false;
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject *
v8___Local_v8__Float32Array__new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
    v8___Local_v8__Float32Array_ *self;

    self = (v8___Local_v8__Float32Array_ *)type->tp_alloc(type, 0);
    if (self != NULL) {
        self->_Cobject = NULL;
        self->_owner = NULL;
    }

    return (PyObject *)self;
}       

static int
v8___Local_v8__Float32Array__init(v8___Local_v8__Float32Array_ *self, PyObject *args, PyObject *kwds)
{
    int status = -1;
    if(!self) return status;
    self->_owner = (PyObject*)self;
    self->_Cobject = new v8___Local_v8__Float32Array_();
    status = self->get_Cobject(self)?0:-1; 
    if (status != 0){
       self->_Cobject = NULL;
       status = 0;
    }
    return status;
}



static void
v8___Local_v8__Float64Array__dealloc(v8___Local_v8__Float64Array_* self)
{
    if(!self) return;
    if (!self->_is_c_reference){
        delete self->_Cobject;
    }
    self->_Cobject = NULL;
    self->_owner = NULL;
    self->_is_c_reference = false;
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject *
v8___Local_v8__Float64Array__new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
    v8___Local_v8__Float64Array_ *self;

    self = (v8___Local_v8__Float64Array_ *)type->tp_alloc(type, 0);
    if (self != NULL) {
        self->_Cobject = NULL;
        self->_owner = NULL;
    }

    return (PyObject *)self;
}       

static int
v8___Local_v8__Float64Array__init(v8___Local_v8__Float64Array_ *self, PyObject *args, PyObject *kwds)
{
    int status = -1;
    if(!self) return status;
    self->_owner = (PyObject*)self;
    self->_Cobject = new v8___Local_v8__Float64Array_();
    status = self->get_Cobject(self)?0:-1; 
    if (status != 0){
       self->_Cobject = NULL;
       status = 0;
    }
    return status;
}



static void
v8___Local_v8__DataView__dealloc(v8___Local_v8__DataView_* self)
{
    if(!self) return;
    if (!self->_is_c_reference){
        delete self->_Cobject;
    }
    self->_Cobject = NULL;
    self->_owner = NULL;
    self->_is_c_reference = false;
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject *
v8___Local_v8__DataView__new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
    v8___Local_v8__DataView_ *self;

    self = (v8___Local_v8__DataView_ *)type->tp_alloc(type, 0);
    if (self != NULL) {
        self->_Cobject = NULL;
        self->_owner = NULL;
    }

    return (PyObject *)self;
}       

static int
v8___Local_v8__DataView__init(v8___Local_v8__DataView_ *self, PyObject *args, PyObject *kwds)
{
    int status = -1;
    if(!self) return status;
    self->_owner = (PyObject*)self;
    self->_Cobject = new v8___Local_v8__DataView_();
    status = self->get_Cobject(self)?0:-1; 
    if (status != 0){
       self->_Cobject = NULL;
       status = 0;
    }
    return status;
}



static void
v8___Local_v8__RegExp__dealloc(v8___Local_v8__RegExp_* self)
{
    if(!self) return;
    if (!self->_is_c_reference){
        delete self->_Cobject;
    }
    self->_Cobject = NULL;
    self->_owner = NULL;
    self->_is_c_reference = false;
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject *
v8___Local_v8__RegExp__new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
    v8___Local_v8__RegExp_ *self;

    self = (v8___Local_v8__RegExp_ *)type->tp_alloc(type, 0);
    if (self != NULL) {
        self->_Cobject = NULL;
        self->_owner = NULL;
    }

    return (PyObject *)self;
}       

static int
v8___Local_v8__RegExp__init(v8___Local_v8__RegExp_ *self, PyObject *args, PyObject *kwds)
{
    int status = -1;
    if(!self) return status;
    self->_owner = (PyObject*)self;
    self->_Cobject = new v8___Local_v8__RegExp_();
    status = self->get_Cobject(self)?0:-1; 
    if (status != 0){
       self->_Cobject = NULL;
       status = 0;
    }
    return status;
}



static void
v8___Local_v8__External__dealloc(v8___Local_v8__External_* self)
{
    if(!self) return;
    if (!self->_is_c_reference){
        delete self->_Cobject;
    }
    self->_Cobject = NULL;
    self->_owner = NULL;
    self->_is_c_reference = false;
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject *
v8___Local_v8__External__new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
    v8___Local_v8__External_ *self;

    self = (v8___Local_v8__External_ *)type->tp_alloc(type, 0);
    if (self != NULL) {
        self->_Cobject = NULL;
        self->_owner = NULL;
    }

    return (PyObject *)self;
}       

static int
v8___Local_v8__External__init(v8___Local_v8__External_ *self, PyObject *args, PyObject *kwds)
{
    int status = -1;
    if(!self) return status;
    self->_owner = (PyObject*)self;
    self->_Cobject = new v8___Local_v8__External_();
    status = self->get_Cobject(self)?0:-1; 
    if (status != 0){
       self->_Cobject = NULL;
       status = 0;
    }
    return status;
}



static void
v8___Local_v8__Data__dealloc(v8___Local_v8__Data_* self)
{
    if(!self) return;
    if (!self->_is_c_reference){
        delete self->_Cobject;
    }
    self->_Cobject = NULL;
    self->_owner = NULL;
    self->_is_c_reference = false;
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject *
v8___Local_v8__Data__new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
    v8___Local_v8__Data_ *self;

    self = (v8___Local_v8__Data_ *)type->tp_alloc(type, 0);
    if (self != NULL) {
        self->_Cobject = NULL;
        self->_owner = NULL;
    }

    return (PyObject *)self;
}       

static int
v8___Local_v8__Data__init(v8___Local_v8__Data_ *self, PyObject *args, PyObject *kwds)
{
    int status = -1;
    if(!self) return status;
    self->_owner = (PyObject*)self;
    
    {
        PyObject * tmp = NULL;
        (void)tmp;
         
        static char *kwlist[] = {  NULL};
        
            
        if ( 0 != status ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist, );
            if ( 0 == status ){
                
                
                if(status == 0){
                    
                    self->_Cobject = new v8::Local();
                    
                        
                }
            }
        }
    }
    {
        PyObject * tmp = NULL;
        (void)tmp;
         
        static char *kwlist[] = { "that", NULL};
        
        PyObject* that = NULL;
        
            
        if ( 0 != status ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &that);
            if ( 0 == status  && that){
                
                
                if(status == 0){
                    
                   v8::Local<v8::Data>& that_C = *((v8___Local_v8__Data_*)that)->_Cobject;
    
                    self->_Cobject = new v8::Local(that_C);
                    
                        
                }
            }
        }
    }
    {
        PyObject * tmp = NULL;
        (void)tmp;
         
        static char *kwlist[] = { "Anon_1", NULL};
        
        PyObject* Anon_1 = NULL;
        
            
        if ( 0 != status ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &Anon_1);
            if ( 0 == status  && Anon_1){
                
                
                if(status == 0){
                    
                   v8::Local<v8::Data> const& Anon_1_C = *((v8___Local_v8__Data_*)Anon_1)->_Cobject;
    
                    self->_Cobject = new v8::Local(Anon_1_C);
                    
                        
                }
            }
        }
    }
    if (status != 0){
       self->_Cobject = NULL;
       status = 0;
    }
    return status;
}


static PyObject*
v8___Local_v8__Data___IsEmpty(v8___Local_v8__Data_* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->IsEmpty();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Local_v8__Data___Clear(v8___Local_v8__Data_* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->Clear();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Local_v8__Data___New(PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* isolate = NULL;
            PyObject* that = NULL;
        
        static char *kwlist[] = { "isolate""that", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OO", kwlist, &isolate,&that);
            if ( 0 == status  && isolate && that){
                    
                    
                if (!checkType(&v8___IsolateType, isolate )){ status = -1;}
    
                if (!checkType(&v8___Local_v8__Data_Type, that )){ status = -1;}
    
                        
                   v8::Isolate * isolate_C = ((v8___Isolate*)isolate)->_Cobject;
    
                   v8::Local<v8::Data>& that_C = *((v8___Local_v8__Data_*)that)->_Cobject;
    
                        if( 0 == status ){
                       v8::Local<v8::Data> result = v8::Local<v8::Data>::New(isolate_C, that_C);
                       result_py = 
                        PyObject_CallObject((PyObject *) & v8___Local_v8__Data_Type, NULL);
                        if(result_py){
                            delete ((v8___Local_v8__Data_*) result_py)->_Cobject ;
                            ((v8___Local_v8__Data_*) result_py)->_Cobject = new v8::Local<v8::Data>(result);
                        };
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    {
        
            PyObject* isolate = NULL;
            PyObject* that = NULL;
        
        static char *kwlist[] = { "isolate""that", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OO", kwlist, &isolate,&that);
            if ( 0 == status  && isolate && that){
                    
                    
                if (!checkType(&v8___IsolateType, isolate )){ status = -1;}
    
                if (!checkType(&v8___PersistentBase_v8__Data_Type, that )){ status = -1;}
    
                        
                   v8::Isolate * isolate_C = ((v8___Isolate*)isolate)->_Cobject;
    
                   v8::PersistentBase<v8::Data> const& that_C = *((v8___PersistentBase_v8__Data_*)that)->_Cobject;
    
                        if( 0 == status ){
                       v8::Local<v8::Data> result = v8::Local<v8::Data>::New(isolate_C, that_C);
                       result_py = 
                        PyObject_CallObject((PyObject *) & v8___Local_v8__Data_Type, NULL);
                        if(result_py){
                            delete ((v8___Local_v8__Data_*) result_py)->_Cobject ;
                            ((v8___Local_v8__Data_*) result_py)->_Cobject = new v8::Local<v8::Data>(result);
                        };
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    {
        
            PyObject* isolate = NULL;
            PyObject* that = NULL;
        
        static char *kwlist[] = { "isolate""that", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OO", kwlist, &isolate,&that);
            if ( 0 == status  && isolate && that){
                    
                    
                if (!checkType(&v8___IsolateType, isolate )){ status = -1;}
    
                if (!checkType(&v8___DataType, that )){ status = -1;}
    
                        
                   v8::Isolate * isolate_C = ((v8___Isolate*)isolate)->_Cobject;
    
                   v8::Data * that_C = ((v8___Data*)that)->_Cobject;
    
                        if( 0 == status ){
                       v8::Local<v8::Data> result = v8::Local<v8::Data>::New(isolate_C, that_C);
                       result_py = 
                        PyObject_CallObject((PyObject *) & v8___Local_v8__Data_Type, NULL);
                        if(result_py){
                            delete ((v8___Local_v8__Data_*) result_py)->_Cobject ;
                            ((v8___Local_v8__Data_*) result_py)->_Cobject = new v8::Local<v8::Data>(result);
                        };
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        

static void
v8___Local_v8__AccessorSignature__dealloc(v8___Local_v8__AccessorSignature_* self)
{
    if(!self) return;
    if (!self->_is_c_reference){
        delete self->_Cobject;
    }
    self->_Cobject = NULL;
    self->_owner = NULL;
    self->_is_c_reference = false;
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject *
v8___Local_v8__AccessorSignature__new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
    v8___Local_v8__AccessorSignature_ *self;

    self = (v8___Local_v8__AccessorSignature_ *)type->tp_alloc(type, 0);
    if (self != NULL) {
        self->_Cobject = NULL;
        self->_owner = NULL;
    }

    return (PyObject *)self;
}       

static int
v8___Local_v8__AccessorSignature__init(v8___Local_v8__AccessorSignature_ *self, PyObject *args, PyObject *kwds)
{
    int status = -1;
    if(!self) return status;
    self->_owner = (PyObject*)self;
    
    {
        PyObject * tmp = NULL;
        (void)tmp;
         
        static char *kwlist[] = {  NULL};
        
            
        if ( 0 != status ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist, );
            if ( 0 == status ){
                
                
                if(status == 0){
                    
                    self->_Cobject = new v8::Local();
                    
                        
                }
            }
        }
    }
    {
        PyObject * tmp = NULL;
        (void)tmp;
         
        static char *kwlist[] = { "that", NULL};
        
        PyObject* that = NULL;
        
            
        if ( 0 != status ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &that);
            if ( 0 == status  && that){
                
                
                if(status == 0){
                    
                   v8::Local<v8::AccessorSignature>& that_C = *((v8___Local_v8__AccessorSignature_*)that)->_Cobject;
    
                    self->_Cobject = new v8::Local(that_C);
                    
                        
                }
            }
        }
    }
    {
        PyObject * tmp = NULL;
        (void)tmp;
         
        static char *kwlist[] = { "Anon_1", NULL};
        
        PyObject* Anon_1 = NULL;
        
            
        if ( 0 != status ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &Anon_1);
            if ( 0 == status  && Anon_1){
                
                
                if(status == 0){
                    
                   v8::Local<v8::AccessorSignature> const& Anon_1_C = *((v8___Local_v8__AccessorSignature_*)Anon_1)->_Cobject;
    
                    self->_Cobject = new v8::Local(Anon_1_C);
                    
                        
                }
            }
        }
    }
    if (status != 0){
       self->_Cobject = NULL;
       status = 0;
    }
    return status;
}


static PyObject*
v8___Local_v8__AccessorSignature___IsEmpty(v8___Local_v8__AccessorSignature_* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->IsEmpty();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Local_v8__AccessorSignature___Clear(v8___Local_v8__AccessorSignature_* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->Clear();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Local_v8__AccessorSignature___New(PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* isolate = NULL;
            PyObject* that = NULL;
        
        static char *kwlist[] = { "isolate""that", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OO", kwlist, &isolate,&that);
            if ( 0 == status  && isolate && that){
                    
                    
                if (!checkType(&v8___IsolateType, isolate )){ status = -1;}
    
                if (!checkType(&v8___Local_v8__AccessorSignature_Type, that )){ status = -1;}
    
                        
                   v8::Isolate * isolate_C = ((v8___Isolate*)isolate)->_Cobject;
    
                   v8::Local<v8::AccessorSignature>& that_C = *((v8___Local_v8__AccessorSignature_*)that)->_Cobject;
    
                        if( 0 == status ){
                       v8::Local<v8::AccessorSignature> result = v8::Local<v8::AccessorSignature>::New(isolate_C, that_C);
                       result_py = 
                        PyObject_CallObject((PyObject *) & v8___Local_v8__AccessorSignature_Type, NULL);
                        if(result_py){
                            delete ((v8___Local_v8__AccessorSignature_*) result_py)->_Cobject ;
                            ((v8___Local_v8__AccessorSignature_*) result_py)->_Cobject = new v8::Local<v8::AccessorSignature>(result);
                        };
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    {
        
            PyObject* isolate = NULL;
            PyObject* that = NULL;
        
        static char *kwlist[] = { "isolate""that", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OO", kwlist, &isolate,&that);
            if ( 0 == status  && isolate && that){
                    
                    
                if (!checkType(&v8___IsolateType, isolate )){ status = -1;}
    
                if (!checkType(&v8___PersistentBase_v8__AccessorSignature_Type, that )){ status = -1;}
    
                        
                   v8::Isolate * isolate_C = ((v8___Isolate*)isolate)->_Cobject;
    
                   v8::PersistentBase<v8::AccessorSignature> const& that_C = *((v8___PersistentBase_v8__AccessorSignature_*)that)->_Cobject;
    
                        if( 0 == status ){
                       v8::Local<v8::AccessorSignature> result = v8::Local<v8::AccessorSignature>::New(isolate_C, that_C);
                       result_py = 
                        PyObject_CallObject((PyObject *) & v8___Local_v8__AccessorSignature_Type, NULL);
                        if(result_py){
                            delete ((v8___Local_v8__AccessorSignature_*) result_py)->_Cobject ;
                            ((v8___Local_v8__AccessorSignature_*) result_py)->_Cobject = new v8::Local<v8::AccessorSignature>(result);
                        };
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    {
        
            PyObject* isolate = NULL;
            PyObject* that = NULL;
        
        static char *kwlist[] = { "isolate""that", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OO", kwlist, &isolate,&that);
            if ( 0 == status  && isolate && that){
                    
                    
                if (!checkType(&v8___IsolateType, isolate )){ status = -1;}
    
                if (!checkType(&v8___AccessorSignatureType, that )){ status = -1;}
    
                        
                   v8::Isolate * isolate_C = ((v8___Isolate*)isolate)->_Cobject;
    
                   v8::AccessorSignature * that_C = ((v8___AccessorSignature*)that)->_Cobject;
    
                        if( 0 == status ){
                       v8::Local<v8::AccessorSignature> result = v8::Local<v8::AccessorSignature>::New(isolate_C, that_C);
                       result_py = 
                        PyObject_CallObject((PyObject *) & v8___Local_v8__AccessorSignature_Type, NULL);
                        if(result_py){
                            delete ((v8___Local_v8__AccessorSignature_*) result_py)->_Cobject ;
                            ((v8___Local_v8__AccessorSignature_*) result_py)->_Cobject = new v8::Local<v8::AccessorSignature>(result);
                        };
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        

static void
v8___Local_v8__Signature__dealloc(v8___Local_v8__Signature_* self)
{
    if(!self) return;
    if (!self->_is_c_reference){
        delete self->_Cobject;
    }
    self->_Cobject = NULL;
    self->_owner = NULL;
    self->_is_c_reference = false;
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject *
v8___Local_v8__Signature__new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
    v8___Local_v8__Signature_ *self;

    self = (v8___Local_v8__Signature_ *)type->tp_alloc(type, 0);
    if (self != NULL) {
        self->_Cobject = NULL;
        self->_owner = NULL;
    }

    return (PyObject *)self;
}       

static int
v8___Local_v8__Signature__init(v8___Local_v8__Signature_ *self, PyObject *args, PyObject *kwds)
{
    int status = -1;
    if(!self) return status;
    self->_owner = (PyObject*)self;
    
    {
        PyObject * tmp = NULL;
        (void)tmp;
         
        static char *kwlist[] = {  NULL};
        
            
        if ( 0 != status ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist, );
            if ( 0 == status ){
                
                
                if(status == 0){
                    
                    self->_Cobject = new v8::Local();
                    
                        
                }
            }
        }
    }
    {
        PyObject * tmp = NULL;
        (void)tmp;
         
        static char *kwlist[] = { "that", NULL};
        
        PyObject* that = NULL;
        
            
        if ( 0 != status ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &that);
            if ( 0 == status  && that){
                
                
                if(status == 0){
                    
                   v8::Local<v8::Signature>& that_C = *((v8___Local_v8__Signature_*)that)->_Cobject;
    
                    self->_Cobject = new v8::Local(that_C);
                    
                        
                }
            }
        }
    }
    {
        PyObject * tmp = NULL;
        (void)tmp;
         
        static char *kwlist[] = { "Anon_1", NULL};
        
        PyObject* Anon_1 = NULL;
        
            
        if ( 0 != status ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &Anon_1);
            if ( 0 == status  && Anon_1){
                
                
                if(status == 0){
                    
                   v8::Local<v8::Signature> const& Anon_1_C = *((v8___Local_v8__Signature_*)Anon_1)->_Cobject;
    
                    self->_Cobject = new v8::Local(Anon_1_C);
                    
                        
                }
            }
        }
    }
    if (status != 0){
       self->_Cobject = NULL;
       status = 0;
    }
    return status;
}


static PyObject*
v8___Local_v8__Signature___IsEmpty(v8___Local_v8__Signature_* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->IsEmpty();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Local_v8__Signature___Clear(v8___Local_v8__Signature_* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->Clear();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Local_v8__Signature___New(PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* isolate = NULL;
            PyObject* that = NULL;
        
        static char *kwlist[] = { "isolate""that", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OO", kwlist, &isolate,&that);
            if ( 0 == status  && isolate && that){
                    
                    
                if (!checkType(&v8___IsolateType, isolate )){ status = -1;}
    
                if (!checkType(&v8___Local_v8__Signature_Type, that )){ status = -1;}
    
                        
                   v8::Isolate * isolate_C = ((v8___Isolate*)isolate)->_Cobject;
    
                   v8::Local<v8::Signature>& that_C = *((v8___Local_v8__Signature_*)that)->_Cobject;
    
                        if( 0 == status ){
                       v8::Local<v8::Signature> result = v8::Local<v8::Signature>::New(isolate_C, that_C);
                       result_py = 
                        PyObject_CallObject((PyObject *) & v8___Local_v8__Signature_Type, NULL);
                        if(result_py){
                            delete ((v8___Local_v8__Signature_*) result_py)->_Cobject ;
                            ((v8___Local_v8__Signature_*) result_py)->_Cobject = new v8::Local<v8::Signature>(result);
                        };
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    {
        
            PyObject* isolate = NULL;
            PyObject* that = NULL;
        
        static char *kwlist[] = { "isolate""that", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OO", kwlist, &isolate,&that);
            if ( 0 == status  && isolate && that){
                    
                    
                if (!checkType(&v8___IsolateType, isolate )){ status = -1;}
    
                if (!checkType(&v8___PersistentBase_v8__Signature_Type, that )){ status = -1;}
    
                        
                   v8::Isolate * isolate_C = ((v8___Isolate*)isolate)->_Cobject;
    
                   v8::PersistentBase<v8::Signature> const& that_C = *((v8___PersistentBase_v8__Signature_*)that)->_Cobject;
    
                        if( 0 == status ){
                       v8::Local<v8::Signature> result = v8::Local<v8::Signature>::New(isolate_C, that_C);
                       result_py = 
                        PyObject_CallObject((PyObject *) & v8___Local_v8__Signature_Type, NULL);
                        if(result_py){
                            delete ((v8___Local_v8__Signature_*) result_py)->_Cobject ;
                            ((v8___Local_v8__Signature_*) result_py)->_Cobject = new v8::Local<v8::Signature>(result);
                        };
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    {
        
            PyObject* isolate = NULL;
            PyObject* that = NULL;
        
        static char *kwlist[] = { "isolate""that", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OO", kwlist, &isolate,&that);
            if ( 0 == status  && isolate && that){
                    
                    
                if (!checkType(&v8___IsolateType, isolate )){ status = -1;}
    
                if (!checkType(&v8___SignatureType, that )){ status = -1;}
    
                        
                   v8::Isolate * isolate_C = ((v8___Isolate*)isolate)->_Cobject;
    
                   v8::Signature * that_C = ((v8___Signature*)that)->_Cobject;
    
                        if( 0 == status ){
                       v8::Local<v8::Signature> result = v8::Local<v8::Signature>::New(isolate_C, that_C);
                       result_py = 
                        PyObject_CallObject((PyObject *) & v8___Local_v8__Signature_Type, NULL);
                        if(result_py){
                            delete ((v8___Local_v8__Signature_*) result_py)->_Cobject ;
                            ((v8___Local_v8__Signature_*) result_py)->_Cobject = new v8::Local<v8::Signature>(result);
                        };
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        

static void
v8___Local_v8__ObjectTemplate__dealloc(v8___Local_v8__ObjectTemplate_* self)
{
    if(!self) return;
    if (!self->_is_c_reference){
        delete self->_Cobject;
    }
    self->_Cobject = NULL;
    self->_owner = NULL;
    self->_is_c_reference = false;
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject *
v8___Local_v8__ObjectTemplate__new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
    v8___Local_v8__ObjectTemplate_ *self;

    self = (v8___Local_v8__ObjectTemplate_ *)type->tp_alloc(type, 0);
    if (self != NULL) {
        self->_Cobject = NULL;
        self->_owner = NULL;
    }

    return (PyObject *)self;
}       

static int
v8___Local_v8__ObjectTemplate__init(v8___Local_v8__ObjectTemplate_ *self, PyObject *args, PyObject *kwds)
{
    int status = -1;
    if(!self) return status;
    self->_owner = (PyObject*)self;
    
    {
        PyObject * tmp = NULL;
        (void)tmp;
         
        static char *kwlist[] = {  NULL};
        
            
        if ( 0 != status ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist, );
            if ( 0 == status ){
                
                
                if(status == 0){
                    
                    self->_Cobject = new v8::Local();
                    
                        
                }
            }
        }
    }
    {
        PyObject * tmp = NULL;
        (void)tmp;
         
        static char *kwlist[] = { "that", NULL};
        
        PyObject* that = NULL;
        
            
        if ( 0 != status ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &that);
            if ( 0 == status  && that){
                
                
                if(status == 0){
                    
                   v8::Local<v8::ObjectTemplate>& that_C = *((v8___Local_v8__ObjectTemplate_*)that)->_Cobject;
    
                    self->_Cobject = new v8::Local(that_C);
                    
                        
                }
            }
        }
    }
    {
        PyObject * tmp = NULL;
        (void)tmp;
         
        static char *kwlist[] = { "Anon_1", NULL};
        
        PyObject* Anon_1 = NULL;
        
            
        if ( 0 != status ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &Anon_1);
            if ( 0 == status  && Anon_1){
                
                
                if(status == 0){
                    
                   v8::Local<v8::ObjectTemplate> const& Anon_1_C = *((v8___Local_v8__ObjectTemplate_*)Anon_1)->_Cobject;
    
                    self->_Cobject = new v8::Local(Anon_1_C);
                    
                        
                }
            }
        }
    }
    if (status != 0){
       self->_Cobject = NULL;
       status = 0;
    }
    return status;
}


static PyObject*
v8___Local_v8__ObjectTemplate___IsEmpty(v8___Local_v8__ObjectTemplate_* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->IsEmpty();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Local_v8__ObjectTemplate___Clear(v8___Local_v8__ObjectTemplate_* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->Clear();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Local_v8__ObjectTemplate___New(PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* isolate = NULL;
            PyObject* that = NULL;
        
        static char *kwlist[] = { "isolate""that", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OO", kwlist, &isolate,&that);
            if ( 0 == status  && isolate && that){
                    
                    
                if (!checkType(&v8___IsolateType, isolate )){ status = -1;}
    
                if (!checkType(&v8___Local_v8__ObjectTemplate_Type, that )){ status = -1;}
    
                        
                   v8::Isolate * isolate_C = ((v8___Isolate*)isolate)->_Cobject;
    
                   v8::Local<v8::ObjectTemplate>& that_C = *((v8___Local_v8__ObjectTemplate_*)that)->_Cobject;
    
                        if( 0 == status ){
                       v8::Local<v8::ObjectTemplate> result = v8::Local<v8::ObjectTemplate>::New(isolate_C, that_C);
                       result_py = 
                        PyObject_CallObject((PyObject *) & v8___Local_v8__ObjectTemplate_Type, NULL);
                        if(result_py){
                            delete ((v8___Local_v8__ObjectTemplate_*) result_py)->_Cobject ;
                            ((v8___Local_v8__ObjectTemplate_*) result_py)->_Cobject = new v8::Local<v8::ObjectTemplate>(result);
                        };
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    {
        
            PyObject* isolate = NULL;
            PyObject* that = NULL;
        
        static char *kwlist[] = { "isolate""that", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OO", kwlist, &isolate,&that);
            if ( 0 == status  && isolate && that){
                    
                    
                if (!checkType(&v8___IsolateType, isolate )){ status = -1;}
    
                if (!checkType(&v8___PersistentBase_v8__ObjectTemplate_Type, that )){ status = -1;}
    
                        
                   v8::Isolate * isolate_C = ((v8___Isolate*)isolate)->_Cobject;
    
                   v8::PersistentBase<v8::ObjectTemplate> const& that_C = *((v8___PersistentBase_v8__ObjectTemplate_*)that)->_Cobject;
    
                        if( 0 == status ){
                       v8::Local<v8::ObjectTemplate> result = v8::Local<v8::ObjectTemplate>::New(isolate_C, that_C);
                       result_py = 
                        PyObject_CallObject((PyObject *) & v8___Local_v8__ObjectTemplate_Type, NULL);
                        if(result_py){
                            delete ((v8___Local_v8__ObjectTemplate_*) result_py)->_Cobject ;
                            ((v8___Local_v8__ObjectTemplate_*) result_py)->_Cobject = new v8::Local<v8::ObjectTemplate>(result);
                        };
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    {
        
            PyObject* isolate = NULL;
            PyObject* that = NULL;
        
        static char *kwlist[] = { "isolate""that", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OO", kwlist, &isolate,&that);
            if ( 0 == status  && isolate && that){
                    
                    
                if (!checkType(&v8___IsolateType, isolate )){ status = -1;}
    
                if (!checkType(&v8___ObjectTemplateType, that )){ status = -1;}
    
                        
                   v8::Isolate * isolate_C = ((v8___Isolate*)isolate)->_Cobject;
    
                   v8::ObjectTemplate * that_C = ((v8___ObjectTemplate*)that)->_Cobject;
    
                        if( 0 == status ){
                       v8::Local<v8::ObjectTemplate> result = v8::Local<v8::ObjectTemplate>::New(isolate_C, that_C);
                       result_py = 
                        PyObject_CallObject((PyObject *) & v8___Local_v8__ObjectTemplate_Type, NULL);
                        if(result_py){
                            delete ((v8___Local_v8__ObjectTemplate_*) result_py)->_Cobject ;
                            ((v8___Local_v8__ObjectTemplate_*) result_py)->_Cobject = new v8::Local<v8::ObjectTemplate>(result);
                        };
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        

static void
v8___Local_v8__TypeSwitch__dealloc(v8___Local_v8__TypeSwitch_* self)
{
    if(!self) return;
    if (!self->_is_c_reference){
        delete self->_Cobject;
    }
    self->_Cobject = NULL;
    self->_owner = NULL;
    self->_is_c_reference = false;
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject *
v8___Local_v8__TypeSwitch__new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
    v8___Local_v8__TypeSwitch_ *self;

    self = (v8___Local_v8__TypeSwitch_ *)type->tp_alloc(type, 0);
    if (self != NULL) {
        self->_Cobject = NULL;
        self->_owner = NULL;
    }

    return (PyObject *)self;
}       

static int
v8___Local_v8__TypeSwitch__init(v8___Local_v8__TypeSwitch_ *self, PyObject *args, PyObject *kwds)
{
    int status = -1;
    if(!self) return status;
    self->_owner = (PyObject*)self;
    self->_Cobject = new v8___Local_v8__TypeSwitch_();
    status = self->get_Cobject(self)?0:-1; 
    if (status != 0){
       self->_Cobject = NULL;
       status = 0;
    }
    return status;
}



static void
v8___Local_v8__Message__dealloc(v8___Local_v8__Message_* self)
{
    if(!self) return;
    if (!self->_is_c_reference){
        delete self->_Cobject;
    }
    self->_Cobject = NULL;
    self->_owner = NULL;
    self->_is_c_reference = false;
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject *
v8___Local_v8__Message__new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
    v8___Local_v8__Message_ *self;

    self = (v8___Local_v8__Message_ *)type->tp_alloc(type, 0);
    if (self != NULL) {
        self->_Cobject = NULL;
        self->_owner = NULL;
    }

    return (PyObject *)self;
}       

static int
v8___Local_v8__Message__init(v8___Local_v8__Message_ *self, PyObject *args, PyObject *kwds)
{
    int status = -1;
    if(!self) return status;
    self->_owner = (PyObject*)self;
    self->_Cobject = new v8___Local_v8__Message_();
    status = self->get_Cobject(self)?0:-1; 
    if (status != 0){
       self->_Cobject = NULL;
       status = 0;
    }
    return status;
}



static void
v8___MaybeLocal_v8__Script__dealloc(v8___MaybeLocal_v8__Script_* self)
{
    if(!self) return;
    if (!self->_is_c_reference){
        delete self->_Cobject;
    }
    self->_Cobject = NULL;
    self->_owner = NULL;
    self->_is_c_reference = false;
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject *
v8___MaybeLocal_v8__Script__new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
    v8___MaybeLocal_v8__Script_ *self;

    self = (v8___MaybeLocal_v8__Script_ *)type->tp_alloc(type, 0);
    if (self != NULL) {
        self->_Cobject = NULL;
        self->_owner = NULL;
    }

    return (PyObject *)self;
}       

static int
v8___MaybeLocal_v8__Script__init(v8___MaybeLocal_v8__Script_ *self, PyObject *args, PyObject *kwds)
{
    int status = -1;
    if(!self) return status;
    self->_owner = (PyObject*)self;
    self->_Cobject = new v8___MaybeLocal_v8__Script_();
    status = self->get_Cobject(self)?0:-1; 
    if (status != 0){
       self->_Cobject = NULL;
       status = 0;
    }
    return status;
}



static void
v8___MaybeLocal_v8__Value__dealloc(v8___MaybeLocal_v8__Value_* self)
{
    if(!self) return;
    if (!self->_is_c_reference){
        delete self->_Cobject;
    }
    self->_Cobject = NULL;
    self->_owner = NULL;
    self->_is_c_reference = false;
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject *
v8___MaybeLocal_v8__Value__new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
    v8___MaybeLocal_v8__Value_ *self;

    self = (v8___MaybeLocal_v8__Value_ *)type->tp_alloc(type, 0);
    if (self != NULL) {
        self->_Cobject = NULL;
        self->_owner = NULL;
    }

    return (PyObject *)self;
}       

static int
v8___MaybeLocal_v8__Value__init(v8___MaybeLocal_v8__Value_ *self, PyObject *args, PyObject *kwds)
{
    int status = -1;
    if(!self) return status;
    self->_owner = (PyObject*)self;
    
    {
        PyObject * tmp = NULL;
        (void)tmp;
         
        static char *kwlist[] = {  NULL};
        
            
        if ( 0 != status ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist, );
            if ( 0 == status ){
                
                
                if(status == 0){
                    
                    self->_Cobject = new v8::MaybeLocal();
                    
                        
                }
            }
        }
    }
    {
        PyObject * tmp = NULL;
        (void)tmp;
         
        static char *kwlist[] = { "Anon_1", NULL};
        
        PyObject* Anon_1 = NULL;
        
            
        if ( 0 != status ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &Anon_1);
            if ( 0 == status  && Anon_1){
                
                
                if(status == 0){
                    
                   v8::MaybeLocal<v8::Value> const& Anon_1_C = *((v8___MaybeLocal_v8__Value_*)Anon_1)->_Cobject;
    
                    self->_Cobject = new v8::MaybeLocal(Anon_1_C);
                    
                        
                }
            }
        }
    }
    if (status != 0){
       self->_Cobject = NULL;
       status = 0;
    }
    return status;
}


static PyObject*
v8___MaybeLocal_v8__Value___IsEmpty(v8___MaybeLocal_v8__Value_* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->IsEmpty();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___MaybeLocal_v8__Value___ToLocalChecked(v8___MaybeLocal_v8__Value_* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->ToLocalChecked();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        

static void
v8___MaybeLocal_v8__UnboundScript__dealloc(v8___MaybeLocal_v8__UnboundScript_* self)
{
    if(!self) return;
    if (!self->_is_c_reference){
        delete self->_Cobject;
    }
    self->_Cobject = NULL;
    self->_owner = NULL;
    self->_is_c_reference = false;
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject *
v8___MaybeLocal_v8__UnboundScript__new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
    v8___MaybeLocal_v8__UnboundScript_ *self;

    self = (v8___MaybeLocal_v8__UnboundScript_ *)type->tp_alloc(type, 0);
    if (self != NULL) {
        self->_Cobject = NULL;
        self->_owner = NULL;
    }

    return (PyObject *)self;
}       

static int
v8___MaybeLocal_v8__UnboundScript__init(v8___MaybeLocal_v8__UnboundScript_ *self, PyObject *args, PyObject *kwds)
{
    int status = -1;
    if(!self) return status;
    self->_owner = (PyObject*)self;
    self->_Cobject = new v8___MaybeLocal_v8__UnboundScript_();
    status = self->get_Cobject(self)?0:-1; 
    if (status != 0){
       self->_Cobject = NULL;
       status = 0;
    }
    return status;
}



static void
v8___MaybeLocal_v8__Function__dealloc(v8___MaybeLocal_v8__Function_* self)
{
    if(!self) return;
    if (!self->_is_c_reference){
        delete self->_Cobject;
    }
    self->_Cobject = NULL;
    self->_owner = NULL;
    self->_is_c_reference = false;
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject *
v8___MaybeLocal_v8__Function__new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
    v8___MaybeLocal_v8__Function_ *self;

    self = (v8___MaybeLocal_v8__Function_ *)type->tp_alloc(type, 0);
    if (self != NULL) {
        self->_Cobject = NULL;
        self->_owner = NULL;
    }

    return (PyObject *)self;
}       

static int
v8___MaybeLocal_v8__Function__init(v8___MaybeLocal_v8__Function_ *self, PyObject *args, PyObject *kwds)
{
    int status = -1;
    if(!self) return status;
    self->_owner = (PyObject*)self;
    self->_Cobject = new v8___MaybeLocal_v8__Function_();
    status = self->get_Cobject(self)?0:-1; 
    if (status != 0){
       self->_Cobject = NULL;
       status = 0;
    }
    return status;
}



static void
v8___MaybeLocal_v8__String__dealloc(v8___MaybeLocal_v8__String_* self)
{
    if(!self) return;
    if (!self->_is_c_reference){
        delete self->_Cobject;
    }
    self->_Cobject = NULL;
    self->_owner = NULL;
    self->_is_c_reference = false;
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject *
v8___MaybeLocal_v8__String__new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
    v8___MaybeLocal_v8__String_ *self;

    self = (v8___MaybeLocal_v8__String_ *)type->tp_alloc(type, 0);
    if (self != NULL) {
        self->_Cobject = NULL;
        self->_owner = NULL;
    }

    return (PyObject *)self;
}       

static int
v8___MaybeLocal_v8__String__init(v8___MaybeLocal_v8__String_ *self, PyObject *args, PyObject *kwds)
{
    int status = -1;
    if(!self) return status;
    self->_owner = (PyObject*)self;
    
    {
        PyObject * tmp = NULL;
        (void)tmp;
         
        static char *kwlist[] = {  NULL};
        
            
        if ( 0 != status ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist, );
            if ( 0 == status ){
                
                
                if(status == 0){
                    
                    self->_Cobject = new v8::MaybeLocal();
                    
                        
                }
            }
        }
    }
    {
        PyObject * tmp = NULL;
        (void)tmp;
         
        static char *kwlist[] = { "Anon_1", NULL};
        
        PyObject* Anon_1 = NULL;
        
            
        if ( 0 != status ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &Anon_1);
            if ( 0 == status  && Anon_1){
                
                
                if(status == 0){
                    
                   v8::MaybeLocal<v8::String> const& Anon_1_C = *((v8___MaybeLocal_v8__String_*)Anon_1)->_Cobject;
    
                    self->_Cobject = new v8::MaybeLocal(Anon_1_C);
                    
                        
                }
            }
        }
    }
    if (status != 0){
       self->_Cobject = NULL;
       status = 0;
    }
    return status;
}


static PyObject*
v8___MaybeLocal_v8__String___IsEmpty(v8___MaybeLocal_v8__String_* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->IsEmpty();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___MaybeLocal_v8__String___ToLocalChecked(v8___MaybeLocal_v8__String_* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->ToLocalChecked();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___MaybeLocal_v8__String___FromMaybe(v8___MaybeLocal_v8__String_* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* default_value = NULL;
        
        static char *kwlist[] = { "default_value", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &default_value);
            if ( 0 == status  && default_value){
                    
                    
                if (!checkType(&v8___Local_v8__String_Type, default_value )){ status = -1;}
    
                        
                   v8::Local<v8::String>& default_value_C = *((v8___Local_v8__String_*)default_value)->_Cobject;
    
                        if( 0 == status ){
                        self->_Cobject->FromMaybe(default_value_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        

static void
v8___MaybeLocal_v8__Boolean__dealloc(v8___MaybeLocal_v8__Boolean_* self)
{
    if(!self) return;
    if (!self->_is_c_reference){
        delete self->_Cobject;
    }
    self->_Cobject = NULL;
    self->_owner = NULL;
    self->_is_c_reference = false;
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject *
v8___MaybeLocal_v8__Boolean__new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
    v8___MaybeLocal_v8__Boolean_ *self;

    self = (v8___MaybeLocal_v8__Boolean_ *)type->tp_alloc(type, 0);
    if (self != NULL) {
        self->_Cobject = NULL;
        self->_owner = NULL;
    }

    return (PyObject *)self;
}       

static int
v8___MaybeLocal_v8__Boolean__init(v8___MaybeLocal_v8__Boolean_ *self, PyObject *args, PyObject *kwds)
{
    int status = -1;
    if(!self) return status;
    self->_owner = (PyObject*)self;
    
    {
        PyObject * tmp = NULL;
        (void)tmp;
         
        static char *kwlist[] = {  NULL};
        
            
        if ( 0 != status ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist, );
            if ( 0 == status ){
                
                
                if(status == 0){
                    
                    self->_Cobject = new v8::MaybeLocal();
                    
                        
                }
            }
        }
    }
    {
        PyObject * tmp = NULL;
        (void)tmp;
         
        static char *kwlist[] = { "Anon_1", NULL};
        
        PyObject* Anon_1 = NULL;
        
            
        if ( 0 != status ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &Anon_1);
            if ( 0 == status  && Anon_1){
                
                
                if(status == 0){
                    
                   v8::MaybeLocal<v8::Boolean> const& Anon_1_C = *((v8___MaybeLocal_v8__Boolean_*)Anon_1)->_Cobject;
    
                    self->_Cobject = new v8::MaybeLocal(Anon_1_C);
                    
                        
                }
            }
        }
    }
    if (status != 0){
       self->_Cobject = NULL;
       status = 0;
    }
    return status;
}


static PyObject*
v8___MaybeLocal_v8__Boolean___IsEmpty(v8___MaybeLocal_v8__Boolean_* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->IsEmpty();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___MaybeLocal_v8__Boolean___ToLocalChecked(v8___MaybeLocal_v8__Boolean_* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->ToLocalChecked();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___MaybeLocal_v8__Boolean___FromMaybe(v8___MaybeLocal_v8__Boolean_* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* default_value = NULL;
        
        static char *kwlist[] = { "default_value", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &default_value);
            if ( 0 == status  && default_value){
                    
                    
                if (!checkType(&v8___Local_v8__Boolean_Type, default_value )){ status = -1;}
    
                        
                   v8::Local<v8::Boolean>& default_value_C = *((v8___Local_v8__Boolean_*)default_value)->_Cobject;
    
                        if( 0 == status ){
                        self->_Cobject->FromMaybe(default_value_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        

static void
v8___MaybeLocal_v8__Number__dealloc(v8___MaybeLocal_v8__Number_* self)
{
    if(!self) return;
    if (!self->_is_c_reference){
        delete self->_Cobject;
    }
    self->_Cobject = NULL;
    self->_owner = NULL;
    self->_is_c_reference = false;
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject *
v8___MaybeLocal_v8__Number__new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
    v8___MaybeLocal_v8__Number_ *self;

    self = (v8___MaybeLocal_v8__Number_ *)type->tp_alloc(type, 0);
    if (self != NULL) {
        self->_Cobject = NULL;
        self->_owner = NULL;
    }

    return (PyObject *)self;
}       

static int
v8___MaybeLocal_v8__Number__init(v8___MaybeLocal_v8__Number_ *self, PyObject *args, PyObject *kwds)
{
    int status = -1;
    if(!self) return status;
    self->_owner = (PyObject*)self;
    
    {
        PyObject * tmp = NULL;
        (void)tmp;
         
        static char *kwlist[] = {  NULL};
        
            
        if ( 0 != status ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist, );
            if ( 0 == status ){
                
                
                if(status == 0){
                    
                    self->_Cobject = new v8::MaybeLocal();
                    
                        
                }
            }
        }
    }
    {
        PyObject * tmp = NULL;
        (void)tmp;
         
        static char *kwlist[] = { "Anon_1", NULL};
        
        PyObject* Anon_1 = NULL;
        
            
        if ( 0 != status ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &Anon_1);
            if ( 0 == status  && Anon_1){
                
                
                if(status == 0){
                    
                   v8::MaybeLocal<v8::Number> const& Anon_1_C = *((v8___MaybeLocal_v8__Number_*)Anon_1)->_Cobject;
    
                    self->_Cobject = new v8::MaybeLocal(Anon_1_C);
                    
                        
                }
            }
        }
    }
    if (status != 0){
       self->_Cobject = NULL;
       status = 0;
    }
    return status;
}


static PyObject*
v8___MaybeLocal_v8__Number___IsEmpty(v8___MaybeLocal_v8__Number_* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->IsEmpty();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___MaybeLocal_v8__Number___ToLocalChecked(v8___MaybeLocal_v8__Number_* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->ToLocalChecked();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___MaybeLocal_v8__Number___FromMaybe(v8___MaybeLocal_v8__Number_* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* default_value = NULL;
        
        static char *kwlist[] = { "default_value", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &default_value);
            if ( 0 == status  && default_value){
                    
                    
                if (!checkType(&v8___Local_v8__Number_Type, default_value )){ status = -1;}
    
                        
                   v8::Local<v8::Number>& default_value_C = *((v8___Local_v8__Number_*)default_value)->_Cobject;
    
                        if( 0 == status ){
                        self->_Cobject->FromMaybe(default_value_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        

static void
v8___MaybeLocal_v8__Object__dealloc(v8___MaybeLocal_v8__Object_* self)
{
    if(!self) return;
    if (!self->_is_c_reference){
        delete self->_Cobject;
    }
    self->_Cobject = NULL;
    self->_owner = NULL;
    self->_is_c_reference = false;
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject *
v8___MaybeLocal_v8__Object__new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
    v8___MaybeLocal_v8__Object_ *self;

    self = (v8___MaybeLocal_v8__Object_ *)type->tp_alloc(type, 0);
    if (self != NULL) {
        self->_Cobject = NULL;
        self->_owner = NULL;
    }

    return (PyObject *)self;
}       

static int
v8___MaybeLocal_v8__Object__init(v8___MaybeLocal_v8__Object_ *self, PyObject *args, PyObject *kwds)
{
    int status = -1;
    if(!self) return status;
    self->_owner = (PyObject*)self;
    
    {
        PyObject * tmp = NULL;
        (void)tmp;
         
        static char *kwlist[] = {  NULL};
        
            
        if ( 0 != status ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist, );
            if ( 0 == status ){
                
                
                if(status == 0){
                    
                    self->_Cobject = new v8::MaybeLocal();
                    
                        
                }
            }
        }
    }
    {
        PyObject * tmp = NULL;
        (void)tmp;
         
        static char *kwlist[] = { "Anon_1", NULL};
        
        PyObject* Anon_1 = NULL;
        
            
        if ( 0 != status ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &Anon_1);
            if ( 0 == status  && Anon_1){
                
                
                if(status == 0){
                    
                   v8::MaybeLocal<v8::Object> const& Anon_1_C = *((v8___MaybeLocal_v8__Object_*)Anon_1)->_Cobject;
    
                    self->_Cobject = new v8::MaybeLocal(Anon_1_C);
                    
                        
                }
            }
        }
    }
    if (status != 0){
       self->_Cobject = NULL;
       status = 0;
    }
    return status;
}


static PyObject*
v8___MaybeLocal_v8__Object___IsEmpty(v8___MaybeLocal_v8__Object_* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->IsEmpty();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___MaybeLocal_v8__Object___ToLocalChecked(v8___MaybeLocal_v8__Object_* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->ToLocalChecked();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___MaybeLocal_v8__Object___FromMaybe(v8___MaybeLocal_v8__Object_* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* default_value = NULL;
        
        static char *kwlist[] = { "default_value", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &default_value);
            if ( 0 == status  && default_value){
                    
                    
                if (!checkType(&v8___Local_v8__Object_Type, default_value )){ status = -1;}
    
                        
                   v8::Local<v8::Object>& default_value_C = *((v8___Local_v8__Object_*)default_value)->_Cobject;
    
                        if( 0 == status ){
                        self->_Cobject->FromMaybe(default_value_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        

static void
v8___MaybeLocal_v8__Integer__dealloc(v8___MaybeLocal_v8__Integer_* self)
{
    if(!self) return;
    if (!self->_is_c_reference){
        delete self->_Cobject;
    }
    self->_Cobject = NULL;
    self->_owner = NULL;
    self->_is_c_reference = false;
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject *
v8___MaybeLocal_v8__Integer__new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
    v8___MaybeLocal_v8__Integer_ *self;

    self = (v8___MaybeLocal_v8__Integer_ *)type->tp_alloc(type, 0);
    if (self != NULL) {
        self->_Cobject = NULL;
        self->_owner = NULL;
    }

    return (PyObject *)self;
}       

static int
v8___MaybeLocal_v8__Integer__init(v8___MaybeLocal_v8__Integer_ *self, PyObject *args, PyObject *kwds)
{
    int status = -1;
    if(!self) return status;
    self->_owner = (PyObject*)self;
    
    {
        PyObject * tmp = NULL;
        (void)tmp;
         
        static char *kwlist[] = {  NULL};
        
            
        if ( 0 != status ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist, );
            if ( 0 == status ){
                
                
                if(status == 0){
                    
                    self->_Cobject = new v8::MaybeLocal();
                    
                        
                }
            }
        }
    }
    {
        PyObject * tmp = NULL;
        (void)tmp;
         
        static char *kwlist[] = { "Anon_1", NULL};
        
        PyObject* Anon_1 = NULL;
        
            
        if ( 0 != status ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &Anon_1);
            if ( 0 == status  && Anon_1){
                
                
                if(status == 0){
                    
                   v8::MaybeLocal<v8::Integer> const& Anon_1_C = *((v8___MaybeLocal_v8__Integer_*)Anon_1)->_Cobject;
    
                    self->_Cobject = new v8::MaybeLocal(Anon_1_C);
                    
                        
                }
            }
        }
    }
    if (status != 0){
       self->_Cobject = NULL;
       status = 0;
    }
    return status;
}


static PyObject*
v8___MaybeLocal_v8__Integer___IsEmpty(v8___MaybeLocal_v8__Integer_* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->IsEmpty();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___MaybeLocal_v8__Integer___ToLocalChecked(v8___MaybeLocal_v8__Integer_* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->ToLocalChecked();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___MaybeLocal_v8__Integer___FromMaybe(v8___MaybeLocal_v8__Integer_* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* default_value = NULL;
        
        static char *kwlist[] = { "default_value", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &default_value);
            if ( 0 == status  && default_value){
                    
                    
                if (!checkType(&v8___Local_v8__Integer_Type, default_value )){ status = -1;}
    
                        
                   v8::Local<v8::Integer>& default_value_C = *((v8___Local_v8__Integer_*)default_value)->_Cobject;
    
                        if( 0 == status ){
                        self->_Cobject->FromMaybe(default_value_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        

static void
v8___MaybeLocal_v8__Uint32__dealloc(v8___MaybeLocal_v8__Uint32_* self)
{
    if(!self) return;
    if (!self->_is_c_reference){
        delete self->_Cobject;
    }
    self->_Cobject = NULL;
    self->_owner = NULL;
    self->_is_c_reference = false;
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject *
v8___MaybeLocal_v8__Uint32__new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
    v8___MaybeLocal_v8__Uint32_ *self;

    self = (v8___MaybeLocal_v8__Uint32_ *)type->tp_alloc(type, 0);
    if (self != NULL) {
        self->_Cobject = NULL;
        self->_owner = NULL;
    }

    return (PyObject *)self;
}       

static int
v8___MaybeLocal_v8__Uint32__init(v8___MaybeLocal_v8__Uint32_ *self, PyObject *args, PyObject *kwds)
{
    int status = -1;
    if(!self) return status;
    self->_owner = (PyObject*)self;
    
    {
        PyObject * tmp = NULL;
        (void)tmp;
         
        static char *kwlist[] = {  NULL};
        
            
        if ( 0 != status ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist, );
            if ( 0 == status ){
                
                
                if(status == 0){
                    
                    self->_Cobject = new v8::MaybeLocal();
                    
                        
                }
            }
        }
    }
    {
        PyObject * tmp = NULL;
        (void)tmp;
         
        static char *kwlist[] = { "Anon_1", NULL};
        
        PyObject* Anon_1 = NULL;
        
            
        if ( 0 != status ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &Anon_1);
            if ( 0 == status  && Anon_1){
                
                
                if(status == 0){
                    
                   v8::MaybeLocal<v8::Uint32> const& Anon_1_C = *((v8___MaybeLocal_v8__Uint32_*)Anon_1)->_Cobject;
    
                    self->_Cobject = new v8::MaybeLocal(Anon_1_C);
                    
                        
                }
            }
        }
    }
    if (status != 0){
       self->_Cobject = NULL;
       status = 0;
    }
    return status;
}


static PyObject*
v8___MaybeLocal_v8__Uint32___IsEmpty(v8___MaybeLocal_v8__Uint32_* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->IsEmpty();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___MaybeLocal_v8__Uint32___ToLocalChecked(v8___MaybeLocal_v8__Uint32_* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->ToLocalChecked();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___MaybeLocal_v8__Uint32___FromMaybe(v8___MaybeLocal_v8__Uint32_* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* default_value = NULL;
        
        static char *kwlist[] = { "default_value", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &default_value);
            if ( 0 == status  && default_value){
                    
                    
                if (!checkType(&v8___Local_v8__Uint32_Type, default_value )){ status = -1;}
    
                        
                   v8::Local<v8::Uint32>& default_value_C = *((v8___Local_v8__Uint32_*)default_value)->_Cobject;
    
                        if( 0 == status ){
                        self->_Cobject->FromMaybe(default_value_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        

static void
v8___MaybeLocal_v8__Int32__dealloc(v8___MaybeLocal_v8__Int32_* self)
{
    if(!self) return;
    if (!self->_is_c_reference){
        delete self->_Cobject;
    }
    self->_Cobject = NULL;
    self->_owner = NULL;
    self->_is_c_reference = false;
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject *
v8___MaybeLocal_v8__Int32__new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
    v8___MaybeLocal_v8__Int32_ *self;

    self = (v8___MaybeLocal_v8__Int32_ *)type->tp_alloc(type, 0);
    if (self != NULL) {
        self->_Cobject = NULL;
        self->_owner = NULL;
    }

    return (PyObject *)self;
}       

static int
v8___MaybeLocal_v8__Int32__init(v8___MaybeLocal_v8__Int32_ *self, PyObject *args, PyObject *kwds)
{
    int status = -1;
    if(!self) return status;
    self->_owner = (PyObject*)self;
    
    {
        PyObject * tmp = NULL;
        (void)tmp;
         
        static char *kwlist[] = {  NULL};
        
            
        if ( 0 != status ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist, );
            if ( 0 == status ){
                
                
                if(status == 0){
                    
                    self->_Cobject = new v8::MaybeLocal();
                    
                        
                }
            }
        }
    }
    {
        PyObject * tmp = NULL;
        (void)tmp;
         
        static char *kwlist[] = { "Anon_1", NULL};
        
        PyObject* Anon_1 = NULL;
        
            
        if ( 0 != status ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &Anon_1);
            if ( 0 == status  && Anon_1){
                
                
                if(status == 0){
                    
                   v8::MaybeLocal<v8::Int32> const& Anon_1_C = *((v8___MaybeLocal_v8__Int32_*)Anon_1)->_Cobject;
    
                    self->_Cobject = new v8::MaybeLocal(Anon_1_C);
                    
                        
                }
            }
        }
    }
    if (status != 0){
       self->_Cobject = NULL;
       status = 0;
    }
    return status;
}


static PyObject*
v8___MaybeLocal_v8__Int32___IsEmpty(v8___MaybeLocal_v8__Int32_* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->IsEmpty();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___MaybeLocal_v8__Int32___ToLocalChecked(v8___MaybeLocal_v8__Int32_* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->ToLocalChecked();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___MaybeLocal_v8__Int32___FromMaybe(v8___MaybeLocal_v8__Int32_* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* default_value = NULL;
        
        static char *kwlist[] = { "default_value", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &default_value);
            if ( 0 == status  && default_value){
                    
                    
                if (!checkType(&v8___Local_v8__Int32_Type, default_value )){ status = -1;}
    
                        
                   v8::Local<v8::Int32>& default_value_C = *((v8___Local_v8__Int32_*)default_value)->_Cobject;
    
                        if( 0 == status ){
                        self->_Cobject->FromMaybe(default_value_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        

static void
v8___MaybeLocal_v8__Array__dealloc(v8___MaybeLocal_v8__Array_* self)
{
    if(!self) return;
    if (!self->_is_c_reference){
        delete self->_Cobject;
    }
    self->_Cobject = NULL;
    self->_owner = NULL;
    self->_is_c_reference = false;
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject *
v8___MaybeLocal_v8__Array__new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
    v8___MaybeLocal_v8__Array_ *self;

    self = (v8___MaybeLocal_v8__Array_ *)type->tp_alloc(type, 0);
    if (self != NULL) {
        self->_Cobject = NULL;
        self->_owner = NULL;
    }

    return (PyObject *)self;
}       

static int
v8___MaybeLocal_v8__Array__init(v8___MaybeLocal_v8__Array_ *self, PyObject *args, PyObject *kwds)
{
    int status = -1;
    if(!self) return status;
    self->_owner = (PyObject*)self;
    self->_Cobject = new v8___MaybeLocal_v8__Array_();
    status = self->get_Cobject(self)?0:-1; 
    if (status != 0){
       self->_Cobject = NULL;
       status = 0;
    }
    return status;
}



static void
v8___MaybeLocal_v8__Map__dealloc(v8___MaybeLocal_v8__Map_* self)
{
    if(!self) return;
    if (!self->_is_c_reference){
        delete self->_Cobject;
    }
    self->_Cobject = NULL;
    self->_owner = NULL;
    self->_is_c_reference = false;
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject *
v8___MaybeLocal_v8__Map__new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
    v8___MaybeLocal_v8__Map_ *self;

    self = (v8___MaybeLocal_v8__Map_ *)type->tp_alloc(type, 0);
    if (self != NULL) {
        self->_Cobject = NULL;
        self->_owner = NULL;
    }

    return (PyObject *)self;
}       

static int
v8___MaybeLocal_v8__Map__init(v8___MaybeLocal_v8__Map_ *self, PyObject *args, PyObject *kwds)
{
    int status = -1;
    if(!self) return status;
    self->_owner = (PyObject*)self;
    self->_Cobject = new v8___MaybeLocal_v8__Map_();
    status = self->get_Cobject(self)?0:-1; 
    if (status != 0){
       self->_Cobject = NULL;
       status = 0;
    }
    return status;
}



static void
v8___MaybeLocal_v8__Set__dealloc(v8___MaybeLocal_v8__Set_* self)
{
    if(!self) return;
    if (!self->_is_c_reference){
        delete self->_Cobject;
    }
    self->_Cobject = NULL;
    self->_owner = NULL;
    self->_is_c_reference = false;
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject *
v8___MaybeLocal_v8__Set__new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
    v8___MaybeLocal_v8__Set_ *self;

    self = (v8___MaybeLocal_v8__Set_ *)type->tp_alloc(type, 0);
    if (self != NULL) {
        self->_Cobject = NULL;
        self->_owner = NULL;
    }

    return (PyObject *)self;
}       

static int
v8___MaybeLocal_v8__Set__init(v8___MaybeLocal_v8__Set_ *self, PyObject *args, PyObject *kwds)
{
    int status = -1;
    if(!self) return status;
    self->_owner = (PyObject*)self;
    self->_Cobject = new v8___MaybeLocal_v8__Set_();
    status = self->get_Cobject(self)?0:-1; 
    if (status != 0){
       self->_Cobject = NULL;
       status = 0;
    }
    return status;
}



static void
v8___MaybeLocal_v8__Promise__Resolver__dealloc(v8___MaybeLocal_v8__Promise__Resolver_* self)
{
    if(!self) return;
    if (!self->_is_c_reference){
        delete self->_Cobject;
    }
    self->_Cobject = NULL;
    self->_owner = NULL;
    self->_is_c_reference = false;
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject *
v8___MaybeLocal_v8__Promise__Resolver__new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
    v8___MaybeLocal_v8__Promise__Resolver_ *self;

    self = (v8___MaybeLocal_v8__Promise__Resolver_ *)type->tp_alloc(type, 0);
    if (self != NULL) {
        self->_Cobject = NULL;
        self->_owner = NULL;
    }

    return (PyObject *)self;
}       

static int
v8___MaybeLocal_v8__Promise__Resolver__init(v8___MaybeLocal_v8__Promise__Resolver_ *self, PyObject *args, PyObject *kwds)
{
    int status = -1;
    if(!self) return status;
    self->_owner = (PyObject*)self;
    self->_Cobject = new v8___MaybeLocal_v8__Promise__Resolver_();
    status = self->get_Cobject(self)?0:-1; 
    if (status != 0){
       self->_Cobject = NULL;
       status = 0;
    }
    return status;
}



static void
v8___MaybeLocal_v8__Promise__dealloc(v8___MaybeLocal_v8__Promise_* self)
{
    if(!self) return;
    if (!self->_is_c_reference){
        delete self->_Cobject;
    }
    self->_Cobject = NULL;
    self->_owner = NULL;
    self->_is_c_reference = false;
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject *
v8___MaybeLocal_v8__Promise__new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
    v8___MaybeLocal_v8__Promise_ *self;

    self = (v8___MaybeLocal_v8__Promise_ *)type->tp_alloc(type, 0);
    if (self != NULL) {
        self->_Cobject = NULL;
        self->_owner = NULL;
    }

    return (PyObject *)self;
}       

static int
v8___MaybeLocal_v8__Promise__init(v8___MaybeLocal_v8__Promise_ *self, PyObject *args, PyObject *kwds)
{
    int status = -1;
    if(!self) return status;
    self->_owner = (PyObject*)self;
    self->_Cobject = new v8___MaybeLocal_v8__Promise_();
    status = self->get_Cobject(self)?0:-1; 
    if (status != 0){
       self->_Cobject = NULL;
       status = 0;
    }
    return status;
}



static void
v8___MaybeLocal_v8__RegExp__dealloc(v8___MaybeLocal_v8__RegExp_* self)
{
    if(!self) return;
    if (!self->_is_c_reference){
        delete self->_Cobject;
    }
    self->_Cobject = NULL;
    self->_owner = NULL;
    self->_is_c_reference = false;
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject *
v8___MaybeLocal_v8__RegExp__new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
    v8___MaybeLocal_v8__RegExp_ *self;

    self = (v8___MaybeLocal_v8__RegExp_ *)type->tp_alloc(type, 0);
    if (self != NULL) {
        self->_Cobject = NULL;
        self->_owner = NULL;
    }

    return (PyObject *)self;
}       

static int
v8___MaybeLocal_v8__RegExp__init(v8___MaybeLocal_v8__RegExp_ *self, PyObject *args, PyObject *kwds)
{
    int status = -1;
    if(!self) return status;
    self->_owner = (PyObject*)self;
    self->_Cobject = new v8___MaybeLocal_v8__RegExp_();
    status = self->get_Cobject(self)?0:-1; 
    if (status != 0){
       self->_Cobject = NULL;
       status = 0;
    }
    return status;
}



static void
v8___NonCopyablePersistentTraits_v8__Value__dealloc(v8___NonCopyablePersistentTraits_v8__Value_* self)
{
    if(!self) return;
    if (!self->_is_c_reference){
        delete self->_Cobject;
    }
    self->_Cobject = NULL;
    self->_owner = NULL;
    self->_is_c_reference = false;
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject *
v8___NonCopyablePersistentTraits_v8__Value__new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
    v8___NonCopyablePersistentTraits_v8__Value_ *self;

    self = (v8___NonCopyablePersistentTraits_v8__Value_ *)type->tp_alloc(type, 0);
    if (self != NULL) {
        self->_Cobject = NULL;
        self->_owner = NULL;
    }

    return (PyObject *)self;
}       

static int
v8___NonCopyablePersistentTraits_v8__Value__init(v8___NonCopyablePersistentTraits_v8__Value_ *self, PyObject *args, PyObject *kwds)
{
    int status = -1;
    if(!self) return status;
    self->_owner = (PyObject*)self;
    self->_Cobject = new v8___NonCopyablePersistentTraits_v8__Value_();
    status = self->get_Cobject(self)?0:-1; 
    if (status != 0){
       self->_Cobject = NULL;
       status = 0;
    }
    return status;
}



static void
v8___PersistentBase_v8__Value__dealloc(v8___PersistentBase_v8__Value_* self)
{
    if(!self) return;
    if (!self->_is_c_reference){
        delete self->_Cobject;
    }
    self->_Cobject = NULL;
    self->_owner = NULL;
    self->_is_c_reference = false;
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject *
v8___PersistentBase_v8__Value__new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
    v8___PersistentBase_v8__Value_ *self;

    self = (v8___PersistentBase_v8__Value_ *)type->tp_alloc(type, 0);
    if (self != NULL) {
        self->_Cobject = NULL;
        self->_owner = NULL;
    }

    return (PyObject *)self;
}       

static int
v8___PersistentBase_v8__Value__init(v8___PersistentBase_v8__Value_ *self, PyObject *args, PyObject *kwds)
{
    int status = -1;
    if(!self) return status;
    self->_owner = (PyObject*)self;
    self->_Cobject = new v8___PersistentBase_v8__Value_();
    status = self->get_Cobject(self)?0:-1; 
    if (status != 0){
       self->_Cobject = NULL;
       status = 0;
    }
    return status;
}



static void
v8___PersistentBase_v8__Integer__dealloc(v8___PersistentBase_v8__Integer_* self)
{
    if(!self) return;
    if (!self->_is_c_reference){
        delete self->_Cobject;
    }
    self->_Cobject = NULL;
    self->_owner = NULL;
    self->_is_c_reference = false;
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject *
v8___PersistentBase_v8__Integer__new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
    v8___PersistentBase_v8__Integer_ *self;

    self = (v8___PersistentBase_v8__Integer_ *)type->tp_alloc(type, 0);
    if (self != NULL) {
        self->_Cobject = NULL;
        self->_owner = NULL;
    }

    return (PyObject *)self;
}       

static int
v8___PersistentBase_v8__Integer__init(v8___PersistentBase_v8__Integer_ *self, PyObject *args, PyObject *kwds)
{
    int status = -1;
    if(!self) return status;
    self->_owner = (PyObject*)self;
    self->_Cobject = new v8___PersistentBase_v8__Integer_();
    status = self->get_Cobject(self)?0:-1; 
    if (status != 0){
       self->_Cobject = NULL;
       status = 0;
    }
    return status;
}



static void
v8___PersistentBase_v8__Boolean__dealloc(v8___PersistentBase_v8__Boolean_* self)
{
    if(!self) return;
    if (!self->_is_c_reference){
        delete self->_Cobject;
    }
    self->_Cobject = NULL;
    self->_owner = NULL;
    self->_is_c_reference = false;
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject *
v8___PersistentBase_v8__Boolean__new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
    v8___PersistentBase_v8__Boolean_ *self;

    self = (v8___PersistentBase_v8__Boolean_ *)type->tp_alloc(type, 0);
    if (self != NULL) {
        self->_Cobject = NULL;
        self->_owner = NULL;
    }

    return (PyObject *)self;
}       

static int
v8___PersistentBase_v8__Boolean__init(v8___PersistentBase_v8__Boolean_ *self, PyObject *args, PyObject *kwds)
{
    int status = -1;
    if(!self) return status;
    self->_owner = (PyObject*)self;
    self->_Cobject = new v8___PersistentBase_v8__Boolean_();
    status = self->get_Cobject(self)?0:-1; 
    if (status != 0){
       self->_Cobject = NULL;
       status = 0;
    }
    return status;
}



static void
v8___PersistentBase_v8__UnboundScript__dealloc(v8___PersistentBase_v8__UnboundScript_* self)
{
    if(!self) return;
    if (!self->_is_c_reference){
        delete self->_Cobject;
    }
    self->_Cobject = NULL;
    self->_owner = NULL;
    self->_is_c_reference = false;
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject *
v8___PersistentBase_v8__UnboundScript__new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
    v8___PersistentBase_v8__UnboundScript_ *self;

    self = (v8___PersistentBase_v8__UnboundScript_ *)type->tp_alloc(type, 0);
    if (self != NULL) {
        self->_Cobject = NULL;
        self->_owner = NULL;
    }

    return (PyObject *)self;
}       

static int
v8___PersistentBase_v8__UnboundScript__init(v8___PersistentBase_v8__UnboundScript_ *self, PyObject *args, PyObject *kwds)
{
    int status = -1;
    if(!self) return status;
    self->_owner = (PyObject*)self;
    self->_Cobject = new v8___PersistentBase_v8__UnboundScript_();
    status = self->get_Cobject(self)?0:-1; 
    if (status != 0){
       self->_Cobject = NULL;
       status = 0;
    }
    return status;
}



static void
v8___PersistentBase_v8__String__dealloc(v8___PersistentBase_v8__String_* self)
{
    if(!self) return;
    if (!self->_is_c_reference){
        delete self->_Cobject;
    }
    self->_Cobject = NULL;
    self->_owner = NULL;
    self->_is_c_reference = false;
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject *
v8___PersistentBase_v8__String__new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
    v8___PersistentBase_v8__String_ *self;

    self = (v8___PersistentBase_v8__String_ *)type->tp_alloc(type, 0);
    if (self != NULL) {
        self->_Cobject = NULL;
        self->_owner = NULL;
    }

    return (PyObject *)self;
}       

static int
v8___PersistentBase_v8__String__init(v8___PersistentBase_v8__String_ *self, PyObject *args, PyObject *kwds)
{
    int status = -1;
    if(!self) return status;
    self->_owner = (PyObject*)self;
    self->_Cobject = new v8___PersistentBase_v8__String_();
    status = self->get_Cobject(self)?0:-1; 
    if (status != 0){
       self->_Cobject = NULL;
       status = 0;
    }
    return status;
}



static void
v8___PersistentBase_v8__Object__dealloc(v8___PersistentBase_v8__Object_* self)
{
    if(!self) return;
    if (!self->_is_c_reference){
        delete self->_Cobject;
    }
    self->_Cobject = NULL;
    self->_owner = NULL;
    self->_is_c_reference = false;
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject *
v8___PersistentBase_v8__Object__new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
    v8___PersistentBase_v8__Object_ *self;

    self = (v8___PersistentBase_v8__Object_ *)type->tp_alloc(type, 0);
    if (self != NULL) {
        self->_Cobject = NULL;
        self->_owner = NULL;
    }

    return (PyObject *)self;
}       

static int
v8___PersistentBase_v8__Object__init(v8___PersistentBase_v8__Object_ *self, PyObject *args, PyObject *kwds)
{
    int status = -1;
    if(!self) return status;
    self->_owner = (PyObject*)self;
    
    if (status != 0){
       self->_Cobject = NULL;
       status = 0;
    }
    return status;
}


static PyObject*
v8___PersistentBase_v8__Object___Reset(v8___PersistentBase_v8__Object_* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->Reset();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___PersistentBase_v8__Object___IsEmpty(v8___PersistentBase_v8__Object_* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->IsEmpty();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___PersistentBase_v8__Object___Empty(v8___PersistentBase_v8__Object_* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->Empty();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___PersistentBase_v8__Object___ClearWeak(v8___PersistentBase_v8__Object_* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->ClearWeak();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___PersistentBase_v8__Object___MarkIndependent(v8___PersistentBase_v8__Object_* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->MarkIndependent();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___PersistentBase_v8__Object___MarkPartiallyDependent(v8___PersistentBase_v8__Object_* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->MarkPartiallyDependent();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___PersistentBase_v8__Object___IsIndependent(v8___PersistentBase_v8__Object_* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->IsIndependent();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___PersistentBase_v8__Object___IsNearDeath(v8___PersistentBase_v8__Object_* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->IsNearDeath();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___PersistentBase_v8__Object___IsWeak(v8___PersistentBase_v8__Object_* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->IsWeak();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___PersistentBase_v8__Object___SetWrapperClassId(v8___PersistentBase_v8__Object_* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* class_id = NULL;
        
        static char *kwlist[] = { "class_id", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &class_id);
            if ( 0 == status ){
                    
                    
                if(!PyInt_Check(class_id)){ status = -1;}
            
                        
                    short unsigned intclass_id_C = PyInt_Check(class_id)? PyInt_AsLong(class_id):PyLong_AsLong(class_id);     
                
                        if( 0 == status ){
                        self->_Cobject->SetWrapperClassId(class_id_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___PersistentBase_v8__Object___WrapperClassId(v8___PersistentBase_v8__Object_* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->WrapperClassId();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        

static void
v8___PersistentBase_v8__Function__dealloc(v8___PersistentBase_v8__Function_* self)
{
    if(!self) return;
    if (!self->_is_c_reference){
        delete self->_Cobject;
    }
    self->_Cobject = NULL;
    self->_owner = NULL;
    self->_is_c_reference = false;
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject *
v8___PersistentBase_v8__Function__new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
    v8___PersistentBase_v8__Function_ *self;

    self = (v8___PersistentBase_v8__Function_ *)type->tp_alloc(type, 0);
    if (self != NULL) {
        self->_Cobject = NULL;
        self->_owner = NULL;
    }

    return (PyObject *)self;
}       

static int
v8___PersistentBase_v8__Function__init(v8___PersistentBase_v8__Function_ *self, PyObject *args, PyObject *kwds)
{
    int status = -1;
    if(!self) return status;
    self->_owner = (PyObject*)self;
    self->_Cobject = new v8___PersistentBase_v8__Function_();
    status = self->get_Cobject(self)?0:-1; 
    if (status != 0){
       self->_Cobject = NULL;
       status = 0;
    }
    return status;
}



static void
v8___PersistentBase_v8__Context__dealloc(v8___PersistentBase_v8__Context_* self)
{
    if(!self) return;
    if (!self->_is_c_reference){
        delete self->_Cobject;
    }
    self->_Cobject = NULL;
    self->_owner = NULL;
    self->_is_c_reference = false;
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject *
v8___PersistentBase_v8__Context__new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
    v8___PersistentBase_v8__Context_ *self;

    self = (v8___PersistentBase_v8__Context_ *)type->tp_alloc(type, 0);
    if (self != NULL) {
        self->_Cobject = NULL;
        self->_owner = NULL;
    }

    return (PyObject *)self;
}       

static int
v8___PersistentBase_v8__Context__init(v8___PersistentBase_v8__Context_ *self, PyObject *args, PyObject *kwds)
{
    int status = -1;
    if(!self) return status;
    self->_owner = (PyObject*)self;
    self->_Cobject = new v8___PersistentBase_v8__Context_();
    status = self->get_Cobject(self)?0:-1; 
    if (status != 0){
       self->_Cobject = NULL;
       status = 0;
    }
    return status;
}



static void
v8___PersistentBase_v8__FunctionTemplate__dealloc(v8___PersistentBase_v8__FunctionTemplate_* self)
{
    if(!self) return;
    if (!self->_is_c_reference){
        delete self->_Cobject;
    }
    self->_Cobject = NULL;
    self->_owner = NULL;
    self->_is_c_reference = false;
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject *
v8___PersistentBase_v8__FunctionTemplate__new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
    v8___PersistentBase_v8__FunctionTemplate_ *self;

    self = (v8___PersistentBase_v8__FunctionTemplate_ *)type->tp_alloc(type, 0);
    if (self != NULL) {
        self->_Cobject = NULL;
        self->_owner = NULL;
    }

    return (PyObject *)self;
}       

static int
v8___PersistentBase_v8__FunctionTemplate__init(v8___PersistentBase_v8__FunctionTemplate_ *self, PyObject *args, PyObject *kwds)
{
    int status = -1;
    if(!self) return status;
    self->_owner = (PyObject*)self;
    self->_Cobject = new v8___PersistentBase_v8__FunctionTemplate_();
    status = self->get_Cobject(self)?0:-1; 
    if (status != 0){
       self->_Cobject = NULL;
       status = 0;
    }
    return status;
}



static void
v8___PersistentBase_v8__AccessorSignature__dealloc(v8___PersistentBase_v8__AccessorSignature_* self)
{
    if(!self) return;
    if (!self->_is_c_reference){
        delete self->_Cobject;
    }
    self->_Cobject = NULL;
    self->_owner = NULL;
    self->_is_c_reference = false;
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject *
v8___PersistentBase_v8__AccessorSignature__new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
    v8___PersistentBase_v8__AccessorSignature_ *self;

    self = (v8___PersistentBase_v8__AccessorSignature_ *)type->tp_alloc(type, 0);
    if (self != NULL) {
        self->_Cobject = NULL;
        self->_owner = NULL;
    }

    return (PyObject *)self;
}       

static int
v8___PersistentBase_v8__AccessorSignature__init(v8___PersistentBase_v8__AccessorSignature_ *self, PyObject *args, PyObject *kwds)
{
    int status = -1;
    if(!self) return status;
    self->_owner = (PyObject*)self;
    self->_Cobject = new v8___PersistentBase_v8__AccessorSignature_();
    status = self->get_Cobject(self)?0:-1; 
    if (status != 0){
       self->_Cobject = NULL;
       status = 0;
    }
    return status;
}



static void
v8___PersistentBase_v8__Signature__dealloc(v8___PersistentBase_v8__Signature_* self)
{
    if(!self) return;
    if (!self->_is_c_reference){
        delete self->_Cobject;
    }
    self->_Cobject = NULL;
    self->_owner = NULL;
    self->_is_c_reference = false;
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject *
v8___PersistentBase_v8__Signature__new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
    v8___PersistentBase_v8__Signature_ *self;

    self = (v8___PersistentBase_v8__Signature_ *)type->tp_alloc(type, 0);
    if (self != NULL) {
        self->_Cobject = NULL;
        self->_owner = NULL;
    }

    return (PyObject *)self;
}       

static int
v8___PersistentBase_v8__Signature__init(v8___PersistentBase_v8__Signature_ *self, PyObject *args, PyObject *kwds)
{
    int status = -1;
    if(!self) return status;
    self->_owner = (PyObject*)self;
    self->_Cobject = new v8___PersistentBase_v8__Signature_();
    status = self->get_Cobject(self)?0:-1; 
    if (status != 0){
       self->_Cobject = NULL;
       status = 0;
    }
    return status;
}



static void
v8___PersistentBase_v8__Promise__dealloc(v8___PersistentBase_v8__Promise_* self)
{
    if(!self) return;
    if (!self->_is_c_reference){
        delete self->_Cobject;
    }
    self->_Cobject = NULL;
    self->_owner = NULL;
    self->_is_c_reference = false;
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject *
v8___PersistentBase_v8__Promise__new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
    v8___PersistentBase_v8__Promise_ *self;

    self = (v8___PersistentBase_v8__Promise_ *)type->tp_alloc(type, 0);
    if (self != NULL) {
        self->_Cobject = NULL;
        self->_owner = NULL;
    }

    return (PyObject *)self;
}       

static int
v8___PersistentBase_v8__Promise__init(v8___PersistentBase_v8__Promise_ *self, PyObject *args, PyObject *kwds)
{
    int status = -1;
    if(!self) return status;
    self->_owner = (PyObject*)self;
    self->_Cobject = new v8___PersistentBase_v8__Promise_();
    status = self->get_Cobject(self)?0:-1; 
    if (status != 0){
       self->_Cobject = NULL;
       status = 0;
    }
    return status;
}



static void
v8___PersistentBase_v8__StackTrace__dealloc(v8___PersistentBase_v8__StackTrace_* self)
{
    if(!self) return;
    if (!self->_is_c_reference){
        delete self->_Cobject;
    }
    self->_Cobject = NULL;
    self->_owner = NULL;
    self->_is_c_reference = false;
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject *
v8___PersistentBase_v8__StackTrace__new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
    v8___PersistentBase_v8__StackTrace_ *self;

    self = (v8___PersistentBase_v8__StackTrace_ *)type->tp_alloc(type, 0);
    if (self != NULL) {
        self->_Cobject = NULL;
        self->_owner = NULL;
    }

    return (PyObject *)self;
}       

static int
v8___PersistentBase_v8__StackTrace__init(v8___PersistentBase_v8__StackTrace_ *self, PyObject *args, PyObject *kwds)
{
    int status = -1;
    if(!self) return status;
    self->_owner = (PyObject*)self;
    self->_Cobject = new v8___PersistentBase_v8__StackTrace_();
    status = self->get_Cobject(self)?0:-1; 
    if (status != 0){
       self->_Cobject = NULL;
       status = 0;
    }
    return status;
}



static void
v8___PersistentBase_v8__ObjectTemplate__dealloc(v8___PersistentBase_v8__ObjectTemplate_* self)
{
    if(!self) return;
    if (!self->_is_c_reference){
        delete self->_Cobject;
    }
    self->_Cobject = NULL;
    self->_owner = NULL;
    self->_is_c_reference = false;
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject *
v8___PersistentBase_v8__ObjectTemplate__new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
    v8___PersistentBase_v8__ObjectTemplate_ *self;

    self = (v8___PersistentBase_v8__ObjectTemplate_ *)type->tp_alloc(type, 0);
    if (self != NULL) {
        self->_Cobject = NULL;
        self->_owner = NULL;
    }

    return (PyObject *)self;
}       

static int
v8___PersistentBase_v8__ObjectTemplate__init(v8___PersistentBase_v8__ObjectTemplate_ *self, PyObject *args, PyObject *kwds)
{
    int status = -1;
    if(!self) return status;
    self->_owner = (PyObject*)self;
    self->_Cobject = new v8___PersistentBase_v8__ObjectTemplate_();
    status = self->get_Cobject(self)?0:-1; 
    if (status != 0){
       self->_Cobject = NULL;
       status = 0;
    }
    return status;
}



static void
v8___PersistentBase_v8__Data__dealloc(v8___PersistentBase_v8__Data_* self)
{
    if(!self) return;
    if (!self->_is_c_reference){
        delete self->_Cobject;
    }
    self->_Cobject = NULL;
    self->_owner = NULL;
    self->_is_c_reference = false;
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject *
v8___PersistentBase_v8__Data__new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
    v8___PersistentBase_v8__Data_ *self;

    self = (v8___PersistentBase_v8__Data_ *)type->tp_alloc(type, 0);
    if (self != NULL) {
        self->_Cobject = NULL;
        self->_owner = NULL;
    }

    return (PyObject *)self;
}       

static int
v8___PersistentBase_v8__Data__init(v8___PersistentBase_v8__Data_ *self, PyObject *args, PyObject *kwds)
{
    int status = -1;
    if(!self) return status;
    self->_owner = (PyObject*)self;
    self->_Cobject = new v8___PersistentBase_v8__Data_();
    status = self->get_Cobject(self)?0:-1; 
    if (status != 0){
       self->_Cobject = NULL;
       status = 0;
    }
    return status;
}



static void
v8___PersistentBase_v8__Name__dealloc(v8___PersistentBase_v8__Name_* self)
{
    if(!self) return;
    if (!self->_is_c_reference){
        delete self->_Cobject;
    }
    self->_Cobject = NULL;
    self->_owner = NULL;
    self->_is_c_reference = false;
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject *
v8___PersistentBase_v8__Name__new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
    v8___PersistentBase_v8__Name_ *self;

    self = (v8___PersistentBase_v8__Name_ *)type->tp_alloc(type, 0);
    if (self != NULL) {
        self->_Cobject = NULL;
        self->_owner = NULL;
    }

    return (PyObject *)self;
}       

static int
v8___PersistentBase_v8__Name__init(v8___PersistentBase_v8__Name_ *self, PyObject *args, PyObject *kwds)
{
    int status = -1;
    if(!self) return status;
    self->_owner = (PyObject*)self;
    self->_Cobject = new v8___PersistentBase_v8__Name_();
    status = self->get_Cobject(self)?0:-1; 
    if (status != 0){
       self->_Cobject = NULL;
       status = 0;
    }
    return status;
}



static void
v8___PersistentBase_v8__Number__dealloc(v8___PersistentBase_v8__Number_* self)
{
    if(!self) return;
    if (!self->_is_c_reference){
        delete self->_Cobject;
    }
    self->_Cobject = NULL;
    self->_owner = NULL;
    self->_is_c_reference = false;
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject *
v8___PersistentBase_v8__Number__new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
    v8___PersistentBase_v8__Number_ *self;

    self = (v8___PersistentBase_v8__Number_ *)type->tp_alloc(type, 0);
    if (self != NULL) {
        self->_Cobject = NULL;
        self->_owner = NULL;
    }

    return (PyObject *)self;
}       

static int
v8___PersistentBase_v8__Number__init(v8___PersistentBase_v8__Number_ *self, PyObject *args, PyObject *kwds)
{
    int status = -1;
    if(!self) return status;
    self->_owner = (PyObject*)self;
    self->_Cobject = new v8___PersistentBase_v8__Number_();
    status = self->get_Cobject(self)?0:-1; 
    if (status != 0){
       self->_Cobject = NULL;
       status = 0;
    }
    return status;
}



static void
v8___PersistentBase_v8__Uint32__dealloc(v8___PersistentBase_v8__Uint32_* self)
{
    if(!self) return;
    if (!self->_is_c_reference){
        delete self->_Cobject;
    }
    self->_Cobject = NULL;
    self->_owner = NULL;
    self->_is_c_reference = false;
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject *
v8___PersistentBase_v8__Uint32__new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
    v8___PersistentBase_v8__Uint32_ *self;

    self = (v8___PersistentBase_v8__Uint32_ *)type->tp_alloc(type, 0);
    if (self != NULL) {
        self->_Cobject = NULL;
        self->_owner = NULL;
    }

    return (PyObject *)self;
}       

static int
v8___PersistentBase_v8__Uint32__init(v8___PersistentBase_v8__Uint32_ *self, PyObject *args, PyObject *kwds)
{
    int status = -1;
    if(!self) return status;
    self->_owner = (PyObject*)self;
    self->_Cobject = new v8___PersistentBase_v8__Uint32_();
    status = self->get_Cobject(self)?0:-1; 
    if (status != 0){
       self->_Cobject = NULL;
       status = 0;
    }
    return status;
}



static void
v8___PersistentBase_v8__Int32__dealloc(v8___PersistentBase_v8__Int32_* self)
{
    if(!self) return;
    if (!self->_is_c_reference){
        delete self->_Cobject;
    }
    self->_Cobject = NULL;
    self->_owner = NULL;
    self->_is_c_reference = false;
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject *
v8___PersistentBase_v8__Int32__new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
    v8___PersistentBase_v8__Int32_ *self;

    self = (v8___PersistentBase_v8__Int32_ *)type->tp_alloc(type, 0);
    if (self != NULL) {
        self->_Cobject = NULL;
        self->_owner = NULL;
    }

    return (PyObject *)self;
}       

static int
v8___PersistentBase_v8__Int32__init(v8___PersistentBase_v8__Int32_ *self, PyObject *args, PyObject *kwds)
{
    int status = -1;
    if(!self) return status;
    self->_owner = (PyObject*)self;
    self->_Cobject = new v8___PersistentBase_v8__Int32_();
    status = self->get_Cobject(self)?0:-1; 
    if (status != 0){
       self->_Cobject = NULL;
       status = 0;
    }
    return status;
}



static void
v8___PersistentBase_v8__Primitive__dealloc(v8___PersistentBase_v8__Primitive_* self)
{
    if(!self) return;
    if (!self->_is_c_reference){
        delete self->_Cobject;
    }
    self->_Cobject = NULL;
    self->_owner = NULL;
    self->_is_c_reference = false;
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject *
v8___PersistentBase_v8__Primitive__new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
    v8___PersistentBase_v8__Primitive_ *self;

    self = (v8___PersistentBase_v8__Primitive_ *)type->tp_alloc(type, 0);
    if (self != NULL) {
        self->_Cobject = NULL;
        self->_owner = NULL;
    }

    return (PyObject *)self;
}       

static int
v8___PersistentBase_v8__Primitive__init(v8___PersistentBase_v8__Primitive_ *self, PyObject *args, PyObject *kwds)
{
    int status = -1;
    if(!self) return status;
    self->_owner = (PyObject*)self;
    self->_Cobject = new v8___PersistentBase_v8__Primitive_();
    status = self->get_Cobject(self)?0:-1; 
    if (status != 0){
       self->_Cobject = NULL;
       status = 0;
    }
    return status;
}



static void
v8___Persistent_v8__Value__v8__NonCopyablePersistentTraits_v8__Value____dealloc(v8___Persistent_v8__Value__v8__NonCopyablePersistentTraits_v8__Value___* self)
{
    if(!self) return;
    if (!self->_is_c_reference){
        delete self->_Cobject;
    }
    self->_Cobject = NULL;
    self->_owner = NULL;
    self->_is_c_reference = false;
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject *
v8___Persistent_v8__Value__v8__NonCopyablePersistentTraits_v8__Value____new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
    v8___Persistent_v8__Value__v8__NonCopyablePersistentTraits_v8__Value___ *self;

    self = (v8___Persistent_v8__Value__v8__NonCopyablePersistentTraits_v8__Value___ *)type->tp_alloc(type, 0);
    if (self != NULL) {
        self->_Cobject = NULL;
        self->_owner = NULL;
    }

    return (PyObject *)self;
}       

static int
v8___Persistent_v8__Value__v8__NonCopyablePersistentTraits_v8__Value____init(v8___Persistent_v8__Value__v8__NonCopyablePersistentTraits_v8__Value___ *self, PyObject *args, PyObject *kwds)
{
    int status = -1;
    if(!self) return status;
    self->_owner = (PyObject*)self;
    self->_Cobject = new v8___Persistent_v8__Value__v8__NonCopyablePersistentTraits_v8__Value___();
    status = self->get_Cobject(self)?0:-1; 
    if (status != 0){
       self->_Cobject = NULL;
       status = 0;
    }
    return status;
}



static void
v8___FunctionCallbackInfo_v8__Value__dealloc(v8___FunctionCallbackInfo_v8__Value_* self)
{
    if(!self) return;
    if (!self->_is_c_reference){
        delete self->_Cobject;
    }
    self->_Cobject = NULL;
    self->_owner = NULL;
    self->_is_c_reference = false;
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject *
v8___FunctionCallbackInfo_v8__Value__new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
    v8___FunctionCallbackInfo_v8__Value_ *self;

    self = (v8___FunctionCallbackInfo_v8__Value_ *)type->tp_alloc(type, 0);
    if (self != NULL) {
        self->_Cobject = NULL;
        self->_owner = NULL;
    }

    return (PyObject *)self;
}       

static int
v8___FunctionCallbackInfo_v8__Value__init(v8___FunctionCallbackInfo_v8__Value_ *self, PyObject *args, PyObject *kwds)
{
    int status = -1;
    if(!self) return status;
    self->_owner = (PyObject*)self;
    self->_Cobject = new v8___FunctionCallbackInfo_v8__Value_();
    status = self->get_Cobject(self)?0:-1; 
    if (status != 0){
       self->_Cobject = NULL;
       status = 0;
    }
    return status;
}



static void
v8___PropertyCallbackInfo_v8__Value__dealloc(v8___PropertyCallbackInfo_v8__Value_* self)
{
    if(!self) return;
    if (!self->_is_c_reference){
        delete self->_Cobject;
    }
    self->_Cobject = NULL;
    self->_owner = NULL;
    self->_is_c_reference = false;
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject *
v8___PropertyCallbackInfo_v8__Value__new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
    v8___PropertyCallbackInfo_v8__Value_ *self;

    self = (v8___PropertyCallbackInfo_v8__Value_ *)type->tp_alloc(type, 0);
    if (self != NULL) {
        self->_Cobject = NULL;
        self->_owner = NULL;
    }

    return (PyObject *)self;
}       

static int
v8___PropertyCallbackInfo_v8__Value__init(v8___PropertyCallbackInfo_v8__Value_ *self, PyObject *args, PyObject *kwds)
{
    int status = -1;
    if(!self) return status;
    self->_owner = (PyObject*)self;
    self->_Cobject = new v8___PropertyCallbackInfo_v8__Value_();
    status = self->get_Cobject(self)?0:-1; 
    if (status != 0){
       self->_Cobject = NULL;
       status = 0;
    }
    return status;
}



static void
v8___PropertyCallbackInfo_void__dealloc(v8___PropertyCallbackInfo_void_* self)
{
    if(!self) return;
    if (!self->_is_c_reference){
        delete self->_Cobject;
    }
    self->_Cobject = NULL;
    self->_owner = NULL;
    self->_is_c_reference = false;
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject *
v8___PropertyCallbackInfo_void__new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
    v8___PropertyCallbackInfo_void_ *self;

    self = (v8___PropertyCallbackInfo_void_ *)type->tp_alloc(type, 0);
    if (self != NULL) {
        self->_Cobject = NULL;
        self->_owner = NULL;
    }

    return (PyObject *)self;
}       

static int
v8___PropertyCallbackInfo_void__init(v8___PropertyCallbackInfo_void_ *self, PyObject *args, PyObject *kwds)
{
    int status = -1;
    if(!self) return status;
    self->_owner = (PyObject*)self;
    self->_Cobject = new v8___PropertyCallbackInfo_void_();
    status = self->get_Cobject(self)?0:-1; 
    if (status != 0){
       self->_Cobject = NULL;
       status = 0;
    }
    return status;
}



static void
v8___PropertyCallbackInfo_v8__Integer__dealloc(v8___PropertyCallbackInfo_v8__Integer_* self)
{
    if(!self) return;
    if (!self->_is_c_reference){
        delete self->_Cobject;
    }
    self->_Cobject = NULL;
    self->_owner = NULL;
    self->_is_c_reference = false;
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject *
v8___PropertyCallbackInfo_v8__Integer__new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
    v8___PropertyCallbackInfo_v8__Integer_ *self;

    self = (v8___PropertyCallbackInfo_v8__Integer_ *)type->tp_alloc(type, 0);
    if (self != NULL) {
        self->_Cobject = NULL;
        self->_owner = NULL;
    }

    return (PyObject *)self;
}       

static int
v8___PropertyCallbackInfo_v8__Integer__init(v8___PropertyCallbackInfo_v8__Integer_ *self, PyObject *args, PyObject *kwds)
{
    int status = -1;
    if(!self) return status;
    self->_owner = (PyObject*)self;
    self->_Cobject = new v8___PropertyCallbackInfo_v8__Integer_();
    status = self->get_Cobject(self)?0:-1; 
    if (status != 0){
       self->_Cobject = NULL;
       status = 0;
    }
    return status;
}



static void
v8___PropertyCallbackInfo_v8__Boolean__dealloc(v8___PropertyCallbackInfo_v8__Boolean_* self)
{
    if(!self) return;
    if (!self->_is_c_reference){
        delete self->_Cobject;
    }
    self->_Cobject = NULL;
    self->_owner = NULL;
    self->_is_c_reference = false;
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject *
v8___PropertyCallbackInfo_v8__Boolean__new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
    v8___PropertyCallbackInfo_v8__Boolean_ *self;

    self = (v8___PropertyCallbackInfo_v8__Boolean_ *)type->tp_alloc(type, 0);
    if (self != NULL) {
        self->_Cobject = NULL;
        self->_owner = NULL;
    }

    return (PyObject *)self;
}       

static int
v8___PropertyCallbackInfo_v8__Boolean__init(v8___PropertyCallbackInfo_v8__Boolean_ *self, PyObject *args, PyObject *kwds)
{
    int status = -1;
    if(!self) return status;
    self->_owner = (PyObject*)self;
    self->_Cobject = new v8___PropertyCallbackInfo_v8__Boolean_();
    status = self->get_Cobject(self)?0:-1; 
    if (status != 0){
       self->_Cobject = NULL;
       status = 0;
    }
    return status;
}



static void
v8___PropertyCallbackInfo_v8__Array__dealloc(v8___PropertyCallbackInfo_v8__Array_* self)
{
    if(!self) return;
    if (!self->_is_c_reference){
        delete self->_Cobject;
    }
    self->_Cobject = NULL;
    self->_owner = NULL;
    self->_is_c_reference = false;
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject *
v8___PropertyCallbackInfo_v8__Array__new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
    v8___PropertyCallbackInfo_v8__Array_ *self;

    self = (v8___PropertyCallbackInfo_v8__Array_ *)type->tp_alloc(type, 0);
    if (self != NULL) {
        self->_Cobject = NULL;
        self->_owner = NULL;
    }

    return (PyObject *)self;
}       

static int
v8___PropertyCallbackInfo_v8__Array__init(v8___PropertyCallbackInfo_v8__Array_ *self, PyObject *args, PyObject *kwds)
{
    int status = -1;
    if(!self) return status;
    self->_owner = (PyObject*)self;
    self->_Cobject = new v8___PropertyCallbackInfo_v8__Array_();
    status = self->get_Cobject(self)?0:-1; 
    if (status != 0){
       self->_Cobject = NULL;
       status = 0;
    }
    return status;
}



static void
v8___CallHandlerHelper_dealloc(v8___CallHandlerHelper* self)
{
    if(!self) return;
    if (!self->_is_c_reference){
        delete self->_Cobject;
    }
    self->_Cobject = NULL;
    self->_owner = NULL;
    self->_is_c_reference = false;
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject *
v8___CallHandlerHelper_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
    v8___CallHandlerHelper *self;

    self = (v8___CallHandlerHelper *)type->tp_alloc(type, 0);
    if (self != NULL) {
        self->_Cobject = NULL;
        self->_owner = NULL;
    }

    return (PyObject *)self;
}       

static int
v8___CallHandlerHelper_init(v8___CallHandlerHelper *self, PyObject *args, PyObject *kwds)
{
    int status = -1;
    if(!self) return status;
    self->_owner = (PyObject*)self;
    self->_Cobject = new v8___CallHandlerHelper();
    status = self->get_Cobject(self)?0:-1; 
    if (status != 0){
       self->_Cobject = NULL;
       status = 0;
    }
    return status;
}



static void
v8___EscapableHandleScope_dealloc(v8___EscapableHandleScope* self)
{
    if(!self) return;
    if (!self->_is_c_reference){
        delete self->_Cobject;
    }
    self->_Cobject = NULL;
    self->_owner = NULL;
    self->_is_c_reference = false;
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject *
v8___EscapableHandleScope_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
    v8___EscapableHandleScope *self;

    self = (v8___EscapableHandleScope *)type->tp_alloc(type, 0);
    if (self != NULL) {
        self->_Cobject = NULL;
        self->_owner = NULL;
    }

    return (PyObject *)self;
}       

static int
v8___EscapableHandleScope_init(v8___EscapableHandleScope *self, PyObject *args, PyObject *kwds)
{
    int status = -1;
    if(!self) return status;
    self->_owner = (PyObject*)self;
    
    {
        PyObject * tmp = NULL;
        (void)tmp;
         
        static char *kwlist[] = { "isolate", NULL};
        
        PyObject* isolate = NULL;
        
            
        if ( 0 != status ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &isolate);
            if ( 0 == status  && isolate){
                
                
                if(status == 0){
                    
                   v8::Isolate * isolate_C = ((v8___Isolate*)isolate)->_Cobject;
    
                    self->_Cobject = new v8::EscapableHandleScope(isolate_C);
                    
                        
                }
            }
        }
    }
    if (status != 0){
       self->_Cobject = NULL;
       status = 0;
    }
    return status;
}



static void
v8___UniqueId_dealloc(v8___UniqueId* self)
{
    if(!self) return;
    if (!self->_is_c_reference){
        delete self->_Cobject;
    }
    self->_Cobject = NULL;
    self->_owner = NULL;
    self->_is_c_reference = false;
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject *
v8___UniqueId_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
    v8___UniqueId *self;

    self = (v8___UniqueId *)type->tp_alloc(type, 0);
    if (self != NULL) {
        self->_Cobject = NULL;
        self->_owner = NULL;
    }

    return (PyObject *)self;
}       

static int
v8___UniqueId_init(v8___UniqueId *self, PyObject *args, PyObject *kwds)
{
    int status = -1;
    if(!self) return status;
    self->_owner = (PyObject*)self;
    
    {
        PyObject * tmp = NULL;
        (void)tmp;
         
        static char *kwlist[] = { "data", NULL};
        
        PyObject* data = NULL;
        
            
        if ( 0 != status ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &data);
            if ( 0 == status ){
                
                
                if(status == 0){
                    
                    long intdata_C = PyInt_Check(data)? PyInt_AsLong(data):PyLong_AsLong(data);     
                
                    self->_Cobject = new v8::UniqueId(data_C);
                    
                        
                }
            }
        }
    }
    {
        PyObject * tmp = NULL;
        (void)tmp;
         
        static char *kwlist[] = { "Anon_1", NULL};
        
        PyObject* Anon_1 = NULL;
        
            
        if ( 0 != status ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &Anon_1);
            if ( 0 == status  && Anon_1){
                
                
                if(status == 0){
                    
                   v8::UniqueId const& Anon_1_C = *((v8___UniqueId*)Anon_1)->_Cobject;
    
                    self->_Cobject = new v8::UniqueId(Anon_1_C);
                    
                        
                }
            }
        }
    }
    if (status != 0){
       self->_Cobject = NULL;
       status = 0;
    }
    return status;
}



static void
v8___WeakCallbackInfo_void__dealloc(v8___WeakCallbackInfo_void_* self)
{
    if(!self) return;
    if (!self->_is_c_reference){
        delete self->_Cobject;
    }
    self->_Cobject = NULL;
    self->_owner = NULL;
    self->_is_c_reference = false;
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject *
v8___WeakCallbackInfo_void__new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
    v8___WeakCallbackInfo_void_ *self;

    self = (v8___WeakCallbackInfo_void_ *)type->tp_alloc(type, 0);
    if (self != NULL) {
        self->_Cobject = NULL;
        self->_owner = NULL;
    }

    return (PyObject *)self;
}       

static int
v8___WeakCallbackInfo_void__init(v8___WeakCallbackInfo_void_ *self, PyObject *args, PyObject *kwds)
{
    int status = -1;
    if(!self) return status;
    self->_owner = (PyObject*)self;
    
    {
        PyObject * tmp = NULL;
        (void)tmp;
         
        static char *kwlist[] = { "isolate""parameter""internal_fields""callback", NULL};
        
        PyObject* isolate = NULL;
        
        PyObject* parameter = NULL;
        
        PyObject* internal_fields = NULL;
        
        PyObject* callback = NULL;
        
            
        if ( 0 != status ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OOOO", kwlist, &isolate,&parameter,&internal_fields,&callback);
            if ( 0 == status  && isolate && parameter && internal_fields && callback){
                
        if(!(callback && (PyFunction_Check( callback) || callback->tp_call) ) ){ status = -1;}
    
                
                if(status == 0){
                    
                   v8::Isolate * isolate_C = ((v8___Isolate*)isolate)->_Cobject;
    
                         
                
                         
                v8___WeakCallbackInfo<void>___Callback_CL * wrapperCB = new v8___WeakCallbackInfo<void>___Callback_CL( callback) ;
            callback_C = wrapperCB->get_C_callback();       
            //TODO: FIX MEMORY LEAK!
    
                    self->_Cobject = new v8::WeakCallbackInfo(isolate_C,parameter_C,internal_fields_C,callback_C);
                    
                        
                }
            }
        }
    }
    {
        PyObject * tmp = NULL;
        (void)tmp;
         
        static char *kwlist[] = { "Anon_1", NULL};
        
        PyObject* Anon_1 = NULL;
        
            
        if ( 0 != status ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &Anon_1);
            if ( 0 == status  && Anon_1){
                
                
                if(status == 0){
                    
                   v8::WeakCallbackInfo<void> const& Anon_1_C = *((v8___WeakCallbackInfo_void_*)Anon_1)->_Cobject;
    
                    self->_Cobject = new v8::WeakCallbackInfo(Anon_1_C);
                    
                        
                }
            }
        }
    }
    if (status != 0){
       self->_Cobject = NULL;
       status = 0;
    }
    return status;
}


static PyObject*
v8___WeakCallbackInfo_void___GetIsolate(v8___WeakCallbackInfo_void_* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->GetIsolate();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___WeakCallbackInfo_void___GetParameter(v8___WeakCallbackInfo_void_* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->GetParameter();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___WeakCallbackInfo_void___GetInternalField(v8___WeakCallbackInfo_void_* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* index = NULL;
        
        static char *kwlist[] = { "index", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &index);
            if ( 0 == status ){
                    
                    
                if(!PyInt_Check(index)){ status = -1;}
            
                        
                    intindex_C = PyInt_Check(index)? PyInt_AsLong(index):PyLong_AsLong(index);     
                
                        if( 0 == status ){
                        self->_Cobject->GetInternalField(index_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___WeakCallbackInfo_void___GetInternalField1(v8___WeakCallbackInfo_void_* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->GetInternalField1();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___WeakCallbackInfo_void___GetInternalField2(v8___WeakCallbackInfo_void_* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->GetInternalField2();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___WeakCallbackInfo_void___IsFirstPass(v8___WeakCallbackInfo_void_* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->IsFirstPass();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___WeakCallbackInfo_void___SetSecondPassCallback(v8___WeakCallbackInfo_void_* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* callback = NULL;
        
        static char *kwlist[] = { "callback", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &callback);
            if ( 0 == status  && callback){
                    
                    
        if(!(callback && (PyFunction_Check( callback) || callback->tp_call) ) ){ status = -1;}
    
                        v8___WeakCallbackInfo<void>___Callback_CL * wrapperCB = new v8___WeakCallbackInfo<void>___Callback_CL( callback) ;
            callback_C = wrapperCB->get_C_callback();       
            //TODO: FIX MEMORY LEAK!
    
                        if( 0 == status ){
                        self->_Cobject->SetSecondPassCallback(callback_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        

static void
v8___WeakCallbackData_v8__Value__void__dealloc(v8___WeakCallbackData_v8__Value__void_* self)
{
    if(!self) return;
    if (!self->_is_c_reference){
        delete self->_Cobject;
    }
    self->_Cobject = NULL;
    self->_owner = NULL;
    self->_is_c_reference = false;
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject *
v8___WeakCallbackData_v8__Value__void__new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
    v8___WeakCallbackData_v8__Value__void_ *self;

    self = (v8___WeakCallbackData_v8__Value__void_ *)type->tp_alloc(type, 0);
    if (self != NULL) {
        self->_Cobject = NULL;
        self->_owner = NULL;
    }

    return (PyObject *)self;
}       

static int
v8___WeakCallbackData_v8__Value__void__init(v8___WeakCallbackData_v8__Value__void_ *self, PyObject *args, PyObject *kwds)
{
    int status = -1;
    if(!self) return status;
    self->_owner = (PyObject*)self;
    
    {
        PyObject * tmp = NULL;
        (void)tmp;
         
        static char *kwlist[] = { "isolate""parameter""handle", NULL};
        
        PyObject* isolate = NULL;
        
        PyObject* parameter = NULL;
        
        PyObject* handle = NULL;
        
            
        if ( 0 != status ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OOO", kwlist, &isolate,&parameter,&handle);
            if ( 0 == status  && isolate && parameter && handle){
                
                if (!checkType(&v8___Local_v8__Value_Type, handle )){ status = -1;}
    
                
                if(status == 0){
                    
                   v8::Isolate * isolate_C = ((v8___Isolate*)isolate)->_Cobject;
    
                         
                
                   v8::Local<v8::Value>& handle_C = *((v8___Local_v8__Value_*)handle)->_Cobject;
    
                    self->_Cobject = new v8::WeakCallbackData(isolate_C,parameter_C,handle_C);
                    
                        
                }
            }
        }
    }
    {
        PyObject * tmp = NULL;
        (void)tmp;
         
        static char *kwlist[] = { "Anon_1", NULL};
        
        PyObject* Anon_1 = NULL;
        
            
        if ( 0 != status ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &Anon_1);
            if ( 0 == status  && Anon_1){
                
                
                if(status == 0){
                    
                   v8::WeakCallbackData<v8::Value, void> const& Anon_1_C = *((v8___WeakCallbackData_v8__Value__void_*)Anon_1)->_Cobject;
    
                    self->_Cobject = new v8::WeakCallbackData(Anon_1_C);
                    
                        
                }
            }
        }
    }
    if (status != 0){
       self->_Cobject = NULL;
       status = 0;
    }
    return status;
}


static PyObject*
v8___WeakCallbackData_v8__Value__void___GetIsolate(v8___WeakCallbackData_v8__Value__void_* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->GetIsolate();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___WeakCallbackData_v8__Value__void___GetParameter(v8___WeakCallbackData_v8__Value__void_* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->GetParameter();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___WeakCallbackData_v8__Value__void___GetValue(v8___WeakCallbackData_v8__Value__void_* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->GetValue();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        

static void
v8___HandleScope_dealloc(v8___HandleScope* self)
{
    if(!self) return;
    if (!self->_is_c_reference){
        delete self->_Cobject;
    }
    self->_Cobject = NULL;
    self->_owner = NULL;
    self->_is_c_reference = false;
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject *
v8___HandleScope_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
    v8___HandleScope *self;

    self = (v8___HandleScope *)type->tp_alloc(type, 0);
    if (self != NULL) {
        self->_Cobject = NULL;
        self->_owner = NULL;
    }

    return (PyObject *)self;
}       

static int
v8___HandleScope_init(v8___HandleScope *self, PyObject *args, PyObject *kwds)
{
    int status = -1;
    if(!self) return status;
    self->_owner = (PyObject*)self;
    
    {
        PyObject * tmp = NULL;
        (void)tmp;
         
        static char *kwlist[] = { "isolate", NULL};
        
        PyObject* isolate = NULL;
        
            
        if ( 0 != status ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &isolate);
            if ( 0 == status  && isolate){
                
                
                if(status == 0){
                    
                   v8::Isolate * isolate_C = ((v8___Isolate*)isolate)->_Cobject;
    
                    self->_Cobject = new v8::HandleScope(isolate_C);
                    
                        
                }
            }
        }
    }
    if (status != 0){
       self->_Cobject = NULL;
       status = 0;
    }
    return status;
}


static PyObject*
v8___HandleScope__NumberOfHandles(PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* isolate = NULL;
        
        static char *kwlist[] = { "isolate", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &isolate);
            if ( 0 == status  && isolate){
                    
                    
                if (!checkType(&v8___IsolateType, isolate )){ status = -1;}
    
                        
                   v8::Isolate * isolate_C = ((v8___Isolate*)isolate)->_Cobject;
    
                        if( 0 == status ){
                       int result = v8::HandleScope::NumberOfHandles(isolate_C);
                       result_py = Unknown_type_;
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___HandleScope__GetIsolate(v8___HandleScope* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->GetIsolate();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        

static void
v8___SealHandleScope_dealloc(v8___SealHandleScope* self)
{
    if(!self) return;
    if (!self->_is_c_reference){
        delete self->_Cobject;
    }
    self->_Cobject = NULL;
    self->_owner = NULL;
    self->_is_c_reference = false;
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject *
v8___SealHandleScope_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
    v8___SealHandleScope *self;

    self = (v8___SealHandleScope *)type->tp_alloc(type, 0);
    if (self != NULL) {
        self->_Cobject = NULL;
        self->_owner = NULL;
    }

    return (PyObject *)self;
}       

static int
v8___SealHandleScope_init(v8___SealHandleScope *self, PyObject *args, PyObject *kwds)
{
    int status = -1;
    if(!self) return status;
    self->_owner = (PyObject*)self;
    
    {
        PyObject * tmp = NULL;
        (void)tmp;
         
        static char *kwlist[] = { "isolate", NULL};
        
        PyObject* isolate = NULL;
        
            
        if ( 0 != status ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &isolate);
            if ( 0 == status  && isolate){
                
                
                if(status == 0){
                    
                   v8::Isolate * isolate_C = ((v8___Isolate*)isolate)->_Cobject;
    
                    self->_Cobject = new v8::SealHandleScope(isolate_C);
                    
                        
                }
            }
        }
    }
    if (status != 0){
       self->_Cobject = NULL;
       status = 0;
    }
    return status;
}



static void
v8___ScriptOriginOptions_dealloc(v8___ScriptOriginOptions* self)
{
    if(!self) return;
    if (!self->_is_c_reference){
        delete self->_Cobject;
    }
    self->_Cobject = NULL;
    self->_owner = NULL;
    self->_is_c_reference = false;
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject *
v8___ScriptOriginOptions_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
    v8___ScriptOriginOptions *self;

    self = (v8___ScriptOriginOptions *)type->tp_alloc(type, 0);
    if (self != NULL) {
        self->_Cobject = NULL;
        self->_owner = NULL;
    }

    return (PyObject *)self;
}       

static int
v8___ScriptOriginOptions_init(v8___ScriptOriginOptions *self, PyObject *args, PyObject *kwds)
{
    int status = -1;
    if(!self) return status;
    self->_owner = (PyObject*)self;
    
    {
        PyObject * tmp = NULL;
        (void)tmp;
         
        static char *kwlist[] = { "is_embedder_debug_script""is_shared_cross_origin""is_opaque", NULL};
        
        PyObject* is_embedder_debug_script = NULL;
        
        PyObject* is_shared_cross_origin = NULL;
        
        PyObject* is_opaque = NULL;
        
            
        if ( 0 != status ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OOO", kwlist, &is_embedder_debug_script,&is_shared_cross_origin,&is_opaque);
            if ( 0 == status ){
                
                if(!PyBool_Check(is_shared_cross_origin)){ status = -1;}
            
                if(!PyBool_Check(is_opaque)){ status = -1;}
            
                
                if(status == 0){
                    
                    
                bool  is_embedder_debug_script_C = (PyInt_Check(is_embedder_debug_script)? PyInt_AsLong(is_embedder_debug_script):PyLongAsLong(is_embedder_debug_script))!=0     
                
                    
                bool  is_shared_cross_origin_C = (PyInt_Check(is_shared_cross_origin)? PyInt_AsLong(is_shared_cross_origin):PyLongAsLong(is_shared_cross_origin))!=0     
                
                    
                bool  is_opaque_C = (PyInt_Check(is_opaque)? PyInt_AsLong(is_opaque):PyLongAsLong(is_opaque))!=0     
                
                    self->_Cobject = new v8::ScriptOriginOptions(is_embedder_debug_script_C,is_shared_cross_origin_C,is_opaque_C);
                    Unknown_type_Unknown_type_Unknown_type_
                        
                }
            }
        }
    }
    {
        PyObject * tmp = NULL;
        (void)tmp;
         
        static char *kwlist[] = { "flags", NULL};
        
        PyObject* flags = NULL;
        
            
        if ( 0 != status ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &flags);
            if ( 0 == status ){
                
                
                if(status == 0){
                    
                    intflags_C = PyInt_Check(flags)? PyInt_AsLong(flags):PyLong_AsLong(flags);     
                
                    self->_Cobject = new v8::ScriptOriginOptions(flags_C);
                    Unknown_type_
                        
                }
            }
        }
    }
    {
        PyObject * tmp = NULL;
        (void)tmp;
         
        static char *kwlist[] = { "Anon_1", NULL};
        
        PyObject* Anon_1 = NULL;
        
            
        if ( 0 != status ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &Anon_1);
            if ( 0 == status  && Anon_1){
                
                
                if(status == 0){
                    
                   v8::ScriptOriginOptions const& Anon_1_C = *((v8___ScriptOriginOptions*)Anon_1)->_Cobject;
    
                    self->_Cobject = new v8::ScriptOriginOptions(Anon_1_C);
                    
                        
                }
            }
        }
    }
    if (status != 0){
       self->_Cobject = NULL;
       status = 0;
    }
    return status;
}


static PyObject*
v8___ScriptOriginOptions__IsEmbedderDebugScript(v8___ScriptOriginOptions* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->IsEmbedderDebugScript();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___ScriptOriginOptions__IsSharedCrossOrigin(v8___ScriptOriginOptions* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->IsSharedCrossOrigin();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___ScriptOriginOptions__IsOpaque(v8___ScriptOriginOptions* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->IsOpaque();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___ScriptOriginOptions__Flags(v8___ScriptOriginOptions* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->Flags();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        

static void
v8___ScriptOrigin_dealloc(v8___ScriptOrigin* self)
{
    if(!self) return;
    if (!self->_is_c_reference){
        delete self->_Cobject;
    }
    self->_Cobject = NULL;
    self->_owner = NULL;
    self->_is_c_reference = false;
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject *
v8___ScriptOrigin_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
    v8___ScriptOrigin *self;

    self = (v8___ScriptOrigin *)type->tp_alloc(type, 0);
    if (self != NULL) {
        self->_Cobject = NULL;
        self->_owner = NULL;
    }

    return (PyObject *)self;
}       

static int
v8___ScriptOrigin_init(v8___ScriptOrigin *self, PyObject *args, PyObject *kwds)
{
    int status = -1;
    if(!self) return status;
    self->_owner = (PyObject*)self;
    
    {
        PyObject * tmp = NULL;
        (void)tmp;
         
        static char *kwlist[] = { "resource_name""resource_line_offset""resource_column_offset""resource_is_shared_cross_origin""script_id""resource_is_embedder_debug_script""source_map_url""resource_is_opaque", NULL};
        
        PyObject* resource_name = NULL;
        
        PyObject* resource_line_offset = NULL;
        
        PyObject* resource_column_offset = NULL;
        
        PyObject* resource_is_shared_cross_origin = NULL;
        
        PyObject* script_id = NULL;
        
        PyObject* resource_is_embedder_debug_script = NULL;
        
        PyObject* source_map_url = NULL;
        
        PyObject* resource_is_opaque = NULL;
        
            
        if ( 0 != status ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OOOOOOOO", kwlist, &resource_name,&resource_line_offset,&resource_column_offset,&resource_is_shared_cross_origin,&script_id,&resource_is_embedder_debug_script,&source_map_url,&resource_is_opaque);
            if ( 0 == status  && resource_name && resource_line_offset && resource_column_offset && resource_is_shared_cross_origin && script_id && resource_is_embedder_debug_script && source_map_url && resource_is_opaque){
                
                if (!checkType(&v8___Local_v8__Integer_Type, resource_line_offset )){ status = -1;}
    
                if (!checkType(&v8___Local_v8__Integer_Type, resource_column_offset )){ status = -1;}
    
                if (!checkType(&v8___Local_v8__Boolean_Type, resource_is_shared_cross_origin )){ status = -1;}
    
                if (!checkType(&v8___Local_v8__Integer_Type, script_id )){ status = -1;}
    
                if (!checkType(&v8___Local_v8__Boolean_Type, resource_is_embedder_debug_script )){ status = -1;}
    
                if (!checkType(&v8___Local_v8__Value_Type, source_map_url )){ status = -1;}
    
                if (!checkType(&v8___Local_v8__Boolean_Type, resource_is_opaque )){ status = -1;}
    
                
                if(status == 0){
                    
                   v8::Local<v8::Value>& resource_name_C = *((v8___Local_v8__Value_*)resource_name)->_Cobject;
    
                   v8::Local<v8::Integer>& resource_line_offset_C = *((v8___Local_v8__Integer_*)resource_line_offset)->_Cobject;
    
                   v8::Local<v8::Integer>& resource_column_offset_C = *((v8___Local_v8__Integer_*)resource_column_offset)->_Cobject;
    
                   v8::Local<v8::Boolean>& resource_is_shared_cross_origin_C = *((v8___Local_v8__Boolean_*)resource_is_shared_cross_origin)->_Cobject;
    
                   v8::Local<v8::Integer>& script_id_C = *((v8___Local_v8__Integer_*)script_id)->_Cobject;
    
                   v8::Local<v8::Boolean>& resource_is_embedder_debug_script_C = *((v8___Local_v8__Boolean_*)resource_is_embedder_debug_script)->_Cobject;
    
                   v8::Local<v8::Value>& source_map_url_C = *((v8___Local_v8__Value_*)source_map_url)->_Cobject;
    
                   v8::Local<v8::Boolean>& resource_is_opaque_C = *((v8___Local_v8__Boolean_*)resource_is_opaque)->_Cobject;
    
                    self->_Cobject = new v8::ScriptOrigin(resource_name_C,resource_line_offset_C,resource_column_offset_C,resource_is_shared_cross_origin_C,script_id_C,resource_is_embedder_debug_script_C,source_map_url_C,resource_is_opaque_C);
                    
                        
                }
            }
        }
    }
    {
        PyObject * tmp = NULL;
        (void)tmp;
         
        static char *kwlist[] = { "Anon_1", NULL};
        
        PyObject* Anon_1 = NULL;
        
            
        if ( 0 != status ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &Anon_1);
            if ( 0 == status  && Anon_1){
                
                
                if(status == 0){
                    
                   v8::ScriptOrigin const& Anon_1_C = *((v8___ScriptOrigin*)Anon_1)->_Cobject;
    
                    self->_Cobject = new v8::ScriptOrigin(Anon_1_C);
                    
                        
                }
            }
        }
    }
    if (status != 0){
       self->_Cobject = NULL;
       status = 0;
    }
    return status;
}


static PyObject*
v8___ScriptOrigin__ResourceName(v8___ScriptOrigin* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->ResourceName();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___ScriptOrigin__ResourceLineOffset(v8___ScriptOrigin* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->ResourceLineOffset();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___ScriptOrigin__ResourceColumnOffset(v8___ScriptOrigin* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->ResourceColumnOffset();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___ScriptOrigin__ScriptID(v8___ScriptOrigin* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->ScriptID();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___ScriptOrigin__SourceMapUrl(v8___ScriptOrigin* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->SourceMapUrl();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___ScriptOrigin__Options(v8___ScriptOrigin* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->Options();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        

static void
v8___UnboundScript_dealloc(v8___UnboundScript* self)
{
    if(!self) return;
    if (!self->_is_c_reference){
        delete self->_Cobject;
    }
    self->_Cobject = NULL;
    self->_owner = NULL;
    self->_is_c_reference = false;
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject *
v8___UnboundScript_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
    v8___UnboundScript *self;

    self = (v8___UnboundScript *)type->tp_alloc(type, 0);
    if (self != NULL) {
        self->_Cobject = NULL;
        self->_owner = NULL;
    }

    return (PyObject *)self;
}       

static int
v8___UnboundScript_init(v8___UnboundScript *self, PyObject *args, PyObject *kwds)
{
    int status = -1;
    if(!self) return status;
    self->_owner = (PyObject*)self;
    
    {
        PyObject * tmp = NULL;
        (void)tmp;
         
        static char *kwlist[] = {  NULL};
        
            
        if ( 0 != status ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist, );
            if ( 0 == status ){
                
                
                if(status == 0){
                    
                    self->_Cobject = new v8::UnboundScript();
                    
                        
                }
            }
        }
    }
    {
        PyObject * tmp = NULL;
        (void)tmp;
         
        static char *kwlist[] = { "Anon_1", NULL};
        
        PyObject* Anon_1 = NULL;
        
            
        if ( 0 != status ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &Anon_1);
            if ( 0 == status  && Anon_1){
                
                
                if(status == 0){
                    
                   v8::UnboundScript const& Anon_1_C = *((v8___UnboundScript*)Anon_1)->_Cobject;
    
                    self->_Cobject = new v8::UnboundScript(Anon_1_C);
                    
                        
                }
            }
        }
    }
    if (status != 0){
       self->_Cobject = NULL;
       status = 0;
    }
    return status;
}


static PyObject*
v8___UnboundScript__BindToCurrentContext(v8___UnboundScript* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->BindToCurrentContext();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___UnboundScript__GetId(v8___UnboundScript* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->GetId();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___UnboundScript__GetScriptName(v8___UnboundScript* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->GetScriptName();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___UnboundScript__GetSourceURL(v8___UnboundScript* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->GetSourceURL();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___UnboundScript__GetSourceMappingURL(v8___UnboundScript* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->GetSourceMappingURL();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___UnboundScript__GetLineNumber(v8___UnboundScript* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* code_pos = NULL;
        
        static char *kwlist[] = { "code_pos", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &code_pos);
            if ( 0 == status ){
                    
                    
                if(!PyInt_Check(code_pos)){ status = -1;}
            
                        
                    intcode_pos_C = PyInt_Check(code_pos)? PyInt_AsLong(code_pos):PyLong_AsLong(code_pos);     
                
                        if( 0 == status ){
                        self->_Cobject->GetLineNumber(code_pos_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        

static void
v8___ScriptCompiler_dealloc(v8___ScriptCompiler* self)
{
    if(!self) return;
    if (!self->_is_c_reference){
        delete self->_Cobject;
    }
    self->_Cobject = NULL;
    self->_owner = NULL;
    self->_is_c_reference = false;
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject *
v8___ScriptCompiler_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
    v8___ScriptCompiler *self;

    self = (v8___ScriptCompiler *)type->tp_alloc(type, 0);
    if (self != NULL) {
        self->_Cobject = NULL;
        self->_owner = NULL;
    }

    return (PyObject *)self;
}       

static int
v8___ScriptCompiler_init(v8___ScriptCompiler *self, PyObject *args, PyObject *kwds)
{
    int status = -1;
    if(!self) return status;
    self->_owner = (PyObject*)self;
    
    {
        PyObject * tmp = NULL;
        (void)tmp;
         
        static char *kwlist[] = {  NULL};
        
            
        if ( 0 != status ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist, );
            if ( 0 == status ){
                
                
                if(status == 0){
                    
                    self->_Cobject = new v8::ScriptCompiler();
                    
                        
                }
            }
        }
    }
    {
        PyObject * tmp = NULL;
        (void)tmp;
         
        static char *kwlist[] = { "Anon_1", NULL};
        
        PyObject* Anon_1 = NULL;
        
            
        if ( 0 != status ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &Anon_1);
            if ( 0 == status  && Anon_1){
                
                
                if(status == 0){
                    
                   v8::ScriptCompiler const& Anon_1_C = *((v8___ScriptCompiler*)Anon_1)->_Cobject;
    
                    self->_Cobject = new v8::ScriptCompiler(Anon_1_C);
                    
                        
                }
            }
        }
    }
    if (status != 0){
       self->_Cobject = NULL;
       status = 0;
    }
    return status;
}


static PyObject*
v8___ScriptCompiler__CompileUnbound(PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* isolate = NULL;
            PyObject* source = NULL;
            PyObject* options = NULL;
        
        static char *kwlist[] = { "isolate""source""options", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OOO", kwlist, &isolate,&source,&options);
            if ( 0 == status  && isolate && source && options){
                    
                    
                if (!checkType(&v8___IsolateType, isolate )){ status = -1;}
    
                if (!checkType(&v8___SourceType, source )){ status = -1;}
    
    
    
    
    
    
    
  
                        
                   v8::Isolate * isolate_C = ((v8___Isolate*)isolate)->_Cobject;
    
                   v8::Source * source_C = ((v8___Source*)source)->_Cobject;
    
    
    
    
    
    
    
  
                        if( 0 == status ){
                       v8::Local<v8::UnboundScript> result = v8::ScriptCompiler::CompileUnbound(isolate_C, source_C, options_C);
                       result_py = 
                        PyObject_CallObject((PyObject *) & v8___Local_v8__UnboundScript_Type, NULL);
                        if(result_py){
                            delete ((v8___Local_v8__UnboundScript_*) result_py)->_Cobject ;
                            ((v8___Local_v8__UnboundScript_*) result_py)->_Cobject = new v8::Local<v8::UnboundScript>(result);
                        };
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___ScriptCompiler__CompileUnboundScript(PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* isolate = NULL;
            PyObject* source = NULL;
            PyObject* options = NULL;
        
        static char *kwlist[] = { "isolate""source""options", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OOO", kwlist, &isolate,&source,&options);
            if ( 0 == status  && isolate && source && options){
                    
                    
                if (!checkType(&v8___IsolateType, isolate )){ status = -1;}
    
                if (!checkType(&v8___SourceType, source )){ status = -1;}
    
    
    
    
    
    
    
  
                        
                   v8::Isolate * isolate_C = ((v8___Isolate*)isolate)->_Cobject;
    
                   v8::Source * source_C = ((v8___Source*)source)->_Cobject;
    
    
    
    
    
    
    
  
                        if( 0 == status ){
                       v8::MaybeLocal<v8::UnboundScript> result = v8::ScriptCompiler::CompileUnboundScript(isolate_C, source_C, options_C);
                       result_py = 
                        PyObject_CallObject((PyObject *) & v8___MaybeLocal_v8__UnboundScript_Type, NULL);
                        if(result_py){
                            delete ((v8___MaybeLocal_v8__UnboundScript_*) result_py)->_Cobject ;
                            ((v8___MaybeLocal_v8__UnboundScript_*) result_py)->_Cobject = new v8::MaybeLocal<v8::UnboundScript>(result);
                        };
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___ScriptCompiler__Compile(PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* isolate = NULL;
            PyObject* source = NULL;
            PyObject* options = NULL;
        
        static char *kwlist[] = { "isolate""source""options", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OOO", kwlist, &isolate,&source,&options);
            if ( 0 == status  && isolate && source && options){
                    
                    
                if (!checkType(&v8___IsolateType, isolate )){ status = -1;}
    
                if (!checkType(&v8___SourceType, source )){ status = -1;}
    
    
    
    
    
    
    
  
                        
                   v8::Isolate * isolate_C = ((v8___Isolate*)isolate)->_Cobject;
    
                   v8::Source * source_C = ((v8___Source*)source)->_Cobject;
    
    
    
    
    
    
    
  
                        if( 0 == status ){
                       v8::Local<v8::Script> result = v8::ScriptCompiler::Compile(isolate_C, source_C, options_C);
                       result_py = 
                        PyObject_CallObject((PyObject *) & v8___Local_v8__Script_Type, NULL);
                        if(result_py){
                            delete ((v8___Local_v8__Script_*) result_py)->_Cobject ;
                            ((v8___Local_v8__Script_*) result_py)->_Cobject = new v8::Local<v8::Script>(result);
                        };
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    {
        
            PyObject* context = NULL;
            PyObject* source = NULL;
            PyObject* options = NULL;
        
        static char *kwlist[] = { "context""source""options", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OOO", kwlist, &context,&source,&options);
            if ( 0 == status  && context && source && options){
                    
                    
                if (!checkType(&v8___Local_v8__Context_Type, context )){ status = -1;}
    
                if (!checkType(&v8___SourceType, source )){ status = -1;}
    
    
    
    
    
    
    
  
                        
                   v8::Local<v8::Context>& context_C = *((v8___Local_v8__Context_*)context)->_Cobject;
    
                   v8::Source * source_C = ((v8___Source*)source)->_Cobject;
    
    
    
    
    
    
    
  
                        if( 0 == status ){
                       v8::Local<v8::Script> result = v8::ScriptCompiler::Compile(context_C, source_C, options_C);
                       result_py = 
                        PyObject_CallObject((PyObject *) & v8___Local_v8__Script_Type, NULL);
                        if(result_py){
                            delete ((v8___Local_v8__Script_*) result_py)->_Cobject ;
                            ((v8___Local_v8__Script_*) result_py)->_Cobject = new v8::Local<v8::Script>(result);
                        };
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    {
        
            PyObject* isolate = NULL;
            PyObject* source = NULL;
            PyObject* full_source_string = NULL;
            PyObject* origin = NULL;
        
        static char *kwlist[] = { "isolate""source""full_source_string""origin", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OOO", kwlist, &isolate,&source,&full_source_string,&origin);
            if ( 0 == status  && isolate && source && full_source_string && origin){
                    
                    
                if (!checkType(&v8___IsolateType, isolate )){ status = -1;}
    
                if (!checkType(&v8___StreamedSourceType, source )){ status = -1;}
    
                if (!checkType(&v8___Local_v8__String_Type, full_source_string )){ status = -1;}
    
                if (!checkType(&v8___ScriptOriginType, origin )){ status = -1;}
    
                        
                   v8::Isolate * isolate_C = ((v8___Isolate*)isolate)->_Cobject;
    
                   v8::StreamedSource * source_C = ((v8___StreamedSource*)source)->_Cobject;
    
                   v8::Local<v8::String>& full_source_string_C = *((v8___Local_v8__String_*)full_source_string)->_Cobject;
    
                   v8::ScriptOrigin const& origin_C = *((v8___ScriptOrigin*)origin)->_Cobject;
    
                        if( 0 == status ){
                       v8::Local<v8::Script> result = v8::ScriptCompiler::Compile(isolate_C, source_C, full_source_string_C, origin_C);
                       result_py = 
                        PyObject_CallObject((PyObject *) & v8___Local_v8__Script_Type, NULL);
                        if(result_py){
                            delete ((v8___Local_v8__Script_*) result_py)->_Cobject ;
                            ((v8___Local_v8__Script_*) result_py)->_Cobject = new v8::Local<v8::Script>(result);
                        };
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    {
        
            PyObject* context = NULL;
            PyObject* source = NULL;
            PyObject* full_source_string = NULL;
            PyObject* origin = NULL;
        
        static char *kwlist[] = { "context""source""full_source_string""origin", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OOO", kwlist, &context,&source,&full_source_string,&origin);
            if ( 0 == status  && context && source && full_source_string && origin){
                    
                    
                if (!checkType(&v8___Local_v8__Context_Type, context )){ status = -1;}
    
                if (!checkType(&v8___StreamedSourceType, source )){ status = -1;}
    
                if (!checkType(&v8___Local_v8__String_Type, full_source_string )){ status = -1;}
    
                if (!checkType(&v8___ScriptOriginType, origin )){ status = -1;}
    
                        
                   v8::Local<v8::Context>& context_C = *((v8___Local_v8__Context_*)context)->_Cobject;
    
                   v8::StreamedSource * source_C = ((v8___StreamedSource*)source)->_Cobject;
    
                   v8::Local<v8::String>& full_source_string_C = *((v8___Local_v8__String_*)full_source_string)->_Cobject;
    
                   v8::ScriptOrigin const& origin_C = *((v8___ScriptOrigin*)origin)->_Cobject;
    
                        if( 0 == status ){
                       v8::Local<v8::Script> result = v8::ScriptCompiler::Compile(context_C, source_C, full_source_string_C, origin_C);
                       result_py = 
                        PyObject_CallObject((PyObject *) & v8___Local_v8__Script_Type, NULL);
                        if(result_py){
                            delete ((v8___Local_v8__Script_*) result_py)->_Cobject ;
                            ((v8___Local_v8__Script_*) result_py)->_Cobject = new v8::Local<v8::Script>(result);
                        };
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___ScriptCompiler__StartStreamingScript(PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* isolate = NULL;
            PyObject* source = NULL;
            PyObject* options = NULL;
        
        static char *kwlist[] = { "isolate""source""options", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OOO", kwlist, &isolate,&source,&options);
            if ( 0 == status  && isolate && source && options){
                    
                    
                if (!checkType(&v8___IsolateType, isolate )){ status = -1;}
    
                if (!checkType(&v8___StreamedSourceType, source )){ status = -1;}
    
    
    
    
    
    
    
  
                        
                   v8::Isolate * isolate_C = ((v8___Isolate*)isolate)->_Cobject;
    
                   v8::StreamedSource * source_C = ((v8___StreamedSource*)source)->_Cobject;
    
    
    
    
    
    
    
  
                        if( 0 == status ){
                       v8::ScriptStreamingTask * result = v8::ScriptCompiler::StartStreamingScript(isolate_C, source_C, options_C);
                       result_py = 
                       PyObject_CallObject((PyObject *) & v8___ScriptStreamingTaskType, NULL);
                       if(result_py){
                           delete ((v8___ScriptStreamingTask*) result_py)->_Cobject ;
                           ((v8___ScriptStreamingTask*) result_py)->_Cobject = result;
                       };
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___ScriptCompiler__CachedDataVersionTag(PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                       unsigned int result = v8::ScriptCompiler::CachedDataVersionTag();
                       result_py = ;
                    
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___ScriptCompiler__CompileModule(PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* isolate = NULL;
            PyObject* source = NULL;
            PyObject* options = NULL;
        
        static char *kwlist[] = { "isolate""source""options", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OOO", kwlist, &isolate,&source,&options);
            if ( 0 == status  && isolate && source && options){
                    
                    
                if (!checkType(&v8___IsolateType, isolate )){ status = -1;}
    
                if (!checkType(&v8___SourceType, source )){ status = -1;}
    
    
    
    
    
    
    
  
                        
                   v8::Isolate * isolate_C = ((v8___Isolate*)isolate)->_Cobject;
    
                   v8::Source * source_C = ((v8___Source*)source)->_Cobject;
    
    
    
    
    
    
    
  
                        if( 0 == status ){
                       v8::Local<v8::Script> result = v8::ScriptCompiler::CompileModule(isolate_C, source_C, options_C);
                       result_py = 
                        PyObject_CallObject((PyObject *) & v8___Local_v8__Script_Type, NULL);
                        if(result_py){
                            delete ((v8___Local_v8__Script_*) result_py)->_Cobject ;
                            ((v8___Local_v8__Script_*) result_py)->_Cobject = new v8::Local<v8::Script>(result);
                        };
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    {
        
            PyObject* context = NULL;
            PyObject* source = NULL;
            PyObject* options = NULL;
        
        static char *kwlist[] = { "context""source""options", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OOO", kwlist, &context,&source,&options);
            if ( 0 == status  && context && source && options){
                    
                    
                if (!checkType(&v8___Local_v8__Context_Type, context )){ status = -1;}
    
                if (!checkType(&v8___SourceType, source )){ status = -1;}
    
    
    
    
    
    
    
  
                        
                   v8::Local<v8::Context>& context_C = *((v8___Local_v8__Context_*)context)->_Cobject;
    
                   v8::Source * source_C = ((v8___Source*)source)->_Cobject;
    
    
    
    
    
    
    
  
                        if( 0 == status ){
                       v8::Local<v8::Script> result = v8::ScriptCompiler::CompileModule(context_C, source_C, options_C);
                       result_py = 
                        PyObject_CallObject((PyObject *) & v8___Local_v8__Script_Type, NULL);
                        if(result_py){
                            delete ((v8___Local_v8__Script_*) result_py)->_Cobject ;
                            ((v8___Local_v8__Script_*) result_py)->_Cobject = new v8::Local<v8::Script>(result);
                        };
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___ScriptCompiler__CompileFunctionInContext(PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* isolate = NULL;
            PyObject* source = NULL;
            PyObject* context = NULL;
            PyObject* arguments_count = NULL;
            PyObject* arguments = NULL;
            PyObject* context_extension_count = NULL;
            PyObject* context_extensions = NULL;
        
        static char *kwlist[] = { "isolate""source""context""arguments_count""arguments""context_extension_count""context_extensions", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OOOOOOO", kwlist, &isolate,&source,&context,&arguments_count,&arguments,&context_extension_count,&context_extensions);
            if ( 0 == status  && isolate && source && context && arguments && context_extensions){
                    
                    
                if (!checkType(&v8___IsolateType, isolate )){ status = -1;}
    
                if (!checkType(&v8___SourceType, source )){ status = -1;}
    
                if (!checkType(&v8___Local_v8__Context_Type, context )){ status = -1;}
    
            if (!PyLong_Check(arguments_count )){ status = -1; }
                if (!checkType(&v8___Local_v8__String_Type, arguments )){ status = -1;}
    
            if (!PyLong_Check(context_extension_count )){ status = -1; }
                if (!checkType(&v8___Local_v8__Object_Type, context_extensions )){ status = -1;}
    
                        
                   v8::Isolate * isolate_C = ((v8___Isolate*)isolate)->_Cobject;
    
                   v8::Source * source_C = ((v8___Source*)source)->_Cobject;
    
                   v8::Local<v8::Context>& context_C = *((v8___Local_v8__Context_*)context)->_Cobject;
    
                    long unsigned intarguments_count_C = PyInt_Check(arguments_count)? PyInt_AsLong(arguments_count):PyLong_AsLong(arguments_count);
                 
                
                   v8::Local<v8::String> * arguments_C = ((v8___Local_v8__String_*)arguments)->_Cobject;
    
                    long unsigned intcontext_extension_count_C = PyInt_Check(context_extension_count)? PyInt_AsLong(context_extension_count):PyLong_AsLong(context_extension_count);
                 
                
                   v8::Local<v8::Object> * context_extensions_C = ((v8___Local_v8__Object_*)context_extensions)->_Cobject;
    
                        if( 0 == status ){
                       v8::Local<v8::Function> result = v8::ScriptCompiler::CompileFunctionInContext(isolate_C, source_C, context_C, arguments_count_C, arguments_C, context_extension_count_C, context_extensions_C);
                       result_py = 
                        PyObject_CallObject((PyObject *) & v8___Local_v8__Function_Type, NULL);
                        if(result_py){
                            delete ((v8___Local_v8__Function_*) result_py)->_Cobject ;
                            ((v8___Local_v8__Function_*) result_py)->_Cobject = new v8::Local<v8::Function>(result);
                        };
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    {
        
            PyObject* context = NULL;
            PyObject* source = NULL;
            PyObject* arguments_count = NULL;
            PyObject* arguments = NULL;
            PyObject* context_extension_count = NULL;
            PyObject* context_extensions = NULL;
        
        static char *kwlist[] = { "context""source""arguments_count""arguments""context_extension_count""context_extensions", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OOOOOOO", kwlist, &context,&source,&arguments_count,&arguments,&context_extension_count,&context_extensions);
            if ( 0 == status  && context && source && arguments && context_extensions){
                    
                    
                if (!checkType(&v8___Local_v8__Context_Type, context )){ status = -1;}
    
                if (!checkType(&v8___SourceType, source )){ status = -1;}
    
            if (!PyLong_Check(arguments_count )){ status = -1; }
                if (!checkType(&v8___Local_v8__String_Type, arguments )){ status = -1;}
    
            if (!PyLong_Check(context_extension_count )){ status = -1; }
                if (!checkType(&v8___Local_v8__Object_Type, context_extensions )){ status = -1;}
    
                        
                   v8::Local<v8::Context>& context_C = *((v8___Local_v8__Context_*)context)->_Cobject;
    
                   v8::Source * source_C = ((v8___Source*)source)->_Cobject;
    
                    long unsigned intarguments_count_C = PyInt_Check(arguments_count)? PyInt_AsLong(arguments_count):PyLong_AsLong(arguments_count);
                 
                
                   v8::Local<v8::String> * arguments_C = ((v8___Local_v8__String_*)arguments)->_Cobject;
    
                    long unsigned intcontext_extension_count_C = PyInt_Check(context_extension_count)? PyInt_AsLong(context_extension_count):PyLong_AsLong(context_extension_count);
                 
                
                   v8::Local<v8::Object> * context_extensions_C = ((v8___Local_v8__Object_*)context_extensions)->_Cobject;
    
                        if( 0 == status ){
                       v8::Local<v8::Function> result = v8::ScriptCompiler::CompileFunctionInContext(context_C, source_C, arguments_count_C, arguments_C, context_extension_count_C, context_extensions_C);
                       result_py = 
                        PyObject_CallObject((PyObject *) & v8___Local_v8__Function_Type, NULL);
                        if(result_py){
                            delete ((v8___Local_v8__Function_*) result_py)->_Cobject ;
                            ((v8___Local_v8__Function_*) result_py)->_Cobject = new v8::Local<v8::Function>(result);
                        };
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        

static void
v8___Message_dealloc(v8___Message* self)
{
    if(!self) return;
    if (!self->_is_c_reference){
        delete self->_Cobject;
    }
    self->_Cobject = NULL;
    self->_owner = NULL;
    self->_is_c_reference = false;
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject *
v8___Message_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
    v8___Message *self;

    self = (v8___Message *)type->tp_alloc(type, 0);
    if (self != NULL) {
        self->_Cobject = NULL;
        self->_owner = NULL;
    }

    return (PyObject *)self;
}       

static int
v8___Message_init(v8___Message *self, PyObject *args, PyObject *kwds)
{
    int status = -1;
    if(!self) return status;
    self->_owner = (PyObject*)self;
    
    {
        PyObject * tmp = NULL;
        (void)tmp;
         
        static char *kwlist[] = {  NULL};
        
            
        if ( 0 != status ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist, );
            if ( 0 == status ){
                
                
                if(status == 0){
                    
                    self->_Cobject = new v8::Message();
                    
                        
                }
            }
        }
    }
    {
        PyObject * tmp = NULL;
        (void)tmp;
         
        static char *kwlist[] = { "Anon_1", NULL};
        
        PyObject* Anon_1 = NULL;
        
            
        if ( 0 != status ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &Anon_1);
            if ( 0 == status  && Anon_1){
                
                
                if(status == 0){
                    
                   v8::Message const& Anon_1_C = *((v8___Message*)Anon_1)->_Cobject;
    
                    self->_Cobject = new v8::Message(Anon_1_C);
                    
                        
                }
            }
        }
    }
    if (status != 0){
       self->_Cobject = NULL;
       status = 0;
    }
    return status;
}


static PyObject*
v8___Message__Get(v8___Message* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->Get();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Message__GetSourceLine(v8___Message* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->GetSourceLine();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    {
        
            PyObject* context = NULL;
        
        static char *kwlist[] = { "context", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist, &context);
            if ( 0 == status  && context){
                    
                    
                if (!checkType(&v8___Local_v8__Context_Type, context )){ status = -1;}
    
                        
                   v8::Local<v8::Context>& context_C = *((v8___Local_v8__Context_*)context)->_Cobject;
    
                        if( 0 == status ){
                        self->_Cobject->GetSourceLine(context_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Message__GetScriptOrigin(v8___Message* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->GetScriptOrigin();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Message__GetScriptResourceName(v8___Message* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->GetScriptResourceName();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Message__GetStackTrace(v8___Message* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->GetStackTrace();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Message__GetLineNumber(v8___Message* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->GetLineNumber();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    {
        
            PyObject* context = NULL;
        
        static char *kwlist[] = { "context", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist, &context);
            if ( 0 == status  && context){
                    
                    
                if (!checkType(&v8___Local_v8__Context_Type, context )){ status = -1;}
    
                        
                   v8::Local<v8::Context>& context_C = *((v8___Local_v8__Context_*)context)->_Cobject;
    
                        if( 0 == status ){
                        self->_Cobject->GetLineNumber(context_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Message__GetStartPosition(v8___Message* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->GetStartPosition();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Message__GetEndPosition(v8___Message* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->GetEndPosition();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Message__GetStartColumn(v8___Message* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->GetStartColumn();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    {
        
            PyObject* context = NULL;
        
        static char *kwlist[] = { "context", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist, &context);
            if ( 0 == status  && context){
                    
                    
                if (!checkType(&v8___Local_v8__Context_Type, context )){ status = -1;}
    
                        
                   v8::Local<v8::Context>& context_C = *((v8___Local_v8__Context_*)context)->_Cobject;
    
                        if( 0 == status ){
                        self->_Cobject->GetStartColumn(context_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Message__GetEndColumn(v8___Message* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->GetEndColumn();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    {
        
            PyObject* context = NULL;
        
        static char *kwlist[] = { "context", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist, &context);
            if ( 0 == status  && context){
                    
                    
                if (!checkType(&v8___Local_v8__Context_Type, context )){ status = -1;}
    
                        
                   v8::Local<v8::Context>& context_C = *((v8___Local_v8__Context_*)context)->_Cobject;
    
                        if( 0 == status ){
                        self->_Cobject->GetEndColumn(context_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Message__IsSharedCrossOrigin(v8___Message* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->IsSharedCrossOrigin();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Message__IsOpaque(v8___Message* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->IsOpaque();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Message__PrintCurrentStackTrace(PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* isolate = NULL;
            PyObject* out = NULL;
        
        static char *kwlist[] = { "isolate""out", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OO", kwlist, &isolate,&out);
            if ( 0 == status  && isolate && out){
                    
                    
                if (!checkType(&v8___IsolateType, isolate )){ status = -1;}
    
                if (!checkType(&____IO_FILEType, out )){ status = -1;}
    
                        
                   v8::Isolate * isolate_C = ((v8___Isolate*)isolate)->_Cobject;
    
                   ::::_IO_FILE& out_C = *((____IO_FILE*)out)->_Cobject;
    
                        if( 0 == status ){
                        v8::Message::PrintCurrentStackTrace(isolate_C, out_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        

static void
v8___RegisterState_dealloc(v8___RegisterState* self)
{
    if(!self) return;
    if (!self->_is_c_reference){
        delete self->_Cobject;
    }
    self->_Cobject = NULL;
    self->_owner = NULL;
    self->_is_c_reference = false;
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject *
v8___RegisterState_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
    v8___RegisterState *self;

    self = (v8___RegisterState *)type->tp_alloc(type, 0);
    if (self != NULL) {
        self->_Cobject = NULL;
        self->_owner = NULL;
    }

    return (PyObject *)self;
}       

static int
v8___RegisterState_init(v8___RegisterState *self, PyObject *args, PyObject *kwds)
{
    int status = -1;
    if(!self) return status;
    self->_owner = (PyObject*)self;
    
    {
        PyObject * tmp = NULL;
        (void)tmp;
         
        static char *kwlist[] = {  NULL};
        
            
        if ( 0 != status ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist, );
            if ( 0 == status ){
                
                
                if(status == 0){
                    
                    self->_Cobject = new v8::RegisterState();
                    
                        
                }
            }
        }
    }
    {
        PyObject * tmp = NULL;
        (void)tmp;
         
        static char *kwlist[] = { "Anon_1", NULL};
        
        PyObject* Anon_1 = NULL;
        
            
        if ( 0 != status ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &Anon_1);
            if ( 0 == status  && Anon_1){
                
                
                if(status == 0){
                    
                   v8::RegisterState const& Anon_1_C = *((v8___RegisterState*)Anon_1)->_Cobject;
    
                    self->_Cobject = new v8::RegisterState(Anon_1_C);
                    
                        
                }
            }
        }
    }
    if (status != 0){
       self->_Cobject = NULL;
       status = 0;
    }
    return status;
}



static void
v8___SampleInfo_dealloc(v8___SampleInfo* self)
{
    if(!self) return;
    if (!self->_is_c_reference){
        delete self->_Cobject;
    }
    self->_Cobject = NULL;
    self->_owner = NULL;
    self->_is_c_reference = false;
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject *
v8___SampleInfo_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
    v8___SampleInfo *self;

    self = (v8___SampleInfo *)type->tp_alloc(type, 0);
    if (self != NULL) {
        self->_Cobject = NULL;
        self->_owner = NULL;
    }

    return (PyObject *)self;
}       

static int
v8___SampleInfo_init(v8___SampleInfo *self, PyObject *args, PyObject *kwds)
{
    int status = -1;
    if(!self) return status;
    self->_owner = (PyObject*)self;
    
    {
        PyObject * tmp = NULL;
        (void)tmp;
         
        static char *kwlist[] = {  NULL};
        
            
        if ( 0 != status ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist, );
            if ( 0 == status ){
                
                
                if(status == 0){
                    
                    self->_Cobject = new v8::SampleInfo();
                    
                        
                }
            }
        }
    }
    {
        PyObject * tmp = NULL;
        (void)tmp;
         
        static char *kwlist[] = { "Anon_1", NULL};
        
        PyObject* Anon_1 = NULL;
        
            
        if ( 0 != status ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &Anon_1);
            if ( 0 == status  && Anon_1){
                
                
                if(status == 0){
                    
                   v8::SampleInfo const& Anon_1_C = *((v8___SampleInfo*)Anon_1)->_Cobject;
    
                    self->_Cobject = new v8::SampleInfo(Anon_1_C);
                    
                        
                }
            }
        }
    }
    if (status != 0){
       self->_Cobject = NULL;
       status = 0;
    }
    return status;
}



static void
v8___JSON_dealloc(v8___JSON* self)
{
    if(!self) return;
    if (!self->_is_c_reference){
        delete self->_Cobject;
    }
    self->_Cobject = NULL;
    self->_owner = NULL;
    self->_is_c_reference = false;
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject *
v8___JSON_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
    v8___JSON *self;

    self = (v8___JSON *)type->tp_alloc(type, 0);
    if (self != NULL) {
        self->_Cobject = NULL;
        self->_owner = NULL;
    }

    return (PyObject *)self;
}       

static int
v8___JSON_init(v8___JSON *self, PyObject *args, PyObject *kwds)
{
    int status = -1;
    if(!self) return status;
    self->_owner = (PyObject*)self;
    
    {
        PyObject * tmp = NULL;
        (void)tmp;
         
        static char *kwlist[] = {  NULL};
        
            
        if ( 0 != status ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist, );
            if ( 0 == status ){
                
                
                if(status == 0){
                    
                    self->_Cobject = new v8::JSON();
                    
                        
                }
            }
        }
    }
    {
        PyObject * tmp = NULL;
        (void)tmp;
         
        static char *kwlist[] = { "Anon_1", NULL};
        
        PyObject* Anon_1 = NULL;
        
            
        if ( 0 != status ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &Anon_1);
            if ( 0 == status  && Anon_1){
                
                
                if(status == 0){
                    
                   v8::JSON const& Anon_1_C = *((v8___JSON*)Anon_1)->_Cobject;
    
                    self->_Cobject = new v8::JSON(Anon_1_C);
                    
                        
                }
            }
        }
    }
    if (status != 0){
       self->_Cobject = NULL;
       status = 0;
    }
    return status;
}


static PyObject*
v8___JSON__Parse(PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* json_string = NULL;
        
        static char *kwlist[] = { "json_string", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &json_string);
            if ( 0 == status  && json_string){
                    
                    
                if (!checkType(&v8___Local_v8__String_Type, json_string )){ status = -1;}
    
                        
                   v8::Local<v8::String>& json_string_C = *((v8___Local_v8__String_*)json_string)->_Cobject;
    
                        if( 0 == status ){
                       v8::Local<v8::Value> result = v8::JSON::Parse(json_string_C);
                       result_py = 
                        PyObject_CallObject((PyObject *) & v8___Local_v8__Value_Type, NULL);
                        if(result_py){
                            delete ((v8___Local_v8__Value_*) result_py)->_Cobject ;
                            ((v8___Local_v8__Value_*) result_py)->_Cobject = new v8::Local<v8::Value>(result);
                        };
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    {
        
            PyObject* isolate = NULL;
            PyObject* json_string = NULL;
        
        static char *kwlist[] = { "isolate""json_string", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &isolate,&json_string);
            if ( 0 == status  && isolate && json_string){
                    
                    
                if (!checkType(&v8___IsolateType, isolate )){ status = -1;}
    
                if (!checkType(&v8___Local_v8__String_Type, json_string )){ status = -1;}
    
                        
                   v8::Isolate * isolate_C = ((v8___Isolate*)isolate)->_Cobject;
    
                   v8::Local<v8::String>& json_string_C = *((v8___Local_v8__String_*)json_string)->_Cobject;
    
                        if( 0 == status ){
                       v8::Local<v8::Value> result = v8::JSON::Parse(isolate_C, json_string_C);
                       result_py = 
                        PyObject_CallObject((PyObject *) & v8___Local_v8__Value_Type, NULL);
                        if(result_py){
                            delete ((v8___Local_v8__Value_*) result_py)->_Cobject ;
                            ((v8___Local_v8__Value_*) result_py)->_Cobject = new v8::Local<v8::Value>(result);
                        };
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        

static void
v8___NativeWeakMap_dealloc(v8___NativeWeakMap* self)
{
    if(!self) return;
    if (!self->_is_c_reference){
        delete self->_Cobject;
    }
    self->_Cobject = NULL;
    self->_owner = NULL;
    self->_is_c_reference = false;
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject *
v8___NativeWeakMap_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
    v8___NativeWeakMap *self;

    self = (v8___NativeWeakMap *)type->tp_alloc(type, 0);
    if (self != NULL) {
        self->_Cobject = NULL;
        self->_owner = NULL;
    }

    return (PyObject *)self;
}       

static int
v8___NativeWeakMap_init(v8___NativeWeakMap *self, PyObject *args, PyObject *kwds)
{
    int status = -1;
    if(!self) return status;
    self->_owner = (PyObject*)self;
    
    {
        PyObject * tmp = NULL;
        (void)tmp;
         
        static char *kwlist[] = { "Anon_1", NULL};
        
        PyObject* Anon_1 = NULL;
        
            
        if ( 0 != status ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &Anon_1);
            if ( 0 == status  && Anon_1){
                
                
                if(status == 0){
                    
                   v8::NativeWeakMap const& Anon_1_C = *((v8___NativeWeakMap*)Anon_1)->_Cobject;
    
                    self->_Cobject = new v8::NativeWeakMap(Anon_1_C);
                    
                        
                }
            }
        }
    }
    if (status != 0){
       self->_Cobject = NULL;
       status = 0;
    }
    return status;
}


static PyObject*
v8___NativeWeakMap__New(PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* isolate = NULL;
        
        static char *kwlist[] = { "isolate", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &isolate);
            if ( 0 == status  && isolate){
                    
                    
                if (!checkType(&v8___IsolateType, isolate )){ status = -1;}
    
                        
                   v8::Isolate * isolate_C = ((v8___Isolate*)isolate)->_Cobject;
    
                        if( 0 == status ){
                       v8::Local<v8::NativeWeakMap> result = v8::NativeWeakMap::New(isolate_C);
                       result_py = 
                        PyObject_CallObject((PyObject *) & v8___Local_v8__NativeWeakMap_Type, NULL);
                        if(result_py){
                            delete ((v8___Local_v8__NativeWeakMap_*) result_py)->_Cobject ;
                            ((v8___Local_v8__NativeWeakMap_*) result_py)->_Cobject = new v8::Local<v8::NativeWeakMap>(result);
                        };
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___NativeWeakMap__Set(v8___NativeWeakMap* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* key = NULL;
            PyObject* value = NULL;
        
        static char *kwlist[] = { "key""value", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OO", kwlist, &key,&value);
            if ( 0 == status  && key && value){
                    
                    
                if (!checkType(&v8___Local_v8__Value_Type, key )){ status = -1;}
    
                if (!checkType(&v8___Local_v8__Value_Type, value )){ status = -1;}
    
                        
                   v8::Local<v8::Value>& key_C = *((v8___Local_v8__Value_*)key)->_Cobject;
    
                   v8::Local<v8::Value>& value_C = *((v8___Local_v8__Value_*)value)->_Cobject;
    
                        if( 0 == status ){
                        self->_Cobject->Set(key_C, value_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___NativeWeakMap__Get(v8___NativeWeakMap* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* key = NULL;
        
        static char *kwlist[] = { "key", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &key);
            if ( 0 == status  && key){
                    
                    
                if (!checkType(&v8___Local_v8__Value_Type, key )){ status = -1;}
    
                        
                   v8::Local<v8::Value>& key_C = *((v8___Local_v8__Value_*)key)->_Cobject;
    
                        if( 0 == status ){
                        self->_Cobject->Get(key_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___NativeWeakMap__Has(v8___NativeWeakMap* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* key = NULL;
        
        static char *kwlist[] = { "key", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &key);
            if ( 0 == status  && key){
                    
                    
                if (!checkType(&v8___Local_v8__Value_Type, key )){ status = -1;}
    
                        
                   v8::Local<v8::Value>& key_C = *((v8___Local_v8__Value_*)key)->_Cobject;
    
                        if( 0 == status ){
                        self->_Cobject->Has(key_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___NativeWeakMap__Delete(v8___NativeWeakMap* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* key = NULL;
        
        static char *kwlist[] = { "key", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &key);
            if ( 0 == status  && key){
                    
                    
                if (!checkType(&v8___Local_v8__Value_Type, key )){ status = -1;}
    
                        
                   v8::Local<v8::Value>& key_C = *((v8___Local_v8__Value_*)key)->_Cobject;
    
                        if( 0 == status ){
                        self->_Cobject->Delete(key_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        

static void
v8___Map_dealloc(v8___Map* self)
{
    if(!self) return;
    if (!self->_is_c_reference){
        delete self->_Cobject;
    }
    self->_Cobject = NULL;
    self->_owner = NULL;
    self->_is_c_reference = false;
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject *
v8___Map_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
    v8___Map *self;

    self = (v8___Map *)type->tp_alloc(type, 0);
    if (self != NULL) {
        self->_Cobject = NULL;
        self->_owner = NULL;
    }

    return (PyObject *)self;
}       

static int
v8___Map_init(v8___Map *self, PyObject *args, PyObject *kwds)
{
    int status = -1;
    if(!self) return status;
    self->_owner = (PyObject*)self;
    
    {
        PyObject * tmp = NULL;
        (void)tmp;
         
        static char *kwlist[] = { "Anon_1", NULL};
        
        PyObject* Anon_1 = NULL;
        
            
        if ( 0 != status ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &Anon_1);
            if ( 0 == status  && Anon_1){
                
                
                if(status == 0){
                    
                   v8::Map const& Anon_1_C = *((v8___Map*)Anon_1)->_Cobject;
    
                    self->_Cobject = new v8::Map(Anon_1_C);
                    
                        
                }
            }
        }
    }
    if (status != 0){
       self->_Cobject = NULL;
       status = 0;
    }
    return status;
}


static PyObject*
v8___Map__Size(v8___Map* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->Size();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Map__AsArray(v8___Map* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->AsArray();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Map__New(PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* isolate = NULL;
        
        static char *kwlist[] = { "isolate", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &isolate);
            if ( 0 == status  && isolate){
                    
                    
                if (!checkType(&v8___IsolateType, isolate )){ status = -1;}
    
                        
                   v8::Isolate * isolate_C = ((v8___Isolate*)isolate)->_Cobject;
    
                        if( 0 == status ){
                       v8::Local<v8::Map> result = v8::Map::New(isolate_C);
                       result_py = 
                        PyObject_CallObject((PyObject *) & v8___Local_v8__Map_Type, NULL);
                        if(result_py){
                            delete ((v8___Local_v8__Map_*) result_py)->_Cobject ;
                            ((v8___Local_v8__Map_*) result_py)->_Cobject = new v8::Local<v8::Map>(result);
                        };
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Map__FromArray(PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* context = NULL;
            PyObject* array = NULL;
        
        static char *kwlist[] = { "context""array", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OO", kwlist, &context,&array);
            if ( 0 == status  && context && array){
                    
                    
                if (!checkType(&v8___Local_v8__Context_Type, context )){ status = -1;}
    
                if (!checkType(&v8___Local_v8__Array_Type, array )){ status = -1;}
    
                        
                   v8::Local<v8::Context>& context_C = *((v8___Local_v8__Context_*)context)->_Cobject;
    
                   v8::Local<v8::Array>& array_C = *((v8___Local_v8__Array_*)array)->_Cobject;
    
                        if( 0 == status ){
                       v8::MaybeLocal<v8::Map> result = v8::Map::FromArray(context_C, array_C);
                       result_py = 
                        PyObject_CallObject((PyObject *) & v8___MaybeLocal_v8__Map_Type, NULL);
                        if(result_py){
                            delete ((v8___MaybeLocal_v8__Map_*) result_py)->_Cobject ;
                            ((v8___MaybeLocal_v8__Map_*) result_py)->_Cobject = new v8::MaybeLocal<v8::Map>(result);
                        };
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Map__Cast(PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* obj = NULL;
        
        static char *kwlist[] = { "obj", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &obj);
            if ( 0 == status  && obj){
                    
                    
                if (!checkType(&v8___ValueType, obj )){ status = -1;}
    
                        
                   v8::Value * obj_C = ((v8___Value*)obj)->_Cobject;
    
                        if( 0 == status ){
                       v8::Map * result = v8::Map::Cast(obj_C);
                       result_py = 
                       PyObject_CallObject((PyObject *) & v8___MapType, NULL);
                       if(result_py){
                           delete ((v8___Map*) result_py)->_Cobject ;
                           ((v8___Map*) result_py)->_Cobject = result;
                       };
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        

static void
v8___Set_dealloc(v8___Set* self)
{
    if(!self) return;
    if (!self->_is_c_reference){
        delete self->_Cobject;
    }
    self->_Cobject = NULL;
    self->_owner = NULL;
    self->_is_c_reference = false;
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject *
v8___Set_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
    v8___Set *self;

    self = (v8___Set *)type->tp_alloc(type, 0);
    if (self != NULL) {
        self->_Cobject = NULL;
        self->_owner = NULL;
    }

    return (PyObject *)self;
}       

static int
v8___Set_init(v8___Set *self, PyObject *args, PyObject *kwds)
{
    int status = -1;
    if(!self) return status;
    self->_owner = (PyObject*)self;
    
    {
        PyObject * tmp = NULL;
        (void)tmp;
         
        static char *kwlist[] = { "Anon_1", NULL};
        
        PyObject* Anon_1 = NULL;
        
            
        if ( 0 != status ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &Anon_1);
            if ( 0 == status  && Anon_1){
                
                
                if(status == 0){
                    
                   v8::Set const& Anon_1_C = *((v8___Set*)Anon_1)->_Cobject;
    
                    self->_Cobject = new v8::Set(Anon_1_C);
                    
                        
                }
            }
        }
    }
    if (status != 0){
       self->_Cobject = NULL;
       status = 0;
    }
    return status;
}


static PyObject*
v8___Set__Size(v8___Set* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->Size();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Set__AsArray(v8___Set* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->AsArray();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Set__New(PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* isolate = NULL;
        
        static char *kwlist[] = { "isolate", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &isolate);
            if ( 0 == status  && isolate){
                    
                    
                if (!checkType(&v8___IsolateType, isolate )){ status = -1;}
    
                        
                   v8::Isolate * isolate_C = ((v8___Isolate*)isolate)->_Cobject;
    
                        if( 0 == status ){
                       v8::Local<v8::Set> result = v8::Set::New(isolate_C);
                       result_py = 
                        PyObject_CallObject((PyObject *) & v8___Local_v8__Set_Type, NULL);
                        if(result_py){
                            delete ((v8___Local_v8__Set_*) result_py)->_Cobject ;
                            ((v8___Local_v8__Set_*) result_py)->_Cobject = new v8::Local<v8::Set>(result);
                        };
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Set__FromArray(PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* context = NULL;
            PyObject* array = NULL;
        
        static char *kwlist[] = { "context""array", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OO", kwlist, &context,&array);
            if ( 0 == status  && context && array){
                    
                    
                if (!checkType(&v8___Local_v8__Context_Type, context )){ status = -1;}
    
                if (!checkType(&v8___Local_v8__Array_Type, array )){ status = -1;}
    
                        
                   v8::Local<v8::Context>& context_C = *((v8___Local_v8__Context_*)context)->_Cobject;
    
                   v8::Local<v8::Array>& array_C = *((v8___Local_v8__Array_*)array)->_Cobject;
    
                        if( 0 == status ){
                       v8::MaybeLocal<v8::Set> result = v8::Set::FromArray(context_C, array_C);
                       result_py = 
                        PyObject_CallObject((PyObject *) & v8___MaybeLocal_v8__Set_Type, NULL);
                        if(result_py){
                            delete ((v8___MaybeLocal_v8__Set_*) result_py)->_Cobject ;
                            ((v8___MaybeLocal_v8__Set_*) result_py)->_Cobject = new v8::MaybeLocal<v8::Set>(result);
                        };
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Set__Cast(PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* obj = NULL;
        
        static char *kwlist[] = { "obj", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &obj);
            if ( 0 == status  && obj){
                    
                    
                if (!checkType(&v8___ValueType, obj )){ status = -1;}
    
                        
                   v8::Value * obj_C = ((v8___Value*)obj)->_Cobject;
    
                        if( 0 == status ){
                       v8::Set * result = v8::Set::Cast(obj_C);
                       result_py = 
                       PyObject_CallObject((PyObject *) & v8___SetType, NULL);
                       if(result_py){
                           delete ((v8___Set*) result_py)->_Cobject ;
                           ((v8___Set*) result_py)->_Cobject = result;
                       };
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        

static void
v8___ArrayBuffer_dealloc(v8___ArrayBuffer* self)
{
    if(!self) return;
    if (!self->_is_c_reference){
        delete self->_Cobject;
    }
    self->_Cobject = NULL;
    self->_owner = NULL;
    self->_is_c_reference = false;
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject *
v8___ArrayBuffer_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
    v8___ArrayBuffer *self;

    self = (v8___ArrayBuffer *)type->tp_alloc(type, 0);
    if (self != NULL) {
        self->_Cobject = NULL;
        self->_owner = NULL;
    }

    return (PyObject *)self;
}       

static int
v8___ArrayBuffer_init(v8___ArrayBuffer *self, PyObject *args, PyObject *kwds)
{
    int status = -1;
    if(!self) return status;
    self->_owner = (PyObject*)self;
    
    {
        PyObject * tmp = NULL;
        (void)tmp;
         
        static char *kwlist[] = { "Anon_1", NULL};
        
        PyObject* Anon_1 = NULL;
        
            
        if ( 0 != status ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &Anon_1);
            if ( 0 == status  && Anon_1){
                
                
                if(status == 0){
                    
                   v8::ArrayBuffer const& Anon_1_C = *((v8___ArrayBuffer*)Anon_1)->_Cobject;
    
                    self->_Cobject = new v8::ArrayBuffer(Anon_1_C);
                    
                        
                }
            }
        }
    }
    if (status != 0){
       self->_Cobject = NULL;
       status = 0;
    }
    return status;
}


static PyObject*
v8___ArrayBuffer__ByteLength(v8___ArrayBuffer* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->ByteLength();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___ArrayBuffer__New(PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* isolate = NULL;
            PyObject* byte_length = NULL;
        
        static char *kwlist[] = { "isolate""byte_length", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OO", kwlist, &isolate,&byte_length);
            if ( 0 == status  && isolate){
                    
                    
                if (!checkType(&v8___IsolateType, isolate )){ status = -1;}
    
            if (!PyLong_Check(byte_length )){ status = -1; }
                        
                   v8::Isolate * isolate_C = ((v8___Isolate*)isolate)->_Cobject;
    
                    long unsigned intbyte_length_C = PyInt_Check(byte_length)? PyInt_AsLong(byte_length):PyLong_AsLong(byte_length);
                 
                
                        if( 0 == status ){
                       v8::Local<v8::ArrayBuffer> result = v8::ArrayBuffer::New(isolate_C, byte_length_C);
                       result_py = 
                        PyObject_CallObject((PyObject *) & v8___Local_v8__ArrayBuffer_Type, NULL);
                        if(result_py){
                            delete ((v8___Local_v8__ArrayBuffer_*) result_py)->_Cobject ;
                            ((v8___Local_v8__ArrayBuffer_*) result_py)->_Cobject = new v8::Local<v8::ArrayBuffer>(result);
                        };
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    {
        
            PyObject* isolate = NULL;
            PyObject* data = NULL;
            PyObject* byte_length = NULL;
            PyObject* mode = NULL;
        
        static char *kwlist[] = { "isolate""data""byte_length""mode", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OO", kwlist, &isolate,&data,&byte_length,&mode);
            if ( 0 == status  && isolate && data && mode){
                    
                    
                if (!checkType(&v8___IsolateType, isolate )){ status = -1;}
    
            if (!PyLong_Check(byte_length )){ status = -1; }
    
    
  
                        
                   v8::Isolate * isolate_C = ((v8___Isolate*)isolate)->_Cobject;
    
                         
                
                    long unsigned intbyte_length_C = PyInt_Check(byte_length)? PyInt_AsLong(byte_length):PyLong_AsLong(byte_length);
                 
                
    
    
  
                        if( 0 == status ){
                       v8::Local<v8::ArrayBuffer> result = v8::ArrayBuffer::New(isolate_C, data_C, byte_length_C, mode_C);
                       result_py = 
                        PyObject_CallObject((PyObject *) & v8___Local_v8__ArrayBuffer_Type, NULL);
                        if(result_py){
                            delete ((v8___Local_v8__ArrayBuffer_*) result_py)->_Cobject ;
                            ((v8___Local_v8__ArrayBuffer_*) result_py)->_Cobject = new v8::Local<v8::ArrayBuffer>(result);
                        };
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___ArrayBuffer__IsExternal(v8___ArrayBuffer* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->IsExternal();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___ArrayBuffer__IsNeuterable(v8___ArrayBuffer* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->IsNeuterable();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___ArrayBuffer__Neuter(v8___ArrayBuffer* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->Neuter();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___ArrayBuffer__Externalize(v8___ArrayBuffer* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->Externalize();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___ArrayBuffer__GetContents(v8___ArrayBuffer* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->GetContents();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___ArrayBuffer__Cast(PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* obj = NULL;
        
        static char *kwlist[] = { "obj", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &obj);
            if ( 0 == status  && obj){
                    
                    
                if (!checkType(&v8___ValueType, obj )){ status = -1;}
    
                        
                   v8::Value * obj_C = ((v8___Value*)obj)->_Cobject;
    
                        if( 0 == status ){
                       v8::ArrayBuffer * result = v8::ArrayBuffer::Cast(obj_C);
                       result_py = 
                       PyObject_CallObject((PyObject *) & v8___ArrayBufferType, NULL);
                       if(result_py){
                           delete ((v8___ArrayBuffer*) result_py)->_Cobject ;
                           ((v8___ArrayBuffer*) result_py)->_Cobject = result;
                       };
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        

static void
v8___ArrayBufferView_dealloc(v8___ArrayBufferView* self)
{
    if(!self) return;
    if (!self->_is_c_reference){
        delete self->_Cobject;
    }
    self->_Cobject = NULL;
    self->_owner = NULL;
    self->_is_c_reference = false;
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject *
v8___ArrayBufferView_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
    v8___ArrayBufferView *self;

    self = (v8___ArrayBufferView *)type->tp_alloc(type, 0);
    if (self != NULL) {
        self->_Cobject = NULL;
        self->_owner = NULL;
    }

    return (PyObject *)self;
}       

static int
v8___ArrayBufferView_init(v8___ArrayBufferView *self, PyObject *args, PyObject *kwds)
{
    int status = -1;
    if(!self) return status;
    self->_owner = (PyObject*)self;
    
    {
        PyObject * tmp = NULL;
        (void)tmp;
         
        static char *kwlist[] = { "Anon_1", NULL};
        
        PyObject* Anon_1 = NULL;
        
            
        if ( 0 != status ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &Anon_1);
            if ( 0 == status  && Anon_1){
                
                
                if(status == 0){
                    
                   v8::ArrayBufferView const& Anon_1_C = *((v8___ArrayBufferView*)Anon_1)->_Cobject;
    
                    self->_Cobject = new v8::ArrayBufferView(Anon_1_C);
                    
                        
                }
            }
        }
    }
    if (status != 0){
       self->_Cobject = NULL;
       status = 0;
    }
    return status;
}


static PyObject*
v8___ArrayBufferView__Buffer(v8___ArrayBufferView* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->Buffer();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___ArrayBufferView__ByteOffset(v8___ArrayBufferView* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->ByteOffset();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___ArrayBufferView__ByteLength(v8___ArrayBufferView* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->ByteLength();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___ArrayBufferView__CopyContents(v8___ArrayBufferView* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* dest = NULL;
            PyObject* byte_length = NULL;
        
        static char *kwlist[] = { "dest""byte_length", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OO", kwlist, &dest,&byte_length);
            if ( 0 == status  && dest){
                    
                    
            if (!PyLong_Check(byte_length )){ status = -1; }
                        
                         
                
                    long unsigned intbyte_length_C = PyInt_Check(byte_length)? PyInt_AsLong(byte_length):PyLong_AsLong(byte_length);
                 
                
                        if( 0 == status ){
                        self->_Cobject->CopyContents(dest_C, byte_length_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___ArrayBufferView__HasBuffer(v8___ArrayBufferView* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->HasBuffer();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___ArrayBufferView__Cast(PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* obj = NULL;
        
        static char *kwlist[] = { "obj", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &obj);
            if ( 0 == status  && obj){
                    
                    
                if (!checkType(&v8___ValueType, obj )){ status = -1;}
    
                        
                   v8::Value * obj_C = ((v8___Value*)obj)->_Cobject;
    
                        if( 0 == status ){
                       v8::ArrayBufferView * result = v8::ArrayBufferView::Cast(obj_C);
                       result_py = 
                       PyObject_CallObject((PyObject *) & v8___ArrayBufferViewType, NULL);
                       if(result_py){
                           delete ((v8___ArrayBufferView*) result_py)->_Cobject ;
                           ((v8___ArrayBufferView*) result_py)->_Cobject = result;
                       };
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        

static void
v8___TypedArray_dealloc(v8___TypedArray* self)
{
    if(!self) return;
    if (!self->_is_c_reference){
        delete self->_Cobject;
    }
    self->_Cobject = NULL;
    self->_owner = NULL;
    self->_is_c_reference = false;
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject *
v8___TypedArray_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
    v8___TypedArray *self;

    self = (v8___TypedArray *)type->tp_alloc(type, 0);
    if (self != NULL) {
        self->_Cobject = NULL;
        self->_owner = NULL;
    }

    return (PyObject *)self;
}       

static int
v8___TypedArray_init(v8___TypedArray *self, PyObject *args, PyObject *kwds)
{
    int status = -1;
    if(!self) return status;
    self->_owner = (PyObject*)self;
    
    {
        PyObject * tmp = NULL;
        (void)tmp;
         
        static char *kwlist[] = { "Anon_1", NULL};
        
        PyObject* Anon_1 = NULL;
        
            
        if ( 0 != status ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &Anon_1);
            if ( 0 == status  && Anon_1){
                
                
                if(status == 0){
                    
                   v8::TypedArray const& Anon_1_C = *((v8___TypedArray*)Anon_1)->_Cobject;
    
                    self->_Cobject = new v8::TypedArray(Anon_1_C);
                    
                        
                }
            }
        }
    }
    if (status != 0){
       self->_Cobject = NULL;
       status = 0;
    }
    return status;
}


static PyObject*
v8___TypedArray__Length(v8___TypedArray* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->Length();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___TypedArray__Cast(PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* obj = NULL;
        
        static char *kwlist[] = { "obj", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &obj);
            if ( 0 == status  && obj){
                    
                    
                if (!checkType(&v8___ValueType, obj )){ status = -1;}
    
                        
                   v8::Value * obj_C = ((v8___Value*)obj)->_Cobject;
    
                        if( 0 == status ){
                       v8::TypedArray * result = v8::TypedArray::Cast(obj_C);
                       result_py = 
                       PyObject_CallObject((PyObject *) & v8___TypedArrayType, NULL);
                       if(result_py){
                           delete ((v8___TypedArray*) result_py)->_Cobject ;
                           ((v8___TypedArray*) result_py)->_Cobject = result;
                       };
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        

static void
v8___Uint8Array_dealloc(v8___Uint8Array* self)
{
    if(!self) return;
    if (!self->_is_c_reference){
        delete self->_Cobject;
    }
    self->_Cobject = NULL;
    self->_owner = NULL;
    self->_is_c_reference = false;
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject *
v8___Uint8Array_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
    v8___Uint8Array *self;

    self = (v8___Uint8Array *)type->tp_alloc(type, 0);
    if (self != NULL) {
        self->_Cobject = NULL;
        self->_owner = NULL;
    }

    return (PyObject *)self;
}       

static int
v8___Uint8Array_init(v8___Uint8Array *self, PyObject *args, PyObject *kwds)
{
    int status = -1;
    if(!self) return status;
    self->_owner = (PyObject*)self;
    
    {
        PyObject * tmp = NULL;
        (void)tmp;
         
        static char *kwlist[] = { "Anon_1", NULL};
        
        PyObject* Anon_1 = NULL;
        
            
        if ( 0 != status ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &Anon_1);
            if ( 0 == status  && Anon_1){
                
                
                if(status == 0){
                    
                   v8::Uint8Array const& Anon_1_C = *((v8___Uint8Array*)Anon_1)->_Cobject;
    
                    self->_Cobject = new v8::Uint8Array(Anon_1_C);
                    
                        
                }
            }
        }
    }
    if (status != 0){
       self->_Cobject = NULL;
       status = 0;
    }
    return status;
}


static PyObject*
v8___Uint8Array__New(PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* array_buffer = NULL;
            PyObject* byte_offset = NULL;
            PyObject* length = NULL;
        
        static char *kwlist[] = { "array_buffer""byte_offset""length", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OOO", kwlist, &array_buffer,&byte_offset,&length);
            if ( 0 == status  && array_buffer){
                    
                    
                if (!checkType(&v8___Local_v8__ArrayBuffer_Type, array_buffer )){ status = -1;}
    
            if (!PyLong_Check(byte_offset )){ status = -1; }
            if (!PyLong_Check(length )){ status = -1; }
                        
                   v8::Local<v8::ArrayBuffer>& array_buffer_C = *((v8___Local_v8__ArrayBuffer_*)array_buffer)->_Cobject;
    
                    long unsigned intbyte_offset_C = PyInt_Check(byte_offset)? PyInt_AsLong(byte_offset):PyLong_AsLong(byte_offset);
                 
                
                    long unsigned intlength_C = PyInt_Check(length)? PyInt_AsLong(length):PyLong_AsLong(length);
                 
                
                        if( 0 == status ){
                       v8::Local<v8::Uint8Array> result = v8::Uint8Array::New(array_buffer_C, byte_offset_C, length_C);
                       result_py = 
                        PyObject_CallObject((PyObject *) & v8___Local_v8__Uint8Array_Type, NULL);
                        if(result_py){
                            delete ((v8___Local_v8__Uint8Array_*) result_py)->_Cobject ;
                            ((v8___Local_v8__Uint8Array_*) result_py)->_Cobject = new v8::Local<v8::Uint8Array>(result);
                        };
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    {
        
            PyObject* shared_array_buffer = NULL;
            PyObject* byte_offset = NULL;
            PyObject* length = NULL;
        
        static char *kwlist[] = { "shared_array_buffer""byte_offset""length", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OOO", kwlist, &shared_array_buffer,&byte_offset,&length);
            if ( 0 == status  && shared_array_buffer){
                    
                    
                if (!checkType(&v8___Local_v8__SharedArrayBuffer_Type, shared_array_buffer )){ status = -1;}
    
            if (!PyLong_Check(byte_offset )){ status = -1; }
            if (!PyLong_Check(length )){ status = -1; }
                        
                   v8::Local<v8::SharedArrayBuffer>& shared_array_buffer_C = *((v8___Local_v8__SharedArrayBuffer_*)shared_array_buffer)->_Cobject;
    
                    long unsigned intbyte_offset_C = PyInt_Check(byte_offset)? PyInt_AsLong(byte_offset):PyLong_AsLong(byte_offset);
                 
                
                    long unsigned intlength_C = PyInt_Check(length)? PyInt_AsLong(length):PyLong_AsLong(length);
                 
                
                        if( 0 == status ){
                       v8::Local<v8::Uint8Array> result = v8::Uint8Array::New(shared_array_buffer_C, byte_offset_C, length_C);
                       result_py = 
                        PyObject_CallObject((PyObject *) & v8___Local_v8__Uint8Array_Type, NULL);
                        if(result_py){
                            delete ((v8___Local_v8__Uint8Array_*) result_py)->_Cobject ;
                            ((v8___Local_v8__Uint8Array_*) result_py)->_Cobject = new v8::Local<v8::Uint8Array>(result);
                        };
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Uint8Array__Cast(PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* obj = NULL;
        
        static char *kwlist[] = { "obj", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &obj);
            if ( 0 == status  && obj){
                    
                    
                if (!checkType(&v8___ValueType, obj )){ status = -1;}
    
                        
                   v8::Value * obj_C = ((v8___Value*)obj)->_Cobject;
    
                        if( 0 == status ){
                       v8::Uint8Array * result = v8::Uint8Array::Cast(obj_C);
                       result_py = 
                       PyObject_CallObject((PyObject *) & v8___Uint8ArrayType, NULL);
                       if(result_py){
                           delete ((v8___Uint8Array*) result_py)->_Cobject ;
                           ((v8___Uint8Array*) result_py)->_Cobject = result;
                       };
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        

static void
v8___Uint8ClampedArray_dealloc(v8___Uint8ClampedArray* self)
{
    if(!self) return;
    if (!self->_is_c_reference){
        delete self->_Cobject;
    }
    self->_Cobject = NULL;
    self->_owner = NULL;
    self->_is_c_reference = false;
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject *
v8___Uint8ClampedArray_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
    v8___Uint8ClampedArray *self;

    self = (v8___Uint8ClampedArray *)type->tp_alloc(type, 0);
    if (self != NULL) {
        self->_Cobject = NULL;
        self->_owner = NULL;
    }

    return (PyObject *)self;
}       

static int
v8___Uint8ClampedArray_init(v8___Uint8ClampedArray *self, PyObject *args, PyObject *kwds)
{
    int status = -1;
    if(!self) return status;
    self->_owner = (PyObject*)self;
    
    {
        PyObject * tmp = NULL;
        (void)tmp;
         
        static char *kwlist[] = { "Anon_1", NULL};
        
        PyObject* Anon_1 = NULL;
        
            
        if ( 0 != status ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &Anon_1);
            if ( 0 == status  && Anon_1){
                
                
                if(status == 0){
                    
                   v8::Uint8ClampedArray const& Anon_1_C = *((v8___Uint8ClampedArray*)Anon_1)->_Cobject;
    
                    self->_Cobject = new v8::Uint8ClampedArray(Anon_1_C);
                    
                        
                }
            }
        }
    }
    if (status != 0){
       self->_Cobject = NULL;
       status = 0;
    }
    return status;
}


static PyObject*
v8___Uint8ClampedArray__New(PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* array_buffer = NULL;
            PyObject* byte_offset = NULL;
            PyObject* length = NULL;
        
        static char *kwlist[] = { "array_buffer""byte_offset""length", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OOO", kwlist, &array_buffer,&byte_offset,&length);
            if ( 0 == status  && array_buffer){
                    
                    
                if (!checkType(&v8___Local_v8__ArrayBuffer_Type, array_buffer )){ status = -1;}
    
            if (!PyLong_Check(byte_offset )){ status = -1; }
            if (!PyLong_Check(length )){ status = -1; }
                        
                   v8::Local<v8::ArrayBuffer>& array_buffer_C = *((v8___Local_v8__ArrayBuffer_*)array_buffer)->_Cobject;
    
                    long unsigned intbyte_offset_C = PyInt_Check(byte_offset)? PyInt_AsLong(byte_offset):PyLong_AsLong(byte_offset);
                 
                
                    long unsigned intlength_C = PyInt_Check(length)? PyInt_AsLong(length):PyLong_AsLong(length);
                 
                
                        if( 0 == status ){
                       v8::Local<v8::Uint8ClampedArray> result = v8::Uint8ClampedArray::New(array_buffer_C, byte_offset_C, length_C);
                       result_py = 
                        PyObject_CallObject((PyObject *) & v8___Local_v8__Uint8ClampedArray_Type, NULL);
                        if(result_py){
                            delete ((v8___Local_v8__Uint8ClampedArray_*) result_py)->_Cobject ;
                            ((v8___Local_v8__Uint8ClampedArray_*) result_py)->_Cobject = new v8::Local<v8::Uint8ClampedArray>(result);
                        };
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    {
        
            PyObject* shared_array_buffer = NULL;
            PyObject* byte_offset = NULL;
            PyObject* length = NULL;
        
        static char *kwlist[] = { "shared_array_buffer""byte_offset""length", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OOO", kwlist, &shared_array_buffer,&byte_offset,&length);
            if ( 0 == status  && shared_array_buffer){
                    
                    
                if (!checkType(&v8___Local_v8__SharedArrayBuffer_Type, shared_array_buffer )){ status = -1;}
    
            if (!PyLong_Check(byte_offset )){ status = -1; }
            if (!PyLong_Check(length )){ status = -1; }
                        
                   v8::Local<v8::SharedArrayBuffer>& shared_array_buffer_C = *((v8___Local_v8__SharedArrayBuffer_*)shared_array_buffer)->_Cobject;
    
                    long unsigned intbyte_offset_C = PyInt_Check(byte_offset)? PyInt_AsLong(byte_offset):PyLong_AsLong(byte_offset);
                 
                
                    long unsigned intlength_C = PyInt_Check(length)? PyInt_AsLong(length):PyLong_AsLong(length);
                 
                
                        if( 0 == status ){
                       v8::Local<v8::Uint8ClampedArray> result = v8::Uint8ClampedArray::New(shared_array_buffer_C, byte_offset_C, length_C);
                       result_py = 
                        PyObject_CallObject((PyObject *) & v8___Local_v8__Uint8ClampedArray_Type, NULL);
                        if(result_py){
                            delete ((v8___Local_v8__Uint8ClampedArray_*) result_py)->_Cobject ;
                            ((v8___Local_v8__Uint8ClampedArray_*) result_py)->_Cobject = new v8::Local<v8::Uint8ClampedArray>(result);
                        };
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Uint8ClampedArray__Cast(PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* obj = NULL;
        
        static char *kwlist[] = { "obj", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &obj);
            if ( 0 == status  && obj){
                    
                    
                if (!checkType(&v8___ValueType, obj )){ status = -1;}
    
                        
                   v8::Value * obj_C = ((v8___Value*)obj)->_Cobject;
    
                        if( 0 == status ){
                       v8::Uint8ClampedArray * result = v8::Uint8ClampedArray::Cast(obj_C);
                       result_py = 
                       PyObject_CallObject((PyObject *) & v8___Uint8ClampedArrayType, NULL);
                       if(result_py){
                           delete ((v8___Uint8ClampedArray*) result_py)->_Cobject ;
                           ((v8___Uint8ClampedArray*) result_py)->_Cobject = result;
                       };
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        

static void
v8___Int8Array_dealloc(v8___Int8Array* self)
{
    if(!self) return;
    if (!self->_is_c_reference){
        delete self->_Cobject;
    }
    self->_Cobject = NULL;
    self->_owner = NULL;
    self->_is_c_reference = false;
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject *
v8___Int8Array_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
    v8___Int8Array *self;

    self = (v8___Int8Array *)type->tp_alloc(type, 0);
    if (self != NULL) {
        self->_Cobject = NULL;
        self->_owner = NULL;
    }

    return (PyObject *)self;
}       

static int
v8___Int8Array_init(v8___Int8Array *self, PyObject *args, PyObject *kwds)
{
    int status = -1;
    if(!self) return status;
    self->_owner = (PyObject*)self;
    
    {
        PyObject * tmp = NULL;
        (void)tmp;
         
        static char *kwlist[] = { "Anon_1", NULL};
        
        PyObject* Anon_1 = NULL;
        
            
        if ( 0 != status ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &Anon_1);
            if ( 0 == status  && Anon_1){
                
                
                if(status == 0){
                    
                   v8::Int8Array const& Anon_1_C = *((v8___Int8Array*)Anon_1)->_Cobject;
    
                    self->_Cobject = new v8::Int8Array(Anon_1_C);
                    
                        
                }
            }
        }
    }
    if (status != 0){
       self->_Cobject = NULL;
       status = 0;
    }
    return status;
}


static PyObject*
v8___Int8Array__New(PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* array_buffer = NULL;
            PyObject* byte_offset = NULL;
            PyObject* length = NULL;
        
        static char *kwlist[] = { "array_buffer""byte_offset""length", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OOO", kwlist, &array_buffer,&byte_offset,&length);
            if ( 0 == status  && array_buffer){
                    
                    
                if (!checkType(&v8___Local_v8__ArrayBuffer_Type, array_buffer )){ status = -1;}
    
            if (!PyLong_Check(byte_offset )){ status = -1; }
            if (!PyLong_Check(length )){ status = -1; }
                        
                   v8::Local<v8::ArrayBuffer>& array_buffer_C = *((v8___Local_v8__ArrayBuffer_*)array_buffer)->_Cobject;
    
                    long unsigned intbyte_offset_C = PyInt_Check(byte_offset)? PyInt_AsLong(byte_offset):PyLong_AsLong(byte_offset);
                 
                
                    long unsigned intlength_C = PyInt_Check(length)? PyInt_AsLong(length):PyLong_AsLong(length);
                 
                
                        if( 0 == status ){
                       v8::Local<v8::Int8Array> result = v8::Int8Array::New(array_buffer_C, byte_offset_C, length_C);
                       result_py = 
                        PyObject_CallObject((PyObject *) & v8___Local_v8__Int8Array_Type, NULL);
                        if(result_py){
                            delete ((v8___Local_v8__Int8Array_*) result_py)->_Cobject ;
                            ((v8___Local_v8__Int8Array_*) result_py)->_Cobject = new v8::Local<v8::Int8Array>(result);
                        };
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    {
        
            PyObject* shared_array_buffer = NULL;
            PyObject* byte_offset = NULL;
            PyObject* length = NULL;
        
        static char *kwlist[] = { "shared_array_buffer""byte_offset""length", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OOO", kwlist, &shared_array_buffer,&byte_offset,&length);
            if ( 0 == status  && shared_array_buffer){
                    
                    
                if (!checkType(&v8___Local_v8__SharedArrayBuffer_Type, shared_array_buffer )){ status = -1;}
    
            if (!PyLong_Check(byte_offset )){ status = -1; }
            if (!PyLong_Check(length )){ status = -1; }
                        
                   v8::Local<v8::SharedArrayBuffer>& shared_array_buffer_C = *((v8___Local_v8__SharedArrayBuffer_*)shared_array_buffer)->_Cobject;
    
                    long unsigned intbyte_offset_C = PyInt_Check(byte_offset)? PyInt_AsLong(byte_offset):PyLong_AsLong(byte_offset);
                 
                
                    long unsigned intlength_C = PyInt_Check(length)? PyInt_AsLong(length):PyLong_AsLong(length);
                 
                
                        if( 0 == status ){
                       v8::Local<v8::Int8Array> result = v8::Int8Array::New(shared_array_buffer_C, byte_offset_C, length_C);
                       result_py = 
                        PyObject_CallObject((PyObject *) & v8___Local_v8__Int8Array_Type, NULL);
                        if(result_py){
                            delete ((v8___Local_v8__Int8Array_*) result_py)->_Cobject ;
                            ((v8___Local_v8__Int8Array_*) result_py)->_Cobject = new v8::Local<v8::Int8Array>(result);
                        };
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Int8Array__Cast(PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* obj = NULL;
        
        static char *kwlist[] = { "obj", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &obj);
            if ( 0 == status  && obj){
                    
                    
                if (!checkType(&v8___ValueType, obj )){ status = -1;}
    
                        
                   v8::Value * obj_C = ((v8___Value*)obj)->_Cobject;
    
                        if( 0 == status ){
                       v8::Int8Array * result = v8::Int8Array::Cast(obj_C);
                       result_py = 
                       PyObject_CallObject((PyObject *) & v8___Int8ArrayType, NULL);
                       if(result_py){
                           delete ((v8___Int8Array*) result_py)->_Cobject ;
                           ((v8___Int8Array*) result_py)->_Cobject = result;
                       };
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        

static void
v8___Uint16Array_dealloc(v8___Uint16Array* self)
{
    if(!self) return;
    if (!self->_is_c_reference){
        delete self->_Cobject;
    }
    self->_Cobject = NULL;
    self->_owner = NULL;
    self->_is_c_reference = false;
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject *
v8___Uint16Array_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
    v8___Uint16Array *self;

    self = (v8___Uint16Array *)type->tp_alloc(type, 0);
    if (self != NULL) {
        self->_Cobject = NULL;
        self->_owner = NULL;
    }

    return (PyObject *)self;
}       

static int
v8___Uint16Array_init(v8___Uint16Array *self, PyObject *args, PyObject *kwds)
{
    int status = -1;
    if(!self) return status;
    self->_owner = (PyObject*)self;
    
    {
        PyObject * tmp = NULL;
        (void)tmp;
         
        static char *kwlist[] = { "Anon_1", NULL};
        
        PyObject* Anon_1 = NULL;
        
            
        if ( 0 != status ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &Anon_1);
            if ( 0 == status  && Anon_1){
                
                
                if(status == 0){
                    
                   v8::Uint16Array const& Anon_1_C = *((v8___Uint16Array*)Anon_1)->_Cobject;
    
                    self->_Cobject = new v8::Uint16Array(Anon_1_C);
                    
                        
                }
            }
        }
    }
    if (status != 0){
       self->_Cobject = NULL;
       status = 0;
    }
    return status;
}


static PyObject*
v8___Uint16Array__New(PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* array_buffer = NULL;
            PyObject* byte_offset = NULL;
            PyObject* length = NULL;
        
        static char *kwlist[] = { "array_buffer""byte_offset""length", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OOO", kwlist, &array_buffer,&byte_offset,&length);
            if ( 0 == status  && array_buffer){
                    
                    
                if (!checkType(&v8___Local_v8__ArrayBuffer_Type, array_buffer )){ status = -1;}
    
            if (!PyLong_Check(byte_offset )){ status = -1; }
            if (!PyLong_Check(length )){ status = -1; }
                        
                   v8::Local<v8::ArrayBuffer>& array_buffer_C = *((v8___Local_v8__ArrayBuffer_*)array_buffer)->_Cobject;
    
                    long unsigned intbyte_offset_C = PyInt_Check(byte_offset)? PyInt_AsLong(byte_offset):PyLong_AsLong(byte_offset);
                 
                
                    long unsigned intlength_C = PyInt_Check(length)? PyInt_AsLong(length):PyLong_AsLong(length);
                 
                
                        if( 0 == status ){
                       v8::Local<v8::Uint16Array> result = v8::Uint16Array::New(array_buffer_C, byte_offset_C, length_C);
                       result_py = 
                        PyObject_CallObject((PyObject *) & v8___Local_v8__Uint16Array_Type, NULL);
                        if(result_py){
                            delete ((v8___Local_v8__Uint16Array_*) result_py)->_Cobject ;
                            ((v8___Local_v8__Uint16Array_*) result_py)->_Cobject = new v8::Local<v8::Uint16Array>(result);
                        };
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    {
        
            PyObject* shared_array_buffer = NULL;
            PyObject* byte_offset = NULL;
            PyObject* length = NULL;
        
        static char *kwlist[] = { "shared_array_buffer""byte_offset""length", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OOO", kwlist, &shared_array_buffer,&byte_offset,&length);
            if ( 0 == status  && shared_array_buffer){
                    
                    
                if (!checkType(&v8___Local_v8__SharedArrayBuffer_Type, shared_array_buffer )){ status = -1;}
    
            if (!PyLong_Check(byte_offset )){ status = -1; }
            if (!PyLong_Check(length )){ status = -1; }
                        
                   v8::Local<v8::SharedArrayBuffer>& shared_array_buffer_C = *((v8___Local_v8__SharedArrayBuffer_*)shared_array_buffer)->_Cobject;
    
                    long unsigned intbyte_offset_C = PyInt_Check(byte_offset)? PyInt_AsLong(byte_offset):PyLong_AsLong(byte_offset);
                 
                
                    long unsigned intlength_C = PyInt_Check(length)? PyInt_AsLong(length):PyLong_AsLong(length);
                 
                
                        if( 0 == status ){
                       v8::Local<v8::Uint16Array> result = v8::Uint16Array::New(shared_array_buffer_C, byte_offset_C, length_C);
                       result_py = 
                        PyObject_CallObject((PyObject *) & v8___Local_v8__Uint16Array_Type, NULL);
                        if(result_py){
                            delete ((v8___Local_v8__Uint16Array_*) result_py)->_Cobject ;
                            ((v8___Local_v8__Uint16Array_*) result_py)->_Cobject = new v8::Local<v8::Uint16Array>(result);
                        };
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Uint16Array__Cast(PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* obj = NULL;
        
        static char *kwlist[] = { "obj", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &obj);
            if ( 0 == status  && obj){
                    
                    
                if (!checkType(&v8___ValueType, obj )){ status = -1;}
    
                        
                   v8::Value * obj_C = ((v8___Value*)obj)->_Cobject;
    
                        if( 0 == status ){
                       v8::Uint16Array * result = v8::Uint16Array::Cast(obj_C);
                       result_py = 
                       PyObject_CallObject((PyObject *) & v8___Uint16ArrayType, NULL);
                       if(result_py){
                           delete ((v8___Uint16Array*) result_py)->_Cobject ;
                           ((v8___Uint16Array*) result_py)->_Cobject = result;
                       };
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        

static void
v8___Int16Array_dealloc(v8___Int16Array* self)
{
    if(!self) return;
    if (!self->_is_c_reference){
        delete self->_Cobject;
    }
    self->_Cobject = NULL;
    self->_owner = NULL;
    self->_is_c_reference = false;
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject *
v8___Int16Array_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
    v8___Int16Array *self;

    self = (v8___Int16Array *)type->tp_alloc(type, 0);
    if (self != NULL) {
        self->_Cobject = NULL;
        self->_owner = NULL;
    }

    return (PyObject *)self;
}       

static int
v8___Int16Array_init(v8___Int16Array *self, PyObject *args, PyObject *kwds)
{
    int status = -1;
    if(!self) return status;
    self->_owner = (PyObject*)self;
    
    {
        PyObject * tmp = NULL;
        (void)tmp;
         
        static char *kwlist[] = { "Anon_1", NULL};
        
        PyObject* Anon_1 = NULL;
        
            
        if ( 0 != status ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &Anon_1);
            if ( 0 == status  && Anon_1){
                
                
                if(status == 0){
                    
                   v8::Int16Array const& Anon_1_C = *((v8___Int16Array*)Anon_1)->_Cobject;
    
                    self->_Cobject = new v8::Int16Array(Anon_1_C);
                    
                        
                }
            }
        }
    }
    if (status != 0){
       self->_Cobject = NULL;
       status = 0;
    }
    return status;
}


static PyObject*
v8___Int16Array__New(PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* array_buffer = NULL;
            PyObject* byte_offset = NULL;
            PyObject* length = NULL;
        
        static char *kwlist[] = { "array_buffer""byte_offset""length", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OOO", kwlist, &array_buffer,&byte_offset,&length);
            if ( 0 == status  && array_buffer){
                    
                    
                if (!checkType(&v8___Local_v8__ArrayBuffer_Type, array_buffer )){ status = -1;}
    
            if (!PyLong_Check(byte_offset )){ status = -1; }
            if (!PyLong_Check(length )){ status = -1; }
                        
                   v8::Local<v8::ArrayBuffer>& array_buffer_C = *((v8___Local_v8__ArrayBuffer_*)array_buffer)->_Cobject;
    
                    long unsigned intbyte_offset_C = PyInt_Check(byte_offset)? PyInt_AsLong(byte_offset):PyLong_AsLong(byte_offset);
                 
                
                    long unsigned intlength_C = PyInt_Check(length)? PyInt_AsLong(length):PyLong_AsLong(length);
                 
                
                        if( 0 == status ){
                       v8::Local<v8::Int16Array> result = v8::Int16Array::New(array_buffer_C, byte_offset_C, length_C);
                       result_py = 
                        PyObject_CallObject((PyObject *) & v8___Local_v8__Int16Array_Type, NULL);
                        if(result_py){
                            delete ((v8___Local_v8__Int16Array_*) result_py)->_Cobject ;
                            ((v8___Local_v8__Int16Array_*) result_py)->_Cobject = new v8::Local<v8::Int16Array>(result);
                        };
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    {
        
            PyObject* shared_array_buffer = NULL;
            PyObject* byte_offset = NULL;
            PyObject* length = NULL;
        
        static char *kwlist[] = { "shared_array_buffer""byte_offset""length", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OOO", kwlist, &shared_array_buffer,&byte_offset,&length);
            if ( 0 == status  && shared_array_buffer){
                    
                    
                if (!checkType(&v8___Local_v8__SharedArrayBuffer_Type, shared_array_buffer )){ status = -1;}
    
            if (!PyLong_Check(byte_offset )){ status = -1; }
            if (!PyLong_Check(length )){ status = -1; }
                        
                   v8::Local<v8::SharedArrayBuffer>& shared_array_buffer_C = *((v8___Local_v8__SharedArrayBuffer_*)shared_array_buffer)->_Cobject;
    
                    long unsigned intbyte_offset_C = PyInt_Check(byte_offset)? PyInt_AsLong(byte_offset):PyLong_AsLong(byte_offset);
                 
                
                    long unsigned intlength_C = PyInt_Check(length)? PyInt_AsLong(length):PyLong_AsLong(length);
                 
                
                        if( 0 == status ){
                       v8::Local<v8::Int16Array> result = v8::Int16Array::New(shared_array_buffer_C, byte_offset_C, length_C);
                       result_py = 
                        PyObject_CallObject((PyObject *) & v8___Local_v8__Int16Array_Type, NULL);
                        if(result_py){
                            delete ((v8___Local_v8__Int16Array_*) result_py)->_Cobject ;
                            ((v8___Local_v8__Int16Array_*) result_py)->_Cobject = new v8::Local<v8::Int16Array>(result);
                        };
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Int16Array__Cast(PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* obj = NULL;
        
        static char *kwlist[] = { "obj", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &obj);
            if ( 0 == status  && obj){
                    
                    
                if (!checkType(&v8___ValueType, obj )){ status = -1;}
    
                        
                   v8::Value * obj_C = ((v8___Value*)obj)->_Cobject;
    
                        if( 0 == status ){
                       v8::Int16Array * result = v8::Int16Array::Cast(obj_C);
                       result_py = 
                       PyObject_CallObject((PyObject *) & v8___Int16ArrayType, NULL);
                       if(result_py){
                           delete ((v8___Int16Array*) result_py)->_Cobject ;
                           ((v8___Int16Array*) result_py)->_Cobject = result;
                       };
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        

static void
v8___Uint32Array_dealloc(v8___Uint32Array* self)
{
    if(!self) return;
    if (!self->_is_c_reference){
        delete self->_Cobject;
    }
    self->_Cobject = NULL;
    self->_owner = NULL;
    self->_is_c_reference = false;
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject *
v8___Uint32Array_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
    v8___Uint32Array *self;

    self = (v8___Uint32Array *)type->tp_alloc(type, 0);
    if (self != NULL) {
        self->_Cobject = NULL;
        self->_owner = NULL;
    }

    return (PyObject *)self;
}       

static int
v8___Uint32Array_init(v8___Uint32Array *self, PyObject *args, PyObject *kwds)
{
    int status = -1;
    if(!self) return status;
    self->_owner = (PyObject*)self;
    
    {
        PyObject * tmp = NULL;
        (void)tmp;
         
        static char *kwlist[] = { "Anon_1", NULL};
        
        PyObject* Anon_1 = NULL;
        
            
        if ( 0 != status ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &Anon_1);
            if ( 0 == status  && Anon_1){
                
                
                if(status == 0){
                    
                   v8::Uint32Array const& Anon_1_C = *((v8___Uint32Array*)Anon_1)->_Cobject;
    
                    self->_Cobject = new v8::Uint32Array(Anon_1_C);
                    
                        
                }
            }
        }
    }
    if (status != 0){
       self->_Cobject = NULL;
       status = 0;
    }
    return status;
}


static PyObject*
v8___Uint32Array__New(PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* array_buffer = NULL;
            PyObject* byte_offset = NULL;
            PyObject* length = NULL;
        
        static char *kwlist[] = { "array_buffer""byte_offset""length", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OOO", kwlist, &array_buffer,&byte_offset,&length);
            if ( 0 == status  && array_buffer){
                    
                    
                if (!checkType(&v8___Local_v8__ArrayBuffer_Type, array_buffer )){ status = -1;}
    
            if (!PyLong_Check(byte_offset )){ status = -1; }
            if (!PyLong_Check(length )){ status = -1; }
                        
                   v8::Local<v8::ArrayBuffer>& array_buffer_C = *((v8___Local_v8__ArrayBuffer_*)array_buffer)->_Cobject;
    
                    long unsigned intbyte_offset_C = PyInt_Check(byte_offset)? PyInt_AsLong(byte_offset):PyLong_AsLong(byte_offset);
                 
                
                    long unsigned intlength_C = PyInt_Check(length)? PyInt_AsLong(length):PyLong_AsLong(length);
                 
                
                        if( 0 == status ){
                       v8::Local<v8::Uint32Array> result = v8::Uint32Array::New(array_buffer_C, byte_offset_C, length_C);
                       result_py = 
                        PyObject_CallObject((PyObject *) & v8___Local_v8__Uint32Array_Type, NULL);
                        if(result_py){
                            delete ((v8___Local_v8__Uint32Array_*) result_py)->_Cobject ;
                            ((v8___Local_v8__Uint32Array_*) result_py)->_Cobject = new v8::Local<v8::Uint32Array>(result);
                        };
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    {
        
            PyObject* shared_array_buffer = NULL;
            PyObject* byte_offset = NULL;
            PyObject* length = NULL;
        
        static char *kwlist[] = { "shared_array_buffer""byte_offset""length", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OOO", kwlist, &shared_array_buffer,&byte_offset,&length);
            if ( 0 == status  && shared_array_buffer){
                    
                    
                if (!checkType(&v8___Local_v8__SharedArrayBuffer_Type, shared_array_buffer )){ status = -1;}
    
            if (!PyLong_Check(byte_offset )){ status = -1; }
            if (!PyLong_Check(length )){ status = -1; }
                        
                   v8::Local<v8::SharedArrayBuffer>& shared_array_buffer_C = *((v8___Local_v8__SharedArrayBuffer_*)shared_array_buffer)->_Cobject;
    
                    long unsigned intbyte_offset_C = PyInt_Check(byte_offset)? PyInt_AsLong(byte_offset):PyLong_AsLong(byte_offset);
                 
                
                    long unsigned intlength_C = PyInt_Check(length)? PyInt_AsLong(length):PyLong_AsLong(length);
                 
                
                        if( 0 == status ){
                       v8::Local<v8::Uint32Array> result = v8::Uint32Array::New(shared_array_buffer_C, byte_offset_C, length_C);
                       result_py = 
                        PyObject_CallObject((PyObject *) & v8___Local_v8__Uint32Array_Type, NULL);
                        if(result_py){
                            delete ((v8___Local_v8__Uint32Array_*) result_py)->_Cobject ;
                            ((v8___Local_v8__Uint32Array_*) result_py)->_Cobject = new v8::Local<v8::Uint32Array>(result);
                        };
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Uint32Array__Cast(PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* obj = NULL;
        
        static char *kwlist[] = { "obj", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &obj);
            if ( 0 == status  && obj){
                    
                    
                if (!checkType(&v8___ValueType, obj )){ status = -1;}
    
                        
                   v8::Value * obj_C = ((v8___Value*)obj)->_Cobject;
    
                        if( 0 == status ){
                       v8::Uint32Array * result = v8::Uint32Array::Cast(obj_C);
                       result_py = 
                       PyObject_CallObject((PyObject *) & v8___Uint32ArrayType, NULL);
                       if(result_py){
                           delete ((v8___Uint32Array*) result_py)->_Cobject ;
                           ((v8___Uint32Array*) result_py)->_Cobject = result;
                       };
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        

static void
v8___Int32Array_dealloc(v8___Int32Array* self)
{
    if(!self) return;
    if (!self->_is_c_reference){
        delete self->_Cobject;
    }
    self->_Cobject = NULL;
    self->_owner = NULL;
    self->_is_c_reference = false;
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject *
v8___Int32Array_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
    v8___Int32Array *self;

    self = (v8___Int32Array *)type->tp_alloc(type, 0);
    if (self != NULL) {
        self->_Cobject = NULL;
        self->_owner = NULL;
    }

    return (PyObject *)self;
}       

static int
v8___Int32Array_init(v8___Int32Array *self, PyObject *args, PyObject *kwds)
{
    int status = -1;
    if(!self) return status;
    self->_owner = (PyObject*)self;
    
    {
        PyObject * tmp = NULL;
        (void)tmp;
         
        static char *kwlist[] = { "Anon_1", NULL};
        
        PyObject* Anon_1 = NULL;
        
            
        if ( 0 != status ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &Anon_1);
            if ( 0 == status  && Anon_1){
                
                
                if(status == 0){
                    
                   v8::Int32Array const& Anon_1_C = *((v8___Int32Array*)Anon_1)->_Cobject;
    
                    self->_Cobject = new v8::Int32Array(Anon_1_C);
                    
                        
                }
            }
        }
    }
    if (status != 0){
       self->_Cobject = NULL;
       status = 0;
    }
    return status;
}


static PyObject*
v8___Int32Array__New(PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* array_buffer = NULL;
            PyObject* byte_offset = NULL;
            PyObject* length = NULL;
        
        static char *kwlist[] = { "array_buffer""byte_offset""length", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OOO", kwlist, &array_buffer,&byte_offset,&length);
            if ( 0 == status  && array_buffer){
                    
                    
                if (!checkType(&v8___Local_v8__ArrayBuffer_Type, array_buffer )){ status = -1;}
    
            if (!PyLong_Check(byte_offset )){ status = -1; }
            if (!PyLong_Check(length )){ status = -1; }
                        
                   v8::Local<v8::ArrayBuffer>& array_buffer_C = *((v8___Local_v8__ArrayBuffer_*)array_buffer)->_Cobject;
    
                    long unsigned intbyte_offset_C = PyInt_Check(byte_offset)? PyInt_AsLong(byte_offset):PyLong_AsLong(byte_offset);
                 
                
                    long unsigned intlength_C = PyInt_Check(length)? PyInt_AsLong(length):PyLong_AsLong(length);
                 
                
                        if( 0 == status ){
                       v8::Local<v8::Int32Array> result = v8::Int32Array::New(array_buffer_C, byte_offset_C, length_C);
                       result_py = 
                        PyObject_CallObject((PyObject *) & v8___Local_v8__Int32Array_Type, NULL);
                        if(result_py){
                            delete ((v8___Local_v8__Int32Array_*) result_py)->_Cobject ;
                            ((v8___Local_v8__Int32Array_*) result_py)->_Cobject = new v8::Local<v8::Int32Array>(result);
                        };
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    {
        
            PyObject* shared_array_buffer = NULL;
            PyObject* byte_offset = NULL;
            PyObject* length = NULL;
        
        static char *kwlist[] = { "shared_array_buffer""byte_offset""length", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OOO", kwlist, &shared_array_buffer,&byte_offset,&length);
            if ( 0 == status  && shared_array_buffer){
                    
                    
                if (!checkType(&v8___Local_v8__SharedArrayBuffer_Type, shared_array_buffer )){ status = -1;}
    
            if (!PyLong_Check(byte_offset )){ status = -1; }
            if (!PyLong_Check(length )){ status = -1; }
                        
                   v8::Local<v8::SharedArrayBuffer>& shared_array_buffer_C = *((v8___Local_v8__SharedArrayBuffer_*)shared_array_buffer)->_Cobject;
    
                    long unsigned intbyte_offset_C = PyInt_Check(byte_offset)? PyInt_AsLong(byte_offset):PyLong_AsLong(byte_offset);
                 
                
                    long unsigned intlength_C = PyInt_Check(length)? PyInt_AsLong(length):PyLong_AsLong(length);
                 
                
                        if( 0 == status ){
                       v8::Local<v8::Int32Array> result = v8::Int32Array::New(shared_array_buffer_C, byte_offset_C, length_C);
                       result_py = 
                        PyObject_CallObject((PyObject *) & v8___Local_v8__Int32Array_Type, NULL);
                        if(result_py){
                            delete ((v8___Local_v8__Int32Array_*) result_py)->_Cobject ;
                            ((v8___Local_v8__Int32Array_*) result_py)->_Cobject = new v8::Local<v8::Int32Array>(result);
                        };
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Int32Array__Cast(PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* obj = NULL;
        
        static char *kwlist[] = { "obj", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &obj);
            if ( 0 == status  && obj){
                    
                    
                if (!checkType(&v8___ValueType, obj )){ status = -1;}
    
                        
                   v8::Value * obj_C = ((v8___Value*)obj)->_Cobject;
    
                        if( 0 == status ){
                       v8::Int32Array * result = v8::Int32Array::Cast(obj_C);
                       result_py = 
                       PyObject_CallObject((PyObject *) & v8___Int32ArrayType, NULL);
                       if(result_py){
                           delete ((v8___Int32Array*) result_py)->_Cobject ;
                           ((v8___Int32Array*) result_py)->_Cobject = result;
                       };
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        

static void
v8___Float32Array_dealloc(v8___Float32Array* self)
{
    if(!self) return;
    if (!self->_is_c_reference){
        delete self->_Cobject;
    }
    self->_Cobject = NULL;
    self->_owner = NULL;
    self->_is_c_reference = false;
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject *
v8___Float32Array_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
    v8___Float32Array *self;

    self = (v8___Float32Array *)type->tp_alloc(type, 0);
    if (self != NULL) {
        self->_Cobject = NULL;
        self->_owner = NULL;
    }

    return (PyObject *)self;
}       

static int
v8___Float32Array_init(v8___Float32Array *self, PyObject *args, PyObject *kwds)
{
    int status = -1;
    if(!self) return status;
    self->_owner = (PyObject*)self;
    
    {
        PyObject * tmp = NULL;
        (void)tmp;
         
        static char *kwlist[] = { "Anon_1", NULL};
        
        PyObject* Anon_1 = NULL;
        
            
        if ( 0 != status ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &Anon_1);
            if ( 0 == status  && Anon_1){
                
                
                if(status == 0){
                    
                   v8::Float32Array const& Anon_1_C = *((v8___Float32Array*)Anon_1)->_Cobject;
    
                    self->_Cobject = new v8::Float32Array(Anon_1_C);
                    
                        
                }
            }
        }
    }
    if (status != 0){
       self->_Cobject = NULL;
       status = 0;
    }
    return status;
}


static PyObject*
v8___Float32Array__New(PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* array_buffer = NULL;
            PyObject* byte_offset = NULL;
            PyObject* length = NULL;
        
        static char *kwlist[] = { "array_buffer""byte_offset""length", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OOO", kwlist, &array_buffer,&byte_offset,&length);
            if ( 0 == status  && array_buffer){
                    
                    
                if (!checkType(&v8___Local_v8__ArrayBuffer_Type, array_buffer )){ status = -1;}
    
            if (!PyLong_Check(byte_offset )){ status = -1; }
            if (!PyLong_Check(length )){ status = -1; }
                        
                   v8::Local<v8::ArrayBuffer>& array_buffer_C = *((v8___Local_v8__ArrayBuffer_*)array_buffer)->_Cobject;
    
                    long unsigned intbyte_offset_C = PyInt_Check(byte_offset)? PyInt_AsLong(byte_offset):PyLong_AsLong(byte_offset);
                 
                
                    long unsigned intlength_C = PyInt_Check(length)? PyInt_AsLong(length):PyLong_AsLong(length);
                 
                
                        if( 0 == status ){
                       v8::Local<v8::Float32Array> result = v8::Float32Array::New(array_buffer_C, byte_offset_C, length_C);
                       result_py = 
                        PyObject_CallObject((PyObject *) & v8___Local_v8__Float32Array_Type, NULL);
                        if(result_py){
                            delete ((v8___Local_v8__Float32Array_*) result_py)->_Cobject ;
                            ((v8___Local_v8__Float32Array_*) result_py)->_Cobject = new v8::Local<v8::Float32Array>(result);
                        };
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    {
        
            PyObject* shared_array_buffer = NULL;
            PyObject* byte_offset = NULL;
            PyObject* length = NULL;
        
        static char *kwlist[] = { "shared_array_buffer""byte_offset""length", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OOO", kwlist, &shared_array_buffer,&byte_offset,&length);
            if ( 0 == status  && shared_array_buffer){
                    
                    
                if (!checkType(&v8___Local_v8__SharedArrayBuffer_Type, shared_array_buffer )){ status = -1;}
    
            if (!PyLong_Check(byte_offset )){ status = -1; }
            if (!PyLong_Check(length )){ status = -1; }
                        
                   v8::Local<v8::SharedArrayBuffer>& shared_array_buffer_C = *((v8___Local_v8__SharedArrayBuffer_*)shared_array_buffer)->_Cobject;
    
                    long unsigned intbyte_offset_C = PyInt_Check(byte_offset)? PyInt_AsLong(byte_offset):PyLong_AsLong(byte_offset);
                 
                
                    long unsigned intlength_C = PyInt_Check(length)? PyInt_AsLong(length):PyLong_AsLong(length);
                 
                
                        if( 0 == status ){
                       v8::Local<v8::Float32Array> result = v8::Float32Array::New(shared_array_buffer_C, byte_offset_C, length_C);
                       result_py = 
                        PyObject_CallObject((PyObject *) & v8___Local_v8__Float32Array_Type, NULL);
                        if(result_py){
                            delete ((v8___Local_v8__Float32Array_*) result_py)->_Cobject ;
                            ((v8___Local_v8__Float32Array_*) result_py)->_Cobject = new v8::Local<v8::Float32Array>(result);
                        };
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Float32Array__Cast(PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* obj = NULL;
        
        static char *kwlist[] = { "obj", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &obj);
            if ( 0 == status  && obj){
                    
                    
                if (!checkType(&v8___ValueType, obj )){ status = -1;}
    
                        
                   v8::Value * obj_C = ((v8___Value*)obj)->_Cobject;
    
                        if( 0 == status ){
                       v8::Float32Array * result = v8::Float32Array::Cast(obj_C);
                       result_py = 
                       PyObject_CallObject((PyObject *) & v8___Float32ArrayType, NULL);
                       if(result_py){
                           delete ((v8___Float32Array*) result_py)->_Cobject ;
                           ((v8___Float32Array*) result_py)->_Cobject = result;
                       };
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        

static void
v8___Float64Array_dealloc(v8___Float64Array* self)
{
    if(!self) return;
    if (!self->_is_c_reference){
        delete self->_Cobject;
    }
    self->_Cobject = NULL;
    self->_owner = NULL;
    self->_is_c_reference = false;
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject *
v8___Float64Array_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
    v8___Float64Array *self;

    self = (v8___Float64Array *)type->tp_alloc(type, 0);
    if (self != NULL) {
        self->_Cobject = NULL;
        self->_owner = NULL;
    }

    return (PyObject *)self;
}       

static int
v8___Float64Array_init(v8___Float64Array *self, PyObject *args, PyObject *kwds)
{
    int status = -1;
    if(!self) return status;
    self->_owner = (PyObject*)self;
    
    {
        PyObject * tmp = NULL;
        (void)tmp;
         
        static char *kwlist[] = { "Anon_1", NULL};
        
        PyObject* Anon_1 = NULL;
        
            
        if ( 0 != status ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &Anon_1);
            if ( 0 == status  && Anon_1){
                
                
                if(status == 0){
                    
                   v8::Float64Array const& Anon_1_C = *((v8___Float64Array*)Anon_1)->_Cobject;
    
                    self->_Cobject = new v8::Float64Array(Anon_1_C);
                    
                        
                }
            }
        }
    }
    if (status != 0){
       self->_Cobject = NULL;
       status = 0;
    }
    return status;
}


static PyObject*
v8___Float64Array__New(PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* array_buffer = NULL;
            PyObject* byte_offset = NULL;
            PyObject* length = NULL;
        
        static char *kwlist[] = { "array_buffer""byte_offset""length", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OOO", kwlist, &array_buffer,&byte_offset,&length);
            if ( 0 == status  && array_buffer){
                    
                    
                if (!checkType(&v8___Local_v8__ArrayBuffer_Type, array_buffer )){ status = -1;}
    
            if (!PyLong_Check(byte_offset )){ status = -1; }
            if (!PyLong_Check(length )){ status = -1; }
                        
                   v8::Local<v8::ArrayBuffer>& array_buffer_C = *((v8___Local_v8__ArrayBuffer_*)array_buffer)->_Cobject;
    
                    long unsigned intbyte_offset_C = PyInt_Check(byte_offset)? PyInt_AsLong(byte_offset):PyLong_AsLong(byte_offset);
                 
                
                    long unsigned intlength_C = PyInt_Check(length)? PyInt_AsLong(length):PyLong_AsLong(length);
                 
                
                        if( 0 == status ){
                       v8::Local<v8::Float64Array> result = v8::Float64Array::New(array_buffer_C, byte_offset_C, length_C);
                       result_py = 
                        PyObject_CallObject((PyObject *) & v8___Local_v8__Float64Array_Type, NULL);
                        if(result_py){
                            delete ((v8___Local_v8__Float64Array_*) result_py)->_Cobject ;
                            ((v8___Local_v8__Float64Array_*) result_py)->_Cobject = new v8::Local<v8::Float64Array>(result);
                        };
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    {
        
            PyObject* shared_array_buffer = NULL;
            PyObject* byte_offset = NULL;
            PyObject* length = NULL;
        
        static char *kwlist[] = { "shared_array_buffer""byte_offset""length", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OOO", kwlist, &shared_array_buffer,&byte_offset,&length);
            if ( 0 == status  && shared_array_buffer){
                    
                    
                if (!checkType(&v8___Local_v8__SharedArrayBuffer_Type, shared_array_buffer )){ status = -1;}
    
            if (!PyLong_Check(byte_offset )){ status = -1; }
            if (!PyLong_Check(length )){ status = -1; }
                        
                   v8::Local<v8::SharedArrayBuffer>& shared_array_buffer_C = *((v8___Local_v8__SharedArrayBuffer_*)shared_array_buffer)->_Cobject;
    
                    long unsigned intbyte_offset_C = PyInt_Check(byte_offset)? PyInt_AsLong(byte_offset):PyLong_AsLong(byte_offset);
                 
                
                    long unsigned intlength_C = PyInt_Check(length)? PyInt_AsLong(length):PyLong_AsLong(length);
                 
                
                        if( 0 == status ){
                       v8::Local<v8::Float64Array> result = v8::Float64Array::New(shared_array_buffer_C, byte_offset_C, length_C);
                       result_py = 
                        PyObject_CallObject((PyObject *) & v8___Local_v8__Float64Array_Type, NULL);
                        if(result_py){
                            delete ((v8___Local_v8__Float64Array_*) result_py)->_Cobject ;
                            ((v8___Local_v8__Float64Array_*) result_py)->_Cobject = new v8::Local<v8::Float64Array>(result);
                        };
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Float64Array__Cast(PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* obj = NULL;
        
        static char *kwlist[] = { "obj", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &obj);
            if ( 0 == status  && obj){
                    
                    
                if (!checkType(&v8___ValueType, obj )){ status = -1;}
    
                        
                   v8::Value * obj_C = ((v8___Value*)obj)->_Cobject;
    
                        if( 0 == status ){
                       v8::Float64Array * result = v8::Float64Array::Cast(obj_C);
                       result_py = 
                       PyObject_CallObject((PyObject *) & v8___Float64ArrayType, NULL);
                       if(result_py){
                           delete ((v8___Float64Array*) result_py)->_Cobject ;
                           ((v8___Float64Array*) result_py)->_Cobject = result;
                       };
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        

static void
v8___DataView_dealloc(v8___DataView* self)
{
    if(!self) return;
    if (!self->_is_c_reference){
        delete self->_Cobject;
    }
    self->_Cobject = NULL;
    self->_owner = NULL;
    self->_is_c_reference = false;
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject *
v8___DataView_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
    v8___DataView *self;

    self = (v8___DataView *)type->tp_alloc(type, 0);
    if (self != NULL) {
        self->_Cobject = NULL;
        self->_owner = NULL;
    }

    return (PyObject *)self;
}       

static int
v8___DataView_init(v8___DataView *self, PyObject *args, PyObject *kwds)
{
    int status = -1;
    if(!self) return status;
    self->_owner = (PyObject*)self;
    
    {
        PyObject * tmp = NULL;
        (void)tmp;
         
        static char *kwlist[] = { "Anon_1", NULL};
        
        PyObject* Anon_1 = NULL;
        
            
        if ( 0 != status ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &Anon_1);
            if ( 0 == status  && Anon_1){
                
                
                if(status == 0){
                    
                   v8::DataView const& Anon_1_C = *((v8___DataView*)Anon_1)->_Cobject;
    
                    self->_Cobject = new v8::DataView(Anon_1_C);
                    
                        
                }
            }
        }
    }
    if (status != 0){
       self->_Cobject = NULL;
       status = 0;
    }
    return status;
}


static PyObject*
v8___DataView__New(PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* array_buffer = NULL;
            PyObject* byte_offset = NULL;
            PyObject* length = NULL;
        
        static char *kwlist[] = { "array_buffer""byte_offset""length", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OOO", kwlist, &array_buffer,&byte_offset,&length);
            if ( 0 == status  && array_buffer){
                    
                    
                if (!checkType(&v8___Local_v8__ArrayBuffer_Type, array_buffer )){ status = -1;}
    
            if (!PyLong_Check(byte_offset )){ status = -1; }
            if (!PyLong_Check(length )){ status = -1; }
                        
                   v8::Local<v8::ArrayBuffer>& array_buffer_C = *((v8___Local_v8__ArrayBuffer_*)array_buffer)->_Cobject;
    
                    long unsigned intbyte_offset_C = PyInt_Check(byte_offset)? PyInt_AsLong(byte_offset):PyLong_AsLong(byte_offset);
                 
                
                    long unsigned intlength_C = PyInt_Check(length)? PyInt_AsLong(length):PyLong_AsLong(length);
                 
                
                        if( 0 == status ){
                       v8::Local<v8::DataView> result = v8::DataView::New(array_buffer_C, byte_offset_C, length_C);
                       result_py = 
                        PyObject_CallObject((PyObject *) & v8___Local_v8__DataView_Type, NULL);
                        if(result_py){
                            delete ((v8___Local_v8__DataView_*) result_py)->_Cobject ;
                            ((v8___Local_v8__DataView_*) result_py)->_Cobject = new v8::Local<v8::DataView>(result);
                        };
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    {
        
            PyObject* shared_array_buffer = NULL;
            PyObject* byte_offset = NULL;
            PyObject* length = NULL;
        
        static char *kwlist[] = { "shared_array_buffer""byte_offset""length", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OOO", kwlist, &shared_array_buffer,&byte_offset,&length);
            if ( 0 == status  && shared_array_buffer){
                    
                    
                if (!checkType(&v8___Local_v8__SharedArrayBuffer_Type, shared_array_buffer )){ status = -1;}
    
            if (!PyLong_Check(byte_offset )){ status = -1; }
            if (!PyLong_Check(length )){ status = -1; }
                        
                   v8::Local<v8::SharedArrayBuffer>& shared_array_buffer_C = *((v8___Local_v8__SharedArrayBuffer_*)shared_array_buffer)->_Cobject;
    
                    long unsigned intbyte_offset_C = PyInt_Check(byte_offset)? PyInt_AsLong(byte_offset):PyLong_AsLong(byte_offset);
                 
                
                    long unsigned intlength_C = PyInt_Check(length)? PyInt_AsLong(length):PyLong_AsLong(length);
                 
                
                        if( 0 == status ){
                       v8::Local<v8::DataView> result = v8::DataView::New(shared_array_buffer_C, byte_offset_C, length_C);
                       result_py = 
                        PyObject_CallObject((PyObject *) & v8___Local_v8__DataView_Type, NULL);
                        if(result_py){
                            delete ((v8___Local_v8__DataView_*) result_py)->_Cobject ;
                            ((v8___Local_v8__DataView_*) result_py)->_Cobject = new v8::Local<v8::DataView>(result);
                        };
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___DataView__Cast(PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* obj = NULL;
        
        static char *kwlist[] = { "obj", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &obj);
            if ( 0 == status  && obj){
                    
                    
                if (!checkType(&v8___ValueType, obj )){ status = -1;}
    
                        
                   v8::Value * obj_C = ((v8___Value*)obj)->_Cobject;
    
                        if( 0 == status ){
                       v8::DataView * result = v8::DataView::Cast(obj_C);
                       result_py = 
                       PyObject_CallObject((PyObject *) & v8___DataViewType, NULL);
                       if(result_py){
                           delete ((v8___DataView*) result_py)->_Cobject ;
                           ((v8___DataView*) result_py)->_Cobject = result;
                       };
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        

static void
v8___RegExp_dealloc(v8___RegExp* self)
{
    if(!self) return;
    if (!self->_is_c_reference){
        delete self->_Cobject;
    }
    self->_Cobject = NULL;
    self->_owner = NULL;
    self->_is_c_reference = false;
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject *
v8___RegExp_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
    v8___RegExp *self;

    self = (v8___RegExp *)type->tp_alloc(type, 0);
    if (self != NULL) {
        self->_Cobject = NULL;
        self->_owner = NULL;
    }

    return (PyObject *)self;
}       

static int
v8___RegExp_init(v8___RegExp *self, PyObject *args, PyObject *kwds)
{
    int status = -1;
    if(!self) return status;
    self->_owner = (PyObject*)self;
    
    {
        PyObject * tmp = NULL;
        (void)tmp;
         
        static char *kwlist[] = { "Anon_1", NULL};
        
        PyObject* Anon_1 = NULL;
        
            
        if ( 0 != status ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &Anon_1);
            if ( 0 == status  && Anon_1){
                
                
                if(status == 0){
                    
                   v8::RegExp const& Anon_1_C = *((v8___RegExp*)Anon_1)->_Cobject;
    
                    self->_Cobject = new v8::RegExp(Anon_1_C);
                    
                        
                }
            }
        }
    }
    if (status != 0){
       self->_Cobject = NULL;
       status = 0;
    }
    return status;
}


static PyObject*
v8___RegExp__New(PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* pattern = NULL;
            PyObject* flags = NULL;
        
        static char *kwlist[] = { "pattern""flags", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OO", kwlist, &pattern,&flags);
            if ( 0 == status  && pattern && flags){
                    
                    
                if (!checkType(&v8___Local_v8__String_Type, pattern )){ status = -1;}
    
    
    
    
    
  
                        
                   v8::Local<v8::String>& pattern_C = *((v8___Local_v8__String_*)pattern)->_Cobject;
    
    
    
    
    
  
                        if( 0 == status ){
                       v8::Local<v8::RegExp> result = v8::RegExp::New(pattern_C, flags_C);
                       result_py = 
                        PyObject_CallObject((PyObject *) & v8___Local_v8__RegExp_Type, NULL);
                        if(result_py){
                            delete ((v8___Local_v8__RegExp_*) result_py)->_Cobject ;
                            ((v8___Local_v8__RegExp_*) result_py)->_Cobject = new v8::Local<v8::RegExp>(result);
                        };
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    {
        
            PyObject* context = NULL;
            PyObject* pattern = NULL;
            PyObject* flags = NULL;
        
        static char *kwlist[] = { "context""pattern""flags", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OO", kwlist, &context,&pattern,&flags);
            if ( 0 == status  && context && pattern && flags){
                    
                    
                if (!checkType(&v8___Local_v8__Context_Type, context )){ status = -1;}
    
                if (!checkType(&v8___Local_v8__String_Type, pattern )){ status = -1;}
    
    
    
    
    
  
                        
                   v8::Local<v8::Context>& context_C = *((v8___Local_v8__Context_*)context)->_Cobject;
    
                   v8::Local<v8::String>& pattern_C = *((v8___Local_v8__String_*)pattern)->_Cobject;
    
    
    
    
    
  
                        if( 0 == status ){
                       v8::Local<v8::RegExp> result = v8::RegExp::New(context_C, pattern_C, flags_C);
                       result_py = 
                        PyObject_CallObject((PyObject *) & v8___Local_v8__RegExp_Type, NULL);
                        if(result_py){
                            delete ((v8___Local_v8__RegExp_*) result_py)->_Cobject ;
                            ((v8___Local_v8__RegExp_*) result_py)->_Cobject = new v8::Local<v8::RegExp>(result);
                        };
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___RegExp__GetSource(v8___RegExp* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->GetSource();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___RegExp__GetFlags(v8___RegExp* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->GetFlags();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___RegExp__Cast(PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* obj = NULL;
        
        static char *kwlist[] = { "obj", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &obj);
            if ( 0 == status  && obj){
                    
                    
                if (!checkType(&v8___ValueType, obj )){ status = -1;}
    
                        
                   v8::Value * obj_C = ((v8___Value*)obj)->_Cobject;
    
                        if( 0 == status ){
                       v8::RegExp * result = v8::RegExp::Cast(obj_C);
                       result_py = 
                       PyObject_CallObject((PyObject *) & v8___RegExpType, NULL);
                       if(result_py){
                           delete ((v8___RegExp*) result_py)->_Cobject ;
                           ((v8___RegExp*) result_py)->_Cobject = result;
                       };
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        

static void
v8___Template_dealloc(v8___Template* self)
{
    if(!self) return;
    if (!self->_is_c_reference){
        delete self->_Cobject;
    }
    self->_Cobject = NULL;
    self->_owner = NULL;
    self->_is_c_reference = false;
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject *
v8___Template_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
    v8___Template *self;

    self = (v8___Template *)type->tp_alloc(type, 0);
    if (self != NULL) {
        self->_Cobject = NULL;
        self->_owner = NULL;
    }

    return (PyObject *)self;
}       

static int
v8___Template_init(v8___Template *self, PyObject *args, PyObject *kwds)
{
    int status = -1;
    if(!self) return status;
    self->_owner = (PyObject*)self;
    
    {
        PyObject * tmp = NULL;
        (void)tmp;
         
        static char *kwlist[] = { "Anon_1", NULL};
        
        PyObject* Anon_1 = NULL;
        
            
        if ( 0 != status ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &Anon_1);
            if ( 0 == status  && Anon_1){
                
                
                if(status == 0){
                    
                   v8::Template const& Anon_1_C = *((v8___Template*)Anon_1)->_Cobject;
    
                    self->_Cobject = new v8::Template(Anon_1_C);
                    
                        
                }
            }
        }
    }
    if (status != 0){
       self->_Cobject = NULL;
       status = 0;
    }
    return status;
}


static PyObject*
v8___Template__Set(v8___Template* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* name = NULL;
            PyObject* value = NULL;
            PyObject* attributes = NULL;
        
        static char *kwlist[] = { "name""value""attributes", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OOO", kwlist, &name,&value,&attributes);
            if ( 0 == status  && name && value && attributes){
                    
                    
                if (!checkType(&v8___Local_v8__Name_Type, name )){ status = -1;}
    
                if (!checkType(&v8___Local_v8__Data_Type, value )){ status = -1;}
    
    
    
    
    
  
                        
                   v8::Local<v8::Name>& name_C = *((v8___Local_v8__Name_*)name)->_Cobject;
    
                   v8::Local<v8::Data>& value_C = *((v8___Local_v8__Data_*)value)->_Cobject;
    
    
    
    
    
  
                        if( 0 == status ){
                        self->_Cobject->Set(name_C, value_C, attributes_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    {
        
            PyObject* isolate = NULL;
            PyObject* name = NULL;
            PyObject* value = NULL;
        
        static char *kwlist[] = { "isolate""name""value", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OOO", kwlist, &isolate,&name,&value);
            if ( 0 == status  && isolate && name && value){
                    
                    
                if (!checkType(&v8___IsolateType, isolate )){ status = -1;}
    
                if(!PyInt_Check(name)){ status = -1;}
            
                if (!checkType(&v8___Local_v8__Data_Type, value )){ status = -1;}
    
                        
                   v8::Isolate * isolate_C = ((v8___Isolate*)isolate)->_Cobject;
    
                    charname_C = PyInt_Check(name)? PyInt_AsLong(name):PyLong_AsLong(name);     
                
                   v8::Local<v8::Data>& value_C = *((v8___Local_v8__Data_*)value)->_Cobject;
    
                        if( 0 == status ){
                        self->_Cobject->Set(isolate_C, name_C, value_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Template__SetAccessorProperty(v8___Template* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* name = NULL;
            PyObject* getter = NULL;
            PyObject* setter = NULL;
            PyObject* attribute = NULL;
            PyObject* settings = NULL;
        
        static char *kwlist[] = { "name""getter""setter""attribute""settings", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OOOOO", kwlist, &name,&getter,&setter,&attribute,&settings);
            if ( 0 == status  && name && getter && setter && attribute && settings){
                    
                    
                if (!checkType(&v8___Local_v8__Name_Type, name )){ status = -1;}
    
                if (!checkType(&v8___Local_v8__FunctionTemplate_Type, getter )){ status = -1;}
    
                if (!checkType(&v8___Local_v8__FunctionTemplate_Type, setter )){ status = -1;}
    
    
    
    
    
  
    
    
    
    
  
                        
                   v8::Local<v8::Name>& name_C = *((v8___Local_v8__Name_*)name)->_Cobject;
    
                   v8::Local<v8::FunctionTemplate>& getter_C = *((v8___Local_v8__FunctionTemplate_*)getter)->_Cobject;
    
                   v8::Local<v8::FunctionTemplate>& setter_C = *((v8___Local_v8__FunctionTemplate_*)setter)->_Cobject;
    
    
    
    
    
  
    
    
    
    
  
                        if( 0 == status ){
                        self->_Cobject->SetAccessorProperty(name_C, getter_C, setter_C, attribute_C, settings_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Template__SetNativeDataProperty(v8___Template* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* name = NULL;
            PyObject* getter = NULL;
            PyObject* setter = NULL;
            PyObject* data = NULL;
            PyObject* attribute = NULL;
            PyObject* signature = NULL;
            PyObject* settings = NULL;
        
        static char *kwlist[] = { "name""getter""setter""data""attribute""signature""settings", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OOOOOOO", kwlist, &name,&getter,&setter,&data,&attribute,&signature,&settings);
            if ( 0 == status  && name && getter && setter && data && attribute && signature && settings){
                    
                    
                if (!checkType(&v8___Local_v8__String_Type, name )){ status = -1;}
    
        if(!(getter && (PyFunction_Check( getter) || getter->tp_call) ) ){ status = -1;}
    
        if(!(setter && (PyFunction_Check( setter) || setter->tp_call) ) ){ status = -1;}
    
                if (!checkType(&v8___Local_v8__Value_Type, data )){ status = -1;}
    
    
    
    
    
  
                if (!checkType(&v8___Local_v8__AccessorSignature_Type, signature )){ status = -1;}
    
    
    
    
    
  
                        
                   v8::Local<v8::String>& name_C = *((v8___Local_v8__String_*)name)->_Cobject;
    v8___AccessorGetterCallback_CL * wrapperCB = new v8___AccessorGetterCallback_CL( getter) ;
            getter_C = wrapperCB->get_C_callback();       
            //TODO: FIX MEMORY LEAK!
    v8___AccessorSetterCallback_CL * wrapperCB = new v8___AccessorSetterCallback_CL( setter) ;
            setter_C = wrapperCB->get_C_callback();       
            //TODO: FIX MEMORY LEAK!
    
                   v8::Local<v8::Value>& data_C = *((v8___Local_v8__Value_*)data)->_Cobject;
    
    
    
    
    
  
                   v8::Local<v8::AccessorSignature>& signature_C = *((v8___Local_v8__AccessorSignature_*)signature)->_Cobject;
    
    
    
    
    
  
                        if( 0 == status ){
                        self->_Cobject->SetNativeDataProperty(name_C, getter_C, setter_C, data_C, attribute_C, signature_C, settings_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    {
        
            PyObject* name = NULL;
            PyObject* getter = NULL;
            PyObject* setter = NULL;
            PyObject* data = NULL;
            PyObject* attribute = NULL;
            PyObject* signature = NULL;
            PyObject* settings = NULL;
        
        static char *kwlist[] = { "name""getter""setter""data""attribute""signature""settings", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OOOOOOO", kwlist, &name,&getter,&setter,&data,&attribute,&signature,&settings);
            if ( 0 == status  && name && getter && setter && data && attribute && signature && settings){
                    
                    
                if (!checkType(&v8___Local_v8__Name_Type, name )){ status = -1;}
    
        if(!(getter && (PyFunction_Check( getter) || getter->tp_call) ) ){ status = -1;}
    
        if(!(setter && (PyFunction_Check( setter) || setter->tp_call) ) ){ status = -1;}
    
                if (!checkType(&v8___Local_v8__Value_Type, data )){ status = -1;}
    
    
    
    
    
  
                if (!checkType(&v8___Local_v8__AccessorSignature_Type, signature )){ status = -1;}
    
    
    
    
    
  
                        
                   v8::Local<v8::Name>& name_C = *((v8___Local_v8__Name_*)name)->_Cobject;
    v8___AccessorNameGetterCallback_CL * wrapperCB = new v8___AccessorNameGetterCallback_CL( getter) ;
            getter_C = wrapperCB->get_C_callback();       
            //TODO: FIX MEMORY LEAK!
    v8___AccessorNameSetterCallback_CL * wrapperCB = new v8___AccessorNameSetterCallback_CL( setter) ;
            setter_C = wrapperCB->get_C_callback();       
            //TODO: FIX MEMORY LEAK!
    
                   v8::Local<v8::Value>& data_C = *((v8___Local_v8__Value_*)data)->_Cobject;
    
    
    
    
    
  
                   v8::Local<v8::AccessorSignature>& signature_C = *((v8___Local_v8__AccessorSignature_*)signature)->_Cobject;
    
    
    
    
    
  
                        if( 0 == status ){
                        self->_Cobject->SetNativeDataProperty(name_C, getter_C, setter_C, data_C, attribute_C, signature_C, settings_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        

static void
v8___NamedPropertyHandlerConfiguration_dealloc(v8___NamedPropertyHandlerConfiguration* self)
{
    if(!self) return;
    if (!self->_is_c_reference){
        delete self->_Cobject;
    }
    self->_Cobject = NULL;
    self->_owner = NULL;
    self->_is_c_reference = false;
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject *
v8___NamedPropertyHandlerConfiguration_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
    v8___NamedPropertyHandlerConfiguration *self;

    self = (v8___NamedPropertyHandlerConfiguration *)type->tp_alloc(type, 0);
    if (self != NULL) {
        self->_Cobject = NULL;
        self->_owner = NULL;
    }

    return (PyObject *)self;
}       

static int
v8___NamedPropertyHandlerConfiguration_init(v8___NamedPropertyHandlerConfiguration *self, PyObject *args, PyObject *kwds)
{
    int status = -1;
    if(!self) return status;
    self->_owner = (PyObject*)self;
    
    {
        PyObject * tmp = NULL;
        (void)tmp;
         
        static char *kwlist[] = { "getter""setter""query""deleter""enumerator""data""flags", NULL};
        
        PyObject* getter = NULL;
        
        PyObject* setter = NULL;
        
        PyObject* query = NULL;
        
        PyObject* deleter = NULL;
        
        PyObject* enumerator = NULL;
        
        PyObject* data = NULL;
        
        PyObject* flags = NULL;
        
            
        if ( 0 != status ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OOOOOOO", kwlist, &getter,&setter,&query,&deleter,&enumerator,&data,&flags);
            if ( 0 == status  && getter && setter && query && deleter && enumerator && data && flags){
                
        if(!(setter && (PyFunction_Check( setter) || setter->tp_call) ) ){ status = -1;}
    
        if(!(query && (PyFunction_Check( query) || query->tp_call) ) ){ status = -1;}
    
        if(!(deleter && (PyFunction_Check( deleter) || deleter->tp_call) ) ){ status = -1;}
    
        if(!(enumerator && (PyFunction_Check( enumerator) || enumerator->tp_call) ) ){ status = -1;}
    
                if (!checkType(&v8___Local_v8__Value_Type, data )){ status = -1;}
    
    
    
    
    
  
                
                if(status == 0){
                    v8___GenericNamedPropertyGetterCallback_CL * wrapperCB = new v8___GenericNamedPropertyGetterCallback_CL( getter) ;
            getter_C = wrapperCB->get_C_callback();       
            //TODO: FIX MEMORY LEAK!
    v8___GenericNamedPropertySetterCallback_CL * wrapperCB = new v8___GenericNamedPropertySetterCallback_CL( setter) ;
            setter_C = wrapperCB->get_C_callback();       
            //TODO: FIX MEMORY LEAK!
    v8___GenericNamedPropertyQueryCallback_CL * wrapperCB = new v8___GenericNamedPropertyQueryCallback_CL( query) ;
            query_C = wrapperCB->get_C_callback();       
            //TODO: FIX MEMORY LEAK!
    v8___GenericNamedPropertyDeleterCallback_CL * wrapperCB = new v8___GenericNamedPropertyDeleterCallback_CL( deleter) ;
            deleter_C = wrapperCB->get_C_callback();       
            //TODO: FIX MEMORY LEAK!
    v8___GenericNamedPropertyEnumeratorCallback_CL * wrapperCB = new v8___GenericNamedPropertyEnumeratorCallback_CL( enumerator) ;
            enumerator_C = wrapperCB->get_C_callback();       
            //TODO: FIX MEMORY LEAK!
    
                   v8::Local<v8::Value>& data_C = *((v8___Local_v8__Value_*)data)->_Cobject;
    
    
    
    
    
  
                    self->_Cobject = new v8::NamedPropertyHandlerConfiguration(getter_C,setter_C,query_C,deleter_C,enumerator_C,data_C,flags_C);
                    
                        
                }
            }
        }
    }
    {
        PyObject * tmp = NULL;
        (void)tmp;
         
        static char *kwlist[] = { "Anon_1", NULL};
        
        PyObject* Anon_1 = NULL;
        
            
        if ( 0 != status ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &Anon_1);
            if ( 0 == status  && Anon_1){
                
                
                if(status == 0){
                    
                   v8::NamedPropertyHandlerConfiguration const& Anon_1_C = *((v8___NamedPropertyHandlerConfiguration*)Anon_1)->_Cobject;
    
                    self->_Cobject = new v8::NamedPropertyHandlerConfiguration(Anon_1_C);
                    
                        
                }
            }
        }
    }
    if (status != 0){
       self->_Cobject = NULL;
       status = 0;
    }
    return status;
}



static void
v8___IndexedPropertyHandlerConfiguration_dealloc(v8___IndexedPropertyHandlerConfiguration* self)
{
    if(!self) return;
    if (!self->_is_c_reference){
        delete self->_Cobject;
    }
    self->_Cobject = NULL;
    self->_owner = NULL;
    self->_is_c_reference = false;
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject *
v8___IndexedPropertyHandlerConfiguration_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
    v8___IndexedPropertyHandlerConfiguration *self;

    self = (v8___IndexedPropertyHandlerConfiguration *)type->tp_alloc(type, 0);
    if (self != NULL) {
        self->_Cobject = NULL;
        self->_owner = NULL;
    }

    return (PyObject *)self;
}       

static int
v8___IndexedPropertyHandlerConfiguration_init(v8___IndexedPropertyHandlerConfiguration *self, PyObject *args, PyObject *kwds)
{
    int status = -1;
    if(!self) return status;
    self->_owner = (PyObject*)self;
    
    {
        PyObject * tmp = NULL;
        (void)tmp;
         
        static char *kwlist[] = { "getter""setter""query""deleter""enumerator""data""flags", NULL};
        
        PyObject* getter = NULL;
        
        PyObject* setter = NULL;
        
        PyObject* query = NULL;
        
        PyObject* deleter = NULL;
        
        PyObject* enumerator = NULL;
        
        PyObject* data = NULL;
        
        PyObject* flags = NULL;
        
            
        if ( 0 != status ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OOOOOOO", kwlist, &getter,&setter,&query,&deleter,&enumerator,&data,&flags);
            if ( 0 == status  && getter && setter && query && deleter && enumerator && data && flags){
                
        if(!(setter && (PyFunction_Check( setter) || setter->tp_call) ) ){ status = -1;}
    
        if(!(query && (PyFunction_Check( query) || query->tp_call) ) ){ status = -1;}
    
        if(!(deleter && (PyFunction_Check( deleter) || deleter->tp_call) ) ){ status = -1;}
    
        if(!(enumerator && (PyFunction_Check( enumerator) || enumerator->tp_call) ) ){ status = -1;}
    
                if (!checkType(&v8___Local_v8__Value_Type, data )){ status = -1;}
    
    
    
    
    
  
                
                if(status == 0){
                    v8___IndexedPropertyGetterCallback_CL * wrapperCB = new v8___IndexedPropertyGetterCallback_CL( getter) ;
            getter_C = wrapperCB->get_C_callback();       
            //TODO: FIX MEMORY LEAK!
    v8___IndexedPropertySetterCallback_CL * wrapperCB = new v8___IndexedPropertySetterCallback_CL( setter) ;
            setter_C = wrapperCB->get_C_callback();       
            //TODO: FIX MEMORY LEAK!
    v8___IndexedPropertyQueryCallback_CL * wrapperCB = new v8___IndexedPropertyQueryCallback_CL( query) ;
            query_C = wrapperCB->get_C_callback();       
            //TODO: FIX MEMORY LEAK!
    v8___IndexedPropertyDeleterCallback_CL * wrapperCB = new v8___IndexedPropertyDeleterCallback_CL( deleter) ;
            deleter_C = wrapperCB->get_C_callback();       
            //TODO: FIX MEMORY LEAK!
    v8___IndexedPropertyEnumeratorCallback_CL * wrapperCB = new v8___IndexedPropertyEnumeratorCallback_CL( enumerator) ;
            enumerator_C = wrapperCB->get_C_callback();       
            //TODO: FIX MEMORY LEAK!
    
                   v8::Local<v8::Value>& data_C = *((v8___Local_v8__Value_*)data)->_Cobject;
    
    
    
    
    
  
                    self->_Cobject = new v8::IndexedPropertyHandlerConfiguration(getter_C,setter_C,query_C,deleter_C,enumerator_C,data_C,flags_C);
                    
                        
                }
            }
        }
    }
    {
        PyObject * tmp = NULL;
        (void)tmp;
         
        static char *kwlist[] = { "Anon_1", NULL};
        
        PyObject* Anon_1 = NULL;
        
            
        if ( 0 != status ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &Anon_1);
            if ( 0 == status  && Anon_1){
                
                
                if(status == 0){
                    
                   v8::IndexedPropertyHandlerConfiguration const& Anon_1_C = *((v8___IndexedPropertyHandlerConfiguration*)Anon_1)->_Cobject;
    
                    self->_Cobject = new v8::IndexedPropertyHandlerConfiguration(Anon_1_C);
                    
                        
                }
            }
        }
    }
    if (status != 0){
       self->_Cobject = NULL;
       status = 0;
    }
    return status;
}



static void
v8___TypeSwitch_dealloc(v8___TypeSwitch* self)
{
    if(!self) return;
    if (!self->_is_c_reference){
        delete self->_Cobject;
    }
    self->_Cobject = NULL;
    self->_owner = NULL;
    self->_is_c_reference = false;
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject *
v8___TypeSwitch_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
    v8___TypeSwitch *self;

    self = (v8___TypeSwitch *)type->tp_alloc(type, 0);
    if (self != NULL) {
        self->_Cobject = NULL;
        self->_owner = NULL;
    }

    return (PyObject *)self;
}       

static int
v8___TypeSwitch_init(v8___TypeSwitch *self, PyObject *args, PyObject *kwds)
{
    int status = -1;
    if(!self) return status;
    self->_owner = (PyObject*)self;
    
    {
        PyObject * tmp = NULL;
        (void)tmp;
         
        static char *kwlist[] = { "Anon_1", NULL};
        
        PyObject* Anon_1 = NULL;
        
            
        if ( 0 != status ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &Anon_1);
            if ( 0 == status  && Anon_1){
                
                
                if(status == 0){
                    
                   v8::TypeSwitch const& Anon_1_C = *((v8___TypeSwitch*)Anon_1)->_Cobject;
    
                    self->_Cobject = new v8::TypeSwitch(Anon_1_C);
                    
                        
                }
            }
        }
    }
    if (status != 0){
       self->_Cobject = NULL;
       status = 0;
    }
    return status;
}


static PyObject*
v8___TypeSwitch__New(PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* type = NULL;
        
        static char *kwlist[] = { "type", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &type);
            if ( 0 == status  && type){
                    
                    
                if (!checkType(&v8___Local_v8__FunctionTemplate_Type, type )){ status = -1;}
    
                        
                   v8::Local<v8::FunctionTemplate>& type_C = *((v8___Local_v8__FunctionTemplate_*)type)->_Cobject;
    
                        if( 0 == status ){
                       v8::Local<v8::TypeSwitch> result = v8::TypeSwitch::New(type_C);
                       result_py = 
                        PyObject_CallObject((PyObject *) & v8___Local_v8__TypeSwitch_Type, NULL);
                        if(result_py){
                            delete ((v8___Local_v8__TypeSwitch_*) result_py)->_Cobject ;
                            ((v8___Local_v8__TypeSwitch_*) result_py)->_Cobject = new v8::Local<v8::TypeSwitch>(result);
                        };
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    {
        
            PyObject* argc = NULL;
            PyObject* types = NULL;
        
        static char *kwlist[] = { "argc""types", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &argc,&types);
            if ( 0 == status  && types){
                    
                    
                if(!PyInt_Check(argc)){ status = -1;}
            
                if (!checkType(&v8___Local_v8__FunctionTemplate_Type, types )){ status = -1;}
    
                        
                    intargc_C = PyInt_Check(argc)? PyInt_AsLong(argc):PyLong_AsLong(argc);     
                
                   v8::Local<v8::FunctionTemplate> * types_C = ((v8___Local_v8__FunctionTemplate_*)types)->_Cobject;
    
                        if( 0 == status ){
                       v8::Local<v8::TypeSwitch> result = v8::TypeSwitch::New(argc_C, types_C);
                       result_py = 
                        PyObject_CallObject((PyObject *) & v8___Local_v8__TypeSwitch_Type, NULL);
                        if(result_py){
                            delete ((v8___Local_v8__TypeSwitch_*) result_py)->_Cobject ;
                            ((v8___Local_v8__TypeSwitch_*) result_py)->_Cobject = new v8::Local<v8::TypeSwitch>(result);
                        };
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___TypeSwitch__match(v8___TypeSwitch* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* value = NULL;
        
        static char *kwlist[] = { "value", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &value);
            if ( 0 == status  && value){
                    
                    
                if (!checkType(&v8___Local_v8__Value_Type, value )){ status = -1;}
    
                        
                   v8::Local<v8::Value>& value_C = *((v8___Local_v8__Value_*)value)->_Cobject;
    
                        if( 0 == status ){
                        self->_Cobject->match(value_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        

static void
v8___ExternalOneByteStringResourceImpl_dealloc(v8___ExternalOneByteStringResourceImpl* self)
{
    if(!self) return;
    if (!self->_is_c_reference){
        delete self->_Cobject;
    }
    self->_Cobject = NULL;
    self->_owner = NULL;
    self->_is_c_reference = false;
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject *
v8___ExternalOneByteStringResourceImpl_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
    v8___ExternalOneByteStringResourceImpl *self;

    self = (v8___ExternalOneByteStringResourceImpl *)type->tp_alloc(type, 0);
    if (self != NULL) {
        self->_Cobject = NULL;
        self->_owner = NULL;
    }

    return (PyObject *)self;
}       

static int
v8___ExternalOneByteStringResourceImpl_init(v8___ExternalOneByteStringResourceImpl *self, PyObject *args, PyObject *kwds)
{
    int status = -1;
    if(!self) return status;
    self->_owner = (PyObject*)self;
    
    {
        PyObject * tmp = NULL;
        (void)tmp;
         
        static char *kwlist[] = {  NULL};
        
            
        if ( 0 != status ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist, );
            if ( 0 == status ){
                
                
                if(status == 0){
                    
                    self->_Cobject = new v8::ExternalOneByteStringResourceImpl();
                    
                        
                }
            }
        }
    }
    {
        PyObject * tmp = NULL;
        (void)tmp;
         
        static char *kwlist[] = { "data""length", NULL};
        
        PyObject* data = NULL;
        
        PyObject* length = NULL;
        
            
        if ( 0 != status ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OO", kwlist, &data,&length);
            if ( 0 == status  && data){
                
            if (!PyLong_Check(length )){ status = -1; }
                
                if(status == 0){
                    
                    chardata_C = PyInt_Check(data)? PyInt_AsLong(data):PyLong_AsLong(data);     
                
                    long unsigned intlength_C = PyInt_Check(length)? PyInt_AsLong(length):PyLong_AsLong(length);
                 
                
                    self->_Cobject = new v8::ExternalOneByteStringResourceImpl(data_C,length_C);
                    
                        
                }
            }
        }
    }
    if (status != 0){
       self->_Cobject = NULL;
       status = 0;
    }
    return status;
}


static PyObject*
v8___ExternalOneByteStringResourceImpl__data(v8___ExternalOneByteStringResourceImpl* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->data();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___ExternalOneByteStringResourceImpl__length(v8___ExternalOneByteStringResourceImpl* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->length();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        

static void
v8___Extension_dealloc(v8___Extension* self)
{
    if(!self) return;
    if (!self->_is_c_reference){
        delete self->_Cobject;
    }
    self->_Cobject = NULL;
    self->_owner = NULL;
    self->_is_c_reference = false;
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject *
v8___Extension_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
    v8___Extension *self;

    self = (v8___Extension *)type->tp_alloc(type, 0);
    if (self != NULL) {
        self->_Cobject = NULL;
        self->_owner = NULL;
    }

    return (PyObject *)self;
}       

static int
v8___Extension_init(v8___Extension *self, PyObject *args, PyObject *kwds)
{
    int status = -1;
    if(!self) return status;
    self->_owner = (PyObject*)self;
    
    {
        PyObject * tmp = NULL;
        (void)tmp;
         
        static char *kwlist[] = { "name""source""dep_count""deps""source_length", NULL};
        
        PyObject* name = NULL;
        
        PyObject* source = NULL;
        
        PyObject* dep_count = NULL;
        
        PyObject* deps = NULL;
        
        PyObject* source_length = NULL;
        
            
        if ( 0 != status ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OOOOO", kwlist, &name,&source,&dep_count,&deps,&source_length);
            if ( 0 == status  && name && source && deps){
                
                if(!PyInt_Check(source)){ status = -1;}
            
                if(!PyInt_Check(dep_count)){ status = -1;}
            
                if(!PyInt_Check(deps)){ status = -1;}
            
                if(!PyInt_Check(source_length)){ status = -1;}
            
                
                if(status == 0){
                    
                    charname_C = PyInt_Check(name)? PyInt_AsLong(name):PyLong_AsLong(name);     
                
                    charsource_C = PyInt_Check(source)? PyInt_AsLong(source):PyLong_AsLong(source);     
                
                    intdep_count_C = PyInt_Check(dep_count)? PyInt_AsLong(dep_count):PyLong_AsLong(dep_count);     
                
                    chardeps_C = PyInt_Check(deps)? PyInt_AsLong(deps):PyLong_AsLong(deps);     
                
                    intsource_length_C = PyInt_Check(source_length)? PyInt_AsLong(source_length):PyLong_AsLong(source_length);     
                
                    self->_Cobject = new v8::Extension(name_C,source_C,dep_count_C,deps_C,source_length_C);
                    Unknown_type_Unknown_type_
                        
                }
            }
        }
    }
    if (status != 0){
       self->_Cobject = NULL;
       status = 0;
    }
    return status;
}


static PyObject*
v8___Extension__GetNativeFunctionTemplate(v8___Extension* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* isolate = NULL;
            PyObject* name = NULL;
        
        static char *kwlist[] = { "isolate""name", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OO", kwlist, &isolate,&name);
            if ( 0 == status  && isolate && name){
                    
                    
                if (!checkType(&v8___IsolateType, isolate )){ status = -1;}
    
                if (!checkType(&v8___Local_v8__String_Type, name )){ status = -1;}
    
                        
                   v8::Isolate * isolate_C = ((v8___Isolate*)isolate)->_Cobject;
    
                   v8::Local<v8::String>& name_C = *((v8___Local_v8__String_*)name)->_Cobject;
    
                        if( 0 == status ){
                        self->_Cobject->GetNativeFunctionTemplate(isolate_C, name_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Extension__name(v8___Extension* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->name();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Extension__source_length(v8___Extension* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->source_length();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Extension__source(v8___Extension* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->source();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Extension__dependency_count(v8___Extension* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->dependency_count();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Extension__dependencies(v8___Extension* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->dependencies();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Extension__set_auto_enable(v8___Extension* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* value = NULL;
        
        static char *kwlist[] = { "value", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &value);
            if ( 0 == status ){
                    
                    
                if(!PyBool_Check(value)){ status = -1;}
            
                        
                    
                bool  value_C = (PyInt_Check(value)? PyInt_AsLong(value):PyLongAsLong(value))!=0     
                
                        if( 0 == status ){
                        self->_Cobject->set_auto_enable(value_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Extension__auto_enable(v8___Extension* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->auto_enable();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        

static void
v8___ResourceConstraints_dealloc(v8___ResourceConstraints* self)
{
    if(!self) return;
    if (!self->_is_c_reference){
        delete self->_Cobject;
    }
    self->_Cobject = NULL;
    self->_owner = NULL;
    self->_is_c_reference = false;
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject *
v8___ResourceConstraints_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
    v8___ResourceConstraints *self;

    self = (v8___ResourceConstraints *)type->tp_alloc(type, 0);
    if (self != NULL) {
        self->_Cobject = NULL;
        self->_owner = NULL;
    }

    return (PyObject *)self;
}       

static int
v8___ResourceConstraints_init(v8___ResourceConstraints *self, PyObject *args, PyObject *kwds)
{
    int status = -1;
    if(!self) return status;
    self->_owner = (PyObject*)self;
    
    {
        PyObject * tmp = NULL;
        (void)tmp;
         
        static char *kwlist[] = {  NULL};
        
            
        if ( 0 != status ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist, );
            if ( 0 == status ){
                
                
                if(status == 0){
                    
                    self->_Cobject = new v8::ResourceConstraints();
                    
                        
                }
            }
        }
    }
    {
        PyObject * tmp = NULL;
        (void)tmp;
         
        static char *kwlist[] = { "Anon_1", NULL};
        
        PyObject* Anon_1 = NULL;
        
            
        if ( 0 != status ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &Anon_1);
            if ( 0 == status  && Anon_1){
                
                
                if(status == 0){
                    
                   v8::ResourceConstraints const& Anon_1_C = *((v8___ResourceConstraints*)Anon_1)->_Cobject;
    
                    self->_Cobject = new v8::ResourceConstraints(Anon_1_C);
                    
                        
                }
            }
        }
    }
    if (status != 0){
       self->_Cobject = NULL;
       status = 0;
    }
    return status;
}


static PyObject*
v8___ResourceConstraints__ConfigureDefaults(v8___ResourceConstraints* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* physical_memory = NULL;
            PyObject* virtual_memory_limit = NULL;
        
        static char *kwlist[] = { "physical_memory""virtual_memory_limit", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OO", kwlist, &physical_memory,&virtual_memory_limit);
            if ( 0 == status ){
                    
                    
            if (!PyLong_Check(physical_memory )){ status = -1; }
            if (!PyLong_Check(virtual_memory_limit )){ status = -1; }
                        
                    long unsigned intphysical_memory_C = PyInt_Check(physical_memory)? PyInt_AsLong(physical_memory):PyLong_AsLong(physical_memory);
                 
                
                    long unsigned intvirtual_memory_limit_C = PyInt_Check(virtual_memory_limit)? PyInt_AsLong(virtual_memory_limit):PyLong_AsLong(virtual_memory_limit);
                 
                
                        if( 0 == status ){
                        self->_Cobject->ConfigureDefaults(physical_memory_C, virtual_memory_limit_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    {
        
            PyObject* physical_memory = NULL;
            PyObject* virtual_memory_limit = NULL;
            PyObject* number_of_processors = NULL;
        
        static char *kwlist[] = { "physical_memory""virtual_memory_limit""number_of_processors", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OO", kwlist, &physical_memory,&virtual_memory_limit,&number_of_processors);
            if ( 0 == status ){
                    
                    
            if (!PyLong_Check(physical_memory )){ status = -1; }
            if (!PyLong_Check(virtual_memory_limit )){ status = -1; }
                if(!PyInt_Check(number_of_processors)){ status = -1;}
            
                        
                    long unsigned intphysical_memory_C = PyInt_Check(physical_memory)? PyInt_AsLong(physical_memory):PyLong_AsLong(physical_memory);
                 
                
                    long unsigned intvirtual_memory_limit_C = PyInt_Check(virtual_memory_limit)? PyInt_AsLong(virtual_memory_limit):PyLong_AsLong(virtual_memory_limit);
                 
                
                    unsigned intnumber_of_processors_C = PyInt_Check(number_of_processors)? PyInt_AsLong(number_of_processors):PyLong_AsLong(number_of_processors);     
                
                        if( 0 == status ){
                        self->_Cobject->ConfigureDefaults(physical_memory_C, virtual_memory_limit_C, number_of_processors_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___ResourceConstraints__max_semi_space_size(v8___ResourceConstraints* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->max_semi_space_size();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___ResourceConstraints__set_max_semi_space_size(v8___ResourceConstraints* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* value = NULL;
        
        static char *kwlist[] = { "value", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &value);
            if ( 0 == status ){
                    
                    
                if(!PyInt_Check(value)){ status = -1;}
            
                        
                    intvalue_C = PyInt_Check(value)? PyInt_AsLong(value):PyLong_AsLong(value);     
                
                        if( 0 == status ){
                        self->_Cobject->set_max_semi_space_size(value_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___ResourceConstraints__max_old_space_size(v8___ResourceConstraints* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->max_old_space_size();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___ResourceConstraints__set_max_old_space_size(v8___ResourceConstraints* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* value = NULL;
        
        static char *kwlist[] = { "value", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &value);
            if ( 0 == status ){
                    
                    
                if(!PyInt_Check(value)){ status = -1;}
            
                        
                    intvalue_C = PyInt_Check(value)? PyInt_AsLong(value):PyLong_AsLong(value);     
                
                        if( 0 == status ){
                        self->_Cobject->set_max_old_space_size(value_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___ResourceConstraints__max_executable_size(v8___ResourceConstraints* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->max_executable_size();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___ResourceConstraints__set_max_executable_size(v8___ResourceConstraints* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* value = NULL;
        
        static char *kwlist[] = { "value", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &value);
            if ( 0 == status ){
                    
                    
                if(!PyInt_Check(value)){ status = -1;}
            
                        
                    intvalue_C = PyInt_Check(value)? PyInt_AsLong(value):PyLong_AsLong(value);     
                
                        if( 0 == status ){
                        self->_Cobject->set_max_executable_size(value_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___ResourceConstraints__stack_limit(v8___ResourceConstraints* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->stack_limit();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___ResourceConstraints__set_stack_limit(v8___ResourceConstraints* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* value = NULL;
        
        static char *kwlist[] = { "value", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &value);
            if ( 0 == status  && value){
                    
                    
                if(!PyInt_Check(value)){ status = -1;}
            
                        
                    unsigned intvalue_C = PyInt_Check(value)? PyInt_AsLong(value):PyLong_AsLong(value);     
                
                        if( 0 == status ){
                        self->_Cobject->set_stack_limit(value_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___ResourceConstraints__max_available_threads(v8___ResourceConstraints* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->max_available_threads();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___ResourceConstraints__set_max_available_threads(v8___ResourceConstraints* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* value = NULL;
        
        static char *kwlist[] = { "value", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &value);
            if ( 0 == status ){
                    
                    
                if(!PyInt_Check(value)){ status = -1;}
            
                        
                    intvalue_C = PyInt_Check(value)? PyInt_AsLong(value):PyLong_AsLong(value);     
                
                        if( 0 == status ){
                        self->_Cobject->set_max_available_threads(value_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___ResourceConstraints__code_range_size(v8___ResourceConstraints* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->code_range_size();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___ResourceConstraints__set_code_range_size(v8___ResourceConstraints* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* value = NULL;
        
        static char *kwlist[] = { "value", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &value);
            if ( 0 == status ){
                    
                    
            if (!PyLong_Check(value )){ status = -1; }
                        
                    long unsigned intvalue_C = PyInt_Check(value)? PyInt_AsLong(value):PyLong_AsLong(value);
                 
                
                        if( 0 == status ){
                        self->_Cobject->set_code_range_size(value_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        

static void
v8___Exception_dealloc(v8___Exception* self)
{
    if(!self) return;
    if (!self->_is_c_reference){
        delete self->_Cobject;
    }
    self->_Cobject = NULL;
    self->_owner = NULL;
    self->_is_c_reference = false;
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject *
v8___Exception_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
    v8___Exception *self;

    self = (v8___Exception *)type->tp_alloc(type, 0);
    if (self != NULL) {
        self->_Cobject = NULL;
        self->_owner = NULL;
    }

    return (PyObject *)self;
}       

static int
v8___Exception_init(v8___Exception *self, PyObject *args, PyObject *kwds)
{
    int status = -1;
    if(!self) return status;
    self->_owner = (PyObject*)self;
    
    {
        PyObject * tmp = NULL;
        (void)tmp;
         
        static char *kwlist[] = {  NULL};
        
            
        if ( 0 != status ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist, );
            if ( 0 == status ){
                
                
                if(status == 0){
                    
                    self->_Cobject = new v8::Exception();
                    
                        
                }
            }
        }
    }
    {
        PyObject * tmp = NULL;
        (void)tmp;
         
        static char *kwlist[] = { "Anon_1", NULL};
        
        PyObject* Anon_1 = NULL;
        
            
        if ( 0 != status ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &Anon_1);
            if ( 0 == status  && Anon_1){
                
                
                if(status == 0){
                    
                   v8::Exception const& Anon_1_C = *((v8___Exception*)Anon_1)->_Cobject;
    
                    self->_Cobject = new v8::Exception(Anon_1_C);
                    
                        
                }
            }
        }
    }
    if (status != 0){
       self->_Cobject = NULL;
       status = 0;
    }
    return status;
}


static PyObject*
v8___Exception__RangeError(PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* message = NULL;
        
        static char *kwlist[] = { "message", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &message);
            if ( 0 == status  && message){
                    
                    
                if (!checkType(&v8___Local_v8__String_Type, message )){ status = -1;}
    
                        
                   v8::Local<v8::String>& message_C = *((v8___Local_v8__String_*)message)->_Cobject;
    
                        if( 0 == status ){
                       v8::Local<v8::Value> result = v8::Exception::RangeError(message_C);
                       result_py = 
                        PyObject_CallObject((PyObject *) & v8___Local_v8__Value_Type, NULL);
                        if(result_py){
                            delete ((v8___Local_v8__Value_*) result_py)->_Cobject ;
                            ((v8___Local_v8__Value_*) result_py)->_Cobject = new v8::Local<v8::Value>(result);
                        };
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Exception__ReferenceError(PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* message = NULL;
        
        static char *kwlist[] = { "message", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &message);
            if ( 0 == status  && message){
                    
                    
                if (!checkType(&v8___Local_v8__String_Type, message )){ status = -1;}
    
                        
                   v8::Local<v8::String>& message_C = *((v8___Local_v8__String_*)message)->_Cobject;
    
                        if( 0 == status ){
                       v8::Local<v8::Value> result = v8::Exception::ReferenceError(message_C);
                       result_py = 
                        PyObject_CallObject((PyObject *) & v8___Local_v8__Value_Type, NULL);
                        if(result_py){
                            delete ((v8___Local_v8__Value_*) result_py)->_Cobject ;
                            ((v8___Local_v8__Value_*) result_py)->_Cobject = new v8::Local<v8::Value>(result);
                        };
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Exception__SyntaxError(PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* message = NULL;
        
        static char *kwlist[] = { "message", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &message);
            if ( 0 == status  && message){
                    
                    
                if (!checkType(&v8___Local_v8__String_Type, message )){ status = -1;}
    
                        
                   v8::Local<v8::String>& message_C = *((v8___Local_v8__String_*)message)->_Cobject;
    
                        if( 0 == status ){
                       v8::Local<v8::Value> result = v8::Exception::SyntaxError(message_C);
                       result_py = 
                        PyObject_CallObject((PyObject *) & v8___Local_v8__Value_Type, NULL);
                        if(result_py){
                            delete ((v8___Local_v8__Value_*) result_py)->_Cobject ;
                            ((v8___Local_v8__Value_*) result_py)->_Cobject = new v8::Local<v8::Value>(result);
                        };
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Exception__TypeError(PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* message = NULL;
        
        static char *kwlist[] = { "message", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &message);
            if ( 0 == status  && message){
                    
                    
                if (!checkType(&v8___Local_v8__String_Type, message )){ status = -1;}
    
                        
                   v8::Local<v8::String>& message_C = *((v8___Local_v8__String_*)message)->_Cobject;
    
                        if( 0 == status ){
                       v8::Local<v8::Value> result = v8::Exception::TypeError(message_C);
                       result_py = 
                        PyObject_CallObject((PyObject *) & v8___Local_v8__Value_Type, NULL);
                        if(result_py){
                            delete ((v8___Local_v8__Value_*) result_py)->_Cobject ;
                            ((v8___Local_v8__Value_*) result_py)->_Cobject = new v8::Local<v8::Value>(result);
                        };
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Exception__Error(PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* message = NULL;
        
        static char *kwlist[] = { "message", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &message);
            if ( 0 == status  && message){
                    
                    
                if (!checkType(&v8___Local_v8__String_Type, message )){ status = -1;}
    
                        
                   v8::Local<v8::String>& message_C = *((v8___Local_v8__String_*)message)->_Cobject;
    
                        if( 0 == status ){
                       v8::Local<v8::Value> result = v8::Exception::Error(message_C);
                       result_py = 
                        PyObject_CallObject((PyObject *) & v8___Local_v8__Value_Type, NULL);
                        if(result_py){
                            delete ((v8___Local_v8__Value_*) result_py)->_Cobject ;
                            ((v8___Local_v8__Value_*) result_py)->_Cobject = new v8::Local<v8::Value>(result);
                        };
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Exception__CreateMessage(PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* exception = NULL;
        
        static char *kwlist[] = { "exception", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &exception);
            if ( 0 == status  && exception){
                    
                    
                if (!checkType(&v8___Local_v8__Value_Type, exception )){ status = -1;}
    
                        
                   v8::Local<v8::Value>& exception_C = *((v8___Local_v8__Value_*)exception)->_Cobject;
    
                        if( 0 == status ){
                       v8::Local<v8::Message> result = v8::Exception::CreateMessage(exception_C);
                       result_py = 
                        PyObject_CallObject((PyObject *) & v8___Local_v8__Message_Type, NULL);
                        if(result_py){
                            delete ((v8___Local_v8__Message_*) result_py)->_Cobject ;
                            ((v8___Local_v8__Message_*) result_py)->_Cobject = new v8::Local<v8::Message>(result);
                        };
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Exception__GetStackTrace(PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* exception = NULL;
        
        static char *kwlist[] = { "exception", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &exception);
            if ( 0 == status  && exception){
                    
                    
                if (!checkType(&v8___Local_v8__Value_Type, exception )){ status = -1;}
    
                        
                   v8::Local<v8::Value>& exception_C = *((v8___Local_v8__Value_*)exception)->_Cobject;
    
                        if( 0 == status ){
                       v8::Local<v8::StackTrace> result = v8::Exception::GetStackTrace(exception_C);
                       result_py = 
                        PyObject_CallObject((PyObject *) & v8___Local_v8__StackTrace_Type, NULL);
                        if(result_py){
                            delete ((v8___Local_v8__StackTrace_*) result_py)->_Cobject ;
                            ((v8___Local_v8__StackTrace_*) result_py)->_Cobject = new v8::Local<v8::StackTrace>(result);
                        };
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        

static void
v8___PromiseRejectMessage_dealloc(v8___PromiseRejectMessage* self)
{
    if(!self) return;
    if (!self->_is_c_reference){
        delete self->_Cobject;
    }
    self->_Cobject = NULL;
    self->_owner = NULL;
    self->_is_c_reference = false;
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject *
v8___PromiseRejectMessage_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
    v8___PromiseRejectMessage *self;

    self = (v8___PromiseRejectMessage *)type->tp_alloc(type, 0);
    if (self != NULL) {
        self->_Cobject = NULL;
        self->_owner = NULL;
    }

    return (PyObject *)self;
}       

static int
v8___PromiseRejectMessage_init(v8___PromiseRejectMessage *self, PyObject *args, PyObject *kwds)
{
    int status = -1;
    if(!self) return status;
    self->_owner = (PyObject*)self;
    
    {
        PyObject * tmp = NULL;
        (void)tmp;
         
        static char *kwlist[] = { "promise""event""value""stack_trace", NULL};
        
        PyObject* promise = NULL;
        
        PyObject* event = NULL;
        
        PyObject* value = NULL;
        
        PyObject* stack_trace = NULL;
        
            
        if ( 0 != status ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OOOO", kwlist, &promise,&event,&value,&stack_trace);
            if ( 0 == status  && promise && event && value && stack_trace){
                
    
    
  
                if (!checkType(&v8___Local_v8__Value_Type, value )){ status = -1;}
    
                if (!checkType(&v8___Local_v8__StackTrace_Type, stack_trace )){ status = -1;}
    
                
                if(status == 0){
                    
                   v8::Local<v8::Promise>& promise_C = *((v8___Local_v8__Promise_*)promise)->_Cobject;
    
    
    
  
                   v8::Local<v8::Value>& value_C = *((v8___Local_v8__Value_*)value)->_Cobject;
    
                   v8::Local<v8::StackTrace>& stack_trace_C = *((v8___Local_v8__StackTrace_*)stack_trace)->_Cobject;
    
                    self->_Cobject = new v8::PromiseRejectMessage(promise_C,event_C,value_C,stack_trace_C);
                    
                        
                }
            }
        }
    }
    {
        PyObject * tmp = NULL;
        (void)tmp;
         
        static char *kwlist[] = { "Anon_1", NULL};
        
        PyObject* Anon_1 = NULL;
        
            
        if ( 0 != status ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &Anon_1);
            if ( 0 == status  && Anon_1){
                
                
                if(status == 0){
                    
                   v8::PromiseRejectMessage const& Anon_1_C = *((v8___PromiseRejectMessage*)Anon_1)->_Cobject;
    
                    self->_Cobject = new v8::PromiseRejectMessage(Anon_1_C);
                    
                        
                }
            }
        }
    }
    if (status != 0){
       self->_Cobject = NULL;
       status = 0;
    }
    return status;
}


static PyObject*
v8___PromiseRejectMessage__GetPromise(v8___PromiseRejectMessage* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->GetPromise();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___PromiseRejectMessage__GetEvent(v8___PromiseRejectMessage* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->GetEvent();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___PromiseRejectMessage__GetValue(v8___PromiseRejectMessage* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->GetValue();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___PromiseRejectMessage__GetStackTrace(v8___PromiseRejectMessage* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->GetStackTrace();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        

static void
v8___HeapStatistics_dealloc(v8___HeapStatistics* self)
{
    if(!self) return;
    if (!self->_is_c_reference){
        delete self->_Cobject;
    }
    self->_Cobject = NULL;
    self->_owner = NULL;
    self->_is_c_reference = false;
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject *
v8___HeapStatistics_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
    v8___HeapStatistics *self;

    self = (v8___HeapStatistics *)type->tp_alloc(type, 0);
    if (self != NULL) {
        self->_Cobject = NULL;
        self->_owner = NULL;
    }

    return (PyObject *)self;
}       

static int
v8___HeapStatistics_init(v8___HeapStatistics *self, PyObject *args, PyObject *kwds)
{
    int status = -1;
    if(!self) return status;
    self->_owner = (PyObject*)self;
    
    {
        PyObject * tmp = NULL;
        (void)tmp;
         
        static char *kwlist[] = {  NULL};
        
            
        if ( 0 != status ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist, );
            if ( 0 == status ){
                
                
                if(status == 0){
                    
                    self->_Cobject = new v8::HeapStatistics();
                    
                        
                }
            }
        }
    }
    {
        PyObject * tmp = NULL;
        (void)tmp;
         
        static char *kwlist[] = { "Anon_1", NULL};
        
        PyObject* Anon_1 = NULL;
        
            
        if ( 0 != status ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &Anon_1);
            if ( 0 == status  && Anon_1){
                
                
                if(status == 0){
                    
                   v8::HeapStatistics const& Anon_1_C = *((v8___HeapStatistics*)Anon_1)->_Cobject;
    
                    self->_Cobject = new v8::HeapStatistics(Anon_1_C);
                    
                        
                }
            }
        }
    }
    if (status != 0){
       self->_Cobject = NULL;
       status = 0;
    }
    return status;
}


static PyObject*
v8___HeapStatistics__total_heap_size(v8___HeapStatistics* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->total_heap_size();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___HeapStatistics__total_heap_size_executable(v8___HeapStatistics* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->total_heap_size_executable();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___HeapStatistics__total_physical_size(v8___HeapStatistics* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->total_physical_size();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___HeapStatistics__total_available_size(v8___HeapStatistics* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->total_available_size();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___HeapStatistics__used_heap_size(v8___HeapStatistics* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->used_heap_size();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___HeapStatistics__heap_size_limit(v8___HeapStatistics* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->heap_size_limit();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        

static void
v8___HeapSpaceStatistics_dealloc(v8___HeapSpaceStatistics* self)
{
    if(!self) return;
    if (!self->_is_c_reference){
        delete self->_Cobject;
    }
    self->_Cobject = NULL;
    self->_owner = NULL;
    self->_is_c_reference = false;
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject *
v8___HeapSpaceStatistics_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
    v8___HeapSpaceStatistics *self;

    self = (v8___HeapSpaceStatistics *)type->tp_alloc(type, 0);
    if (self != NULL) {
        self->_Cobject = NULL;
        self->_owner = NULL;
    }

    return (PyObject *)self;
}       

static int
v8___HeapSpaceStatistics_init(v8___HeapSpaceStatistics *self, PyObject *args, PyObject *kwds)
{
    int status = -1;
    if(!self) return status;
    self->_owner = (PyObject*)self;
    
    {
        PyObject * tmp = NULL;
        (void)tmp;
         
        static char *kwlist[] = {  NULL};
        
            
        if ( 0 != status ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist, );
            if ( 0 == status ){
                
                
                if(status == 0){
                    
                    self->_Cobject = new v8::HeapSpaceStatistics();
                    
                        
                }
            }
        }
    }
    {
        PyObject * tmp = NULL;
        (void)tmp;
         
        static char *kwlist[] = { "Anon_1", NULL};
        
        PyObject* Anon_1 = NULL;
        
            
        if ( 0 != status ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &Anon_1);
            if ( 0 == status  && Anon_1){
                
                
                if(status == 0){
                    
                   v8::HeapSpaceStatistics const& Anon_1_C = *((v8___HeapSpaceStatistics*)Anon_1)->_Cobject;
    
                    self->_Cobject = new v8::HeapSpaceStatistics(Anon_1_C);
                    
                        
                }
            }
        }
    }
    if (status != 0){
       self->_Cobject = NULL;
       status = 0;
    }
    return status;
}


static PyObject*
v8___HeapSpaceStatistics__space_name(v8___HeapSpaceStatistics* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->space_name();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___HeapSpaceStatistics__space_size(v8___HeapSpaceStatistics* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->space_size();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___HeapSpaceStatistics__space_used_size(v8___HeapSpaceStatistics* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->space_used_size();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___HeapSpaceStatistics__space_available_size(v8___HeapSpaceStatistics* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->space_available_size();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___HeapSpaceStatistics__physical_space_size(v8___HeapSpaceStatistics* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->physical_space_size();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        

static void
v8___HeapObjectStatistics_dealloc(v8___HeapObjectStatistics* self)
{
    if(!self) return;
    if (!self->_is_c_reference){
        delete self->_Cobject;
    }
    self->_Cobject = NULL;
    self->_owner = NULL;
    self->_is_c_reference = false;
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject *
v8___HeapObjectStatistics_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
    v8___HeapObjectStatistics *self;

    self = (v8___HeapObjectStatistics *)type->tp_alloc(type, 0);
    if (self != NULL) {
        self->_Cobject = NULL;
        self->_owner = NULL;
    }

    return (PyObject *)self;
}       

static int
v8___HeapObjectStatistics_init(v8___HeapObjectStatistics *self, PyObject *args, PyObject *kwds)
{
    int status = -1;
    if(!self) return status;
    self->_owner = (PyObject*)self;
    
    {
        PyObject * tmp = NULL;
        (void)tmp;
         
        static char *kwlist[] = {  NULL};
        
            
        if ( 0 != status ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist, );
            if ( 0 == status ){
                
                
                if(status == 0){
                    
                    self->_Cobject = new v8::HeapObjectStatistics();
                    
                        
                }
            }
        }
    }
    {
        PyObject * tmp = NULL;
        (void)tmp;
         
        static char *kwlist[] = { "Anon_1", NULL};
        
        PyObject* Anon_1 = NULL;
        
            
        if ( 0 != status ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &Anon_1);
            if ( 0 == status  && Anon_1){
                
                
                if(status == 0){
                    
                   v8::HeapObjectStatistics const& Anon_1_C = *((v8___HeapObjectStatistics*)Anon_1)->_Cobject;
    
                    self->_Cobject = new v8::HeapObjectStatistics(Anon_1_C);
                    
                        
                }
            }
        }
    }
    if (status != 0){
       self->_Cobject = NULL;
       status = 0;
    }
    return status;
}


static PyObject*
v8___HeapObjectStatistics__object_type(v8___HeapObjectStatistics* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->object_type();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___HeapObjectStatistics__object_sub_type(v8___HeapObjectStatistics* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->object_sub_type();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___HeapObjectStatistics__object_count(v8___HeapObjectStatistics* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->object_count();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___HeapObjectStatistics__object_size(v8___HeapObjectStatistics* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->object_size();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        

static void
v8___RetainedObjectInfo_dealloc(v8___RetainedObjectInfo* self)
{
    if(!self) return;
    if (!self->_is_c_reference){
        delete self->_Cobject;
    }
    self->_Cobject = NULL;
    self->_owner = NULL;
    self->_is_c_reference = false;
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject *
v8___RetainedObjectInfo_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
    v8___RetainedObjectInfo *self;

    self = (v8___RetainedObjectInfo *)type->tp_alloc(type, 0);
    if (self != NULL) {
        self->_Cobject = NULL;
        self->_owner = NULL;
    }

    return (PyObject *)self;
}       

static int
v8___RetainedObjectInfo_init(v8___RetainedObjectInfo *self, PyObject *args, PyObject *kwds)
{
    int status = -1;
    if(!self) return status;
    self->_owner = (PyObject*)self;
    self->_Cobject = new v8___RetainedObjectInfo();
    status = self->get_Cobject(self)?0:-1; 
    if (status != 0){
       self->_Cobject = NULL;
       status = 0;
    }
    return status;
}



static void
v8___JitCodeEvent_dealloc(v8___JitCodeEvent* self)
{
    if(!self) return;
    if (!self->_is_c_reference){
        delete self->_Cobject;
    }
    self->_Cobject = NULL;
    self->_owner = NULL;
    self->_is_c_reference = false;
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject *
v8___JitCodeEvent_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
    v8___JitCodeEvent *self;

    self = (v8___JitCodeEvent *)type->tp_alloc(type, 0);
    if (self != NULL) {
        self->_Cobject = NULL;
        self->_owner = NULL;
    }

    return (PyObject *)self;
}       

static int
v8___JitCodeEvent_init(v8___JitCodeEvent *self, PyObject *args, PyObject *kwds)
{
    int status = -1;
    if(!self) return status;
    self->_owner = (PyObject*)self;
    
    {
        PyObject * tmp = NULL;
        (void)tmp;
         
        static char *kwlist[] = {  NULL};
        
            
        if ( 0 != status ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist, );
            if ( 0 == status ){
                
                
                if(status == 0){
                    
                    self->_Cobject = new v8::JitCodeEvent();
                    
                        
                }
            }
        }
    }
    {
        PyObject * tmp = NULL;
        (void)tmp;
         
        static char *kwlist[] = { "Anon_1", NULL};
        
        PyObject* Anon_1 = NULL;
        
            
        if ( 0 != status ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &Anon_1);
            if ( 0 == status  && Anon_1){
                
                
                if(status == 0){
                    
                   v8::JitCodeEvent const& Anon_1_C = *((v8___JitCodeEvent*)Anon_1)->_Cobject;
    
                    self->_Cobject = new v8::JitCodeEvent(Anon_1_C);
                    
                        
                }
            }
        }
    }
    if (status != 0){
       self->_Cobject = NULL;
       status = 0;
    }
    return status;
}



static void
v8___ExternalResourceVisitor_dealloc(v8___ExternalResourceVisitor* self)
{
    if(!self) return;
    if (!self->_is_c_reference){
        delete self->_Cobject;
    }
    self->_Cobject = NULL;
    self->_owner = NULL;
    self->_is_c_reference = false;
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject *
v8___ExternalResourceVisitor_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
    v8___ExternalResourceVisitor *self;

    self = (v8___ExternalResourceVisitor *)type->tp_alloc(type, 0);
    if (self != NULL) {
        self->_Cobject = NULL;
        self->_owner = NULL;
    }

    return (PyObject *)self;
}       

static int
v8___ExternalResourceVisitor_init(v8___ExternalResourceVisitor *self, PyObject *args, PyObject *kwds)
{
    int status = -1;
    if(!self) return status;
    self->_owner = (PyObject*)self;
    
    {
        PyObject * tmp = NULL;
        (void)tmp;
         
        static char *kwlist[] = {  NULL};
        
            
        if ( 0 != status ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist, );
            if ( 0 == status ){
                
                
                if(status == 0){
                    
                    self->_Cobject = new v8::ExternalResourceVisitor();
                    
                        
                }
            }
        }
    }
    {
        PyObject * tmp = NULL;
        (void)tmp;
         
        static char *kwlist[] = { "Anon_1", NULL};
        
        PyObject* Anon_1 = NULL;
        
            
        if ( 0 != status ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &Anon_1);
            if ( 0 == status  && Anon_1){
                
                
                if(status == 0){
                    
                   v8::ExternalResourceVisitor const& Anon_1_C = *((v8___ExternalResourceVisitor*)Anon_1)->_Cobject;
    
                    self->_Cobject = new v8::ExternalResourceVisitor(Anon_1_C);
                    
                        
                }
            }
        }
    }
    if (status != 0){
       self->_Cobject = NULL;
       status = 0;
    }
    return status;
}


static PyObject*
v8___ExternalResourceVisitor__VisitExternalString(v8___ExternalResourceVisitor* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* string = NULL;
        
        static char *kwlist[] = { "string", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &string);
            if ( 0 == status  && string){
                    
                    
                if (!checkType(&v8___Local_v8__String_Type, string )){ status = -1;}
    
                        
                   v8::Local<v8::String>& string_C = *((v8___Local_v8__String_*)string)->_Cobject;
    
                        if( 0 == status ){
                        self->_Cobject->VisitExternalString(string_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        

static void
v8___PersistentHandleVisitor_dealloc(v8___PersistentHandleVisitor* self)
{
    if(!self) return;
    if (!self->_is_c_reference){
        delete self->_Cobject;
    }
    self->_Cobject = NULL;
    self->_owner = NULL;
    self->_is_c_reference = false;
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject *
v8___PersistentHandleVisitor_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
    v8___PersistentHandleVisitor *self;

    self = (v8___PersistentHandleVisitor *)type->tp_alloc(type, 0);
    if (self != NULL) {
        self->_Cobject = NULL;
        self->_owner = NULL;
    }

    return (PyObject *)self;
}       

static int
v8___PersistentHandleVisitor_init(v8___PersistentHandleVisitor *self, PyObject *args, PyObject *kwds)
{
    int status = -1;
    if(!self) return status;
    self->_owner = (PyObject*)self;
    
    {
        PyObject * tmp = NULL;
        (void)tmp;
         
        static char *kwlist[] = {  NULL};
        
            
        if ( 0 != status ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist, );
            if ( 0 == status ){
                
                
                if(status == 0){
                    
                    self->_Cobject = new v8::PersistentHandleVisitor();
                    
                        
                }
            }
        }
    }
    {
        PyObject * tmp = NULL;
        (void)tmp;
         
        static char *kwlist[] = { "Anon_1", NULL};
        
        PyObject* Anon_1 = NULL;
        
            
        if ( 0 != status ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &Anon_1);
            if ( 0 == status  && Anon_1){
                
                
                if(status == 0){
                    
                   v8::PersistentHandleVisitor const& Anon_1_C = *((v8___PersistentHandleVisitor*)Anon_1)->_Cobject;
    
                    self->_Cobject = new v8::PersistentHandleVisitor(Anon_1_C);
                    
                        
                }
            }
        }
    }
    if (status != 0){
       self->_Cobject = NULL;
       status = 0;
    }
    return status;
}


static PyObject*
v8___PersistentHandleVisitor__VisitPersistentHandle(v8___PersistentHandleVisitor* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* value = NULL;
            PyObject* class_id = NULL;
        
        static char *kwlist[] = { "value""class_id", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OO", kwlist, &value,&class_id);
            if ( 0 == status  && value){
                    
                    
                if (!checkType(&v8___Persistent_v8__Value__v8__NonCopyablePersistentTraits_v8__Value___Type, value )){ status = -1;}
    
                if(!PyInt_Check(class_id)){ status = -1;}
            
                        
                   v8::Persistent<v8::Value, v8::NonCopyablePersistentTraits<v8::Value> > * value_C = ((v8___Persistent_v8__Value__v8__NonCopyablePersistentTraits_v8__Value___*)value)->_Cobject;
    
                    short unsigned intclass_id_C = PyInt_Check(class_id)? PyInt_AsLong(class_id):PyLong_AsLong(class_id);     
                
                        if( 0 == status ){
                        self->_Cobject->VisitPersistentHandle(value_C, class_id_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        

static void
v8___V8_dealloc(v8___V8* self)
{
    if(!self) return;
    if (!self->_is_c_reference){
        delete self->_Cobject;
    }
    self->_Cobject = NULL;
    self->_owner = NULL;
    self->_is_c_reference = false;
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject *
v8___V8_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
    v8___V8 *self;

    self = (v8___V8 *)type->tp_alloc(type, 0);
    if (self != NULL) {
        self->_Cobject = NULL;
        self->_owner = NULL;
    }

    return (PyObject *)self;
}       

static int
v8___V8_init(v8___V8 *self, PyObject *args, PyObject *kwds)
{
    int status = -1;
    if(!self) return status;
    self->_owner = (PyObject*)self;
    
    {
        PyObject * tmp = NULL;
        (void)tmp;
         
        static char *kwlist[] = { "Anon_1", NULL};
        
        PyObject* Anon_1 = NULL;
        
            
        if ( 0 != status ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &Anon_1);
            if ( 0 == status  && Anon_1){
                
                
                if(status == 0){
                    
                   v8::V8 const& Anon_1_C = *((v8___V8*)Anon_1)->_Cobject;
    
                    self->_Cobject = new v8::V8(Anon_1_C);
                    
                        
                }
            }
        }
    }
    if (status != 0){
       self->_Cobject = NULL;
       status = 0;
    }
    return status;
}


static PyObject*
v8___V8__SetFatalErrorHandler(PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* that = NULL;
        
        static char *kwlist[] = { "that", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &that);
            if ( 0 == status  && that){
                    
                    
        if(!(that && (PyFunction_Check( that) || that->tp_call) ) ){ status = -1;}
    
                        v8___FatalErrorCallback_CL * wrapperCB = new v8___FatalErrorCallback_CL( that) ;
            that_C = wrapperCB->get_C_callback();       
            //TODO: FIX MEMORY LEAK!
    
                        if( 0 == status ){
                        v8::V8::SetFatalErrorHandler(that_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___V8__SetAllowCodeGenerationFromStringsCallback(PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* that = NULL;
        
        static char *kwlist[] = { "that", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &that);
            if ( 0 == status  && that){
                    
                    
        if(!(that && (PyFunction_Check( that) || that->tp_call) ) ){ status = -1;}
    
                        v8___AllowCodeGenerationFromStringsCallback_CL * wrapperCB = new v8___AllowCodeGenerationFromStringsCallback_CL( that) ;
            that_C = wrapperCB->get_C_callback();       
            //TODO: FIX MEMORY LEAK!
    
                        if( 0 == status ){
                        v8::V8::SetAllowCodeGenerationFromStringsCallback(that_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___V8__SetArrayBufferAllocator(PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* allocator = NULL;
        
        static char *kwlist[] = { "allocator", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &allocator);
            if ( 0 == status  && allocator){
                    
                    
                if (!checkType(&v8___AllocatorType, allocator )){ status = -1;}
    
                        
                   v8::Allocator * allocator_C = ((v8___Allocator*)allocator)->_Cobject;
    
                        if( 0 == status ){
                        v8::V8::SetArrayBufferAllocator(allocator_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___V8__IsDead(PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                       bool result = v8::V8::IsDead();
                       result_py = Unknown_type_;
                    
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___V8__SetNativesDataBlob(PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* startup_blob = NULL;
        
        static char *kwlist[] = { "startup_blob", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &startup_blob);
            if ( 0 == status  && startup_blob){
                    
                    
                if (!checkType(&v8___StartupDataType, startup_blob )){ status = -1;}
    
                        
                   v8::StartupData * startup_blob_C = ((v8___StartupData*)startup_blob)->_Cobject;
    
                        if( 0 == status ){
                        v8::V8::SetNativesDataBlob(startup_blob_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___V8__SetSnapshotDataBlob(PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* startup_blob = NULL;
        
        static char *kwlist[] = { "startup_blob", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &startup_blob);
            if ( 0 == status  && startup_blob){
                    
                    
                if (!checkType(&v8___StartupDataType, startup_blob )){ status = -1;}
    
                        
                   v8::StartupData * startup_blob_C = ((v8___StartupData*)startup_blob)->_Cobject;
    
                        if( 0 == status ){
                        v8::V8::SetSnapshotDataBlob(startup_blob_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___V8__CreateSnapshotDataBlob(PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* custom_source = NULL;
        
        static char *kwlist[] = { "custom_source", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &custom_source);
            if ( 0 == status  && custom_source){
                    
                    
                if(!PyInt_Check(custom_source)){ status = -1;}
            
                        
                    charcustom_source_C = PyInt_Check(custom_source)? PyInt_AsLong(custom_source):PyLong_AsLong(custom_source);     
                
                        if( 0 == status ){
                       v8::StartupData result = v8::V8::CreateSnapshotDataBlob(custom_source_C);
                       result_py = 
                        PyObject_CallObject((PyObject *) & v8___StartupDataType, NULL);
                        if(result_py){
                            delete ((v8___StartupData*) result_py)->_Cobject ;
                            ((v8___StartupData*) result_py)->_Cobject = new v8::StartupData(result);
                        };
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___V8__AddMessageListener(PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* that = NULL;
            PyObject* data = NULL;
        
        static char *kwlist[] = { "that""data", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OO", kwlist, &that,&data);
            if ( 0 == status  && that && data){
                    
                    
        if(!(that && (PyFunction_Check( that) || that->tp_call) ) ){ status = -1;}
    
                if (!checkType(&v8___Local_v8__Value_Type, data )){ status = -1;}
    
                        v8___MessageCallback_CL * wrapperCB = new v8___MessageCallback_CL( that) ;
            that_C = wrapperCB->get_C_callback();       
            //TODO: FIX MEMORY LEAK!
    
                   v8::Local<v8::Value>& data_C = *((v8___Local_v8__Value_*)data)->_Cobject;
    
                        if( 0 == status ){
                       bool result = v8::V8::AddMessageListener(that_C, data_C);
                       result_py = Unknown_type_;
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___V8__RemoveMessageListeners(PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* that = NULL;
        
        static char *kwlist[] = { "that", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &that);
            if ( 0 == status  && that){
                    
                    
        if(!(that && (PyFunction_Check( that) || that->tp_call) ) ){ status = -1;}
    
                        v8___MessageCallback_CL * wrapperCB = new v8___MessageCallback_CL( that) ;
            that_C = wrapperCB->get_C_callback();       
            //TODO: FIX MEMORY LEAK!
    
                        if( 0 == status ){
                        v8::V8::RemoveMessageListeners(that_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___V8__SetCaptureStackTraceForUncaughtExceptions(PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* capture = NULL;
            PyObject* frame_limit = NULL;
            PyObject* options = NULL;
        
        static char *kwlist[] = { "capture""frame_limit""options", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OOO", kwlist, &capture,&frame_limit,&options);
            if ( 0 == status  && options){
                    
                    
                if(!PyBool_Check(capture)){ status = -1;}
            
                if(!PyInt_Check(frame_limit)){ status = -1;}
            
    
    
    
    
    
    
    
    
    
    
    
  
                        
                    
                bool  capture_C = (PyInt_Check(capture)? PyInt_AsLong(capture):PyLongAsLong(capture))!=0     
                
                    intframe_limit_C = PyInt_Check(frame_limit)? PyInt_AsLong(frame_limit):PyLong_AsLong(frame_limit);     
                
    
    
    
    
    
    
    
    
    
    
    
  
                        if( 0 == status ){
                        v8::V8::SetCaptureStackTraceForUncaughtExceptions(capture_C, frame_limit_C, options_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___V8__SetFlagsFromString(PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* str = NULL;
            PyObject* length = NULL;
        
        static char *kwlist[] = { "str""length", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OO", kwlist, &str,&length);
            if ( 0 == status  && str){
                    
                    
                if(!PyInt_Check(str)){ status = -1;}
            
                if(!PyInt_Check(length)){ status = -1;}
            
                        
                    charstr_C = PyInt_Check(str)? PyInt_AsLong(str):PyLong_AsLong(str);     
                
                    intlength_C = PyInt_Check(length)? PyInt_AsLong(length):PyLong_AsLong(length);     
                
                        if( 0 == status ){
                        v8::V8::SetFlagsFromString(str_C, length_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___V8__SetFlagsFromCommandLine(PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* argc = NULL;
            PyObject* argv = NULL;
            PyObject* remove_flags = NULL;
        
        static char *kwlist[] = { "argc""argv""remove_flags", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OOO", kwlist, &argc,&argv,&remove_flags);
            if ( 0 == status  && argc && argv){
                    
                    
                if(!PyInt_Check(argc)){ status = -1;}
            
                if(!PyInt_Check(argv)){ status = -1;}
            
                if(!PyBool_Check(remove_flags)){ status = -1;}
            
                        
                    intargc_C = PyInt_Check(argc)? PyInt_AsLong(argc):PyLong_AsLong(argc);     
                
                    charargv_C = PyInt_Check(argv)? PyInt_AsLong(argv):PyLong_AsLong(argv);     
                
                    
                bool  remove_flags_C = (PyInt_Check(remove_flags)? PyInt_AsLong(remove_flags):PyLongAsLong(remove_flags))!=0     
                
                        if( 0 == status ){
                        v8::V8::SetFlagsFromCommandLine(argc_C, argv_C, remove_flags_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___V8__GetVersion(PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                       char const * result = v8::V8::GetVersion();
                       result_py = 
                       PyObject_CallObject((PyObject *) & Type, NULL);
                       if(result_py){
                           delete ((*) result_py)->_Cobject ;
                           ((*) result_py)->_Cobject = result;
                       };
                    
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___V8__SetFailedAccessCheckCallbackFunction(PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* Anon_1 = NULL;
        
        static char *kwlist[] = { "Anon", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &Anon__2185);
            if ( 0 == status  && Anon_1){
                    
                    
        if(!(Anon_1 && (PyFunction_Check( Anon_1) || Anon_1->tp_call) ) ){ status = -1;}
    
                        v8___FailedAccessCheckCallback_CL * wrapperCB = new v8___FailedAccessCheckCallback_CL( Anon_1) ;
            Anon_1_C = wrapperCB->get_C_callback();       
            //TODO: FIX MEMORY LEAK!
    
                        if( 0 == status ){
                        v8::V8::SetFailedAccessCheckCallbackFunction(Anon_1_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___V8__AddGCPrologueCallback(PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* callback = NULL;
            PyObject* gc_type_filter = NULL;
        
        static char *kwlist[] = { "callback""gc_type_filter", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OO", kwlist, &callback,&gc_type_filter);
            if ( 0 == status  && callback && gc_type_filter){
                    
                    
        if(!(callback && (PyFunction_Check( callback) || callback->tp_call) ) ){ status = -1;}
    
    
    
    
  
                        v8___GCPrologueCallback_CL * wrapperCB = new v8___GCPrologueCallback_CL( callback) ;
            callback_C = wrapperCB->get_C_callback();       
            //TODO: FIX MEMORY LEAK!
    
    
    
    
  
                        if( 0 == status ){
                        v8::V8::AddGCPrologueCallback(callback_C, gc_type_filter_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___V8__RemoveGCPrologueCallback(PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* callback = NULL;
        
        static char *kwlist[] = { "callback", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &callback);
            if ( 0 == status  && callback){
                    
                    
        if(!(callback && (PyFunction_Check( callback) || callback->tp_call) ) ){ status = -1;}
    
                        v8___GCPrologueCallback_CL * wrapperCB = new v8___GCPrologueCallback_CL( callback) ;
            callback_C = wrapperCB->get_C_callback();       
            //TODO: FIX MEMORY LEAK!
    
                        if( 0 == status ){
                        v8::V8::RemoveGCPrologueCallback(callback_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___V8__AddGCEpilogueCallback(PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* callback = NULL;
            PyObject* gc_type_filter = NULL;
        
        static char *kwlist[] = { "callback""gc_type_filter", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OO", kwlist, &callback,&gc_type_filter);
            if ( 0 == status  && callback && gc_type_filter){
                    
                    
        if(!(callback && (PyFunction_Check( callback) || callback->tp_call) ) ){ status = -1;}
    
    
    
    
  
                        v8___GCPrologueCallback_CL * wrapperCB = new v8___GCPrologueCallback_CL( callback) ;
            callback_C = wrapperCB->get_C_callback();       
            //TODO: FIX MEMORY LEAK!
    
    
    
    
  
                        if( 0 == status ){
                        v8::V8::AddGCEpilogueCallback(callback_C, gc_type_filter_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___V8__RemoveGCEpilogueCallback(PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* callback = NULL;
        
        static char *kwlist[] = { "callback", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &callback);
            if ( 0 == status  && callback){
                    
                    
        if(!(callback && (PyFunction_Check( callback) || callback->tp_call) ) ){ status = -1;}
    
                        v8___GCPrologueCallback_CL * wrapperCB = new v8___GCPrologueCallback_CL( callback) ;
            callback_C = wrapperCB->get_C_callback();       
            //TODO: FIX MEMORY LEAK!
    
                        if( 0 == status ){
                        v8::V8::RemoveGCEpilogueCallback(callback_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___V8__AddMemoryAllocationCallback(PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* callback = NULL;
            PyObject* space = NULL;
            PyObject* action = NULL;
        
        static char *kwlist[] = { "callback""space""action", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OOO", kwlist, &callback,&space,&action);
            if ( 0 == status  && callback && space && action){
                    
                    
        if(!(callback && (PyFunction_Check( callback) || callback->tp_call) ) ){ status = -1;}
    
    
    
    
    
    
    
  
    
    
    
  
                        v8___MemoryAllocationCallback_CL * wrapperCB = new v8___MemoryAllocationCallback_CL( callback) ;
            callback_C = wrapperCB->get_C_callback();       
            //TODO: FIX MEMORY LEAK!
    
    
    
    
    
    
    
  
    
    
    
  
                        if( 0 == status ){
                        v8::V8::AddMemoryAllocationCallback(callback_C, space_C, action_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___V8__RemoveMemoryAllocationCallback(PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* callback = NULL;
        
        static char *kwlist[] = { "callback", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &callback);
            if ( 0 == status  && callback){
                    
                    
        if(!(callback && (PyFunction_Check( callback) || callback->tp_call) ) ){ status = -1;}
    
                        v8___MemoryAllocationCallback_CL * wrapperCB = new v8___MemoryAllocationCallback_CL( callback) ;
            callback_C = wrapperCB->get_C_callback();       
            //TODO: FIX MEMORY LEAK!
    
                        if( 0 == status ){
                        v8::V8::RemoveMemoryAllocationCallback(callback_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___V8__Initialize(PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                       bool result = v8::V8::Initialize();
                       result_py = Unknown_type_;
                    
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___V8__SetEntropySource(PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* source = NULL;
        
        static char *kwlist[] = { "source", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &source);
            if ( 0 == status  && source){
                    
                    
        if(!(source && (PyFunction_Check( source) || source->tp_call) ) ){ status = -1;}
    
                        v8___EntropySource_CL * wrapperCB = new v8___EntropySource_CL( source) ;
            source_C = wrapperCB->get_C_callback();       
            //TODO: FIX MEMORY LEAK!
    
                        if( 0 == status ){
                        v8::V8::SetEntropySource(source_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___V8__SetReturnAddressLocationResolver(PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* return_address_resolver = NULL;
        
        static char *kwlist[] = { "return_address_resolver", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &return_address_resolver);
            if ( 0 == status  && return_address_resolver){
                    
                    
        if(!(return_address_resolver && (PyFunction_Check( return_address_resolver) || return_address_resolver->tp_call) ) ){ status = -1;}
    
                        v8___ReturnAddressLocationResolver_CL * wrapperCB = new v8___ReturnAddressLocationResolver_CL( return_address_resolver) ;
            return_address_resolver_C = wrapperCB->get_C_callback();       
            //TODO: FIX MEMORY LEAK!
    
                        if( 0 == status ){
                        v8::V8::SetReturnAddressLocationResolver(return_address_resolver_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___V8__TerminateExecution(PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* isolate = NULL;
        
        static char *kwlist[] = { "isolate", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &isolate);
            if ( 0 == status  && isolate){
                    
                    
                if (!checkType(&v8___IsolateType, isolate )){ status = -1;}
    
                        
                   v8::Isolate * isolate_C = ((v8___Isolate*)isolate)->_Cobject;
    
                        if( 0 == status ){
                        v8::V8::TerminateExecution(isolate_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___V8__IsExecutionTerminating(PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* isolate = NULL;
        
        static char *kwlist[] = { "isolate", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &isolate);
            if ( 0 == status  && isolate){
                    
                    
                if (!checkType(&v8___IsolateType, isolate )){ status = -1;}
    
                        
                   v8::Isolate * isolate_C = ((v8___Isolate*)isolate)->_Cobject;
    
                        if( 0 == status ){
                       bool result = v8::V8::IsExecutionTerminating(isolate_C);
                       result_py = Unknown_type_;
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___V8__CancelTerminateExecution(PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* isolate = NULL;
        
        static char *kwlist[] = { "isolate", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &isolate);
            if ( 0 == status  && isolate){
                    
                    
                if (!checkType(&v8___IsolateType, isolate )){ status = -1;}
    
                        
                   v8::Isolate * isolate_C = ((v8___Isolate*)isolate)->_Cobject;
    
                        if( 0 == status ){
                        v8::V8::CancelTerminateExecution(isolate_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___V8__Dispose(PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                       bool result = v8::V8::Dispose();
                       result_py = Unknown_type_;
                    
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___V8__VisitExternalResources(PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* visitor = NULL;
        
        static char *kwlist[] = { "visitor", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &visitor);
            if ( 0 == status  && visitor){
                    
                    
                if (!checkType(&v8___ExternalResourceVisitorType, visitor )){ status = -1;}
    
                        
                   v8::ExternalResourceVisitor * visitor_C = ((v8___ExternalResourceVisitor*)visitor)->_Cobject;
    
                        if( 0 == status ){
                        v8::V8::VisitExternalResources(visitor_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___V8__VisitHandlesWithClassIds(PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* visitor = NULL;
        
        static char *kwlist[] = { "visitor", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &visitor);
            if ( 0 == status  && visitor){
                    
                    
                if (!checkType(&v8___PersistentHandleVisitorType, visitor )){ status = -1;}
    
                        
                   v8::PersistentHandleVisitor * visitor_C = ((v8___PersistentHandleVisitor*)visitor)->_Cobject;
    
                        if( 0 == status ){
                        v8::V8::VisitHandlesWithClassIds(visitor_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    {
        
            PyObject* isolate = NULL;
            PyObject* visitor = NULL;
        
        static char *kwlist[] = { "isolate""visitor", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &isolate,&visitor);
            if ( 0 == status  && isolate && visitor){
                    
                    
                if (!checkType(&v8___IsolateType, isolate )){ status = -1;}
    
                if (!checkType(&v8___PersistentHandleVisitorType, visitor )){ status = -1;}
    
                        
                   v8::Isolate * isolate_C = ((v8___Isolate*)isolate)->_Cobject;
    
                   v8::PersistentHandleVisitor * visitor_C = ((v8___PersistentHandleVisitor*)visitor)->_Cobject;
    
                        if( 0 == status ){
                        v8::V8::VisitHandlesWithClassIds(isolate_C, visitor_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___V8__VisitHandlesForPartialDependence(PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* isolate = NULL;
            PyObject* visitor = NULL;
        
        static char *kwlist[] = { "isolate""visitor", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OO", kwlist, &isolate,&visitor);
            if ( 0 == status  && isolate && visitor){
                    
                    
                if (!checkType(&v8___IsolateType, isolate )){ status = -1;}
    
                if (!checkType(&v8___PersistentHandleVisitorType, visitor )){ status = -1;}
    
                        
                   v8::Isolate * isolate_C = ((v8___Isolate*)isolate)->_Cobject;
    
                   v8::PersistentHandleVisitor * visitor_C = ((v8___PersistentHandleVisitor*)visitor)->_Cobject;
    
                        if( 0 == status ){
                        v8::V8::VisitHandlesForPartialDependence(isolate_C, visitor_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___V8__InitializeICU(PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* icu_data_file = NULL;
        
        static char *kwlist[] = { "icu_data_file", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &icu_data_file);
            if ( 0 == status  && icu_data_file){
                    
                    
                if(!PyInt_Check(icu_data_file)){ status = -1;}
            
                        
                    charicu_data_file_C = PyInt_Check(icu_data_file)? PyInt_AsLong(icu_data_file):PyLong_AsLong(icu_data_file);     
                
                        if( 0 == status ){
                       bool result = v8::V8::InitializeICU(icu_data_file_C);
                       result_py = Unknown_type_;
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___V8__InitializePlatform(PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* platform = NULL;
        
        static char *kwlist[] = { "platform", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &platform);
            if ( 0 == status  && platform){
                    
                    
                if (!checkType(&v8___PlatformType, platform )){ status = -1;}
    
                        
                   v8::Platform * platform_C = ((v8___Platform*)platform)->_Cobject;
    
                        if( 0 == status ){
                        v8::V8::InitializePlatform(platform_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___V8__ShutdownPlatform(PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        v8::V8::ShutdownPlatform();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        

static void
v8___TryCatch_dealloc(v8___TryCatch* self)
{
    if(!self) return;
    if (!self->_is_c_reference){
        delete self->_Cobject;
    }
    self->_Cobject = NULL;
    self->_owner = NULL;
    self->_is_c_reference = false;
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject *
v8___TryCatch_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
    v8___TryCatch *self;

    self = (v8___TryCatch *)type->tp_alloc(type, 0);
    if (self != NULL) {
        self->_Cobject = NULL;
        self->_owner = NULL;
    }

    return (PyObject *)self;
}       

static int
v8___TryCatch_init(v8___TryCatch *self, PyObject *args, PyObject *kwds)
{
    int status = -1;
    if(!self) return status;
    self->_owner = (PyObject*)self;
    
    {
        PyObject * tmp = NULL;
        (void)tmp;
         
        static char *kwlist[] = {  NULL};
        
            
        if ( 0 != status ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist, );
            if ( 0 == status ){
                
                
                if(status == 0){
                    
                    self->_Cobject = new v8::TryCatch();
                    
                        
                }
            }
        }
    }
    {
        PyObject * tmp = NULL;
        (void)tmp;
         
        static char *kwlist[] = { "isolate", NULL};
        
        PyObject* isolate = NULL;
        
            
        if ( 0 != status ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &isolate);
            if ( 0 == status  && isolate){
                
                
                if(status == 0){
                    
                   v8::Isolate * isolate_C = ((v8___Isolate*)isolate)->_Cobject;
    
                    self->_Cobject = new v8::TryCatch(isolate_C);
                    
                        
                }
            }
        }
    }
    if (status != 0){
       self->_Cobject = NULL;
       status = 0;
    }
    return status;
}


static PyObject*
v8___TryCatch__HasCaught(v8___TryCatch* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->HasCaught();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___TryCatch__CanContinue(v8___TryCatch* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->CanContinue();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___TryCatch__HasTerminated(v8___TryCatch* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->HasTerminated();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___TryCatch__ReThrow(v8___TryCatch* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->ReThrow();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___TryCatch__Exception(v8___TryCatch* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->Exception();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___TryCatch__StackTrace(v8___TryCatch* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->StackTrace();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    {
        
            PyObject* context = NULL;
        
        static char *kwlist[] = { "context", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist, &context);
            if ( 0 == status  && context){
                    
                    
                if (!checkType(&v8___Local_v8__Context_Type, context )){ status = -1;}
    
                        
                   v8::Local<v8::Context>& context_C = *((v8___Local_v8__Context_*)context)->_Cobject;
    
                        if( 0 == status ){
                        self->_Cobject->StackTrace(context_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___TryCatch__Message(v8___TryCatch* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->Message();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___TryCatch__Reset(v8___TryCatch* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->Reset();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___TryCatch__SetVerbose(v8___TryCatch* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* value = NULL;
        
        static char *kwlist[] = { "value", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &value);
            if ( 0 == status ){
                    
                    
                if(!PyBool_Check(value)){ status = -1;}
            
                        
                    
                bool  value_C = (PyInt_Check(value)? PyInt_AsLong(value):PyLongAsLong(value))!=0     
                
                        if( 0 == status ){
                        self->_Cobject->SetVerbose(value_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___TryCatch__SetCaptureMessage(v8___TryCatch* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* value = NULL;
        
        static char *kwlist[] = { "value", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &value);
            if ( 0 == status ){
                    
                    
                if(!PyBool_Check(value)){ status = -1;}
            
                        
                    
                bool  value_C = (PyInt_Check(value)? PyInt_AsLong(value):PyLongAsLong(value))!=0     
                
                        if( 0 == status ){
                        self->_Cobject->SetCaptureMessage(value_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___TryCatch__JSStackComparableAddress(PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* handler = NULL;
        
        static char *kwlist[] = { "handler", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &handler);
            if ( 0 == status  && handler){
                    
                    
                if (!checkType(&v8___TryCatchType, handler )){ status = -1;}
    
                        
                   v8::TryCatch * handler_C = ((v8___TryCatch*)handler)->_Cobject;
    
                        if( 0 == status ){
                       void * result = v8::TryCatch::JSStackComparableAddress(handler_C);
                       result_py = Unknown_type_;
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        

static void
v8___ExtensionConfiguration_dealloc(v8___ExtensionConfiguration* self)
{
    if(!self) return;
    if (!self->_is_c_reference){
        delete self->_Cobject;
    }
    self->_Cobject = NULL;
    self->_owner = NULL;
    self->_is_c_reference = false;
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject *
v8___ExtensionConfiguration_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
    v8___ExtensionConfiguration *self;

    self = (v8___ExtensionConfiguration *)type->tp_alloc(type, 0);
    if (self != NULL) {
        self->_Cobject = NULL;
        self->_owner = NULL;
    }

    return (PyObject *)self;
}       

static int
v8___ExtensionConfiguration_init(v8___ExtensionConfiguration *self, PyObject *args, PyObject *kwds)
{
    int status = -1;
    if(!self) return status;
    self->_owner = (PyObject*)self;
    
    {
        PyObject * tmp = NULL;
        (void)tmp;
         
        static char *kwlist[] = {  NULL};
        
            
        if ( 0 != status ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist, );
            if ( 0 == status ){
                
                
                if(status == 0){
                    
                    self->_Cobject = new v8::ExtensionConfiguration();
                    
                        
                }
            }
        }
    }
    {
        PyObject * tmp = NULL;
        (void)tmp;
         
        static char *kwlist[] = { "name_count""names", NULL};
        
        PyObject* name_count = NULL;
        
        PyObject* names = NULL;
        
            
        if ( 0 != status ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OO", kwlist, &name_count,&names);
            if ( 0 == status  && names){
                
                if(!PyInt_Check(names)){ status = -1;}
            
                
                if(status == 0){
                    
                    intname_count_C = PyInt_Check(name_count)? PyInt_AsLong(name_count):PyLong_AsLong(name_count);     
                
                    charnames_C = PyInt_Check(names)? PyInt_AsLong(names):PyLong_AsLong(names);     
                
                    self->_Cobject = new v8::ExtensionConfiguration(name_count_C,names_C);
                    Unknown_type_
                        
                }
            }
        }
    }
    {
        PyObject * tmp = NULL;
        (void)tmp;
         
        static char *kwlist[] = { "Anon_1", NULL};
        
        PyObject* Anon_1 = NULL;
        
            
        if ( 0 != status ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &Anon_1);
            if ( 0 == status  && Anon_1){
                
                
                if(status == 0){
                    
                   v8::ExtensionConfiguration const& Anon_1_C = *((v8___ExtensionConfiguration*)Anon_1)->_Cobject;
    
                    self->_Cobject = new v8::ExtensionConfiguration(Anon_1_C);
                    
                        
                }
            }
        }
    }
    if (status != 0){
       self->_Cobject = NULL;
       status = 0;
    }
    return status;
}


static PyObject*
v8___ExtensionConfiguration__begin(v8___ExtensionConfiguration* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->begin();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___ExtensionConfiguration__end(v8___ExtensionConfiguration* self, PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                        self->_Cobject->end();
                        result_py = Py_None;
                        
                     
             }
        }
    }
    

    return result_py;
}        

static void
v8___Unlocker_dealloc(v8___Unlocker* self)
{
    if(!self) return;
    if (!self->_is_c_reference){
        delete self->_Cobject;
    }
    self->_Cobject = NULL;
    self->_owner = NULL;
    self->_is_c_reference = false;
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject *
v8___Unlocker_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
    v8___Unlocker *self;

    self = (v8___Unlocker *)type->tp_alloc(type, 0);
    if (self != NULL) {
        self->_Cobject = NULL;
        self->_owner = NULL;
    }

    return (PyObject *)self;
}       

static int
v8___Unlocker_init(v8___Unlocker *self, PyObject *args, PyObject *kwds)
{
    int status = -1;
    if(!self) return status;
    self->_owner = (PyObject*)self;
    
    {
        PyObject * tmp = NULL;
        (void)tmp;
         
        static char *kwlist[] = { "isolate", NULL};
        
        PyObject* isolate = NULL;
        
            
        if ( 0 != status ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &isolate);
            if ( 0 == status  && isolate){
                
                
                if(status == 0){
                    
                   v8::Isolate * isolate_C = ((v8___Isolate*)isolate)->_Cobject;
    
                    self->_Cobject = new v8::Unlocker(isolate_C);
                    
                        
                }
            }
        }
    }
    {
        PyObject * tmp = NULL;
        (void)tmp;
         
        static char *kwlist[] = { "Anon_1", NULL};
        
        PyObject* Anon_1 = NULL;
        
            
        if ( 0 != status ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &Anon_1);
            if ( 0 == status  && Anon_1){
                
                
                if(status == 0){
                    
                   v8::Unlocker const& Anon_1_C = *((v8___Unlocker*)Anon_1)->_Cobject;
    
                    self->_Cobject = new v8::Unlocker(Anon_1_C);
                    
                        
                }
            }
        }
    }
    if (status != 0){
       self->_Cobject = NULL;
       status = 0;
    }
    return status;
}



static void
v8___Locker_dealloc(v8___Locker* self)
{
    if(!self) return;
    if (!self->_is_c_reference){
        delete self->_Cobject;
    }
    self->_Cobject = NULL;
    self->_owner = NULL;
    self->_is_c_reference = false;
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject *
v8___Locker_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
    v8___Locker *self;

    self = (v8___Locker *)type->tp_alloc(type, 0);
    if (self != NULL) {
        self->_Cobject = NULL;
        self->_owner = NULL;
    }

    return (PyObject *)self;
}       

static int
v8___Locker_init(v8___Locker *self, PyObject *args, PyObject *kwds)
{
    int status = -1;
    if(!self) return status;
    self->_owner = (PyObject*)self;
    
    {
        PyObject * tmp = NULL;
        (void)tmp;
         
        static char *kwlist[] = { "isolate", NULL};
        
        PyObject* isolate = NULL;
        
            
        if ( 0 != status ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &isolate);
            if ( 0 == status  && isolate){
                
                
                if(status == 0){
                    
                   v8::Isolate * isolate_C = ((v8___Isolate*)isolate)->_Cobject;
    
                    self->_Cobject = new v8::Locker(isolate_C);
                    
                        
                }
            }
        }
    }
    if (status != 0){
       self->_Cobject = NULL;
       status = 0;
    }
    return status;
}


static PyObject*
v8___Locker__IsLocked(PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* isolate = NULL;
        
        static char *kwlist[] = { "isolate", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &isolate);
            if ( 0 == status  && isolate){
                    
                    
                if (!checkType(&v8___IsolateType, isolate )){ status = -1;}
    
                        
                   v8::Isolate * isolate_C = ((v8___Isolate*)isolate)->_Cobject;
    
                        if( 0 == status ){
                       bool result = v8::Locker::IsLocked(isolate_C);
                       result_py = Unknown_type_;
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8___Locker__IsActive(PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                       bool result = v8::Locker::IsActive();
                       result_py = Unknown_type_;
                    
                     
             }
        }
    }
    

    return result_py;
}        

           
PyMODINIT_FUNC
initv8___(void) 
{
    int status = 0;
    PyObject* m;
    m = Py_InitModule3("v8", v8_methods,
             "Module wrapping C/C++ library v8");
     
    
    v8___AccessorSignatureType.tp_new = PyType_GenericNew;
    if (PyType_Ready(&v8___AccessorSignature) == 0){             
        Py_INCREF(&v8___AccessorSignatureType);
        PyModule_AddObject(m, "AccessorSignature", (PyObject *)&v8___AccessorSignatureType);
    } else {
       status = =1;
    }

    v8___ArrayType.tp_new = PyType_GenericNew;
    if (PyType_Ready(&v8___Array) == 0){             
        Py_INCREF(&v8___ArrayType);
        PyModule_AddObject(m, "Array", (PyObject *)&v8___ArrayType);
    } else {
       status = =1;
    }

    v8___BooleanType.tp_new = PyType_GenericNew;
    if (PyType_Ready(&v8___Boolean) == 0){             
        Py_INCREF(&v8___BooleanType);
        PyModule_AddObject(m, "Boolean", (PyObject *)&v8___BooleanType);
    } else {
       status = =1;
    }

    v8___BooleanObjectType.tp_new = PyType_GenericNew;
    if (PyType_Ready(&v8___BooleanObject) == 0){             
        Py_INCREF(&v8___BooleanObjectType);
        PyModule_AddObject(m, "BooleanObject", (PyObject *)&v8___BooleanObjectType);
    } else {
       status = =1;
    }

    v8___ContextType.tp_new = PyType_GenericNew;
    if (PyType_Ready(&v8___Context) == 0){             
        Py_INCREF(&v8___ContextType);
        PyModule_AddObject(m, "Context", (PyObject *)&v8___ContextType);
    } else {
       status = =1;
    }

    v8___CpuProfilerType.tp_new = PyType_GenericNew;
    if (PyType_Ready(&v8___CpuProfiler) == 0){             
        Py_INCREF(&v8___CpuProfilerType);
        PyModule_AddObject(m, "CpuProfiler", (PyObject *)&v8___CpuProfilerType);
    } else {
       status = =1;
    }

    v8___DataType.tp_new = PyType_GenericNew;
    if (PyType_Ready(&v8___Data) == 0){             
        Py_INCREF(&v8___DataType);
        PyModule_AddObject(m, "Data", (PyObject *)&v8___DataType);
    } else {
       status = =1;
    }

    v8___DateType.tp_new = PyType_GenericNew;
    if (PyType_Ready(&v8___Date) == 0){             
        Py_INCREF(&v8___DateType);
        PyModule_AddObject(m, "Date", (PyObject *)&v8___DateType);
    } else {
       status = =1;
    }

    v8___ExternalType.tp_new = PyType_GenericNew;
    if (PyType_Ready(&v8___External) == 0){             
        Py_INCREF(&v8___ExternalType);
        PyModule_AddObject(m, "External", (PyObject *)&v8___ExternalType);
    } else {
       status = =1;
    }

    v8___FunctionType.tp_new = PyType_GenericNew;
    if (PyType_Ready(&v8___Function) == 0){             
        Py_INCREF(&v8___FunctionType);
        PyModule_AddObject(m, "Function", (PyObject *)&v8___FunctionType);
    } else {
       status = =1;
    }

    v8___FunctionTemplateType.tp_new = PyType_GenericNew;
    if (PyType_Ready(&v8___FunctionTemplate) == 0){             
        Py_INCREF(&v8___FunctionTemplateType);
        PyModule_AddObject(m, "FunctionTemplate", (PyObject *)&v8___FunctionTemplateType);
    } else {
       status = =1;
    }

    v8___HeapProfilerType.tp_new = PyType_GenericNew;
    if (PyType_Ready(&v8___HeapProfiler) == 0){             
        Py_INCREF(&v8___HeapProfilerType);
        PyModule_AddObject(m, "HeapProfiler", (PyObject *)&v8___HeapProfilerType);
    } else {
       status = =1;
    }

    v8___ImplementationUtilitiesType.tp_new = PyType_GenericNew;
    if (PyType_Ready(&v8___ImplementationUtilities) == 0){             
        Py_INCREF(&v8___ImplementationUtilitiesType);
        PyModule_AddObject(m, "ImplementationUtilities", (PyObject *)&v8___ImplementationUtilitiesType);
    } else {
       status = =1;
    }

    v8___Int32Type.tp_new = PyType_GenericNew;
    if (PyType_Ready(&v8___Int32) == 0){             
        Py_INCREF(&v8___Int32Type);
        PyModule_AddObject(m, "Int32", (PyObject *)&v8___Int32Type);
    } else {
       status = =1;
    }

    v8___IntegerType.tp_new = PyType_GenericNew;
    if (PyType_Ready(&v8___Integer) == 0){             
        Py_INCREF(&v8___IntegerType);
        PyModule_AddObject(m, "Integer", (PyObject *)&v8___IntegerType);
    } else {
       status = =1;
    }

    v8___IsolateType.tp_new = PyType_GenericNew;
    if (PyType_Ready(&v8___Isolate) == 0){             
        Py_INCREF(&v8___IsolateType);
        PyModule_AddObject(m, "Isolate", (PyObject *)&v8___IsolateType);
    } else {
       status = =1;
    }

    v8___Maybe_int_Type.tp_new = PyType_GenericNew;
    if (PyType_Ready(&v8___Maybe_int_) == 0){             
        Py_INCREF(&v8___Maybe_int_Type);
        PyModule_AddObject(m, "Maybe_int_", (PyObject *)&v8___Maybe_int_Type);
    } else {
       status = =1;
    }

    v8___Maybe_bool_Type.tp_new = PyType_GenericNew;
    if (PyType_Ready(&v8___Maybe_bool_) == 0){             
        Py_INCREF(&v8___Maybe_bool_Type);
        PyModule_AddObject(m, "Maybe_bool_", (PyObject *)&v8___Maybe_bool_Type);
    } else {
       status = =1;
    }

    v8___Maybe_double_Type.tp_new = PyType_GenericNew;
    if (PyType_Ready(&v8___Maybe_double_) == 0){             
        Py_INCREF(&v8___Maybe_double_Type);
        PyModule_AddObject(m, "Maybe_double_", (PyObject *)&v8___Maybe_double_Type);
    } else {
       status = =1;
    }

    v8___Maybe_long_Type.tp_new = PyType_GenericNew;
    if (PyType_Ready(&v8___Maybe_long_) == 0){             
        Py_INCREF(&v8___Maybe_long_Type);
        PyModule_AddObject(m, "Maybe_long_", (PyObject *)&v8___Maybe_long_Type);
    } else {
       status = =1;
    }

    v8___Maybe_unsigned_int_Type.tp_new = PyType_GenericNew;
    if (PyType_Ready(&v8___Maybe_unsigned_int_) == 0){             
        Py_INCREF(&v8___Maybe_unsigned_int_Type);
        PyModule_AddObject(m, "Maybe_unsigned int_", (PyObject *)&v8___Maybe_unsigned_int_Type);
    } else {
       status = =1;
    }

    v8___Maybe_v8__PropertyAttribute_Type.tp_new = PyType_GenericNew;
    if (PyType_Ready(&v8___Maybe_v8__PropertyAttribute_) == 0){             
        Py_INCREF(&v8___Maybe_v8__PropertyAttribute_Type);
        PyModule_AddObject(m, "Maybe_v8__PropertyAttribute_", (PyObject *)&v8___Maybe_v8__PropertyAttribute_Type);
    } else {
       status = =1;
    }

    v8___NameType.tp_new = PyType_GenericNew;
    if (PyType_Ready(&v8___Name) == 0){             
        Py_INCREF(&v8___NameType);
        PyModule_AddObject(m, "Name", (PyObject *)&v8___NameType);
    } else {
       status = =1;
    }

    v8___NumberType.tp_new = PyType_GenericNew;
    if (PyType_Ready(&v8___Number) == 0){             
        Py_INCREF(&v8___NumberType);
        PyModule_AddObject(m, "Number", (PyObject *)&v8___NumberType);
    } else {
       status = =1;
    }

    v8___NumberObjectType.tp_new = PyType_GenericNew;
    if (PyType_Ready(&v8___NumberObject) == 0){             
        Py_INCREF(&v8___NumberObjectType);
        PyModule_AddObject(m, "NumberObject", (PyObject *)&v8___NumberObjectType);
    } else {
       status = =1;
    }

    v8___ObjectType.tp_new = PyType_GenericNew;
    if (PyType_Ready(&v8___Object) == 0){             
        Py_INCREF(&v8___ObjectType);
        PyModule_AddObject(m, "Object", (PyObject *)&v8___ObjectType);
    } else {
       status = =1;
    }

    v8___ObjectOperationDescriptorType.tp_new = PyType_GenericNew;
    if (PyType_Ready(&v8___ObjectOperationDescriptor) == 0){             
        Py_INCREF(&v8___ObjectOperationDescriptorType);
        PyModule_AddObject(m, "ObjectOperationDescriptor", (PyObject *)&v8___ObjectOperationDescriptorType);
    } else {
       status = =1;
    }

    v8___ObjectTemplateType.tp_new = PyType_GenericNew;
    if (PyType_Ready(&v8___ObjectTemplate) == 0){             
        Py_INCREF(&v8___ObjectTemplateType);
        PyModule_AddObject(m, "ObjectTemplate", (PyObject *)&v8___ObjectTemplateType);
    } else {
       status = =1;
    }

    v8___PlatformType.tp_new = PyType_GenericNew;
    if (PyType_Ready(&v8___Platform) == 0){             
        Py_INCREF(&v8___PlatformType);
        PyModule_AddObject(m, "Platform", (PyObject *)&v8___PlatformType);
    } else {
       status = =1;
    }

    v8___PrimitiveType.tp_new = PyType_GenericNew;
    if (PyType_Ready(&v8___Primitive) == 0){             
        Py_INCREF(&v8___PrimitiveType);
        PyModule_AddObject(m, "Primitive", (PyObject *)&v8___PrimitiveType);
    } else {
       status = =1;
    }

    v8___PromiseType.tp_new = PyType_GenericNew;
    if (PyType_Ready(&v8___Promise) == 0){             
        Py_INCREF(&v8___PromiseType);
        PyModule_AddObject(m, "Promise", (PyObject *)&v8___PromiseType);
    } else {
       status = =1;
    }

    v8___RawOperationDescriptorType.tp_new = PyType_GenericNew;
    if (PyType_Ready(&v8___RawOperationDescriptor) == 0){             
        Py_INCREF(&v8___RawOperationDescriptorType);
        PyModule_AddObject(m, "RawOperationDescriptor", (PyObject *)&v8___RawOperationDescriptorType);
    } else {
       status = =1;
    }

    v8___ScriptType.tp_new = PyType_GenericNew;
    if (PyType_Ready(&v8___Script) == 0){             
        Py_INCREF(&v8___ScriptType);
        PyModule_AddObject(m, "Script", (PyObject *)&v8___ScriptType);
    } else {
       status = =1;
    }

    v8___SharedArrayBufferType.tp_new = PyType_GenericNew;
    if (PyType_Ready(&v8___SharedArrayBuffer) == 0){             
        Py_INCREF(&v8___SharedArrayBufferType);
        PyModule_AddObject(m, "SharedArrayBuffer", (PyObject *)&v8___SharedArrayBufferType);
    } else {
       status = =1;
    }

    v8___SignatureType.tp_new = PyType_GenericNew;
    if (PyType_Ready(&v8___Signature) == 0){             
        Py_INCREF(&v8___SignatureType);
        PyModule_AddObject(m, "Signature", (PyObject *)&v8___SignatureType);
    } else {
       status = =1;
    }

    v8___StartupDataType.tp_new = PyType_GenericNew;
    if (PyType_Ready(&v8___StartupData) == 0){             
        Py_INCREF(&v8___StartupDataType);
        PyModule_AddObject(m, "StartupData", (PyObject *)&v8___StartupDataType);
    } else {
       status = =1;
    }

    v8___StackFrameType.tp_new = PyType_GenericNew;
    if (PyType_Ready(&v8___StackFrame) == 0){             
        Py_INCREF(&v8___StackFrameType);
        PyModule_AddObject(m, "StackFrame", (PyObject *)&v8___StackFrameType);
    } else {
       status = =1;
    }

    v8___StackTraceType.tp_new = PyType_GenericNew;
    if (PyType_Ready(&v8___StackTrace) == 0){             
        Py_INCREF(&v8___StackTraceType);
        PyModule_AddObject(m, "StackTrace", (PyObject *)&v8___StackTraceType);
    } else {
       status = =1;
    }

    v8___StringType.tp_new = PyType_GenericNew;
    if (PyType_Ready(&v8___String) == 0){             
        Py_INCREF(&v8___StringType);
        PyModule_AddObject(m, "String", (PyObject *)&v8___StringType);
    } else {
       status = =1;
    }

    v8___StringObjectType.tp_new = PyType_GenericNew;
    if (PyType_Ready(&v8___StringObject) == 0){             
        Py_INCREF(&v8___StringObjectType);
        PyModule_AddObject(m, "StringObject", (PyObject *)&v8___StringObjectType);
    } else {
       status = =1;
    }

    v8___SymbolType.tp_new = PyType_GenericNew;
    if (PyType_Ready(&v8___Symbol) == 0){             
        Py_INCREF(&v8___SymbolType);
        PyModule_AddObject(m, "Symbol", (PyObject *)&v8___SymbolType);
    } else {
       status = =1;
    }

    v8___SymbolObjectType.tp_new = PyType_GenericNew;
    if (PyType_Ready(&v8___SymbolObject) == 0){             
        Py_INCREF(&v8___SymbolObjectType);
        PyModule_AddObject(m, "SymbolObject", (PyObject *)&v8___SymbolObjectType);
    } else {
       status = =1;
    }

    v8___Uint32Type.tp_new = PyType_GenericNew;
    if (PyType_Ready(&v8___Uint32) == 0){             
        Py_INCREF(&v8___Uint32Type);
        PyModule_AddObject(m, "Uint32", (PyObject *)&v8___Uint32Type);
    } else {
       status = =1;
    }

    v8___UtilsType.tp_new = PyType_GenericNew;
    if (PyType_Ready(&v8___Utils) == 0){             
        Py_INCREF(&v8___UtilsType);
        PyModule_AddObject(m, "Utils", (PyObject *)&v8___UtilsType);
    } else {
       status = =1;
    }

    v8___ValueType.tp_new = PyType_GenericNew;
    if (PyType_Ready(&v8___Value) == 0){             
        Py_INCREF(&v8___ValueType);
        PyModule_AddObject(m, "Value", (PyObject *)&v8___ValueType);
    } else {
       status = =1;
    }

    v8___Local_v8__Primitive_Type.tp_new = PyType_GenericNew;
    if (PyType_Ready(&v8___Local_v8__Primitive_) == 0){             
        Py_INCREF(&v8___Local_v8__Primitive_Type);
        PyModule_AddObject(m, "Local_v8__Primitive_", (PyObject *)&v8___Local_v8__Primitive_Type);
    } else {
       status = =1;
    }

    v8___Local_v8__Boolean_Type.tp_new = PyType_GenericNew;
    if (PyType_Ready(&v8___Local_v8__Boolean_) == 0){             
        Py_INCREF(&v8___Local_v8__Boolean_Type);
        PyModule_AddObject(m, "Local_v8__Boolean_", (PyObject *)&v8___Local_v8__Boolean_Type);
    } else {
       status = =1;
    }

    v8___Local_v8__Value_Type.tp_new = PyType_GenericNew;
    if (PyType_Ready(&v8___Local_v8__Value_) == 0){             
        Py_INCREF(&v8___Local_v8__Value_Type);
        PyModule_AddObject(m, "Local_v8__Value_", (PyObject *)&v8___Local_v8__Value_Type);
    } else {
       status = =1;
    }

    v8___Local_v8__Integer_Type.tp_new = PyType_GenericNew;
    if (PyType_Ready(&v8___Local_v8__Integer_) == 0){             
        Py_INCREF(&v8___Local_v8__Integer_Type);
        PyModule_AddObject(m, "Local_v8__Integer_", (PyObject *)&v8___Local_v8__Integer_Type);
    } else {
       status = =1;
    }

    v8___Local_v8__Script_Type.tp_new = PyType_GenericNew;
    if (PyType_Ready(&v8___Local_v8__Script_) == 0){             
        Py_INCREF(&v8___Local_v8__Script_Type);
        PyModule_AddObject(m, "Local_v8__Script_", (PyObject *)&v8___Local_v8__Script_Type);
    } else {
       status = =1;
    }

    v8___Local_v8__String_Type.tp_new = PyType_GenericNew;
    if (PyType_Ready(&v8___Local_v8__String_) == 0){             
        Py_INCREF(&v8___Local_v8__String_Type);
        PyModule_AddObject(m, "Local_v8__String_", (PyObject *)&v8___Local_v8__String_Type);
    } else {
       status = =1;
    }

    v8___Local_v8__Context_Type.tp_new = PyType_GenericNew;
    if (PyType_Ready(&v8___Local_v8__Context_) == 0){             
        Py_INCREF(&v8___Local_v8__Context_Type);
        PyModule_AddObject(m, "Local_v8__Context_", (PyObject *)&v8___Local_v8__Context_Type);
    } else {
       status = =1;
    }

    v8___Local_v8__UnboundScript_Type.tp_new = PyType_GenericNew;
    if (PyType_Ready(&v8___Local_v8__UnboundScript_) == 0){             
        Py_INCREF(&v8___Local_v8__UnboundScript_Type);
        PyModule_AddObject(m, "Local_v8__UnboundScript_", (PyObject *)&v8___Local_v8__UnboundScript_Type);
    } else {
       status = =1;
    }

    v8___Local_v8__Function_Type.tp_new = PyType_GenericNew;
    if (PyType_Ready(&v8___Local_v8__Function_) == 0){             
        Py_INCREF(&v8___Local_v8__Function_Type);
        PyModule_AddObject(m, "Local_v8__Function_", (PyObject *)&v8___Local_v8__Function_Type);
    } else {
       status = =1;
    }

    v8___Local_v8__Object_Type.tp_new = PyType_GenericNew;
    if (PyType_Ready(&v8___Local_v8__Object_) == 0){             
        Py_INCREF(&v8___Local_v8__Object_Type);
        PyModule_AddObject(m, "Local_v8__Object_", (PyObject *)&v8___Local_v8__Object_Type);
    } else {
       status = =1;
    }

    v8___Local_v8__StackTrace_Type.tp_new = PyType_GenericNew;
    if (PyType_Ready(&v8___Local_v8__StackTrace_) == 0){             
        Py_INCREF(&v8___Local_v8__StackTrace_Type);
        PyModule_AddObject(m, "Local_v8__StackTrace_", (PyObject *)&v8___Local_v8__StackTrace_Type);
    } else {
       status = =1;
    }

    v8___Local_v8__StackFrame_Type.tp_new = PyType_GenericNew;
    if (PyType_Ready(&v8___Local_v8__StackFrame_) == 0){             
        Py_INCREF(&v8___Local_v8__StackFrame_Type);
        PyModule_AddObject(m, "Local_v8__StackFrame_", (PyObject *)&v8___Local_v8__StackFrame_Type);
    } else {
       status = =1;
    }

    v8___Local_v8__Array_Type.tp_new = PyType_GenericNew;
    if (PyType_Ready(&v8___Local_v8__Array_) == 0){             
        Py_INCREF(&v8___Local_v8__Array_Type);
        PyModule_AddObject(m, "Local_v8__Array_", (PyObject *)&v8___Local_v8__Array_Type);
    } else {
       status = =1;
    }

    v8___Local_v8__NativeWeakMap_Type.tp_new = PyType_GenericNew;
    if (PyType_Ready(&v8___Local_v8__NativeWeakMap_) == 0){             
        Py_INCREF(&v8___Local_v8__NativeWeakMap_Type);
        PyModule_AddObject(m, "Local_v8__NativeWeakMap_", (PyObject *)&v8___Local_v8__NativeWeakMap_Type);
    } else {
       status = =1;
    }

    v8___Local_v8__Number_Type.tp_new = PyType_GenericNew;
    if (PyType_Ready(&v8___Local_v8__Number_) == 0){             
        Py_INCREF(&v8___Local_v8__Number_Type);
        PyModule_AddObject(m, "Local_v8__Number_", (PyObject *)&v8___Local_v8__Number_Type);
    } else {
       status = =1;
    }

    v8___Local_v8__Uint32_Type.tp_new = PyType_GenericNew;
    if (PyType_Ready(&v8___Local_v8__Uint32_) == 0){             
        Py_INCREF(&v8___Local_v8__Uint32_Type);
        PyModule_AddObject(m, "Local_v8__Uint32_", (PyObject *)&v8___Local_v8__Uint32_Type);
    } else {
       status = =1;
    }

    v8___Local_v8__Int32_Type.tp_new = PyType_GenericNew;
    if (PyType_Ready(&v8___Local_v8__Int32_) == 0){             
        Py_INCREF(&v8___Local_v8__Int32_Type);
        PyModule_AddObject(m, "Local_v8__Int32_", (PyObject *)&v8___Local_v8__Int32_Type);
    } else {
       status = =1;
    }

    v8___Local_v8__Symbol_Type.tp_new = PyType_GenericNew;
    if (PyType_Ready(&v8___Local_v8__Symbol_) == 0){             
        Py_INCREF(&v8___Local_v8__Symbol_Type);
        PyModule_AddObject(m, "Local_v8__Symbol_", (PyObject *)&v8___Local_v8__Symbol_Type);
    } else {
       status = =1;
    }

    v8___Local_v8__Name_Type.tp_new = PyType_GenericNew;
    if (PyType_Ready(&v8___Local_v8__Name_) == 0){             
        Py_INCREF(&v8___Local_v8__Name_Type);
        PyModule_AddObject(m, "Local_v8__Name_", (PyObject *)&v8___Local_v8__Name_Type);
    } else {
       status = =1;
    }

    v8___Local_v8__FunctionTemplate_Type.tp_new = PyType_GenericNew;
    if (PyType_Ready(&v8___Local_v8__FunctionTemplate_) == 0){             
        Py_INCREF(&v8___Local_v8__FunctionTemplate_Type);
        PyModule_AddObject(m, "Local_v8__FunctionTemplate_", (PyObject *)&v8___Local_v8__FunctionTemplate_Type);
    } else {
       status = =1;
    }

    v8___Local_v8__Map_Type.tp_new = PyType_GenericNew;
    if (PyType_Ready(&v8___Local_v8__Map_) == 0){             
        Py_INCREF(&v8___Local_v8__Map_Type);
        PyModule_AddObject(m, "Local_v8__Map_", (PyObject *)&v8___Local_v8__Map_Type);
    } else {
       status = =1;
    }

    v8___Local_v8__Set_Type.tp_new = PyType_GenericNew;
    if (PyType_Ready(&v8___Local_v8__Set_) == 0){             
        Py_INCREF(&v8___Local_v8__Set_Type);
        PyModule_AddObject(m, "Local_v8__Set_", (PyObject *)&v8___Local_v8__Set_Type);
    } else {
       status = =1;
    }

    v8___Local_v8__Promise__Resolver_Type.tp_new = PyType_GenericNew;
    if (PyType_Ready(&v8___Local_v8__Promise__Resolver_) == 0){             
        Py_INCREF(&v8___Local_v8__Promise__Resolver_Type);
        PyModule_AddObject(m, "Local_v8__Promise__Resolver_", (PyObject *)&v8___Local_v8__Promise__Resolver_Type);
    } else {
       status = =1;
    }

    v8___Local_v8__Promise_Type.tp_new = PyType_GenericNew;
    if (PyType_Ready(&v8___Local_v8__Promise_) == 0){             
        Py_INCREF(&v8___Local_v8__Promise_Type);
        PyModule_AddObject(m, "Local_v8__Promise_", (PyObject *)&v8___Local_v8__Promise_Type);
    } else {
       status = =1;
    }

    v8___Local_v8__ArrayBuffer_Type.tp_new = PyType_GenericNew;
    if (PyType_Ready(&v8___Local_v8__ArrayBuffer_) == 0){             
        Py_INCREF(&v8___Local_v8__ArrayBuffer_Type);
        PyModule_AddObject(m, "Local_v8__ArrayBuffer_", (PyObject *)&v8___Local_v8__ArrayBuffer_Type);
    } else {
       status = =1;
    }

    v8___Local_v8__Uint8Array_Type.tp_new = PyType_GenericNew;
    if (PyType_Ready(&v8___Local_v8__Uint8Array_) == 0){             
        Py_INCREF(&v8___Local_v8__Uint8Array_Type);
        PyModule_AddObject(m, "Local_v8__Uint8Array_", (PyObject *)&v8___Local_v8__Uint8Array_Type);
    } else {
       status = =1;
    }

    v8___Local_v8__SharedArrayBuffer_Type.tp_new = PyType_GenericNew;
    if (PyType_Ready(&v8___Local_v8__SharedArrayBuffer_) == 0){             
        Py_INCREF(&v8___Local_v8__SharedArrayBuffer_Type);
        PyModule_AddObject(m, "Local_v8__SharedArrayBuffer_", (PyObject *)&v8___Local_v8__SharedArrayBuffer_Type);
    } else {
       status = =1;
    }

    v8___Local_v8__Uint8ClampedArray_Type.tp_new = PyType_GenericNew;
    if (PyType_Ready(&v8___Local_v8__Uint8ClampedArray_) == 0){             
        Py_INCREF(&v8___Local_v8__Uint8ClampedArray_Type);
        PyModule_AddObject(m, "Local_v8__Uint8ClampedArray_", (PyObject *)&v8___Local_v8__Uint8ClampedArray_Type);
    } else {
       status = =1;
    }

    v8___Local_v8__Int8Array_Type.tp_new = PyType_GenericNew;
    if (PyType_Ready(&v8___Local_v8__Int8Array_) == 0){             
        Py_INCREF(&v8___Local_v8__Int8Array_Type);
        PyModule_AddObject(m, "Local_v8__Int8Array_", (PyObject *)&v8___Local_v8__Int8Array_Type);
    } else {
       status = =1;
    }

    v8___Local_v8__Uint16Array_Type.tp_new = PyType_GenericNew;
    if (PyType_Ready(&v8___Local_v8__Uint16Array_) == 0){             
        Py_INCREF(&v8___Local_v8__Uint16Array_Type);
        PyModule_AddObject(m, "Local_v8__Uint16Array_", (PyObject *)&v8___Local_v8__Uint16Array_Type);
    } else {
       status = =1;
    }

    v8___Local_v8__Int16Array_Type.tp_new = PyType_GenericNew;
    if (PyType_Ready(&v8___Local_v8__Int16Array_) == 0){             
        Py_INCREF(&v8___Local_v8__Int16Array_Type);
        PyModule_AddObject(m, "Local_v8__Int16Array_", (PyObject *)&v8___Local_v8__Int16Array_Type);
    } else {
       status = =1;
    }

    v8___Local_v8__Uint32Array_Type.tp_new = PyType_GenericNew;
    if (PyType_Ready(&v8___Local_v8__Uint32Array_) == 0){             
        Py_INCREF(&v8___Local_v8__Uint32Array_Type);
        PyModule_AddObject(m, "Local_v8__Uint32Array_", (PyObject *)&v8___Local_v8__Uint32Array_Type);
    } else {
       status = =1;
    }

    v8___Local_v8__Int32Array_Type.tp_new = PyType_GenericNew;
    if (PyType_Ready(&v8___Local_v8__Int32Array_) == 0){             
        Py_INCREF(&v8___Local_v8__Int32Array_Type);
        PyModule_AddObject(m, "Local_v8__Int32Array_", (PyObject *)&v8___Local_v8__Int32Array_Type);
    } else {
       status = =1;
    }

    v8___Local_v8__Float32Array_Type.tp_new = PyType_GenericNew;
    if (PyType_Ready(&v8___Local_v8__Float32Array_) == 0){             
        Py_INCREF(&v8___Local_v8__Float32Array_Type);
        PyModule_AddObject(m, "Local_v8__Float32Array_", (PyObject *)&v8___Local_v8__Float32Array_Type);
    } else {
       status = =1;
    }

    v8___Local_v8__Float64Array_Type.tp_new = PyType_GenericNew;
    if (PyType_Ready(&v8___Local_v8__Float64Array_) == 0){             
        Py_INCREF(&v8___Local_v8__Float64Array_Type);
        PyModule_AddObject(m, "Local_v8__Float64Array_", (PyObject *)&v8___Local_v8__Float64Array_Type);
    } else {
       status = =1;
    }

    v8___Local_v8__DataView_Type.tp_new = PyType_GenericNew;
    if (PyType_Ready(&v8___Local_v8__DataView_) == 0){             
        Py_INCREF(&v8___Local_v8__DataView_Type);
        PyModule_AddObject(m, "Local_v8__DataView_", (PyObject *)&v8___Local_v8__DataView_Type);
    } else {
       status = =1;
    }

    v8___Local_v8__RegExp_Type.tp_new = PyType_GenericNew;
    if (PyType_Ready(&v8___Local_v8__RegExp_) == 0){             
        Py_INCREF(&v8___Local_v8__RegExp_Type);
        PyModule_AddObject(m, "Local_v8__RegExp_", (PyObject *)&v8___Local_v8__RegExp_Type);
    } else {
       status = =1;
    }

    v8___Local_v8__External_Type.tp_new = PyType_GenericNew;
    if (PyType_Ready(&v8___Local_v8__External_) == 0){             
        Py_INCREF(&v8___Local_v8__External_Type);
        PyModule_AddObject(m, "Local_v8__External_", (PyObject *)&v8___Local_v8__External_Type);
    } else {
       status = =1;
    }

    v8___Local_v8__Data_Type.tp_new = PyType_GenericNew;
    if (PyType_Ready(&v8___Local_v8__Data_) == 0){             
        Py_INCREF(&v8___Local_v8__Data_Type);
        PyModule_AddObject(m, "Local_v8__Data_", (PyObject *)&v8___Local_v8__Data_Type);
    } else {
       status = =1;
    }

    v8___Local_v8__AccessorSignature_Type.tp_new = PyType_GenericNew;
    if (PyType_Ready(&v8___Local_v8__AccessorSignature_) == 0){             
        Py_INCREF(&v8___Local_v8__AccessorSignature_Type);
        PyModule_AddObject(m, "Local_v8__AccessorSignature_", (PyObject *)&v8___Local_v8__AccessorSignature_Type);
    } else {
       status = =1;
    }

    v8___Local_v8__Signature_Type.tp_new = PyType_GenericNew;
    if (PyType_Ready(&v8___Local_v8__Signature_) == 0){             
        Py_INCREF(&v8___Local_v8__Signature_Type);
        PyModule_AddObject(m, "Local_v8__Signature_", (PyObject *)&v8___Local_v8__Signature_Type);
    } else {
       status = =1;
    }

    v8___Local_v8__ObjectTemplate_Type.tp_new = PyType_GenericNew;
    if (PyType_Ready(&v8___Local_v8__ObjectTemplate_) == 0){             
        Py_INCREF(&v8___Local_v8__ObjectTemplate_Type);
        PyModule_AddObject(m, "Local_v8__ObjectTemplate_", (PyObject *)&v8___Local_v8__ObjectTemplate_Type);
    } else {
       status = =1;
    }

    v8___Local_v8__TypeSwitch_Type.tp_new = PyType_GenericNew;
    if (PyType_Ready(&v8___Local_v8__TypeSwitch_) == 0){             
        Py_INCREF(&v8___Local_v8__TypeSwitch_Type);
        PyModule_AddObject(m, "Local_v8__TypeSwitch_", (PyObject *)&v8___Local_v8__TypeSwitch_Type);
    } else {
       status = =1;
    }

    v8___Local_v8__Message_Type.tp_new = PyType_GenericNew;
    if (PyType_Ready(&v8___Local_v8__Message_) == 0){             
        Py_INCREF(&v8___Local_v8__Message_Type);
        PyModule_AddObject(m, "Local_v8__Message_", (PyObject *)&v8___Local_v8__Message_Type);
    } else {
       status = =1;
    }

    v8___MaybeLocal_v8__Script_Type.tp_new = PyType_GenericNew;
    if (PyType_Ready(&v8___MaybeLocal_v8__Script_) == 0){             
        Py_INCREF(&v8___MaybeLocal_v8__Script_Type);
        PyModule_AddObject(m, "MaybeLocal_v8__Script_", (PyObject *)&v8___MaybeLocal_v8__Script_Type);
    } else {
       status = =1;
    }

    v8___MaybeLocal_v8__Value_Type.tp_new = PyType_GenericNew;
    if (PyType_Ready(&v8___MaybeLocal_v8__Value_) == 0){             
        Py_INCREF(&v8___MaybeLocal_v8__Value_Type);
        PyModule_AddObject(m, "MaybeLocal_v8__Value_", (PyObject *)&v8___MaybeLocal_v8__Value_Type);
    } else {
       status = =1;
    }

    v8___MaybeLocal_v8__UnboundScript_Type.tp_new = PyType_GenericNew;
    if (PyType_Ready(&v8___MaybeLocal_v8__UnboundScript_) == 0){             
        Py_INCREF(&v8___MaybeLocal_v8__UnboundScript_Type);
        PyModule_AddObject(m, "MaybeLocal_v8__UnboundScript_", (PyObject *)&v8___MaybeLocal_v8__UnboundScript_Type);
    } else {
       status = =1;
    }

    v8___MaybeLocal_v8__Function_Type.tp_new = PyType_GenericNew;
    if (PyType_Ready(&v8___MaybeLocal_v8__Function_) == 0){             
        Py_INCREF(&v8___MaybeLocal_v8__Function_Type);
        PyModule_AddObject(m, "MaybeLocal_v8__Function_", (PyObject *)&v8___MaybeLocal_v8__Function_Type);
    } else {
       status = =1;
    }

    v8___MaybeLocal_v8__String_Type.tp_new = PyType_GenericNew;
    if (PyType_Ready(&v8___MaybeLocal_v8__String_) == 0){             
        Py_INCREF(&v8___MaybeLocal_v8__String_Type);
        PyModule_AddObject(m, "MaybeLocal_v8__String_", (PyObject *)&v8___MaybeLocal_v8__String_Type);
    } else {
       status = =1;
    }

    v8___MaybeLocal_v8__Boolean_Type.tp_new = PyType_GenericNew;
    if (PyType_Ready(&v8___MaybeLocal_v8__Boolean_) == 0){             
        Py_INCREF(&v8___MaybeLocal_v8__Boolean_Type);
        PyModule_AddObject(m, "MaybeLocal_v8__Boolean_", (PyObject *)&v8___MaybeLocal_v8__Boolean_Type);
    } else {
       status = =1;
    }

    v8___MaybeLocal_v8__Number_Type.tp_new = PyType_GenericNew;
    if (PyType_Ready(&v8___MaybeLocal_v8__Number_) == 0){             
        Py_INCREF(&v8___MaybeLocal_v8__Number_Type);
        PyModule_AddObject(m, "MaybeLocal_v8__Number_", (PyObject *)&v8___MaybeLocal_v8__Number_Type);
    } else {
       status = =1;
    }

    v8___MaybeLocal_v8__Object_Type.tp_new = PyType_GenericNew;
    if (PyType_Ready(&v8___MaybeLocal_v8__Object_) == 0){             
        Py_INCREF(&v8___MaybeLocal_v8__Object_Type);
        PyModule_AddObject(m, "MaybeLocal_v8__Object_", (PyObject *)&v8___MaybeLocal_v8__Object_Type);
    } else {
       status = =1;
    }

    v8___MaybeLocal_v8__Integer_Type.tp_new = PyType_GenericNew;
    if (PyType_Ready(&v8___MaybeLocal_v8__Integer_) == 0){             
        Py_INCREF(&v8___MaybeLocal_v8__Integer_Type);
        PyModule_AddObject(m, "MaybeLocal_v8__Integer_", (PyObject *)&v8___MaybeLocal_v8__Integer_Type);
    } else {
       status = =1;
    }

    v8___MaybeLocal_v8__Uint32_Type.tp_new = PyType_GenericNew;
    if (PyType_Ready(&v8___MaybeLocal_v8__Uint32_) == 0){             
        Py_INCREF(&v8___MaybeLocal_v8__Uint32_Type);
        PyModule_AddObject(m, "MaybeLocal_v8__Uint32_", (PyObject *)&v8___MaybeLocal_v8__Uint32_Type);
    } else {
       status = =1;
    }

    v8___MaybeLocal_v8__Int32_Type.tp_new = PyType_GenericNew;
    if (PyType_Ready(&v8___MaybeLocal_v8__Int32_) == 0){             
        Py_INCREF(&v8___MaybeLocal_v8__Int32_Type);
        PyModule_AddObject(m, "MaybeLocal_v8__Int32_", (PyObject *)&v8___MaybeLocal_v8__Int32_Type);
    } else {
       status = =1;
    }

    v8___MaybeLocal_v8__Array_Type.tp_new = PyType_GenericNew;
    if (PyType_Ready(&v8___MaybeLocal_v8__Array_) == 0){             
        Py_INCREF(&v8___MaybeLocal_v8__Array_Type);
        PyModule_AddObject(m, "MaybeLocal_v8__Array_", (PyObject *)&v8___MaybeLocal_v8__Array_Type);
    } else {
       status = =1;
    }

    v8___MaybeLocal_v8__Map_Type.tp_new = PyType_GenericNew;
    if (PyType_Ready(&v8___MaybeLocal_v8__Map_) == 0){             
        Py_INCREF(&v8___MaybeLocal_v8__Map_Type);
        PyModule_AddObject(m, "MaybeLocal_v8__Map_", (PyObject *)&v8___MaybeLocal_v8__Map_Type);
    } else {
       status = =1;
    }

    v8___MaybeLocal_v8__Set_Type.tp_new = PyType_GenericNew;
    if (PyType_Ready(&v8___MaybeLocal_v8__Set_) == 0){             
        Py_INCREF(&v8___MaybeLocal_v8__Set_Type);
        PyModule_AddObject(m, "MaybeLocal_v8__Set_", (PyObject *)&v8___MaybeLocal_v8__Set_Type);
    } else {
       status = =1;
    }

    v8___MaybeLocal_v8__Promise__Resolver_Type.tp_new = PyType_GenericNew;
    if (PyType_Ready(&v8___MaybeLocal_v8__Promise__Resolver_) == 0){             
        Py_INCREF(&v8___MaybeLocal_v8__Promise__Resolver_Type);
        PyModule_AddObject(m, "MaybeLocal_v8__Promise__Resolver_", (PyObject *)&v8___MaybeLocal_v8__Promise__Resolver_Type);
    } else {
       status = =1;
    }

    v8___MaybeLocal_v8__Promise_Type.tp_new = PyType_GenericNew;
    if (PyType_Ready(&v8___MaybeLocal_v8__Promise_) == 0){             
        Py_INCREF(&v8___MaybeLocal_v8__Promise_Type);
        PyModule_AddObject(m, "MaybeLocal_v8__Promise_", (PyObject *)&v8___MaybeLocal_v8__Promise_Type);
    } else {
       status = =1;
    }

    v8___MaybeLocal_v8__RegExp_Type.tp_new = PyType_GenericNew;
    if (PyType_Ready(&v8___MaybeLocal_v8__RegExp_) == 0){             
        Py_INCREF(&v8___MaybeLocal_v8__RegExp_Type);
        PyModule_AddObject(m, "MaybeLocal_v8__RegExp_", (PyObject *)&v8___MaybeLocal_v8__RegExp_Type);
    } else {
       status = =1;
    }

    v8___NonCopyablePersistentTraits_v8__Value_Type.tp_new = PyType_GenericNew;
    if (PyType_Ready(&v8___NonCopyablePersistentTraits_v8__Value_) == 0){             
        Py_INCREF(&v8___NonCopyablePersistentTraits_v8__Value_Type);
        PyModule_AddObject(m, "NonCopyablePersistentTraits_v8__Value_", (PyObject *)&v8___NonCopyablePersistentTraits_v8__Value_Type);
    } else {
       status = =1;
    }

    v8___PersistentBase_v8__Value_Type.tp_new = PyType_GenericNew;
    if (PyType_Ready(&v8___PersistentBase_v8__Value_) == 0){             
        Py_INCREF(&v8___PersistentBase_v8__Value_Type);
        PyModule_AddObject(m, "PersistentBase_v8__Value_", (PyObject *)&v8___PersistentBase_v8__Value_Type);
    } else {
       status = =1;
    }

    v8___PersistentBase_v8__Integer_Type.tp_new = PyType_GenericNew;
    if (PyType_Ready(&v8___PersistentBase_v8__Integer_) == 0){             
        Py_INCREF(&v8___PersistentBase_v8__Integer_Type);
        PyModule_AddObject(m, "PersistentBase_v8__Integer_", (PyObject *)&v8___PersistentBase_v8__Integer_Type);
    } else {
       status = =1;
    }

    v8___PersistentBase_v8__Boolean_Type.tp_new = PyType_GenericNew;
    if (PyType_Ready(&v8___PersistentBase_v8__Boolean_) == 0){             
        Py_INCREF(&v8___PersistentBase_v8__Boolean_Type);
        PyModule_AddObject(m, "PersistentBase_v8__Boolean_", (PyObject *)&v8___PersistentBase_v8__Boolean_Type);
    } else {
       status = =1;
    }

    v8___PersistentBase_v8__UnboundScript_Type.tp_new = PyType_GenericNew;
    if (PyType_Ready(&v8___PersistentBase_v8__UnboundScript_) == 0){             
        Py_INCREF(&v8___PersistentBase_v8__UnboundScript_Type);
        PyModule_AddObject(m, "PersistentBase_v8__UnboundScript_", (PyObject *)&v8___PersistentBase_v8__UnboundScript_Type);
    } else {
       status = =1;
    }

    v8___PersistentBase_v8__String_Type.tp_new = PyType_GenericNew;
    if (PyType_Ready(&v8___PersistentBase_v8__String_) == 0){             
        Py_INCREF(&v8___PersistentBase_v8__String_Type);
        PyModule_AddObject(m, "PersistentBase_v8__String_", (PyObject *)&v8___PersistentBase_v8__String_Type);
    } else {
       status = =1;
    }

    v8___PersistentBase_v8__Object_Type.tp_new = PyType_GenericNew;
    if (PyType_Ready(&v8___PersistentBase_v8__Object_) == 0){             
        Py_INCREF(&v8___PersistentBase_v8__Object_Type);
        PyModule_AddObject(m, "PersistentBase_v8__Object_", (PyObject *)&v8___PersistentBase_v8__Object_Type);
    } else {
       status = =1;
    }

    v8___PersistentBase_v8__Function_Type.tp_new = PyType_GenericNew;
    if (PyType_Ready(&v8___PersistentBase_v8__Function_) == 0){             
        Py_INCREF(&v8___PersistentBase_v8__Function_Type);
        PyModule_AddObject(m, "PersistentBase_v8__Function_", (PyObject *)&v8___PersistentBase_v8__Function_Type);
    } else {
       status = =1;
    }

    v8___PersistentBase_v8__Context_Type.tp_new = PyType_GenericNew;
    if (PyType_Ready(&v8___PersistentBase_v8__Context_) == 0){             
        Py_INCREF(&v8___PersistentBase_v8__Context_Type);
        PyModule_AddObject(m, "PersistentBase_v8__Context_", (PyObject *)&v8___PersistentBase_v8__Context_Type);
    } else {
       status = =1;
    }

    v8___PersistentBase_v8__FunctionTemplate_Type.tp_new = PyType_GenericNew;
    if (PyType_Ready(&v8___PersistentBase_v8__FunctionTemplate_) == 0){             
        Py_INCREF(&v8___PersistentBase_v8__FunctionTemplate_Type);
        PyModule_AddObject(m, "PersistentBase_v8__FunctionTemplate_", (PyObject *)&v8___PersistentBase_v8__FunctionTemplate_Type);
    } else {
       status = =1;
    }

    v8___PersistentBase_v8__AccessorSignature_Type.tp_new = PyType_GenericNew;
    if (PyType_Ready(&v8___PersistentBase_v8__AccessorSignature_) == 0){             
        Py_INCREF(&v8___PersistentBase_v8__AccessorSignature_Type);
        PyModule_AddObject(m, "PersistentBase_v8__AccessorSignature_", (PyObject *)&v8___PersistentBase_v8__AccessorSignature_Type);
    } else {
       status = =1;
    }

    v8___PersistentBase_v8__Signature_Type.tp_new = PyType_GenericNew;
    if (PyType_Ready(&v8___PersistentBase_v8__Signature_) == 0){             
        Py_INCREF(&v8___PersistentBase_v8__Signature_Type);
        PyModule_AddObject(m, "PersistentBase_v8__Signature_", (PyObject *)&v8___PersistentBase_v8__Signature_Type);
    } else {
       status = =1;
    }

    v8___PersistentBase_v8__Promise_Type.tp_new = PyType_GenericNew;
    if (PyType_Ready(&v8___PersistentBase_v8__Promise_) == 0){             
        Py_INCREF(&v8___PersistentBase_v8__Promise_Type);
        PyModule_AddObject(m, "PersistentBase_v8__Promise_", (PyObject *)&v8___PersistentBase_v8__Promise_Type);
    } else {
       status = =1;
    }

    v8___PersistentBase_v8__StackTrace_Type.tp_new = PyType_GenericNew;
    if (PyType_Ready(&v8___PersistentBase_v8__StackTrace_) == 0){             
        Py_INCREF(&v8___PersistentBase_v8__StackTrace_Type);
        PyModule_AddObject(m, "PersistentBase_v8__StackTrace_", (PyObject *)&v8___PersistentBase_v8__StackTrace_Type);
    } else {
       status = =1;
    }

    v8___PersistentBase_v8__ObjectTemplate_Type.tp_new = PyType_GenericNew;
    if (PyType_Ready(&v8___PersistentBase_v8__ObjectTemplate_) == 0){             
        Py_INCREF(&v8___PersistentBase_v8__ObjectTemplate_Type);
        PyModule_AddObject(m, "PersistentBase_v8__ObjectTemplate_", (PyObject *)&v8___PersistentBase_v8__ObjectTemplate_Type);
    } else {
       status = =1;
    }

    v8___PersistentBase_v8__Data_Type.tp_new = PyType_GenericNew;
    if (PyType_Ready(&v8___PersistentBase_v8__Data_) == 0){             
        Py_INCREF(&v8___PersistentBase_v8__Data_Type);
        PyModule_AddObject(m, "PersistentBase_v8__Data_", (PyObject *)&v8___PersistentBase_v8__Data_Type);
    } else {
       status = =1;
    }

    v8___PersistentBase_v8__Name_Type.tp_new = PyType_GenericNew;
    if (PyType_Ready(&v8___PersistentBase_v8__Name_) == 0){             
        Py_INCREF(&v8___PersistentBase_v8__Name_Type);
        PyModule_AddObject(m, "PersistentBase_v8__Name_", (PyObject *)&v8___PersistentBase_v8__Name_Type);
    } else {
       status = =1;
    }

    v8___PersistentBase_v8__Number_Type.tp_new = PyType_GenericNew;
    if (PyType_Ready(&v8___PersistentBase_v8__Number_) == 0){             
        Py_INCREF(&v8___PersistentBase_v8__Number_Type);
        PyModule_AddObject(m, "PersistentBase_v8__Number_", (PyObject *)&v8___PersistentBase_v8__Number_Type);
    } else {
       status = =1;
    }

    v8___PersistentBase_v8__Uint32_Type.tp_new = PyType_GenericNew;
    if (PyType_Ready(&v8___PersistentBase_v8__Uint32_) == 0){             
        Py_INCREF(&v8___PersistentBase_v8__Uint32_Type);
        PyModule_AddObject(m, "PersistentBase_v8__Uint32_", (PyObject *)&v8___PersistentBase_v8__Uint32_Type);
    } else {
       status = =1;
    }

    v8___PersistentBase_v8__Int32_Type.tp_new = PyType_GenericNew;
    if (PyType_Ready(&v8___PersistentBase_v8__Int32_) == 0){             
        Py_INCREF(&v8___PersistentBase_v8__Int32_Type);
        PyModule_AddObject(m, "PersistentBase_v8__Int32_", (PyObject *)&v8___PersistentBase_v8__Int32_Type);
    } else {
       status = =1;
    }

    v8___PersistentBase_v8__Primitive_Type.tp_new = PyType_GenericNew;
    if (PyType_Ready(&v8___PersistentBase_v8__Primitive_) == 0){             
        Py_INCREF(&v8___PersistentBase_v8__Primitive_Type);
        PyModule_AddObject(m, "PersistentBase_v8__Primitive_", (PyObject *)&v8___PersistentBase_v8__Primitive_Type);
    } else {
       status = =1;
    }

    v8___Persistent_v8__Value__v8__NonCopyablePersistentTraits_v8__Value___Type.tp_new = PyType_GenericNew;
    if (PyType_Ready(&v8___Persistent_v8__Value__v8__NonCopyablePersistentTraits_v8__Value___) == 0){             
        Py_INCREF(&v8___Persistent_v8__Value__v8__NonCopyablePersistentTraits_v8__Value___Type);
        PyModule_AddObject(m, "Persistent_v8__Value, v8__NonCopyablePersistentTraits_v8__Value_ _", (PyObject *)&v8___Persistent_v8__Value__v8__NonCopyablePersistentTraits_v8__Value___Type);
    } else {
       status = =1;
    }

    v8___FunctionCallbackInfo_v8__Value_Type.tp_new = PyType_GenericNew;
    if (PyType_Ready(&v8___FunctionCallbackInfo_v8__Value_) == 0){             
        Py_INCREF(&v8___FunctionCallbackInfo_v8__Value_Type);
        PyModule_AddObject(m, "FunctionCallbackInfo_v8__Value_", (PyObject *)&v8___FunctionCallbackInfo_v8__Value_Type);
    } else {
       status = =1;
    }

    v8___PropertyCallbackInfo_v8__Value_Type.tp_new = PyType_GenericNew;
    if (PyType_Ready(&v8___PropertyCallbackInfo_v8__Value_) == 0){             
        Py_INCREF(&v8___PropertyCallbackInfo_v8__Value_Type);
        PyModule_AddObject(m, "PropertyCallbackInfo_v8__Value_", (PyObject *)&v8___PropertyCallbackInfo_v8__Value_Type);
    } else {
       status = =1;
    }

    v8___PropertyCallbackInfo_void_Type.tp_new = PyType_GenericNew;
    if (PyType_Ready(&v8___PropertyCallbackInfo_void_) == 0){             
        Py_INCREF(&v8___PropertyCallbackInfo_void_Type);
        PyModule_AddObject(m, "PropertyCallbackInfo_void_", (PyObject *)&v8___PropertyCallbackInfo_void_Type);
    } else {
       status = =1;
    }

    v8___PropertyCallbackInfo_v8__Integer_Type.tp_new = PyType_GenericNew;
    if (PyType_Ready(&v8___PropertyCallbackInfo_v8__Integer_) == 0){             
        Py_INCREF(&v8___PropertyCallbackInfo_v8__Integer_Type);
        PyModule_AddObject(m, "PropertyCallbackInfo_v8__Integer_", (PyObject *)&v8___PropertyCallbackInfo_v8__Integer_Type);
    } else {
       status = =1;
    }

    v8___PropertyCallbackInfo_v8__Boolean_Type.tp_new = PyType_GenericNew;
    if (PyType_Ready(&v8___PropertyCallbackInfo_v8__Boolean_) == 0){             
        Py_INCREF(&v8___PropertyCallbackInfo_v8__Boolean_Type);
        PyModule_AddObject(m, "PropertyCallbackInfo_v8__Boolean_", (PyObject *)&v8___PropertyCallbackInfo_v8__Boolean_Type);
    } else {
       status = =1;
    }

    v8___PropertyCallbackInfo_v8__Array_Type.tp_new = PyType_GenericNew;
    if (PyType_Ready(&v8___PropertyCallbackInfo_v8__Array_) == 0){             
        Py_INCREF(&v8___PropertyCallbackInfo_v8__Array_Type);
        PyModule_AddObject(m, "PropertyCallbackInfo_v8__Array_", (PyObject *)&v8___PropertyCallbackInfo_v8__Array_Type);
    } else {
       status = =1;
    }

    v8___CallHandlerHelperType.tp_new = PyType_GenericNew;
    if (PyType_Ready(&v8___CallHandlerHelper) == 0){             
        Py_INCREF(&v8___CallHandlerHelperType);
        PyModule_AddObject(m, "CallHandlerHelper", (PyObject *)&v8___CallHandlerHelperType);
    } else {
       status = =1;
    }

    v8___EscapableHandleScopeType.tp_new = PyType_GenericNew;
    if (PyType_Ready(&v8___EscapableHandleScope) == 0){             
        Py_INCREF(&v8___EscapableHandleScopeType);
        PyModule_AddObject(m, "EscapableHandleScope", (PyObject *)&v8___EscapableHandleScopeType);
    } else {
       status = =1;
    }

    v8___UniqueIdType.tp_new = PyType_GenericNew;
    if (PyType_Ready(&v8___UniqueId) == 0){             
        Py_INCREF(&v8___UniqueIdType);
        PyModule_AddObject(m, "UniqueId", (PyObject *)&v8___UniqueIdType);
    } else {
       status = =1;
    }

    v8___WeakCallbackInfo_void_Type.tp_new = PyType_GenericNew;
    if (PyType_Ready(&v8___WeakCallbackInfo_void_) == 0){             
        Py_INCREF(&v8___WeakCallbackInfo_void_Type);
        PyModule_AddObject(m, "WeakCallbackInfo_void_", (PyObject *)&v8___WeakCallbackInfo_void_Type);
    } else {
       status = =1;
    }

    v8___WeakCallbackData_v8__Value__void_Type.tp_new = PyType_GenericNew;
    if (PyType_Ready(&v8___WeakCallbackData_v8__Value__void_) == 0){             
        Py_INCREF(&v8___WeakCallbackData_v8__Value__void_Type);
        PyModule_AddObject(m, "WeakCallbackData_v8__Value, void_", (PyObject *)&v8___WeakCallbackData_v8__Value__void_Type);
    } else {
       status = =1;
    }

    v8___HandleScopeType.tp_new = PyType_GenericNew;
    if (PyType_Ready(&v8___HandleScope) == 0){             
        Py_INCREF(&v8___HandleScopeType);
        PyModule_AddObject(m, "HandleScope", (PyObject *)&v8___HandleScopeType);
    } else {
       status = =1;
    }

    v8___SealHandleScopeType.tp_new = PyType_GenericNew;
    if (PyType_Ready(&v8___SealHandleScope) == 0){             
        Py_INCREF(&v8___SealHandleScopeType);
        PyModule_AddObject(m, "SealHandleScope", (PyObject *)&v8___SealHandleScopeType);
    } else {
       status = =1;
    }

    v8___ScriptOriginOptionsType.tp_new = PyType_GenericNew;
    if (PyType_Ready(&v8___ScriptOriginOptions) == 0){             
        Py_INCREF(&v8___ScriptOriginOptionsType);
        PyModule_AddObject(m, "ScriptOriginOptions", (PyObject *)&v8___ScriptOriginOptionsType);
    } else {
       status = =1;
    }

    v8___ScriptOriginType.tp_new = PyType_GenericNew;
    if (PyType_Ready(&v8___ScriptOrigin) == 0){             
        Py_INCREF(&v8___ScriptOriginType);
        PyModule_AddObject(m, "ScriptOrigin", (PyObject *)&v8___ScriptOriginType);
    } else {
       status = =1;
    }

    v8___UnboundScriptType.tp_new = PyType_GenericNew;
    if (PyType_Ready(&v8___UnboundScript) == 0){             
        Py_INCREF(&v8___UnboundScriptType);
        PyModule_AddObject(m, "UnboundScript", (PyObject *)&v8___UnboundScriptType);
    } else {
       status = =1;
    }

    v8___ScriptCompilerType.tp_new = PyType_GenericNew;
    if (PyType_Ready(&v8___ScriptCompiler) == 0){             
        Py_INCREF(&v8___ScriptCompilerType);
        PyModule_AddObject(m, "ScriptCompiler", (PyObject *)&v8___ScriptCompilerType);
    } else {
       status = =1;
    }

    v8___MessageType.tp_new = PyType_GenericNew;
    if (PyType_Ready(&v8___Message) == 0){             
        Py_INCREF(&v8___MessageType);
        PyModule_AddObject(m, "Message", (PyObject *)&v8___MessageType);
    } else {
       status = =1;
    }

    v8___RegisterStateType.tp_new = PyType_GenericNew;
    if (PyType_Ready(&v8___RegisterState) == 0){             
        Py_INCREF(&v8___RegisterStateType);
        PyModule_AddObject(m, "RegisterState", (PyObject *)&v8___RegisterStateType);
    } else {
       status = =1;
    }

    v8___SampleInfoType.tp_new = PyType_GenericNew;
    if (PyType_Ready(&v8___SampleInfo) == 0){             
        Py_INCREF(&v8___SampleInfoType);
        PyModule_AddObject(m, "SampleInfo", (PyObject *)&v8___SampleInfoType);
    } else {
       status = =1;
    }

    v8___JSONType.tp_new = PyType_GenericNew;
    if (PyType_Ready(&v8___JSON) == 0){             
        Py_INCREF(&v8___JSONType);
        PyModule_AddObject(m, "JSON", (PyObject *)&v8___JSONType);
    } else {
       status = =1;
    }

    v8___NativeWeakMapType.tp_new = PyType_GenericNew;
    if (PyType_Ready(&v8___NativeWeakMap) == 0){             
        Py_INCREF(&v8___NativeWeakMapType);
        PyModule_AddObject(m, "NativeWeakMap", (PyObject *)&v8___NativeWeakMapType);
    } else {
       status = =1;
    }

    v8___MapType.tp_new = PyType_GenericNew;
    if (PyType_Ready(&v8___Map) == 0){             
        Py_INCREF(&v8___MapType);
        PyModule_AddObject(m, "Map", (PyObject *)&v8___MapType);
    } else {
       status = =1;
    }

    v8___SetType.tp_new = PyType_GenericNew;
    if (PyType_Ready(&v8___Set) == 0){             
        Py_INCREF(&v8___SetType);
        PyModule_AddObject(m, "Set", (PyObject *)&v8___SetType);
    } else {
       status = =1;
    }

    v8___ArrayBufferType.tp_new = PyType_GenericNew;
    if (PyType_Ready(&v8___ArrayBuffer) == 0){             
        Py_INCREF(&v8___ArrayBufferType);
        PyModule_AddObject(m, "ArrayBuffer", (PyObject *)&v8___ArrayBufferType);
    } else {
       status = =1;
    }

    v8___ArrayBufferViewType.tp_new = PyType_GenericNew;
    if (PyType_Ready(&v8___ArrayBufferView) == 0){             
        Py_INCREF(&v8___ArrayBufferViewType);
        PyModule_AddObject(m, "ArrayBufferView", (PyObject *)&v8___ArrayBufferViewType);
    } else {
       status = =1;
    }

    v8___TypedArrayType.tp_new = PyType_GenericNew;
    if (PyType_Ready(&v8___TypedArray) == 0){             
        Py_INCREF(&v8___TypedArrayType);
        PyModule_AddObject(m, "TypedArray", (PyObject *)&v8___TypedArrayType);
    } else {
       status = =1;
    }

    v8___Uint8ArrayType.tp_new = PyType_GenericNew;
    if (PyType_Ready(&v8___Uint8Array) == 0){             
        Py_INCREF(&v8___Uint8ArrayType);
        PyModule_AddObject(m, "Uint8Array", (PyObject *)&v8___Uint8ArrayType);
    } else {
       status = =1;
    }

    v8___Uint8ClampedArrayType.tp_new = PyType_GenericNew;
    if (PyType_Ready(&v8___Uint8ClampedArray) == 0){             
        Py_INCREF(&v8___Uint8ClampedArrayType);
        PyModule_AddObject(m, "Uint8ClampedArray", (PyObject *)&v8___Uint8ClampedArrayType);
    } else {
       status = =1;
    }

    v8___Int8ArrayType.tp_new = PyType_GenericNew;
    if (PyType_Ready(&v8___Int8Array) == 0){             
        Py_INCREF(&v8___Int8ArrayType);
        PyModule_AddObject(m, "Int8Array", (PyObject *)&v8___Int8ArrayType);
    } else {
       status = =1;
    }

    v8___Uint16ArrayType.tp_new = PyType_GenericNew;
    if (PyType_Ready(&v8___Uint16Array) == 0){             
        Py_INCREF(&v8___Uint16ArrayType);
        PyModule_AddObject(m, "Uint16Array", (PyObject *)&v8___Uint16ArrayType);
    } else {
       status = =1;
    }

    v8___Int16ArrayType.tp_new = PyType_GenericNew;
    if (PyType_Ready(&v8___Int16Array) == 0){             
        Py_INCREF(&v8___Int16ArrayType);
        PyModule_AddObject(m, "Int16Array", (PyObject *)&v8___Int16ArrayType);
    } else {
       status = =1;
    }

    v8___Uint32ArrayType.tp_new = PyType_GenericNew;
    if (PyType_Ready(&v8___Uint32Array) == 0){             
        Py_INCREF(&v8___Uint32ArrayType);
        PyModule_AddObject(m, "Uint32Array", (PyObject *)&v8___Uint32ArrayType);
    } else {
       status = =1;
    }

    v8___Int32ArrayType.tp_new = PyType_GenericNew;
    if (PyType_Ready(&v8___Int32Array) == 0){             
        Py_INCREF(&v8___Int32ArrayType);
        PyModule_AddObject(m, "Int32Array", (PyObject *)&v8___Int32ArrayType);
    } else {
       status = =1;
    }

    v8___Float32ArrayType.tp_new = PyType_GenericNew;
    if (PyType_Ready(&v8___Float32Array) == 0){             
        Py_INCREF(&v8___Float32ArrayType);
        PyModule_AddObject(m, "Float32Array", (PyObject *)&v8___Float32ArrayType);
    } else {
       status = =1;
    }

    v8___Float64ArrayType.tp_new = PyType_GenericNew;
    if (PyType_Ready(&v8___Float64Array) == 0){             
        Py_INCREF(&v8___Float64ArrayType);
        PyModule_AddObject(m, "Float64Array", (PyObject *)&v8___Float64ArrayType);
    } else {
       status = =1;
    }

    v8___DataViewType.tp_new = PyType_GenericNew;
    if (PyType_Ready(&v8___DataView) == 0){             
        Py_INCREF(&v8___DataViewType);
        PyModule_AddObject(m, "DataView", (PyObject *)&v8___DataViewType);
    } else {
       status = =1;
    }

    v8___RegExpType.tp_new = PyType_GenericNew;
    if (PyType_Ready(&v8___RegExp) == 0){             
        Py_INCREF(&v8___RegExpType);
        PyModule_AddObject(m, "RegExp", (PyObject *)&v8___RegExpType);
    } else {
       status = =1;
    }

    v8___TemplateType.tp_new = PyType_GenericNew;
    if (PyType_Ready(&v8___Template) == 0){             
        Py_INCREF(&v8___TemplateType);
        PyModule_AddObject(m, "Template", (PyObject *)&v8___TemplateType);
    } else {
       status = =1;
    }

    v8___NamedPropertyHandlerConfigurationType.tp_new = PyType_GenericNew;
    if (PyType_Ready(&v8___NamedPropertyHandlerConfiguration) == 0){             
        Py_INCREF(&v8___NamedPropertyHandlerConfigurationType);
        PyModule_AddObject(m, "NamedPropertyHandlerConfiguration", (PyObject *)&v8___NamedPropertyHandlerConfigurationType);
    } else {
       status = =1;
    }

    v8___IndexedPropertyHandlerConfigurationType.tp_new = PyType_GenericNew;
    if (PyType_Ready(&v8___IndexedPropertyHandlerConfiguration) == 0){             
        Py_INCREF(&v8___IndexedPropertyHandlerConfigurationType);
        PyModule_AddObject(m, "IndexedPropertyHandlerConfiguration", (PyObject *)&v8___IndexedPropertyHandlerConfigurationType);
    } else {
       status = =1;
    }

    v8___TypeSwitchType.tp_new = PyType_GenericNew;
    if (PyType_Ready(&v8___TypeSwitch) == 0){             
        Py_INCREF(&v8___TypeSwitchType);
        PyModule_AddObject(m, "TypeSwitch", (PyObject *)&v8___TypeSwitchType);
    } else {
       status = =1;
    }

    v8___ExternalOneByteStringResourceImplType.tp_new = PyType_GenericNew;
    if (PyType_Ready(&v8___ExternalOneByteStringResourceImpl) == 0){             
        Py_INCREF(&v8___ExternalOneByteStringResourceImplType);
        PyModule_AddObject(m, "ExternalOneByteStringResourceImpl", (PyObject *)&v8___ExternalOneByteStringResourceImplType);
    } else {
       status = =1;
    }

    v8___ExtensionType.tp_new = PyType_GenericNew;
    if (PyType_Ready(&v8___Extension) == 0){             
        Py_INCREF(&v8___ExtensionType);
        PyModule_AddObject(m, "Extension", (PyObject *)&v8___ExtensionType);
    } else {
       status = =1;
    }

    v8___ResourceConstraintsType.tp_new = PyType_GenericNew;
    if (PyType_Ready(&v8___ResourceConstraints) == 0){             
        Py_INCREF(&v8___ResourceConstraintsType);
        PyModule_AddObject(m, "ResourceConstraints", (PyObject *)&v8___ResourceConstraintsType);
    } else {
       status = =1;
    }

    v8___ExceptionType.tp_new = PyType_GenericNew;
    if (PyType_Ready(&v8___Exception) == 0){             
        Py_INCREF(&v8___ExceptionType);
        PyModule_AddObject(m, "Exception", (PyObject *)&v8___ExceptionType);
    } else {
       status = =1;
    }

    v8___PromiseRejectMessageType.tp_new = PyType_GenericNew;
    if (PyType_Ready(&v8___PromiseRejectMessage) == 0){             
        Py_INCREF(&v8___PromiseRejectMessageType);
        PyModule_AddObject(m, "PromiseRejectMessage", (PyObject *)&v8___PromiseRejectMessageType);
    } else {
       status = =1;
    }

    v8___HeapStatisticsType.tp_new = PyType_GenericNew;
    if (PyType_Ready(&v8___HeapStatistics) == 0){             
        Py_INCREF(&v8___HeapStatisticsType);
        PyModule_AddObject(m, "HeapStatistics", (PyObject *)&v8___HeapStatisticsType);
    } else {
       status = =1;
    }

    v8___HeapSpaceStatisticsType.tp_new = PyType_GenericNew;
    if (PyType_Ready(&v8___HeapSpaceStatistics) == 0){             
        Py_INCREF(&v8___HeapSpaceStatisticsType);
        PyModule_AddObject(m, "HeapSpaceStatistics", (PyObject *)&v8___HeapSpaceStatisticsType);
    } else {
       status = =1;
    }

    v8___HeapObjectStatisticsType.tp_new = PyType_GenericNew;
    if (PyType_Ready(&v8___HeapObjectStatistics) == 0){             
        Py_INCREF(&v8___HeapObjectStatisticsType);
        PyModule_AddObject(m, "HeapObjectStatistics", (PyObject *)&v8___HeapObjectStatisticsType);
    } else {
       status = =1;
    }

    v8___RetainedObjectInfoType.tp_new = PyType_GenericNew;
    if (PyType_Ready(&v8___RetainedObjectInfo) == 0){             
        Py_INCREF(&v8___RetainedObjectInfoType);
        PyModule_AddObject(m, "RetainedObjectInfo", (PyObject *)&v8___RetainedObjectInfoType);
    } else {
       status = =1;
    }

    v8___JitCodeEventType.tp_new = PyType_GenericNew;
    if (PyType_Ready(&v8___JitCodeEvent) == 0){             
        Py_INCREF(&v8___JitCodeEventType);
        PyModule_AddObject(m, "JitCodeEvent", (PyObject *)&v8___JitCodeEventType);
    } else {
       status = =1;
    }

    v8___ExternalResourceVisitorType.tp_new = PyType_GenericNew;
    if (PyType_Ready(&v8___ExternalResourceVisitor) == 0){             
        Py_INCREF(&v8___ExternalResourceVisitorType);
        PyModule_AddObject(m, "ExternalResourceVisitor", (PyObject *)&v8___ExternalResourceVisitorType);
    } else {
       status = =1;
    }

    v8___PersistentHandleVisitorType.tp_new = PyType_GenericNew;
    if (PyType_Ready(&v8___PersistentHandleVisitor) == 0){             
        Py_INCREF(&v8___PersistentHandleVisitorType);
        PyModule_AddObject(m, "PersistentHandleVisitor", (PyObject *)&v8___PersistentHandleVisitorType);
    } else {
       status = =1;
    }

    v8___V8Type.tp_new = PyType_GenericNew;
    if (PyType_Ready(&v8___V8) == 0){             
        Py_INCREF(&v8___V8Type);
        PyModule_AddObject(m, "V8", (PyObject *)&v8___V8Type);
    } else {
       status = =1;
    }

    v8___TryCatchType.tp_new = PyType_GenericNew;
    if (PyType_Ready(&v8___TryCatch) == 0){             
        Py_INCREF(&v8___TryCatchType);
        PyModule_AddObject(m, "TryCatch", (PyObject *)&v8___TryCatchType);
    } else {
       status = =1;
    }

    v8___ExtensionConfigurationType.tp_new = PyType_GenericNew;
    if (PyType_Ready(&v8___ExtensionConfiguration) == 0){             
        Py_INCREF(&v8___ExtensionConfigurationType);
        PyModule_AddObject(m, "ExtensionConfiguration", (PyObject *)&v8___ExtensionConfigurationType);
    } else {
       status = =1;
    }

    v8___UnlockerType.tp_new = PyType_GenericNew;
    if (PyType_Ready(&v8___Unlocker) == 0){             
        Py_INCREF(&v8___UnlockerType);
        PyModule_AddObject(m, "Unlocker", (PyObject *)&v8___UnlockerType);
    } else {
       status = =1;
    }

    v8___LockerType.tp_new = PyType_GenericNew;
    if (PyType_Ready(&v8___Locker) == 0){             
        Py_INCREF(&v8___LockerType);
        PyModule_AddObject(m, "Locker", (PyObject *)&v8___LockerType);
    } else {
       status = =1;
    }

    //how to handle status???
}

    
  
    
  
    
  
    
  
    
  
v8::RegisterState* v8::RegisterState::
get_Cobject(struct v8___v8::RegisterState* newowner){
   if( _is_c_reference && _owner != (PyObject*)newowner ){
       _Cobject = new v8::RegisterState(*_Cobject);
       _is_c_reference = false;
   }
   return _Cobject;
}
                 
v8::SampleInfo* v8::SampleInfo::
get_Cobject(struct v8___v8::SampleInfo* newowner){
   if( _is_c_reference && _owner != (PyObject*)newowner ){
       _Cobject = new v8::SampleInfo(*_Cobject);
       _is_c_reference = false;
   }
   return _Cobject;
}
                 
v8::NamedPropertyHandlerConfiguration* v8::NamedPropertyHandlerConfiguration::
get_Cobject(struct v8___v8::NamedPropertyHandlerConfiguration* newowner){
   if( _is_c_reference && _owner != (PyObject*)newowner ){
       _Cobject = new v8::NamedPropertyHandlerConfiguration(*_Cobject);
       _is_c_reference = false;
   }
   return _Cobject;
}
                 
v8::IndexedPropertyHandlerConfiguration* v8::IndexedPropertyHandlerConfiguration::
get_Cobject(struct v8___v8::IndexedPropertyHandlerConfiguration* newowner){
   if( _is_c_reference && _owner != (PyObject*)newowner ){
       _Cobject = new v8::IndexedPropertyHandlerConfiguration(*_Cobject);
       _is_c_reference = false;
   }
   return _Cobject;
}
                 
v8::JitCodeEvent* v8::JitCodeEvent::
get_Cobject(struct v8___v8::JitCodeEvent* newowner){
   if( _is_c_reference && _owner != (PyObject*)newowner ){
       _Cobject = new v8::JitCodeEvent(*_Cobject);
       _is_c_reference = false;
   }
   return _Cobject;
}
                 
static PyObject*
v8internal___IntToSmi(PyObject *args, PyObject *kwds);
        
    
static PyObject*
v8internal___IntToSmi(PyObject *args, PyObject *kwds);
        
    
static PyObject*
v8internal___SmiValuesAre31Bits(PyObject *args, PyObject *kwds);
        
    
static PyObject*
v8internal___SmiValuesAre32Bits(PyObject *args, PyObject *kwds);
        
    
static void
v8internal___Arguments_dealloc(v8internal___Arguments* self);

static PyObject *
v8internal___Arguments_new(PyTypeObject *type, PyObject *args, PyObject *kwds);
static int
v8internal___Arguments_init(v8internal___Arguments *self, PyObject *args, PyObject *kwds);
           

static PyMethodDef v8internal___Arguments_methods[] = {
             {NULL}  /* Sentinel */
};

static PyMemberDef v8internal___Arguments_members[] =   {
        {NULL}
};
    

static PyTypeObject v8internal___ArgumentsType = {
             PyObject_HEAD_INIT(NULL)
             0,                         /*ob_size*/
             "v8::internal.Arguments",             /*tp_name*/
             sizeof(v8internal___Arguments), /*tp_basicsize*/
             0,                         /*tp_itemsize*/
             (destructor)v8internal___Arguments_dealloc,                         /*tp_dealloc*/
             0,                         /*tp_print*/
             0,                         /*tp_getattr*/
             0,                         /*tp_setattr*/
             0,                         /*tp_compare*/
             0,                         /*tp_repr*/
             0,                         /*tp_as_number*/
             0,                         /*tp_as_sequence*/
             0,                         /*tp_as_mapping*/
             0,                         /*tp_hash */
             0,                         /*tp_call*/
             0,                         /*tp_str*/
             0,                         /*tp_getattro*/
             0,                         /*tp_setattro*/
             0,                         /*tp_as_buffer*/
             Py_TPFLAGS_DEFAULT| Py_TPFLAGS_BASETYPE,        /*tp_flags*/
             "v8internal___Arguments objects",           /* tp_doc */
             0,		               /* tp_traverse */
             0,		               /* tp_clear */
             0,		               /* tp_richcompare */
             0,		               /* tp_weaklistoffset */
             0,		               /* tp_iter */
             0,		               /* tp_iternext */
             v8internal___Arguments_methods,             /* tp_methods */
             v8internal___Arguments_members,             /* tp_members */
             0,                         /* tp_getset */
             0,                         /* tp_base */
             0,                         /* tp_dict */
             0,                         /* tp_descr_get */
             0,                         /* tp_descr_set */
             0,                         /* tp_dictoffset */
             (initproc)v8internal___Arguments_init,      /* tp_init */
             0,                         /* tp_alloc */
             v8internal___Arguments_new,                 /* tp_new */
         };

static void
v8internal___Heap_dealloc(v8internal___Heap* self);

static PyObject *
v8internal___Heap_new(PyTypeObject *type, PyObject *args, PyObject *kwds);
static int
v8internal___Heap_init(v8internal___Heap *self, PyObject *args, PyObject *kwds);
           

static PyMethodDef v8internal___Heap_methods[] = {
             {NULL}  /* Sentinel */
};

static PyMemberDef v8internal___Heap_members[] =   {
        {NULL}
};
    

static PyTypeObject v8internal___HeapType = {
             PyObject_HEAD_INIT(NULL)
             0,                         /*ob_size*/
             "v8::internal.Heap",             /*tp_name*/
             sizeof(v8internal___Heap), /*tp_basicsize*/
             0,                         /*tp_itemsize*/
             (destructor)v8internal___Heap_dealloc,                         /*tp_dealloc*/
             0,                         /*tp_print*/
             0,                         /*tp_getattr*/
             0,                         /*tp_setattr*/
             0,                         /*tp_compare*/
             0,                         /*tp_repr*/
             0,                         /*tp_as_number*/
             0,                         /*tp_as_sequence*/
             0,                         /*tp_as_mapping*/
             0,                         /*tp_hash */
             0,                         /*tp_call*/
             0,                         /*tp_str*/
             0,                         /*tp_getattro*/
             0,                         /*tp_setattro*/
             0,                         /*tp_as_buffer*/
             Py_TPFLAGS_DEFAULT| Py_TPFLAGS_BASETYPE,        /*tp_flags*/
             "v8internal___Heap objects",           /* tp_doc */
             0,		               /* tp_traverse */
             0,		               /* tp_clear */
             0,		               /* tp_richcompare */
             0,		               /* tp_weaklistoffset */
             0,		               /* tp_iter */
             0,		               /* tp_iternext */
             v8internal___Heap_methods,             /* tp_methods */
             v8internal___Heap_members,             /* tp_members */
             0,                         /* tp_getset */
             0,                         /* tp_base */
             0,                         /* tp_dict */
             0,                         /* tp_descr_get */
             0,                         /* tp_descr_set */
             0,                         /* tp_dictoffset */
             (initproc)v8internal___Heap_init,      /* tp_init */
             0,                         /* tp_alloc */
             v8internal___Heap_new,                 /* tp_new */
         };

static void
v8internal___HeapObject_dealloc(v8internal___HeapObject* self);

static PyObject *
v8internal___HeapObject_new(PyTypeObject *type, PyObject *args, PyObject *kwds);
static int
v8internal___HeapObject_init(v8internal___HeapObject *self, PyObject *args, PyObject *kwds);
           

static PyMethodDef v8internal___HeapObject_methods[] = {
             {NULL}  /* Sentinel */
};

static PyMemberDef v8internal___HeapObject_members[] =   {
        {NULL}
};
    

static PyTypeObject v8internal___HeapObjectType = {
             PyObject_HEAD_INIT(NULL)
             0,                         /*ob_size*/
             "v8::internal.HeapObject",             /*tp_name*/
             sizeof(v8internal___HeapObject), /*tp_basicsize*/
             0,                         /*tp_itemsize*/
             (destructor)v8internal___HeapObject_dealloc,                         /*tp_dealloc*/
             0,                         /*tp_print*/
             0,                         /*tp_getattr*/
             0,                         /*tp_setattr*/
             0,                         /*tp_compare*/
             0,                         /*tp_repr*/
             0,                         /*tp_as_number*/
             0,                         /*tp_as_sequence*/
             0,                         /*tp_as_mapping*/
             0,                         /*tp_hash */
             0,                         /*tp_call*/
             0,                         /*tp_str*/
             0,                         /*tp_getattro*/
             0,                         /*tp_setattro*/
             0,                         /*tp_as_buffer*/
             Py_TPFLAGS_DEFAULT| Py_TPFLAGS_BASETYPE,        /*tp_flags*/
             "v8internal___HeapObject objects",           /* tp_doc */
             0,		               /* tp_traverse */
             0,		               /* tp_clear */
             0,		               /* tp_richcompare */
             0,		               /* tp_weaklistoffset */
             0,		               /* tp_iter */
             0,		               /* tp_iternext */
             v8internal___HeapObject_methods,             /* tp_methods */
             v8internal___HeapObject_members,             /* tp_members */
             0,                         /* tp_getset */
             0,                         /* tp_base */
             0,                         /* tp_dict */
             0,                         /* tp_descr_get */
             0,                         /* tp_descr_set */
             0,                         /* tp_dictoffset */
             (initproc)v8internal___HeapObject_init,      /* tp_init */
             0,                         /* tp_alloc */
             v8internal___HeapObject_new,                 /* tp_new */
         };

static void
v8internal___Isolate_dealloc(v8internal___Isolate* self);

static PyObject *
v8internal___Isolate_new(PyTypeObject *type, PyObject *args, PyObject *kwds);
static int
v8internal___Isolate_init(v8internal___Isolate *self, PyObject *args, PyObject *kwds);
           

static PyMethodDef v8internal___Isolate_methods[] = {
             {NULL}  /* Sentinel */
};

static PyMemberDef v8internal___Isolate_members[] =   {
        {NULL}
};
    

static PyTypeObject v8internal___IsolateType = {
             PyObject_HEAD_INIT(NULL)
             0,                         /*ob_size*/
             "v8::internal.Isolate",             /*tp_name*/
             sizeof(v8internal___Isolate), /*tp_basicsize*/
             0,                         /*tp_itemsize*/
             (destructor)v8internal___Isolate_dealloc,                         /*tp_dealloc*/
             0,                         /*tp_print*/
             0,                         /*tp_getattr*/
             0,                         /*tp_setattr*/
             0,                         /*tp_compare*/
             0,                         /*tp_repr*/
             0,                         /*tp_as_number*/
             0,                         /*tp_as_sequence*/
             0,                         /*tp_as_mapping*/
             0,                         /*tp_hash */
             0,                         /*tp_call*/
             0,                         /*tp_str*/
             0,                         /*tp_getattro*/
             0,                         /*tp_setattro*/
             0,                         /*tp_as_buffer*/
             Py_TPFLAGS_DEFAULT| Py_TPFLAGS_BASETYPE,        /*tp_flags*/
             "v8internal___Isolate objects",           /* tp_doc */
             0,		               /* tp_traverse */
             0,		               /* tp_clear */
             0,		               /* tp_richcompare */
             0,		               /* tp_weaklistoffset */
             0,		               /* tp_iter */
             0,		               /* tp_iternext */
             v8internal___Isolate_methods,             /* tp_methods */
             v8internal___Isolate_members,             /* tp_members */
             0,                         /* tp_getset */
             0,                         /* tp_base */
             0,                         /* tp_dict */
             0,                         /* tp_descr_get */
             0,                         /* tp_descr_set */
             0,                         /* tp_dictoffset */
             (initproc)v8internal___Isolate_init,      /* tp_init */
             0,                         /* tp_alloc */
             v8internal___Isolate_new,                 /* tp_new */
         };

static void
v8internal___Object_dealloc(v8internal___Object* self);

static PyObject *
v8internal___Object_new(PyTypeObject *type, PyObject *args, PyObject *kwds);
static int
v8internal___Object_init(v8internal___Object *self, PyObject *args, PyObject *kwds);
           

static PyMethodDef v8internal___Object_methods[] = {
             {NULL}  /* Sentinel */
};

static PyMemberDef v8internal___Object_members[] =   {
        {NULL}
};
    

static PyTypeObject v8internal___ObjectType = {
             PyObject_HEAD_INIT(NULL)
             0,                         /*ob_size*/
             "v8::internal.Object",             /*tp_name*/
             sizeof(v8internal___Object), /*tp_basicsize*/
             0,                         /*tp_itemsize*/
             (destructor)v8internal___Object_dealloc,                         /*tp_dealloc*/
             0,                         /*tp_print*/
             0,                         /*tp_getattr*/
             0,                         /*tp_setattr*/
             0,                         /*tp_compare*/
             0,                         /*tp_repr*/
             0,                         /*tp_as_number*/
             0,                         /*tp_as_sequence*/
             0,                         /*tp_as_mapping*/
             0,                         /*tp_hash */
             0,                         /*tp_call*/
             0,                         /*tp_str*/
             0,                         /*tp_getattro*/
             0,                         /*tp_setattro*/
             0,                         /*tp_as_buffer*/
             Py_TPFLAGS_DEFAULT| Py_TPFLAGS_BASETYPE,        /*tp_flags*/
             "v8internal___Object objects",           /* tp_doc */
             0,		               /* tp_traverse */
             0,		               /* tp_clear */
             0,		               /* tp_richcompare */
             0,		               /* tp_weaklistoffset */
             0,		               /* tp_iter */
             0,		               /* tp_iternext */
             v8internal___Object_methods,             /* tp_methods */
             v8internal___Object_members,             /* tp_members */
             0,                         /* tp_getset */
             0,                         /* tp_base */
             0,                         /* tp_dict */
             0,                         /* tp_descr_get */
             0,                         /* tp_descr_set */
             0,                         /* tp_dictoffset */
             (initproc)v8internal___Object_init,      /* tp_init */
             0,                         /* tp_alloc */
             v8internal___Object_new,                 /* tp_new */
         };

static void
v8internal___StreamedSource_dealloc(v8internal___StreamedSource* self);

static PyObject *
v8internal___StreamedSource_new(PyTypeObject *type, PyObject *args, PyObject *kwds);
static int
v8internal___StreamedSource_init(v8internal___StreamedSource *self, PyObject *args, PyObject *kwds);
           

static PyMethodDef v8internal___StreamedSource_methods[] = {
             {NULL}  /* Sentinel */
};

static PyMemberDef v8internal___StreamedSource_members[] =   {
        {NULL}
};
    

static PyTypeObject v8internal___StreamedSourceType = {
             PyObject_HEAD_INIT(NULL)
             0,                         /*ob_size*/
             "v8::internal.StreamedSource",             /*tp_name*/
             sizeof(v8internal___StreamedSource), /*tp_basicsize*/
             0,                         /*tp_itemsize*/
             (destructor)v8internal___StreamedSource_dealloc,                         /*tp_dealloc*/
             0,                         /*tp_print*/
             0,                         /*tp_getattr*/
             0,                         /*tp_setattr*/
             0,                         /*tp_compare*/
             0,                         /*tp_repr*/
             0,                         /*tp_as_number*/
             0,                         /*tp_as_sequence*/
             0,                         /*tp_as_mapping*/
             0,                         /*tp_hash */
             0,                         /*tp_call*/
             0,                         /*tp_str*/
             0,                         /*tp_getattro*/
             0,                         /*tp_setattro*/
             0,                         /*tp_as_buffer*/
             Py_TPFLAGS_DEFAULT| Py_TPFLAGS_BASETYPE,        /*tp_flags*/
             "v8internal___StreamedSource objects",           /* tp_doc */
             0,		               /* tp_traverse */
             0,		               /* tp_clear */
             0,		               /* tp_richcompare */
             0,		               /* tp_weaklistoffset */
             0,		               /* tp_iter */
             0,		               /* tp_iternext */
             v8internal___StreamedSource_methods,             /* tp_methods */
             v8internal___StreamedSource_members,             /* tp_members */
             0,                         /* tp_getset */
             0,                         /* tp_base */
             0,                         /* tp_dict */
             0,                         /* tp_descr_get */
             0,                         /* tp_descr_set */
             0,                         /* tp_dictoffset */
             (initproc)v8internal___StreamedSource_init,      /* tp_init */
             0,                         /* tp_alloc */
             v8internal___StreamedSource_new,                 /* tp_new */
         };

static void
v8internal___PropertyCallbackArguments_dealloc(v8internal___PropertyCallbackArguments* self);

static PyObject *
v8internal___PropertyCallbackArguments_new(PyTypeObject *type, PyObject *args, PyObject *kwds);
static int
v8internal___PropertyCallbackArguments_init(v8internal___PropertyCallbackArguments *self, PyObject *args, PyObject *kwds);
           

static PyMethodDef v8internal___PropertyCallbackArguments_methods[] = {
             {NULL}  /* Sentinel */
};

static PyMemberDef v8internal___PropertyCallbackArguments_members[] =   {
        {NULL}
};
    

static PyTypeObject v8internal___PropertyCallbackArgumentsType = {
             PyObject_HEAD_INIT(NULL)
             0,                         /*ob_size*/
             "v8::internal.PropertyCallbackArguments",             /*tp_name*/
             sizeof(v8internal___PropertyCallbackArguments), /*tp_basicsize*/
             0,                         /*tp_itemsize*/
             (destructor)v8internal___PropertyCallbackArguments_dealloc,                         /*tp_dealloc*/
             0,                         /*tp_print*/
             0,                         /*tp_getattr*/
             0,                         /*tp_setattr*/
             0,                         /*tp_compare*/
             0,                         /*tp_repr*/
             0,                         /*tp_as_number*/
             0,                         /*tp_as_sequence*/
             0,                         /*tp_as_mapping*/
             0,                         /*tp_hash */
             0,                         /*tp_call*/
             0,                         /*tp_str*/
             0,                         /*tp_getattro*/
             0,                         /*tp_setattro*/
             0,                         /*tp_as_buffer*/
             Py_TPFLAGS_DEFAULT| Py_TPFLAGS_BASETYPE,        /*tp_flags*/
             "v8internal___PropertyCallbackArguments objects",           /* tp_doc */
             0,		               /* tp_traverse */
             0,		               /* tp_clear */
             0,		               /* tp_richcompare */
             0,		               /* tp_weaklistoffset */
             0,		               /* tp_iter */
             0,		               /* tp_iternext */
             v8internal___PropertyCallbackArguments_methods,             /* tp_methods */
             v8internal___PropertyCallbackArguments_members,             /* tp_members */
             0,                         /* tp_getset */
             0,                         /* tp_base */
             0,                         /* tp_dict */
             0,                         /* tp_descr_get */
             0,                         /* tp_descr_set */
             0,                         /* tp_dictoffset */
             (initproc)v8internal___PropertyCallbackArguments_init,      /* tp_init */
             0,                         /* tp_alloc */
             v8internal___PropertyCallbackArguments_new,                 /* tp_new */
         };

static void
v8internal___FunctionCallbackArguments_dealloc(v8internal___FunctionCallbackArguments* self);

static PyObject *
v8internal___FunctionCallbackArguments_new(PyTypeObject *type, PyObject *args, PyObject *kwds);
static int
v8internal___FunctionCallbackArguments_init(v8internal___FunctionCallbackArguments *self, PyObject *args, PyObject *kwds);
           

static PyMethodDef v8internal___FunctionCallbackArguments_methods[] = {
             {NULL}  /* Sentinel */
};

static PyMemberDef v8internal___FunctionCallbackArguments_members[] =   {
        {NULL}
};
    

static PyTypeObject v8internal___FunctionCallbackArgumentsType = {
             PyObject_HEAD_INIT(NULL)
             0,                         /*ob_size*/
             "v8::internal.FunctionCallbackArguments",             /*tp_name*/
             sizeof(v8internal___FunctionCallbackArguments), /*tp_basicsize*/
             0,                         /*tp_itemsize*/
             (destructor)v8internal___FunctionCallbackArguments_dealloc,                         /*tp_dealloc*/
             0,                         /*tp_print*/
             0,                         /*tp_getattr*/
             0,                         /*tp_setattr*/
             0,                         /*tp_compare*/
             0,                         /*tp_repr*/
             0,                         /*tp_as_number*/
             0,                         /*tp_as_sequence*/
             0,                         /*tp_as_mapping*/
             0,                         /*tp_hash */
             0,                         /*tp_call*/
             0,                         /*tp_str*/
             0,                         /*tp_getattro*/
             0,                         /*tp_setattro*/
             0,                         /*tp_as_buffer*/
             Py_TPFLAGS_DEFAULT| Py_TPFLAGS_BASETYPE,        /*tp_flags*/
             "v8internal___FunctionCallbackArguments objects",           /* tp_doc */
             0,		               /* tp_traverse */
             0,		               /* tp_clear */
             0,		               /* tp_richcompare */
             0,		               /* tp_weaklistoffset */
             0,		               /* tp_iter */
             0,		               /* tp_iternext */
             v8internal___FunctionCallbackArguments_methods,             /* tp_methods */
             v8internal___FunctionCallbackArguments_members,             /* tp_members */
             0,                         /* tp_getset */
             0,                         /* tp_base */
             0,                         /* tp_dict */
             0,                         /* tp_descr_get */
             0,                         /* tp_descr_set */
             0,                         /* tp_dictoffset */
             (initproc)v8internal___FunctionCallbackArguments_init,      /* tp_init */
             0,                         /* tp_alloc */
             v8internal___FunctionCallbackArguments_new,                 /* tp_new */
         };

static void
v8internal___GlobalHandles_dealloc(v8internal___GlobalHandles* self);

static PyObject *
v8internal___GlobalHandles_new(PyTypeObject *type, PyObject *args, PyObject *kwds);
static int
v8internal___GlobalHandles_init(v8internal___GlobalHandles *self, PyObject *args, PyObject *kwds);
           

static PyMethodDef v8internal___GlobalHandles_methods[] = {
             {NULL}  /* Sentinel */
};

static PyMemberDef v8internal___GlobalHandles_members[] =   {
        {NULL}
};
    

static PyTypeObject v8internal___GlobalHandlesType = {
             PyObject_HEAD_INIT(NULL)
             0,                         /*ob_size*/
             "v8::internal.GlobalHandles",             /*tp_name*/
             sizeof(v8internal___GlobalHandles), /*tp_basicsize*/
             0,                         /*tp_itemsize*/
             (destructor)v8internal___GlobalHandles_dealloc,                         /*tp_dealloc*/
             0,                         /*tp_print*/
             0,                         /*tp_getattr*/
             0,                         /*tp_setattr*/
             0,                         /*tp_compare*/
             0,                         /*tp_repr*/
             0,                         /*tp_as_number*/
             0,                         /*tp_as_sequence*/
             0,                         /*tp_as_mapping*/
             0,                         /*tp_hash */
             0,                         /*tp_call*/
             0,                         /*tp_str*/
             0,                         /*tp_getattro*/
             0,                         /*tp_setattro*/
             0,                         /*tp_as_buffer*/
             Py_TPFLAGS_DEFAULT| Py_TPFLAGS_BASETYPE,        /*tp_flags*/
             "v8internal___GlobalHandles objects",           /* tp_doc */
             0,		               /* tp_traverse */
             0,		               /* tp_clear */
             0,		               /* tp_richcompare */
             0,		               /* tp_weaklistoffset */
             0,		               /* tp_iter */
             0,		               /* tp_iternext */
             v8internal___GlobalHandles_methods,             /* tp_methods */
             v8internal___GlobalHandles_members,             /* tp_members */
             0,                         /* tp_getset */
             0,                         /* tp_base */
             0,                         /* tp_dict */
             0,                         /* tp_descr_get */
             0,                         /* tp_descr_set */
             0,                         /* tp_dictoffset */
             (initproc)v8internal___GlobalHandles_init,      /* tp_init */
             0,                         /* tp_alloc */
             v8internal___GlobalHandles_new,                 /* tp_new */
         };

static void
v8internal___SmiTagging_4__dealloc(v8internal___SmiTagging_4_* self);

static PyObject *
v8internal___SmiTagging_4__new(PyTypeObject *type, PyObject *args, PyObject *kwds);
static int
v8internal___SmiTagging_4__init(v8internal___SmiTagging_4_ *self, PyObject *args, PyObject *kwds);
           

static PyObject*
v8internal___SmiTagging_4___SmiShiftSize(PyObject *args, PyObject *kwds);
    
static PyObject*
v8internal___SmiTagging_4___SmiValueSize(PyObject *args, PyObject *kwds);
    
static PyObject*
v8internal___SmiTagging_4___SmiToInt(PyObject *args, PyObject *kwds);
    
static PyObject*
v8internal___SmiTagging_4___IntToSmi(PyObject *args, PyObject *kwds);
    
static PyObject*
v8internal___SmiTagging_4___IsValidSmi(PyObject *args, PyObject *kwds);
    
static PyMethodDef v8internal___SmiTagging_4__methods[] = {
             
            {"SmiShiftSize",  (PyCFunction)v8internal___SmiTagging_4___SmiShiftSize,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},
            {"SmiValueSize",  (PyCFunction)v8internal___SmiTagging_4___SmiValueSize,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},
            {"SmiToInt",  (PyCFunction)v8internal___SmiTagging_4___SmiToInt,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},
            {"IntToSmi",  (PyCFunction)v8internal___SmiTagging_4___IntToSmi,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},
            {"IsValidSmi",  (PyCFunction)v8internal___SmiTagging_4___IsValidSmi,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},{NULL}  /* Sentinel */
};

static PyMemberDef v8internal___SmiTagging_4__members[] =   {
        {NULL}
};
    

static PyTypeObject v8internal___SmiTagging_4_Type = {
             PyObject_HEAD_INIT(NULL)
             0,                         /*ob_size*/
             "v8::internal.SmiTagging<4>",             /*tp_name*/
             sizeof(v8internal___SmiTagging_4_), /*tp_basicsize*/
             0,                         /*tp_itemsize*/
             (destructor)v8internal___SmiTagging_4__dealloc,                         /*tp_dealloc*/
             0,                         /*tp_print*/
             0,                         /*tp_getattr*/
             0,                         /*tp_setattr*/
             0,                         /*tp_compare*/
             0,                         /*tp_repr*/
             0,                         /*tp_as_number*/
             0,                         /*tp_as_sequence*/
             0,                         /*tp_as_mapping*/
             0,                         /*tp_hash */
             0,                         /*tp_call*/
             0,                         /*tp_str*/
             0,                         /*tp_getattro*/
             0,                         /*tp_setattro*/
             0,                         /*tp_as_buffer*/
             Py_TPFLAGS_DEFAULT| Py_TPFLAGS_BASETYPE,        /*tp_flags*/
             "v8internal___SmiTagging_4_ objects",           /* tp_doc */
             0,		               /* tp_traverse */
             0,		               /* tp_clear */
             0,		               /* tp_richcompare */
             0,		               /* tp_weaklistoffset */
             0,		               /* tp_iter */
             0,		               /* tp_iternext */
             v8internal___SmiTagging_4__methods,             /* tp_methods */
             v8internal___SmiTagging_4__members,             /* tp_members */
             0,                         /* tp_getset */
             0,                         /* tp_base */
             0,                         /* tp_dict */
             0,                         /* tp_descr_get */
             0,                         /* tp_descr_set */
             0,                         /* tp_dictoffset */
             (initproc)v8internal___SmiTagging_4__init,      /* tp_init */
             0,                         /* tp_alloc */
             v8internal___SmiTagging_4__new,                 /* tp_new */
         };

static void
v8internal___SmiTagging_8__dealloc(v8internal___SmiTagging_8_* self);

static PyObject *
v8internal___SmiTagging_8__new(PyTypeObject *type, PyObject *args, PyObject *kwds);
static int
v8internal___SmiTagging_8__init(v8internal___SmiTagging_8_ *self, PyObject *args, PyObject *kwds);
           

static PyObject*
v8internal___SmiTagging_8___SmiShiftSize(PyObject *args, PyObject *kwds);
    
static PyObject*
v8internal___SmiTagging_8___SmiValueSize(PyObject *args, PyObject *kwds);
    
static PyObject*
v8internal___SmiTagging_8___SmiToInt(PyObject *args, PyObject *kwds);
    
static PyObject*
v8internal___SmiTagging_8___IntToSmi(PyObject *args, PyObject *kwds);
    
static PyObject*
v8internal___SmiTagging_8___IsValidSmi(PyObject *args, PyObject *kwds);
    
static PyMethodDef v8internal___SmiTagging_8__methods[] = {
             
            {"SmiShiftSize",  (PyCFunction)v8internal___SmiTagging_8___SmiShiftSize,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},
            {"SmiValueSize",  (PyCFunction)v8internal___SmiTagging_8___SmiValueSize,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},
            {"SmiToInt",  (PyCFunction)v8internal___SmiTagging_8___SmiToInt,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},
            {"IntToSmi",  (PyCFunction)v8internal___SmiTagging_8___IntToSmi,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},
            {"IsValidSmi",  (PyCFunction)v8internal___SmiTagging_8___IsValidSmi,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},{NULL}  /* Sentinel */
};

static PyMemberDef v8internal___SmiTagging_8__members[] =   {
        {NULL}
};
    

static PyTypeObject v8internal___SmiTagging_8_Type = {
             PyObject_HEAD_INIT(NULL)
             0,                         /*ob_size*/
             "v8::internal.SmiTagging<8>",             /*tp_name*/
             sizeof(v8internal___SmiTagging_8_), /*tp_basicsize*/
             0,                         /*tp_itemsize*/
             (destructor)v8internal___SmiTagging_8__dealloc,                         /*tp_dealloc*/
             0,                         /*tp_print*/
             0,                         /*tp_getattr*/
             0,                         /*tp_setattr*/
             0,                         /*tp_compare*/
             0,                         /*tp_repr*/
             0,                         /*tp_as_number*/
             0,                         /*tp_as_sequence*/
             0,                         /*tp_as_mapping*/
             0,                         /*tp_hash */
             0,                         /*tp_call*/
             0,                         /*tp_str*/
             0,                         /*tp_getattro*/
             0,                         /*tp_setattro*/
             0,                         /*tp_as_buffer*/
             Py_TPFLAGS_DEFAULT| Py_TPFLAGS_BASETYPE,        /*tp_flags*/
             "v8internal___SmiTagging_8_ objects",           /* tp_doc */
             0,		               /* tp_traverse */
             0,		               /* tp_clear */
             0,		               /* tp_richcompare */
             0,		               /* tp_weaklistoffset */
             0,		               /* tp_iter */
             0,		               /* tp_iternext */
             v8internal___SmiTagging_8__methods,             /* tp_methods */
             v8internal___SmiTagging_8__members,             /* tp_members */
             0,                         /* tp_getset */
             0,                         /* tp_base */
             0,                         /* tp_dict */
             0,                         /* tp_descr_get */
             0,                         /* tp_descr_set */
             0,                         /* tp_dictoffset */
             (initproc)v8internal___SmiTagging_8__init,      /* tp_init */
             0,                         /* tp_alloc */
             v8internal___SmiTagging_8__new,                 /* tp_new */
         };

static void
v8internal___Internals_dealloc(v8internal___Internals* self);

static PyObject *
v8internal___Internals_new(PyTypeObject *type, PyObject *args, PyObject *kwds);
static int
v8internal___Internals_init(v8internal___Internals *self, PyObject *args, PyObject *kwds);
           

static PyObject*
v8internal___Internals__CheckInitializedImpl(PyObject *args, PyObject *kwds);
    
static PyObject*
v8internal___Internals__CheckInitialized(PyObject *args, PyObject *kwds);
    
static PyObject*
v8internal___Internals__HasHeapObjectTag(PyObject *args, PyObject *kwds);
    
static PyObject*
v8internal___Internals__SmiValue(PyObject *args, PyObject *kwds);
    
static PyObject*
v8internal___Internals__IntToSmi(PyObject *args, PyObject *kwds);
    
static PyObject*
v8internal___Internals__IsValidSmi(PyObject *args, PyObject *kwds);
    
static PyObject*
v8internal___Internals__GetInstanceType(PyObject *args, PyObject *kwds);
    
static PyObject*
v8internal___Internals__GetOddballKind(PyObject *args, PyObject *kwds);
    
static PyObject*
v8internal___Internals__IsExternalTwoByteString(PyObject *args, PyObject *kwds);
    
static PyObject*
v8internal___Internals__GetNodeFlag(PyObject *args, PyObject *kwds);
    
static PyObject*
v8internal___Internals__UpdateNodeFlag(PyObject *args, PyObject *kwds);
    
static PyObject*
v8internal___Internals__GetNodeState(PyObject *args, PyObject *kwds);
    
static PyObject*
v8internal___Internals__UpdateNodeState(PyObject *args, PyObject *kwds);
    
static PyObject*
v8internal___Internals__SetEmbedderData(PyObject *args, PyObject *kwds);
    
static PyObject*
v8internal___Internals__GetEmbedderData(PyObject *args, PyObject *kwds);
    
static PyObject*
v8internal___Internals__GetRoot(PyObject *args, PyObject *kwds);
    
static PyObject*
v8internal___Internals__ReadField(PyObject *args, PyObject *kwds);
    
static PyObject*
v8internal___Internals__ReadEmbedderData(PyObject *args, PyObject *kwds);
    
static PyMethodDef v8internal___Internals_methods[] = {
             
            {"CheckInitializedImpl",  (PyCFunction)v8internal___Internals__CheckInitializedImpl,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},
            {"CheckInitialized",  (PyCFunction)v8internal___Internals__CheckInitialized,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},
            {"HasHeapObjectTag",  (PyCFunction)v8internal___Internals__HasHeapObjectTag,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},
            {"SmiValue",  (PyCFunction)v8internal___Internals__SmiValue,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},
            {"IntToSmi",  (PyCFunction)v8internal___Internals__IntToSmi,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},
            {"IsValidSmi",  (PyCFunction)v8internal___Internals__IsValidSmi,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},
            {"GetInstanceType",  (PyCFunction)v8internal___Internals__GetInstanceType,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},
            {"GetOddballKind",  (PyCFunction)v8internal___Internals__GetOddballKind,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},
            {"IsExternalTwoByteString",  (PyCFunction)v8internal___Internals__IsExternalTwoByteString,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},
            {"GetNodeFlag",  (PyCFunction)v8internal___Internals__GetNodeFlag,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},
            {"UpdateNodeFlag",  (PyCFunction)v8internal___Internals__UpdateNodeFlag,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},
            {"GetNodeState",  (PyCFunction)v8internal___Internals__GetNodeState,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},
            {"UpdateNodeState",  (PyCFunction)v8internal___Internals__UpdateNodeState,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},
            {"SetEmbedderData",  (PyCFunction)v8internal___Internals__SetEmbedderData,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},
            {"GetEmbedderData",  (PyCFunction)v8internal___Internals__GetEmbedderData,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},
            {"GetRoot",  (PyCFunction)v8internal___Internals__GetRoot,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},
            {"ReadField",  (PyCFunction)v8internal___Internals__ReadField,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},
            {"ReadField",  (PyCFunction)v8internal___Internals__ReadField,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},
            {"ReadField",  (PyCFunction)v8internal___Internals__ReadField,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},
            {"ReadEmbedderData",  (PyCFunction)v8internal___Internals__ReadEmbedderData,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},
            {"ReadEmbedderData",  (PyCFunction)v8internal___Internals__ReadEmbedderData,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},{NULL}  /* Sentinel */
};

static PyMemberDef v8internal___Internals_members[] =   {
        {NULL}
};
    

static PyTypeObject v8internal___InternalsType = {
             PyObject_HEAD_INIT(NULL)
             0,                         /*ob_size*/
             "v8::internal.Internals",             /*tp_name*/
             sizeof(v8internal___Internals), /*tp_basicsize*/
             0,                         /*tp_itemsize*/
             (destructor)v8internal___Internals_dealloc,                         /*tp_dealloc*/
             0,                         /*tp_print*/
             0,                         /*tp_getattr*/
             0,                         /*tp_setattr*/
             0,                         /*tp_compare*/
             0,                         /*tp_repr*/
             0,                         /*tp_as_number*/
             0,                         /*tp_as_sequence*/
             0,                         /*tp_as_mapping*/
             0,                         /*tp_hash */
             0,                         /*tp_call*/
             0,                         /*tp_str*/
             0,                         /*tp_getattro*/
             0,                         /*tp_setattro*/
             0,                         /*tp_as_buffer*/
             Py_TPFLAGS_DEFAULT| Py_TPFLAGS_BASETYPE,        /*tp_flags*/
             "v8internal___Internals objects",           /* tp_doc */
             0,		               /* tp_traverse */
             0,		               /* tp_clear */
             0,		               /* tp_richcompare */
             0,		               /* tp_weaklistoffset */
             0,		               /* tp_iter */
             0,		               /* tp_iternext */
             v8internal___Internals_methods,             /* tp_methods */
             v8internal___Internals_members,             /* tp_members */
             0,                         /* tp_getset */
             0,                         /* tp_base */
             0,                         /* tp_dict */
             0,                         /* tp_descr_get */
             0,                         /* tp_descr_set */
             0,                         /* tp_dictoffset */
             (initproc)v8internal___Internals_init,      /* tp_init */
             0,                         /* tp_alloc */
             v8internal___Internals_new,                 /* tp_new */
         };


#ifndef PyMODINIT_FUNC	/* declarations for DLL import/export */
#define PyMODINIT_FUNC void
#endif


static PyMethodDef v8internal___methods[] = {
             
                 {"IntToSmi",  (PyCFunction)v8internal___IntToSmi, METH_VARARGS| METH_KEYWORDS, ""},
             
                 {"IntToSmi",  (PyCFunction)v8internal___IntToSmi, METH_VARARGS| METH_KEYWORDS, ""},
             
                 {"SmiValuesAre31Bits",  (PyCFunction)v8internal___SmiValuesAre31Bits,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},
             
                 {"SmiValuesAre32Bits",  (PyCFunction)v8internal___SmiValuesAre32Bits,METH_CLASS | METH_VARARGS| METH_KEYWORDS, ""},
             {NULL}  /* Sentinel */
};


static void
v8internal___Arguments_dealloc(v8internal___Arguments* self)
{
    if(!self) return;
    if (!self->_is_c_reference){
        delete self->_Cobject;
    }
    self->_Cobject = NULL;
    self->_owner = NULL;
    self->_is_c_reference = false;
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject *
v8internal___Arguments_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
    v8internal___Arguments *self;

    self = (v8internal___Arguments *)type->tp_alloc(type, 0);
    if (self != NULL) {
        self->_Cobject = NULL;
        self->_owner = NULL;
    }

    return (PyObject *)self;
}       

static int
v8internal___Arguments_init(v8internal___Arguments *self, PyObject *args, PyObject *kwds)
{
    int status = -1;
    if(!self) return status;
    self->_owner = (PyObject*)self;
    self->_Cobject = new v8internal___Arguments();
    status = self->get_Cobject(self)?0:-1; 
    if (status != 0){
       self->_Cobject = NULL;
       status = 0;
    }
    return status;
}



static void
v8internal___Heap_dealloc(v8internal___Heap* self)
{
    if(!self) return;
    if (!self->_is_c_reference){
        delete self->_Cobject;
    }
    self->_Cobject = NULL;
    self->_owner = NULL;
    self->_is_c_reference = false;
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject *
v8internal___Heap_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
    v8internal___Heap *self;

    self = (v8internal___Heap *)type->tp_alloc(type, 0);
    if (self != NULL) {
        self->_Cobject = NULL;
        self->_owner = NULL;
    }

    return (PyObject *)self;
}       

static int
v8internal___Heap_init(v8internal___Heap *self, PyObject *args, PyObject *kwds)
{
    int status = -1;
    if(!self) return status;
    self->_owner = (PyObject*)self;
    self->_Cobject = new v8internal___Heap();
    status = self->get_Cobject(self)?0:-1; 
    if (status != 0){
       self->_Cobject = NULL;
       status = 0;
    }
    return status;
}



static void
v8internal___HeapObject_dealloc(v8internal___HeapObject* self)
{
    if(!self) return;
    if (!self->_is_c_reference){
        delete self->_Cobject;
    }
    self->_Cobject = NULL;
    self->_owner = NULL;
    self->_is_c_reference = false;
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject *
v8internal___HeapObject_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
    v8internal___HeapObject *self;

    self = (v8internal___HeapObject *)type->tp_alloc(type, 0);
    if (self != NULL) {
        self->_Cobject = NULL;
        self->_owner = NULL;
    }

    return (PyObject *)self;
}       

static int
v8internal___HeapObject_init(v8internal___HeapObject *self, PyObject *args, PyObject *kwds)
{
    int status = -1;
    if(!self) return status;
    self->_owner = (PyObject*)self;
    self->_Cobject = new v8internal___HeapObject();
    status = self->get_Cobject(self)?0:-1; 
    if (status != 0){
       self->_Cobject = NULL;
       status = 0;
    }
    return status;
}



static void
v8internal___Isolate_dealloc(v8internal___Isolate* self)
{
    if(!self) return;
    if (!self->_is_c_reference){
        delete self->_Cobject;
    }
    self->_Cobject = NULL;
    self->_owner = NULL;
    self->_is_c_reference = false;
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject *
v8internal___Isolate_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
    v8internal___Isolate *self;

    self = (v8internal___Isolate *)type->tp_alloc(type, 0);
    if (self != NULL) {
        self->_Cobject = NULL;
        self->_owner = NULL;
    }

    return (PyObject *)self;
}       

static int
v8internal___Isolate_init(v8internal___Isolate *self, PyObject *args, PyObject *kwds)
{
    int status = -1;
    if(!self) return status;
    self->_owner = (PyObject*)self;
    self->_Cobject = new v8internal___Isolate();
    status = self->get_Cobject(self)?0:-1; 
    if (status != 0){
       self->_Cobject = NULL;
       status = 0;
    }
    return status;
}



static void
v8internal___Object_dealloc(v8internal___Object* self)
{
    if(!self) return;
    if (!self->_is_c_reference){
        delete self->_Cobject;
    }
    self->_Cobject = NULL;
    self->_owner = NULL;
    self->_is_c_reference = false;
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject *
v8internal___Object_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
    v8internal___Object *self;

    self = (v8internal___Object *)type->tp_alloc(type, 0);
    if (self != NULL) {
        self->_Cobject = NULL;
        self->_owner = NULL;
    }

    return (PyObject *)self;
}       

static int
v8internal___Object_init(v8internal___Object *self, PyObject *args, PyObject *kwds)
{
    int status = -1;
    if(!self) return status;
    self->_owner = (PyObject*)self;
    self->_Cobject = new v8internal___Object();
    status = self->get_Cobject(self)?0:-1; 
    if (status != 0){
       self->_Cobject = NULL;
       status = 0;
    }
    return status;
}



static void
v8internal___StreamedSource_dealloc(v8internal___StreamedSource* self)
{
    if(!self) return;
    if (!self->_is_c_reference){
        delete self->_Cobject;
    }
    self->_Cobject = NULL;
    self->_owner = NULL;
    self->_is_c_reference = false;
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject *
v8internal___StreamedSource_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
    v8internal___StreamedSource *self;

    self = (v8internal___StreamedSource *)type->tp_alloc(type, 0);
    if (self != NULL) {
        self->_Cobject = NULL;
        self->_owner = NULL;
    }

    return (PyObject *)self;
}       

static int
v8internal___StreamedSource_init(v8internal___StreamedSource *self, PyObject *args, PyObject *kwds)
{
    int status = -1;
    if(!self) return status;
    self->_owner = (PyObject*)self;
    self->_Cobject = new v8internal___StreamedSource();
    status = self->get_Cobject(self)?0:-1; 
    if (status != 0){
       self->_Cobject = NULL;
       status = 0;
    }
    return status;
}



static void
v8internal___PropertyCallbackArguments_dealloc(v8internal___PropertyCallbackArguments* self)
{
    if(!self) return;
    if (!self->_is_c_reference){
        delete self->_Cobject;
    }
    self->_Cobject = NULL;
    self->_owner = NULL;
    self->_is_c_reference = false;
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject *
v8internal___PropertyCallbackArguments_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
    v8internal___PropertyCallbackArguments *self;

    self = (v8internal___PropertyCallbackArguments *)type->tp_alloc(type, 0);
    if (self != NULL) {
        self->_Cobject = NULL;
        self->_owner = NULL;
    }

    return (PyObject *)self;
}       

static int
v8internal___PropertyCallbackArguments_init(v8internal___PropertyCallbackArguments *self, PyObject *args, PyObject *kwds)
{
    int status = -1;
    if(!self) return status;
    self->_owner = (PyObject*)self;
    self->_Cobject = new v8internal___PropertyCallbackArguments();
    status = self->get_Cobject(self)?0:-1; 
    if (status != 0){
       self->_Cobject = NULL;
       status = 0;
    }
    return status;
}



static void
v8internal___FunctionCallbackArguments_dealloc(v8internal___FunctionCallbackArguments* self)
{
    if(!self) return;
    if (!self->_is_c_reference){
        delete self->_Cobject;
    }
    self->_Cobject = NULL;
    self->_owner = NULL;
    self->_is_c_reference = false;
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject *
v8internal___FunctionCallbackArguments_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
    v8internal___FunctionCallbackArguments *self;

    self = (v8internal___FunctionCallbackArguments *)type->tp_alloc(type, 0);
    if (self != NULL) {
        self->_Cobject = NULL;
        self->_owner = NULL;
    }

    return (PyObject *)self;
}       

static int
v8internal___FunctionCallbackArguments_init(v8internal___FunctionCallbackArguments *self, PyObject *args, PyObject *kwds)
{
    int status = -1;
    if(!self) return status;
    self->_owner = (PyObject*)self;
    self->_Cobject = new v8internal___FunctionCallbackArguments();
    status = self->get_Cobject(self)?0:-1; 
    if (status != 0){
       self->_Cobject = NULL;
       status = 0;
    }
    return status;
}



static void
v8internal___GlobalHandles_dealloc(v8internal___GlobalHandles* self)
{
    if(!self) return;
    if (!self->_is_c_reference){
        delete self->_Cobject;
    }
    self->_Cobject = NULL;
    self->_owner = NULL;
    self->_is_c_reference = false;
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject *
v8internal___GlobalHandles_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
    v8internal___GlobalHandles *self;

    self = (v8internal___GlobalHandles *)type->tp_alloc(type, 0);
    if (self != NULL) {
        self->_Cobject = NULL;
        self->_owner = NULL;
    }

    return (PyObject *)self;
}       

static int
v8internal___GlobalHandles_init(v8internal___GlobalHandles *self, PyObject *args, PyObject *kwds)
{
    int status = -1;
    if(!self) return status;
    self->_owner = (PyObject*)self;
    self->_Cobject = new v8internal___GlobalHandles();
    status = self->get_Cobject(self)?0:-1; 
    if (status != 0){
       self->_Cobject = NULL;
       status = 0;
    }
    return status;
}



static void
v8internal___SmiTagging_4__dealloc(v8internal___SmiTagging_4_* self)
{
    if(!self) return;
    if (!self->_is_c_reference){
        delete self->_Cobject;
    }
    self->_Cobject = NULL;
    self->_owner = NULL;
    self->_is_c_reference = false;
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject *
v8internal___SmiTagging_4__new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
    v8internal___SmiTagging_4_ *self;

    self = (v8internal___SmiTagging_4_ *)type->tp_alloc(type, 0);
    if (self != NULL) {
        self->_Cobject = NULL;
        self->_owner = NULL;
    }

    return (PyObject *)self;
}       

static int
v8internal___SmiTagging_4__init(v8internal___SmiTagging_4_ *self, PyObject *args, PyObject *kwds)
{
    int status = -1;
    if(!self) return status;
    self->_owner = (PyObject*)self;
    
    {
        PyObject * tmp = NULL;
        (void)tmp;
         
        static char *kwlist[] = {  NULL};
        
            
        if ( 0 != status ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist, );
            if ( 0 == status ){
                
                
                if(status == 0){
                    
                    self->_Cobject = new v8::internal::SmiTagging();
                    
                        
                }
            }
        }
    }
    {
        PyObject * tmp = NULL;
        (void)tmp;
         
        static char *kwlist[] = { "Anon_1", NULL};
        
        PyObject* Anon_1 = NULL;
        
            
        if ( 0 != status ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &Anon_1);
            if ( 0 == status  && Anon_1){
                
                
                if(status == 0){
                    
                   v8::internal::SmiTagging<4> const& Anon_1_C = *((v8internal___SmiTagging_4_*)Anon_1)->_Cobject;
    
                    self->_Cobject = new v8::internal::SmiTagging(Anon_1_C);
                    
                        
                }
            }
        }
    }
    if (status != 0){
       self->_Cobject = NULL;
       status = 0;
    }
    return status;
}


static PyObject*
v8internal___SmiTagging_4___SmiShiftSize(PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                       int result = v8::internal::SmiTagging<4>::SmiShiftSize();
                       result_py = Unknown_type_;
                    
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8internal___SmiTagging_4___SmiValueSize(PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                       int result = v8::internal::SmiTagging<4>::SmiValueSize();
                       result_py = Unknown_type_;
                    
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8internal___SmiTagging_4___SmiToInt(PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* value = NULL;
        
        static char *kwlist[] = { "value", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &value);
            if ( 0 == status  && value){
                    
                    
                if (!checkType(&v8internal___ObjectType, value )){ status = -1;}
    
                        
                   v8::internal::Object const * value_C = *((v8internal___Object*)value)->_Cobject;
    
                        if( 0 == status ){
                       int result = v8::internal::SmiTagging<4>::SmiToInt(value_C);
                       result_py = Unknown_type_;
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8internal___SmiTagging_4___IntToSmi(PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* value = NULL;
        
        static char *kwlist[] = { "value", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &value);
            if ( 0 == status ){
                    
                    
                if(!PyInt_Check(value)){ status = -1;}
            
                        
                    intvalue_C = PyInt_Check(value)? PyInt_AsLong(value):PyLong_AsLong(value);     
                
                        if( 0 == status ){
                       v8::internal::Object * result = v8::internal::SmiTagging<4>::IntToSmi(value_C);
                       result_py = 
                       PyObject_CallObject((PyObject *) & v8internal___ObjectType, NULL);
                       if(result_py){
                           delete ((v8internal___Object*) result_py)->_Cobject ;
                           ((v8internal___Object*) result_py)->_Cobject = result;
                       };
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8internal___SmiTagging_4___IsValidSmi(PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* value = NULL;
        
        static char *kwlist[] = { "value", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &value);
            if ( 0 == status ){
                    
                    
            if (!PyLong_Check(value )){ status = -1; }
                        
                    long intvalue_C = PyInt_Check(value)? PyInt_AsLong(value):PyLong_AsLong(value);     
                
                        if( 0 == status ){
                       bool result = v8::internal::SmiTagging<4>::IsValidSmi(value_C);
                       result_py = Unknown_type_;
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        

static void
v8internal___SmiTagging_8__dealloc(v8internal___SmiTagging_8_* self)
{
    if(!self) return;
    if (!self->_is_c_reference){
        delete self->_Cobject;
    }
    self->_Cobject = NULL;
    self->_owner = NULL;
    self->_is_c_reference = false;
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject *
v8internal___SmiTagging_8__new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
    v8internal___SmiTagging_8_ *self;

    self = (v8internal___SmiTagging_8_ *)type->tp_alloc(type, 0);
    if (self != NULL) {
        self->_Cobject = NULL;
        self->_owner = NULL;
    }

    return (PyObject *)self;
}       

static int
v8internal___SmiTagging_8__init(v8internal___SmiTagging_8_ *self, PyObject *args, PyObject *kwds)
{
    int status = -1;
    if(!self) return status;
    self->_owner = (PyObject*)self;
    
    {
        PyObject * tmp = NULL;
        (void)tmp;
         
        static char *kwlist[] = {  NULL};
        
            
        if ( 0 != status ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist, );
            if ( 0 == status ){
                
                
                if(status == 0){
                    
                    self->_Cobject = new v8::internal::SmiTagging();
                    
                        
                }
            }
        }
    }
    {
        PyObject * tmp = NULL;
        (void)tmp;
         
        static char *kwlist[] = { "Anon_1", NULL};
        
        PyObject* Anon_1 = NULL;
        
            
        if ( 0 != status ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &Anon_1);
            if ( 0 == status  && Anon_1){
                
                
                if(status == 0){
                    
                   v8::internal::SmiTagging<8> const& Anon_1_C = *((v8internal___SmiTagging_8_*)Anon_1)->_Cobject;
    
                    self->_Cobject = new v8::internal::SmiTagging(Anon_1_C);
                    
                        
                }
            }
        }
    }
    if (status != 0){
       self->_Cobject = NULL;
       status = 0;
    }
    return status;
}


static PyObject*
v8internal___SmiTagging_8___SmiShiftSize(PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                       int result = v8::internal::SmiTagging<8>::SmiShiftSize();
                       result_py = Unknown_type_;
                    
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8internal___SmiTagging_8___SmiValueSize(PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
        
        static char *kwlist[] = {  NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist);
            if ( 0 == status ){
                    
                    
                        
                        
                       int result = v8::internal::SmiTagging<8>::SmiValueSize();
                       result_py = Unknown_type_;
                    
                     
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8internal___SmiTagging_8___SmiToInt(PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* value = NULL;
        
        static char *kwlist[] = { "value", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &value);
            if ( 0 == status  && value){
                    
                    
                if (!checkType(&v8internal___ObjectType, value )){ status = -1;}
    
                        
                   v8::internal::Object const * value_C = *((v8internal___Object*)value)->_Cobject;
    
                        if( 0 == status ){
                       int result = v8::internal::SmiTagging<8>::SmiToInt(value_C);
                       result_py = Unknown_type_;
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8internal___SmiTagging_8___IntToSmi(PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* value = NULL;
        
        static char *kwlist[] = { "value", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &value);
            if ( 0 == status ){
                    
                    
                if(!PyInt_Check(value)){ status = -1;}
            
                        
                    intvalue_C = PyInt_Check(value)? PyInt_AsLong(value):PyLong_AsLong(value);     
                
                        if( 0 == status ){
                       v8::internal::Object * result = v8::internal::SmiTagging<8>::IntToSmi(value_C);
                       result_py = 
                       PyObject_CallObject((PyObject *) & v8internal___ObjectType, NULL);
                       if(result_py){
                           delete ((v8internal___Object*) result_py)->_Cobject ;
                           ((v8internal___Object*) result_py)->_Cobject = result;
                       };
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8internal___SmiTagging_8___IsValidSmi(PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* value = NULL;
        
        static char *kwlist[] = { "value", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &value);
            if ( 0 == status ){
                    
                    
            if (!PyLong_Check(value )){ status = -1; }
                        
                    long intvalue_C = PyInt_Check(value)? PyInt_AsLong(value):PyLong_AsLong(value);     
                
                        if( 0 == status ){
                       bool result = v8::internal::SmiTagging<8>::IsValidSmi(value_C);
                       result_py = Unknown_type_;
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        

static void
v8internal___Internals_dealloc(v8internal___Internals* self)
{
    if(!self) return;
    if (!self->_is_c_reference){
        delete self->_Cobject;
    }
    self->_Cobject = NULL;
    self->_owner = NULL;
    self->_is_c_reference = false;
    self->ob_type->tp_free((PyObject*)self);
}

static PyObject *
v8internal___Internals_new(PyTypeObject *type, PyObject *args, PyObject *kwds)
{
    v8internal___Internals *self;

    self = (v8internal___Internals *)type->tp_alloc(type, 0);
    if (self != NULL) {
        self->_Cobject = NULL;
        self->_owner = NULL;
    }

    return (PyObject *)self;
}       

static int
v8internal___Internals_init(v8internal___Internals *self, PyObject *args, PyObject *kwds)
{
    int status = -1;
    if(!self) return status;
    self->_owner = (PyObject*)self;
    
    {
        PyObject * tmp = NULL;
        (void)tmp;
         
        static char *kwlist[] = {  NULL};
        
            
        if ( 0 != status ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "", kwlist, );
            if ( 0 == status ){
                
                
                if(status == 0){
                    
                    self->_Cobject = new v8::internal::Internals();
                    
                        
                }
            }
        }
    }
    {
        PyObject * tmp = NULL;
        (void)tmp;
         
        static char *kwlist[] = { "Anon_1", NULL};
        
        PyObject* Anon_1 = NULL;
        
            
        if ( 0 != status ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &Anon_1);
            if ( 0 == status  && Anon_1){
                
                
                if(status == 0){
                    
                   v8::internal::Internals const& Anon_1_C = *((v8internal___Internals*)Anon_1)->_Cobject;
    
                    self->_Cobject = new v8::internal::Internals(Anon_1_C);
                    
                        
                }
            }
        }
    }
    if (status != 0){
       self->_Cobject = NULL;
       status = 0;
    }
    return status;
}


static PyObject*
v8internal___Internals__CheckInitializedImpl(PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* isolate = NULL;
        
        static char *kwlist[] = { "isolate", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &isolate);
            if ( 0 == status  && isolate){
                    
                    
                if (!checkType(&v8___IsolateType, isolate )){ status = -1;}
    
                        
                   v8::Isolate * isolate_C = ((v8___Isolate*)isolate)->_Cobject;
    
                        if( 0 == status ){
                        v8::internal::Internals::CheckInitializedImpl(isolate_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8internal___Internals__CheckInitialized(PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* isolate = NULL;
        
        static char *kwlist[] = { "isolate", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &isolate);
            if ( 0 == status  && isolate){
                    
                    
                if (!checkType(&v8___IsolateType, isolate )){ status = -1;}
    
                        
                   v8::Isolate * isolate_C = ((v8___Isolate*)isolate)->_Cobject;
    
                        if( 0 == status ){
                        v8::internal::Internals::CheckInitialized(isolate_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8internal___Internals__HasHeapObjectTag(PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* value = NULL;
        
        static char *kwlist[] = { "value", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &value);
            if ( 0 == status  && value){
                    
                    
                if (!checkType(&v8internal___ObjectType, value )){ status = -1;}
    
                        
                   v8::internal::Object const * value_C = *((v8internal___Object*)value)->_Cobject;
    
                        if( 0 == status ){
                       bool result = v8::internal::Internals::HasHeapObjectTag(value_C);
                       result_py = Unknown_type_;
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8internal___Internals__SmiValue(PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* value = NULL;
        
        static char *kwlist[] = { "value", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &value);
            if ( 0 == status  && value){
                    
                    
                if (!checkType(&v8internal___ObjectType, value )){ status = -1;}
    
                        
                   v8::internal::Object const * value_C = *((v8internal___Object*)value)->_Cobject;
    
                        if( 0 == status ){
                       int result = v8::internal::Internals::SmiValue(value_C);
                       result_py = Unknown_type_;
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8internal___Internals__IntToSmi(PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* value = NULL;
        
        static char *kwlist[] = { "value", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &value);
            if ( 0 == status ){
                    
                    
                if(!PyInt_Check(value)){ status = -1;}
            
                        
                    intvalue_C = PyInt_Check(value)? PyInt_AsLong(value):PyLong_AsLong(value);     
                
                        if( 0 == status ){
                       v8::internal::Object * result = v8::internal::Internals::IntToSmi(value_C);
                       result_py = 
                       PyObject_CallObject((PyObject *) & v8internal___ObjectType, NULL);
                       if(result_py){
                           delete ((v8internal___Object*) result_py)->_Cobject ;
                           ((v8internal___Object*) result_py)->_Cobject = result;
                       };
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8internal___Internals__IsValidSmi(PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* value = NULL;
        
        static char *kwlist[] = { "value", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &value);
            if ( 0 == status ){
                    
                    
            if (!PyLong_Check(value )){ status = -1; }
                        
                    long intvalue_C = PyInt_Check(value)? PyInt_AsLong(value):PyLong_AsLong(value);     
                
                        if( 0 == status ){
                       bool result = v8::internal::Internals::IsValidSmi(value_C);
                       result_py = Unknown_type_;
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8internal___Internals__GetInstanceType(PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* obj = NULL;
        
        static char *kwlist[] = { "obj", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &obj);
            if ( 0 == status  && obj){
                    
                    
                if (!checkType(&v8internal___ObjectType, obj )){ status = -1;}
    
                        
                   v8::internal::Object const * obj_C = *((v8internal___Object*)obj)->_Cobject;
    
                        if( 0 == status ){
                       int result = v8::internal::Internals::GetInstanceType(obj_C);
                       result_py = Unknown_type_;
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8internal___Internals__GetOddballKind(PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* obj = NULL;
        
        static char *kwlist[] = { "obj", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &obj);
            if ( 0 == status  && obj){
                    
                    
                if (!checkType(&v8internal___ObjectType, obj )){ status = -1;}
    
                        
                   v8::internal::Object const * obj_C = *((v8internal___Object*)obj)->_Cobject;
    
                        if( 0 == status ){
                       int result = v8::internal::Internals::GetOddballKind(obj_C);
                       result_py = Unknown_type_;
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8internal___Internals__IsExternalTwoByteString(PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* instance_type = NULL;
        
        static char *kwlist[] = { "instance_type", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &instance_type);
            if ( 0 == status ){
                    
                    
                if(!PyInt_Check(instance_type)){ status = -1;}
            
                        
                    intinstance_type_C = PyInt_Check(instance_type)? PyInt_AsLong(instance_type):PyLong_AsLong(instance_type);     
                
                        if( 0 == status ){
                       bool result = v8::internal::Internals::IsExternalTwoByteString(instance_type_C);
                       result_py = Unknown_type_;
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8internal___Internals__GetNodeFlag(PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* obj = NULL;
            PyObject* shift = NULL;
        
        static char *kwlist[] = { "obj""shift", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OO", kwlist, &obj,&shift);
            if ( 0 == status  && obj){
                    
                    
                if (!checkType(&v8internal___ObjectType, obj )){ status = -1;}
    
                if(!PyInt_Check(shift)){ status = -1;}
            
                        
                   v8::internal::Object * * obj_C = ((v8internal___Object*)obj)->_Cobject;
    
                    intshift_C = PyInt_Check(shift)? PyInt_AsLong(shift):PyLong_AsLong(shift);     
                
                        if( 0 == status ){
                       unsigned char result = v8::internal::Internals::GetNodeFlag(obj_C, shift_C);
                       result_py = ;
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8internal___Internals__UpdateNodeFlag(PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* obj = NULL;
            PyObject* value = NULL;
            PyObject* shift = NULL;
        
        static char *kwlist[] = { "obj""value""shift", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OOO", kwlist, &obj,&value,&shift);
            if ( 0 == status  && obj){
                    
                    
                if (!checkType(&v8internal___ObjectType, obj )){ status = -1;}
    
                if(!PyBool_Check(value)){ status = -1;}
            
                if(!PyInt_Check(shift)){ status = -1;}
            
                        
                   v8::internal::Object * * obj_C = ((v8internal___Object*)obj)->_Cobject;
    
                    
                bool  value_C = (PyInt_Check(value)? PyInt_AsLong(value):PyLongAsLong(value))!=0     
                
                    intshift_C = PyInt_Check(shift)? PyInt_AsLong(shift):PyLong_AsLong(shift);     
                
                        if( 0 == status ){
                        v8::internal::Internals::UpdateNodeFlag(obj_C, value_C, shift_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8internal___Internals__GetNodeState(PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* obj = NULL;
        
        static char *kwlist[] = { "obj", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "O", kwlist, &obj);
            if ( 0 == status  && obj){
                    
                    
                if (!checkType(&v8internal___ObjectType, obj )){ status = -1;}
    
                        
                   v8::internal::Object * * obj_C = ((v8internal___Object*)obj)->_Cobject;
    
                        if( 0 == status ){
                       unsigned char result = v8::internal::Internals::GetNodeState(obj_C);
                       result_py = ;
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8internal___Internals__UpdateNodeState(PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* obj = NULL;
            PyObject* value = NULL;
        
        static char *kwlist[] = { "obj""value", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OO", kwlist, &obj,&value);
            if ( 0 == status  && obj){
                    
                    
                if (!checkType(&v8internal___ObjectType, obj )){ status = -1;}
    
                if(!PyInt_Check(value)){ status = -1;}
            
                        
                   v8::internal::Object * * obj_C = ((v8internal___Object*)obj)->_Cobject;
    
                    unsigned charvalue_C = PyInt_Check(value)? PyInt_AsLong(value):PyLong_AsLong(value);     
                
                        if( 0 == status ){
                        v8::internal::Internals::UpdateNodeState(obj_C, value_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8internal___Internals__SetEmbedderData(PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* isolate = NULL;
            PyObject* slot = NULL;
            PyObject* data = NULL;
        
        static char *kwlist[] = { "isolate""slot""data", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OOO", kwlist, &isolate,&slot,&data);
            if ( 0 == status  && isolate && data){
                    
                    
                if (!checkType(&v8___IsolateType, isolate )){ status = -1;}
    
                if(!PyInt_Check(slot)){ status = -1;}
            
                        
                   v8::Isolate * isolate_C = ((v8___Isolate*)isolate)->_Cobject;
    
                    unsigned intslot_C = PyInt_Check(slot)? PyInt_AsLong(slot):PyLong_AsLong(slot);     
                
                         
                
                        if( 0 == status ){
                        v8::internal::Internals::SetEmbedderData(isolate_C, slot_C, data_C);
                        result_py = Py_None;
                        
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8internal___Internals__GetEmbedderData(PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* isolate = NULL;
            PyObject* slot = NULL;
        
        static char *kwlist[] = { "isolate""slot", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OO", kwlist, &isolate,&slot);
            if ( 0 == status  && isolate){
                    
                    
                if (!checkType(&v8___IsolateType, isolate )){ status = -1;}
    
                if(!PyInt_Check(slot)){ status = -1;}
            
                        
                   v8::Isolate const * isolate_C = *((v8___Isolate*)isolate)->_Cobject;
    
                    unsigned intslot_C = PyInt_Check(slot)? PyInt_AsLong(slot):PyLong_AsLong(slot);     
                
                        if( 0 == status ){
                       void * result = v8::internal::Internals::GetEmbedderData(isolate_C, slot_C);
                       result_py = Unknown_type_;
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8internal___Internals__GetRoot(PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* isolate = NULL;
            PyObject* index = NULL;
        
        static char *kwlist[] = { "isolate""index", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OO", kwlist, &isolate,&index);
            if ( 0 == status  && isolate){
                    
                    
                if (!checkType(&v8___IsolateType, isolate )){ status = -1;}
    
                if(!PyInt_Check(index)){ status = -1;}
            
                        
                   v8::Isolate * isolate_C = ((v8___Isolate*)isolate)->_Cobject;
    
                    intindex_C = PyInt_Check(index)? PyInt_AsLong(index):PyLong_AsLong(index);     
                
                        if( 0 == status ){
                       v8::internal::Object * * result = v8::internal::Internals::GetRoot(isolate_C, index_C);
                       result_py = 
                       PyObject_CallObject((PyObject *) & Type, NULL);
                       if(result_py){
                           delete ((*) result_py)->_Cobject ;
                           ((*) result_py)->_Cobject = result;
                       };
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8internal___Internals__ReadField(PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* ptr = NULL;
            PyObject* offset = NULL;
        
        static char *kwlist[] = { "ptr""offset", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OO", kwlist, &ptr,&offset);
            if ( 0 == status  && ptr){
                    
                    
                if (!checkType(&v8internal___ObjectType, ptr )){ status = -1;}
    
                if(!PyInt_Check(offset)){ status = -1;}
            
                        
                   v8::internal::Object const * ptr_C = *((v8internal___Object*)ptr)->_Cobject;
    
                    intoffset_C = PyInt_Check(offset)? PyInt_AsLong(offset):PyLong_AsLong(offset);     
                
                        if( 0 == status ){
                       v8::internal::Object * result = v8::internal::Internals::ReadField(ptr_C, offset_C);
                       result_py = 
                       PyObject_CallObject((PyObject *) & v8internal___ObjectType, NULL);
                       if(result_py){
                           delete ((v8internal___Object*) result_py)->_Cobject ;
                           ((v8internal___Object*) result_py)->_Cobject = result;
                       };
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    {
        
            PyObject* ptr = NULL;
            PyObject* offset = NULL;
        
        static char *kwlist[] = { "ptr""offset", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OO", kwlist, &ptr,&offset);
            if ( 0 == status  && ptr){
                    
                    
                if (!checkType(&v8internal___ObjectType, ptr )){ status = -1;}
    
                if(!PyInt_Check(offset)){ status = -1;}
            
                        
                   v8::internal::Object const * ptr_C = *((v8internal___Object*)ptr)->_Cobject;
    
                    intoffset_C = PyInt_Check(offset)? PyInt_AsLong(offset):PyLong_AsLong(offset);     
                
                        if( 0 == status ){
                       v8::internal::Object * result = v8::internal::Internals::ReadField(ptr_C, offset_C);
                       result_py = 
                       PyObject_CallObject((PyObject *) & v8internal___ObjectType, NULL);
                       if(result_py){
                           delete ((v8internal___Object*) result_py)->_Cobject ;
                           ((v8internal___Object*) result_py)->_Cobject = result;
                       };
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    {
        
            PyObject* ptr = NULL;
            PyObject* offset = NULL;
        
        static char *kwlist[] = { "ptr""offset", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OO", kwlist, &ptr,&offset);
            if ( 0 == status  && ptr){
                    
                    
                if (!checkType(&v8internal___ObjectType, ptr )){ status = -1;}
    
                if(!PyInt_Check(offset)){ status = -1;}
            
                        
                   v8::internal::Object const * ptr_C = *((v8internal___Object*)ptr)->_Cobject;
    
                    intoffset_C = PyInt_Check(offset)? PyInt_AsLong(offset):PyLong_AsLong(offset);     
                
                        if( 0 == status ){
                       v8::internal::Object * result = v8::internal::Internals::ReadField(ptr_C, offset_C);
                       result_py = 
                       PyObject_CallObject((PyObject *) & v8internal___ObjectType, NULL);
                       if(result_py){
                           delete ((v8internal___Object*) result_py)->_Cobject ;
                           ((v8internal___Object*) result_py)->_Cobject = result;
                       };
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        
static PyObject*
v8internal___Internals__ReadEmbedderData(PyObject *args, PyObject *kwds){
    int status = -1;
    PyObject * result_py = NULL;


    {
        
            PyObject* context = NULL;
            PyObject* index = NULL;
        
        static char *kwlist[] = { "context""index", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OO", kwlist, &context,&index);
            if ( 0 == status  && context){
                    
                    
                if (!checkType(&v8___ContextType, context )){ status = -1;}
    
                if(!PyInt_Check(index)){ status = -1;}
            
                        
                   v8::Context const * context_C = *((v8___Context*)context)->_Cobject;
    
                    intindex_C = PyInt_Check(index)? PyInt_AsLong(index):PyLong_AsLong(index);     
                
                        if( 0 == status ){
                       v8::internal::Object * result = v8::internal::Internals::ReadEmbedderData(context_C, index_C);
                       result_py = 
                       PyObject_CallObject((PyObject *) & v8internal___ObjectType, NULL);
                       if(result_py){
                           delete ((v8internal___Object*) result_py)->_Cobject ;
                           ((v8internal___Object*) result_py)->_Cobject = result;
                       };
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    {
        
            PyObject* context = NULL;
            PyObject* index = NULL;
        
        static char *kwlist[] = { "context""index", NULL};
            
        if ( status !=0 ){
            status = PyArg_ParseTupleAndKeywords(args, kwds, "OO", kwlist, &context,&index);
            if ( 0 == status  && context){
                    
                    
                if (!checkType(&v8___ContextType, context )){ status = -1;}
    
                if(!PyInt_Check(index)){ status = -1;}
            
                        
                   v8::Context const * context_C = *((v8___Context*)context)->_Cobject;
    
                    intindex_C = PyInt_Check(index)? PyInt_AsLong(index):PyLong_AsLong(index);     
                
                        if( 0 == status ){
                       v8::internal::Object * result = v8::internal::Internals::ReadEmbedderData(context_C, index_C);
                       result_py = 
                       PyObject_CallObject((PyObject *) & v8internal___ObjectType, NULL);
                       if(result_py){
                           delete ((v8internal___Object*) result_py)->_Cobject ;
                           ((v8internal___Object*) result_py)->_Cobject = result;
                       };
                    
                     } else {
                         throw "Invalid parameter type in method call";
                    }
             }
        }
    }
    

    return result_py;
}        

           
PyMODINIT_FUNC
initv8internal___(void) 
{
    int status = 0;
    PyObject* m;
    m = Py_InitModule3("v8.internal", v8::internal_methods,
             "Module wrapping C/C++ library v8::internal");
     
    
    v8internal___ArgumentsType.tp_new = PyType_GenericNew;
    if (PyType_Ready(&v8internal___Arguments) == 0){             
        Py_INCREF(&v8internal___ArgumentsType);
        PyModule_AddObject(m, "Arguments", (PyObject *)&v8internal___ArgumentsType);
    } else {
       status = =1;
    }

    v8internal___HeapType.tp_new = PyType_GenericNew;
    if (PyType_Ready(&v8internal___Heap) == 0){             
        Py_INCREF(&v8internal___HeapType);
        PyModule_AddObject(m, "Heap", (PyObject *)&v8internal___HeapType);
    } else {
       status = =1;
    }

    v8internal___HeapObjectType.tp_new = PyType_GenericNew;
    if (PyType_Ready(&v8internal___HeapObject) == 0){             
        Py_INCREF(&v8internal___HeapObjectType);
        PyModule_AddObject(m, "HeapObject", (PyObject *)&v8internal___HeapObjectType);
    } else {
       status = =1;
    }

    v8internal___IsolateType.tp_new = PyType_GenericNew;
    if (PyType_Ready(&v8internal___Isolate) == 0){             
        Py_INCREF(&v8internal___IsolateType);
        PyModule_AddObject(m, "Isolate", (PyObject *)&v8internal___IsolateType);
    } else {
       status = =1;
    }

    v8internal___ObjectType.tp_new = PyType_GenericNew;
    if (PyType_Ready(&v8internal___Object) == 0){             
        Py_INCREF(&v8internal___ObjectType);
        PyModule_AddObject(m, "Object", (PyObject *)&v8internal___ObjectType);
    } else {
       status = =1;
    }

    v8internal___StreamedSourceType.tp_new = PyType_GenericNew;
    if (PyType_Ready(&v8internal___StreamedSource) == 0){             
        Py_INCREF(&v8internal___StreamedSourceType);
        PyModule_AddObject(m, "StreamedSource", (PyObject *)&v8internal___StreamedSourceType);
    } else {
       status = =1;
    }

    v8internal___PropertyCallbackArgumentsType.tp_new = PyType_GenericNew;
    if (PyType_Ready(&v8internal___PropertyCallbackArguments) == 0){             
        Py_INCREF(&v8internal___PropertyCallbackArgumentsType);
        PyModule_AddObject(m, "PropertyCallbackArguments", (PyObject *)&v8internal___PropertyCallbackArgumentsType);
    } else {
       status = =1;
    }

    v8internal___FunctionCallbackArgumentsType.tp_new = PyType_GenericNew;
    if (PyType_Ready(&v8internal___FunctionCallbackArguments) == 0){             
        Py_INCREF(&v8internal___FunctionCallbackArgumentsType);
        PyModule_AddObject(m, "FunctionCallbackArguments", (PyObject *)&v8internal___FunctionCallbackArgumentsType);
    } else {
       status = =1;
    }

    v8internal___GlobalHandlesType.tp_new = PyType_GenericNew;
    if (PyType_Ready(&v8internal___GlobalHandles) == 0){             
        Py_INCREF(&v8internal___GlobalHandlesType);
        PyModule_AddObject(m, "GlobalHandles", (PyObject *)&v8internal___GlobalHandlesType);
    } else {
       status = =1;
    }

    v8internal___SmiTagging_4_Type.tp_new = PyType_GenericNew;
    if (PyType_Ready(&v8internal___SmiTagging_4_) == 0){             
        Py_INCREF(&v8internal___SmiTagging_4_Type);
        PyModule_AddObject(m, "SmiTagging_4_", (PyObject *)&v8internal___SmiTagging_4_Type);
    } else {
       status = =1;
    }

    v8internal___SmiTagging_8_Type.tp_new = PyType_GenericNew;
    if (PyType_Ready(&v8internal___SmiTagging_8_) == 0){             
        Py_INCREF(&v8internal___SmiTagging_8_Type);
        PyModule_AddObject(m, "SmiTagging_8_", (PyObject *)&v8internal___SmiTagging_8_Type);
    } else {
       status = =1;
    }

    v8internal___InternalsType.tp_new = PyType_GenericNew;
    if (PyType_Ready(&v8internal___Internals) == 0){             
        Py_INCREF(&v8internal___InternalsType);
        PyModule_AddObject(m, "Internals", (PyObject *)&v8internal___InternalsType);
    } else {
       status = =1;
    }

    //how to handle status???
}

    
  
    
  
v8::internal::StreamedSource* v8::internal::StreamedSource::
get_Cobject(struct v8internal___v8::internal::StreamedSource* newowner){
   if( _is_c_reference && _owner != (PyObject*)newowner ){
       _Cobject = new v8::internal::StreamedSource(*_Cobject);
       _is_c_reference = false;
   }
   return _Cobject;
}
                 
v8::internal::SmiTagging<4>* v8::internal::SmiTagging<4>::
get_Cobject(struct v8internal___v8::internal::SmiTagging<4>* newowner){
   if( _is_c_reference && _owner != (PyObject*)newowner ){
       _Cobject = new v8::internal::SmiTagging<4>(*_Cobject);
       _is_c_reference = false;
   }
   return _Cobject;
}
                 
v8::internal::SmiTagging<8>* v8::internal::SmiTagging<8>::
get_Cobject(struct v8internal___v8::internal::SmiTagging<8>* newowner){
   if( _is_c_reference && _owner != (PyObject*)newowner ){
       _Cobject = new v8::internal::SmiTagging<8>(*_Cobject);
       _is_c_reference = false;
   }
   return _Cobject;
}
                 